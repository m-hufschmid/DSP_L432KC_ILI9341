
VUmeter_FFT_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e46c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00018ba8  0800e600  0800e600  0001e600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080271a8  080271a8  00040210  2**0
                  CONTENTS
  4 .ARM          00000008  080271a8  080271a8  000371a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080271b0  080271b0  00040210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080271b0  080271b0  000371b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080271b4  080271b4  000371b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  080271b8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a7a4  20000210  080273c8  00040210  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000a9b4  080273c8  0004a9b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021577  00000000  00000000  00040240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004af7  00000000  00000000  000617b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  000662b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a0  00000000  00000000  000674e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023730  00000000  00000000  00068680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019146  00000000  00000000  0008bdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8e88  00000000  00000000  000a4ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  0016dd7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059c4  00000000  00000000  0016de44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00004b28  00000000  00000000  00173808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e5e4 	.word	0x0800e5e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0800e5e4 	.word	0x0800e5e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	0000      	movs	r0, r0
	...

08000f50 <displayFFTdata>:
#include "displayFFT.h"
#include "dma.h"
#include "main.h"
#include "colors.h"

void displayFFTdata(fftDisplay_t *fftDisplay, float32_t *fftData) {
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8000f56:	af02      	add	r7, sp, #8
 8000f58:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000f5c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000f60:	6018      	str	r0, [r3, #0]
 8000f62:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000f66:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000f6a:	6019      	str	r1, [r3, #0]
	float32_t magFFT[BUFFER_SIZE >> 1];
	float32_t octValue;
	uint16_t i, iOctave, nBins, iMagFFT;

	arm_cmplx_mag_f32(fftData, magFFT, BUFFER_SIZE >> 1);
 8000f6c:	f107 0108 	add.w	r1, r7, #8
 8000f70:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000f74:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000f78:	2280      	movs	r2, #128	; 0x80
 8000f7a:	6818      	ldr	r0, [r3, #0]
 8000f7c:	f008 fe44 	bl	8009c08 <arm_cmplx_mag_f32>
	switch (fftDisplay->style) {
 8000f80:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000f84:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	791b      	ldrb	r3, [r3, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <displayFFTdata+0x48>
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	f000 80bf 	beq.w	8001114 <displayFFTdata+0x1c4>
			}
		}

		break;
	}
}
 8000f96:	e1e9      	b.n	800136c <displayFFTdata+0x41c>
		for (i = 0; i < N_PLOT; i++) {
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
 8000f9e:	e0b3      	b.n	8001108 <displayFFTdata+0x1b8>
			int16_t y = (int16_t) (8.686 * log(2.0 * magFFT[i]) + 16.9);
 8000fa0:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 8000fa4:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8000fa8:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fac8 	bl	8000548 <__aeabi_f2d>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	f7ff f966 	bl	800028c <__adddf3>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	ec43 2b17 	vmov	d7, r2, r3
 8000fc8:	eeb0 0a47 	vmov.f32	s0, s14
 8000fcc:	eef0 0a67 	vmov.f32	s1, s15
 8000fd0:	f00c f8f2 	bl	800d1b8 <log>
 8000fd4:	ec51 0b10 	vmov	r0, r1, d0
 8000fd8:	a3e7      	add	r3, pc, #924	; (adr r3, 8001378 <displayFFTdata+0x428>)
 8000fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fde:	f7ff fb0b 	bl	80005f8 <__aeabi_dmul>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	a3e5      	add	r3, pc, #916	; (adr r3, 8001380 <displayFFTdata+0x430>)
 8000fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff0:	f7ff f94c 	bl	800028c <__adddf3>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f7ff fdac 	bl	8000b58 <__aeabi_d2iz>
 8001000:	4603      	mov	r3, r0
 8001002:	f8a7 320a 	strh.w	r3, [r7, #522]	; 0x20a
			if (y > 59) {
 8001006:	f9b7 320a 	ldrsh.w	r3, [r7, #522]	; 0x20a
 800100a:	2b3b      	cmp	r3, #59	; 0x3b
 800100c:	dd02      	ble.n	8001014 <displayFFTdata+0xc4>
				y = 59;
 800100e:	233b      	movs	r3, #59	; 0x3b
 8001010:	f8a7 320a 	strh.w	r3, [r7, #522]	; 0x20a
			if (y < 0) {
 8001014:	f9b7 320a 	ldrsh.w	r3, [r7, #522]	; 0x20a
 8001018:	2b00      	cmp	r3, #0
 800101a:	da02      	bge.n	8001022 <displayFFTdata+0xd2>
				y = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	f8a7 320a 	strh.w	r3, [r7, #522]	; 0x20a
			if (y > 0) {
 8001022:	f9b7 320a 	ldrsh.w	r3, [r7, #522]	; 0x20a
 8001026:	2b00      	cmp	r3, #0
 8001028:	dd35      	ble.n	8001096 <displayFFTdata+0x146>
				Displ_Line(fftDisplay->x0 + i + 4, fftDisplay->y0 + 59, fftDisplay->x0 + i + 4, fftDisplay->y0 + 60 - y, FFT_COLOR);
 800102a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800102e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	881a      	ldrh	r2, [r3, #0]
 8001036:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 800103a:	4413      	add	r3, r2
 800103c:	b29b      	uxth	r3, r3
 800103e:	3304      	adds	r3, #4
 8001040:	b29b      	uxth	r3, r3
 8001042:	b218      	sxth	r0, r3
 8001044:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001048:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	885b      	ldrh	r3, [r3, #2]
 8001050:	333b      	adds	r3, #59	; 0x3b
 8001052:	b29b      	uxth	r3, r3
 8001054:	b219      	sxth	r1, r3
 8001056:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800105a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	881a      	ldrh	r2, [r3, #0]
 8001062:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 8001066:	4413      	add	r3, r2
 8001068:	b29b      	uxth	r3, r3
 800106a:	3304      	adds	r3, #4
 800106c:	b29b      	uxth	r3, r3
 800106e:	b21c      	sxth	r4, r3
 8001070:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001074:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	885a      	ldrh	r2, [r3, #2]
 800107c:	f8b7 320a 	ldrh.w	r3, [r7, #522]	; 0x20a
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	b29b      	uxth	r3, r3
 8001084:	333c      	adds	r3, #60	; 0x3c
 8001086:	b29b      	uxth	r3, r3
 8001088:	b21b      	sxth	r3, r3
 800108a:	f64f 52e0 	movw	r2, #64992	; 0xfde0
 800108e:	9200      	str	r2, [sp, #0]
 8001090:	4622      	mov	r2, r4
 8001092:	f001 ffd9 	bl	8003048 <Displ_Line>
			Displ_Line(fftDisplay->x0 + i + 4, fftDisplay->y0, fftDisplay->x0 + i + 4, fftDisplay->y0 + 59 - y, FFT_BACKGROUND);
 8001096:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800109a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	881a      	ldrh	r2, [r3, #0]
 80010a2:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 80010a6:	4413      	add	r3, r2
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	3304      	adds	r3, #4
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	b218      	sxth	r0, r3
 80010b0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80010b4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	885b      	ldrh	r3, [r3, #2]
 80010bc:	b219      	sxth	r1, r3
 80010be:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80010c2:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	881a      	ldrh	r2, [r3, #0]
 80010ca:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 80010ce:	4413      	add	r3, r2
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	3304      	adds	r3, #4
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	b21c      	sxth	r4, r3
 80010d8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80010dc:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	885a      	ldrh	r2, [r3, #2]
 80010e4:	f8b7 320a 	ldrh.w	r3, [r7, #522]	; 0x20a
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	333b      	adds	r3, #59	; 0x3b
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	f245 3251 	movw	r2, #21329	; 0x5351
 80010f6:	9200      	str	r2, [sp, #0]
 80010f8:	4622      	mov	r2, r4
 80010fa:	f001 ffa5 	bl	8003048 <Displ_Line>
		for (i = 0; i < N_PLOT; i++) {
 80010fe:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 8001102:	3301      	adds	r3, #1
 8001104:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
 8001108:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 800110c:	2b7f      	cmp	r3, #127	; 0x7f
 800110e:	f67f af47 	bls.w	8000fa0 <displayFFTdata+0x50>
		break;
 8001112:	e12b      	b.n	800136c <displayFFTdata+0x41c>
		iOctave = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	f8a7 3210 	strh.w	r3, [r7, #528]	; 0x210
		iMagFFT = 1;
 800111a:	2301      	movs	r3, #1
 800111c:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
		nBins = 1;
 8001120:	2301      	movs	r3, #1
 8001122:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		while (iOctave < NOCTAVES) {
 8001126:	e083      	b.n	8001230 <displayFFTdata+0x2e0>
			octValue = 0;
 8001128:	f04f 0300 	mov.w	r3, #0
 800112c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
			for (i = 0; i < nBins; i++) {
 8001130:	2300      	movs	r3, #0
 8001132:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
 8001136:	e025      	b.n	8001184 <displayFFTdata+0x234>
				octValue += magFFT[iMagFFT] * magFFT[iMagFFT];
 8001138:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 800113c:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8001140:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	ed93 7a00 	vldr	s14, [r3]
 800114c:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8001150:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8001154:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	edd3 7a00 	vldr	s15, [r3]
 8001160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001164:	ed97 7a85 	vldr	s14, [r7, #532]	; 0x214
 8001168:	ee77 7a27 	vadd.f32	s15, s14, s15
 800116c:	edc7 7a85 	vstr	s15, [r7, #532]	; 0x214
				iMagFFT++;
 8001170:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8001174:	3301      	adds	r3, #1
 8001176:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
			for (i = 0; i < nBins; i++) {
 800117a:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 800117e:	3301      	adds	r3, #1
 8001180:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
 8001184:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 8001188:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800118c:	429a      	cmp	r2, r3
 800118e:	d3d3      	bcc.n	8001138 <displayFFTdata+0x1e8>
			if (octValue >= fftDisplay->octValues[iOctave]) {
 8001190:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001194:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	edd3 7a00 	vldr	s15, [r3]
 80011a8:	ed97 7a85 	vldr	s14, [r7, #532]	; 0x214
 80011ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b4:	db0d      	blt.n	80011d2 <displayFFTdata+0x282>
				fftDisplay->octValues[iOctave] = octValue;
 80011b6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80011ba:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4413      	add	r3, r2
 80011ca:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	e024      	b.n	800121c <displayFFTdata+0x2cc>
				fftDisplay->octValues[iOctave] = 0.8 * fftDisplay->octValues[iOctave];
 80011d2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80011d6:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f9ad 	bl	8000548 <__aeabi_f2d>
 80011ee:	a366      	add	r3, pc, #408	; (adr r3, 8001388 <displayFFTdata+0x438>)
 80011f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f4:	f7ff fa00 	bl	80005f8 <__aeabi_dmul>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4610      	mov	r0, r2
 80011fe:	4619      	mov	r1, r3
 8001200:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001204:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	18d4      	adds	r4, r2, r3
 8001214:	f7ff fcc8 	bl	8000ba8 <__aeabi_d2f>
 8001218:	4603      	mov	r3, r0
 800121a:	6023      	str	r3, [r4, #0]
			iOctave++;
 800121c:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8001220:	3301      	adds	r3, #1
 8001222:	f8a7 3210 	strh.w	r3, [r7, #528]	; 0x210
			nBins = nBins << 1;
 8001226:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		while (iOctave < NOCTAVES) {
 8001230:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8001234:	2b06      	cmp	r3, #6
 8001236:	f67f af77 	bls.w	8001128 <displayFFTdata+0x1d8>
		for (i = 0; i < NOCTAVES; i++) {
 800123a:	2300      	movs	r3, #0
 800123c:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
 8001240:	e08e      	b.n	8001360 <displayFFTdata+0x410>
			int16_t y = (int16_t) (-4.343 * log(fftDisplay->octValues[i]) + 42.1);
 8001242:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001246:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff f975 	bl	8000548 <__aeabi_f2d>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	ec43 2b10 	vmov	d0, r2, r3
 8001266:	f00b ffa7 	bl	800d1b8 <log>
 800126a:	ec51 0b10 	vmov	r0, r1, d0
 800126e:	a348      	add	r3, pc, #288	; (adr r3, 8001390 <displayFFTdata+0x440>)
 8001270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001274:	f7ff f9c0 	bl	80005f8 <__aeabi_dmul>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4610      	mov	r0, r2
 800127e:	4619      	mov	r1, r3
 8001280:	a345      	add	r3, pc, #276	; (adr r3, 8001398 <displayFFTdata+0x448>)
 8001282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001286:	f7ff f801 	bl	800028c <__adddf3>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	f7ff fc61 	bl	8000b58 <__aeabi_d2iz>
 8001296:	4603      	mov	r3, r0
 8001298:	f8a7 3208 	strh.w	r3, [r7, #520]	; 0x208
			if (y > 59) {
 800129c:	f9b7 3208 	ldrsh.w	r3, [r7, #520]	; 0x208
 80012a0:	2b3b      	cmp	r3, #59	; 0x3b
 80012a2:	dd02      	ble.n	80012aa <displayFFTdata+0x35a>
				y = 59;
 80012a4:	233b      	movs	r3, #59	; 0x3b
 80012a6:	f8a7 3208 	strh.w	r3, [r7, #520]	; 0x208
			if (y < 0) {
 80012aa:	f9b7 3208 	ldrsh.w	r3, [r7, #520]	; 0x208
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	da02      	bge.n	80012b8 <displayFFTdata+0x368>
				y = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f8a7 3208 	strh.w	r3, [r7, #520]	; 0x208
			Displ_FillArea(fftDisplay->x0 + 19 * i + 3, fftDisplay->y0 + y + 1, 15, 59 - y, FFT_COLOR);
 80012b8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80012bc:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	881a      	ldrh	r2, [r3, #0]
 80012c4:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 80012c8:	4619      	mov	r1, r3
 80012ca:	00c9      	lsls	r1, r1, #3
 80012cc:	4419      	add	r1, r3
 80012ce:	0049      	lsls	r1, r1, #1
 80012d0:	440b      	add	r3, r1
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	4413      	add	r3, r2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	3303      	adds	r3, #3
 80012da:	b298      	uxth	r0, r3
 80012dc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80012e0:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	885a      	ldrh	r2, [r3, #2]
 80012e8:	f8b7 3208 	ldrh.w	r3, [r7, #520]	; 0x208
 80012ec:	4413      	add	r3, r2
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	3301      	adds	r3, #1
 80012f2:	b299      	uxth	r1, r3
 80012f4:	f8b7 3208 	ldrh.w	r3, [r7, #520]	; 0x208
 80012f8:	f1c3 033b 	rsb	r3, r3, #59	; 0x3b
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	f64f 52e0 	movw	r2, #64992	; 0xfde0
 8001302:	9200      	str	r2, [sp, #0]
 8001304:	220f      	movs	r2, #15
 8001306:	f001 fcc9 	bl	8002c9c <Displ_FillArea>
			if (y > 0) {
 800130a:	f9b7 3208 	ldrsh.w	r3, [r7, #520]	; 0x208
 800130e:	2b00      	cmp	r3, #0
 8001310:	dd21      	ble.n	8001356 <displayFFTdata+0x406>
				Displ_FillArea(fftDisplay->x0 + 19 * i + 3, fftDisplay->y0 + 1, 15, y, FFT_BACKGROUND);
 8001312:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001316:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	881a      	ldrh	r2, [r3, #0]
 800131e:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 8001322:	4619      	mov	r1, r3
 8001324:	00c9      	lsls	r1, r1, #3
 8001326:	4419      	add	r1, r3
 8001328:	0049      	lsls	r1, r1, #1
 800132a:	440b      	add	r3, r1
 800132c:	b29b      	uxth	r3, r3
 800132e:	4413      	add	r3, r2
 8001330:	b29b      	uxth	r3, r3
 8001332:	3303      	adds	r3, #3
 8001334:	b298      	uxth	r0, r3
 8001336:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800133a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	885b      	ldrh	r3, [r3, #2]
 8001342:	3301      	adds	r3, #1
 8001344:	b299      	uxth	r1, r3
 8001346:	f8b7 3208 	ldrh.w	r3, [r7, #520]	; 0x208
 800134a:	f245 3251 	movw	r2, #21329	; 0x5351
 800134e:	9200      	str	r2, [sp, #0]
 8001350:	220f      	movs	r2, #15
 8001352:	f001 fca3 	bl	8002c9c <Displ_FillArea>
		for (i = 0; i < NOCTAVES; i++) {
 8001356:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 800135a:	3301      	adds	r3, #1
 800135c:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
 8001360:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 8001364:	2b06      	cmp	r3, #6
 8001366:	f67f af6c 	bls.w	8001242 <displayFFTdata+0x2f2>
		break;
 800136a:	bf00      	nop
}
 800136c:	bf00      	nop
 800136e:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8001372:	46bd      	mov	sp, r7
 8001374:	bd90      	pop	{r4, r7, pc}
 8001376:	bf00      	nop
 8001378:	645a1cac 	.word	0x645a1cac
 800137c:	40215f3b 	.word	0x40215f3b
 8001380:	66666666 	.word	0x66666666
 8001384:	4030e666 	.word	0x4030e666
 8001388:	9999999a 	.word	0x9999999a
 800138c:	3fe99999 	.word	0x3fe99999
 8001390:	645a1cac 	.word	0x645a1cac
 8001394:	c0115f3b 	.word	0xc0115f3b
 8001398:	cccccccd 	.word	0xcccccccd
 800139c:	40450ccc 	.word	0x40450ccc

080013a0 <clearFFTdisplay>:

void clearFFTdisplay(fftDisplay_t *fftDisplay) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af02      	add	r7, sp, #8
 80013a6:	6078      	str	r0, [r7, #4]
	Displ_FillArea(fftDisplay->x0, fftDisplay->y0, FFT_WIDTH, FFT_HEIGHT, FFT_BACKGROUND);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	8818      	ldrh	r0, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	8859      	ldrh	r1, [r3, #2]
 80013b0:	f245 3351 	movw	r3, #21329	; 0x5351
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	233c      	movs	r3, #60	; 0x3c
 80013b8:	2287      	movs	r2, #135	; 0x87
 80013ba:	f001 fc6f 	bl	8002c9c <Displ_FillArea>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <initFFTdisplay>:

void initFFTdisplay(fftDisplay_t *fftDisplay, uint16_t x0, uint16_t y0, enum displayFFTstyle_t style, float32_t *octValues){
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b084      	sub	sp, #16
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	60f8      	str	r0, [r7, #12]
 80013ce:	4608      	mov	r0, r1
 80013d0:	4611      	mov	r1, r2
 80013d2:	461a      	mov	r2, r3
 80013d4:	4603      	mov	r3, r0
 80013d6:	817b      	strh	r3, [r7, #10]
 80013d8:	460b      	mov	r3, r1
 80013da:	813b      	strh	r3, [r7, #8]
 80013dc:	4613      	mov	r3, r2
 80013de:	71fb      	strb	r3, [r7, #7]
	fftDisplay->x0 = x0;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	897a      	ldrh	r2, [r7, #10]
 80013e4:	801a      	strh	r2, [r3, #0]
	fftDisplay->y0 = y0;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	893a      	ldrh	r2, [r7, #8]
 80013ea:	805a      	strh	r2, [r3, #2]
	fftDisplay->style = style;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	79fa      	ldrb	r2, [r7, #7]
 80013f0:	711a      	strb	r2, [r3, #4]
	fftDisplay->octValues = octValues;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	609a      	str	r2, [r3, #8]
	redrawFFTdisplay(fftDisplay);
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f000 f805 	bl	8001408 <redrawFFTdisplay>
}
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <redrawFFTdisplay>:

void redrawFFTdisplay(fftDisplay_t *fftDisplay) {
 8001408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800140a:	b08d      	sub	sp, #52	; 0x34
 800140c:	af08      	add	r7, sp, #32
 800140e:	6078      	str	r0, [r7, #4]
	Displ_fillRoundRect(fftDisplay->x0 - 5, fftDisplay->y0 - 5, FFT_WIDTH + 10, FFT_HEIGHT + 10, 3, FRAME_COLOR);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	3b05      	subs	r3, #5
 8001416:	b29b      	uxth	r3, r3
 8001418:	b218      	sxth	r0, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	885b      	ldrh	r3, [r3, #2]
 800141e:	3b05      	subs	r3, #5
 8001420:	b29b      	uxth	r3, r3
 8001422:	b219      	sxth	r1, r3
 8001424:	2300      	movs	r3, #0
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	2303      	movs	r3, #3
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2346      	movs	r3, #70	; 0x46
 800142e:	2291      	movs	r2, #145	; 0x91
 8001430:	f002 f83a 	bl	80034a8 <Displ_fillRoundRect>
	clearFFTdisplay(fftDisplay);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ffb3 	bl	80013a0 <clearFFTdisplay>
	switch(fftDisplay->style){
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	791b      	ldrb	r3, [r3, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d040      	beq.n	80014c4 <redrawFFTdisplay+0xbc>
 8001442:	2b01      	cmp	r3, #1
 8001444:	f040 8103 	bne.w	800164e <redrawFFTdisplay+0x246>
	case OCTAVE:
		Displ_FillArea(fftDisplay->x0, fftDisplay->y0+FFT_HEIGHT+7,fftDisplay->x0+FFT_WIDTH,fftDisplay->y0+FFT_HEIGHT+10,BACKGROUND_COLOR);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	8818      	ldrh	r0, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	885b      	ldrh	r3, [r3, #2]
 8001450:	3343      	adds	r3, #67	; 0x43
 8001452:	b299      	uxth	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	3387      	adds	r3, #135	; 0x87
 800145a:	b29a      	uxth	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	885b      	ldrh	r3, [r3, #2]
 8001460:	3346      	adds	r3, #70	; 0x46
 8001462:	b29b      	uxth	r3, r3
 8001464:	f243 14e8 	movw	r4, #12776	; 0x31e8
 8001468:	9400      	str	r4, [sp, #0]
 800146a:	f001 fc17 	bl	8002c9c <Displ_FillArea>
		Displ_CString(fftDisplay->x0 - 12, fftDisplay->y0 + FFT_HEIGHT + 12, fftDisplay->x0 + FFT_WIDTH + 12, Font12.Height + fftDisplay->y0 + FFT_HEIGHT + 12,"octaves", Font12, 1, TEXT_COLOR, BACKGROUND_COLOR);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	3b0c      	subs	r3, #12
 8001474:	b29c      	uxth	r4, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	885b      	ldrh	r3, [r3, #2]
 800147a:	3348      	adds	r3, #72	; 0x48
 800147c:	b29d      	uxth	r5, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	3393      	adds	r3, #147	; 0x93
 8001484:	b29e      	uxth	r6, r3
 8001486:	4b76      	ldr	r3, [pc, #472]	; (8001660 <redrawFFTdisplay+0x258>)
 8001488:	88da      	ldrh	r2, [r3, #6]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	885b      	ldrh	r3, [r3, #2]
 800148e:	4413      	add	r3, r2
 8001490:	b29b      	uxth	r3, r3
 8001492:	3348      	adds	r3, #72	; 0x48
 8001494:	fa1f fc83 	uxth.w	ip, r3
 8001498:	f243 13e8 	movw	r3, #12776	; 0x31e8
 800149c:	9306      	str	r3, [sp, #24]
 800149e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80014a2:	9305      	str	r3, [sp, #20]
 80014a4:	2301      	movs	r3, #1
 80014a6:	9304      	str	r3, [sp, #16]
 80014a8:	4a6d      	ldr	r2, [pc, #436]	; (8001660 <redrawFFTdisplay+0x258>)
 80014aa:	ab01      	add	r3, sp, #4
 80014ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80014ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80014b2:	4b6c      	ldr	r3, [pc, #432]	; (8001664 <redrawFFTdisplay+0x25c>)
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	4663      	mov	r3, ip
 80014b8:	4632      	mov	r2, r6
 80014ba:	4629      	mov	r1, r5
 80014bc:	4620      	mov	r0, r4
 80014be:	f002 f8a7 	bl	8003610 <Displ_CString>
		break;
 80014c2:	e0c4      	b.n	800164e <redrawFFTdisplay+0x246>
	case LINEAR:
		Displ_CString(fftDisplay->x0, fftDisplay->y0 + FFT_HEIGHT + 12, fftDisplay->x0 + FFT_WIDTH, Font12.Height + fftDisplay->y0 + FFT_HEIGHT + 12, "frequency [kHz]",Font12, 1, TEXT_COLOR, BACKGROUND_COLOR);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	881c      	ldrh	r4, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	885b      	ldrh	r3, [r3, #2]
 80014cc:	3348      	adds	r3, #72	; 0x48
 80014ce:	b29d      	uxth	r5, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	3387      	adds	r3, #135	; 0x87
 80014d6:	b29e      	uxth	r6, r3
 80014d8:	4b61      	ldr	r3, [pc, #388]	; (8001660 <redrawFFTdisplay+0x258>)
 80014da:	88da      	ldrh	r2, [r3, #6]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	885b      	ldrh	r3, [r3, #2]
 80014e0:	4413      	add	r3, r2
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	3348      	adds	r3, #72	; 0x48
 80014e6:	fa1f fc83 	uxth.w	ip, r3
 80014ea:	f243 13e8 	movw	r3, #12776	; 0x31e8
 80014ee:	9306      	str	r3, [sp, #24]
 80014f0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80014f4:	9305      	str	r3, [sp, #20]
 80014f6:	2301      	movs	r3, #1
 80014f8:	9304      	str	r3, [sp, #16]
 80014fa:	4a59      	ldr	r2, [pc, #356]	; (8001660 <redrawFFTdisplay+0x258>)
 80014fc:	ab01      	add	r3, sp, #4
 80014fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001500:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001504:	4b58      	ldr	r3, [pc, #352]	; (8001668 <redrawFFTdisplay+0x260>)
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	4663      	mov	r3, ip
 800150a:	4632      	mov	r2, r6
 800150c:	4629      	mov	r1, r5
 800150e:	4620      	mov	r0, r4
 8001510:	f002 f87e 	bl	8003610 <Displ_CString>
		Displ_CString(fftDisplay->x0 - 8, fftDisplay->y0 + FFT_HEIGHT + 12, fftDisplay->x0 + 16, Font8.Height + fftDisplay->y0 + FFT_HEIGHT + 12, "0", Font8, 1,TEXT_COLOR, BACKGROUND_COLOR);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	3b08      	subs	r3, #8
 800151a:	b29c      	uxth	r4, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	885b      	ldrh	r3, [r3, #2]
 8001520:	3348      	adds	r3, #72	; 0x48
 8001522:	b29d      	uxth	r5, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	3310      	adds	r3, #16
 800152a:	b29e      	uxth	r6, r3
 800152c:	4b4f      	ldr	r3, [pc, #316]	; (800166c <redrawFFTdisplay+0x264>)
 800152e:	88da      	ldrh	r2, [r3, #6]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	885b      	ldrh	r3, [r3, #2]
 8001534:	4413      	add	r3, r2
 8001536:	b29b      	uxth	r3, r3
 8001538:	3348      	adds	r3, #72	; 0x48
 800153a:	fa1f fc83 	uxth.w	ip, r3
 800153e:	f243 13e8 	movw	r3, #12776	; 0x31e8
 8001542:	9306      	str	r3, [sp, #24]
 8001544:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001548:	9305      	str	r3, [sp, #20]
 800154a:	2301      	movs	r3, #1
 800154c:	9304      	str	r3, [sp, #16]
 800154e:	4a47      	ldr	r2, [pc, #284]	; (800166c <redrawFFTdisplay+0x264>)
 8001550:	ab01      	add	r3, sp, #4
 8001552:	ca07      	ldmia	r2, {r0, r1, r2}
 8001554:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001558:	4b45      	ldr	r3, [pc, #276]	; (8001670 <redrawFFTdisplay+0x268>)
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	4663      	mov	r3, ip
 800155e:	4632      	mov	r2, r6
 8001560:	4629      	mov	r1, r5
 8001562:	4620      	mov	r0, r4
 8001564:	f002 f854 	bl	8003610 <Displ_CString>
		Displ_CString(fftDisplay->x0 + FFT_WIDTH - 14, fftDisplay->y0 + FFT_HEIGHT + 12, fftDisplay->x0 + FFT_WIDTH + 6,Font8.Height + fftDisplay->y0 + FFT_HEIGHT + 12, "24", Font8, 1, TEXT_COLOR, BACKGROUND_COLOR);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	3379      	adds	r3, #121	; 0x79
 800156e:	b29c      	uxth	r4, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	885b      	ldrh	r3, [r3, #2]
 8001574:	3348      	adds	r3, #72	; 0x48
 8001576:	b29d      	uxth	r5, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	338d      	adds	r3, #141	; 0x8d
 800157e:	b29e      	uxth	r6, r3
 8001580:	4b3a      	ldr	r3, [pc, #232]	; (800166c <redrawFFTdisplay+0x264>)
 8001582:	88da      	ldrh	r2, [r3, #6]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	885b      	ldrh	r3, [r3, #2]
 8001588:	4413      	add	r3, r2
 800158a:	b29b      	uxth	r3, r3
 800158c:	3348      	adds	r3, #72	; 0x48
 800158e:	fa1f fc83 	uxth.w	ip, r3
 8001592:	f243 13e8 	movw	r3, #12776	; 0x31e8
 8001596:	9306      	str	r3, [sp, #24]
 8001598:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800159c:	9305      	str	r3, [sp, #20]
 800159e:	2301      	movs	r3, #1
 80015a0:	9304      	str	r3, [sp, #16]
 80015a2:	4a32      	ldr	r2, [pc, #200]	; (800166c <redrawFFTdisplay+0x264>)
 80015a4:	ab01      	add	r3, sp, #4
 80015a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80015a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80015ac:	4b31      	ldr	r3, [pc, #196]	; (8001674 <redrawFFTdisplay+0x26c>)
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	4663      	mov	r3, ip
 80015b2:	4632      	mov	r2, r6
 80015b4:	4629      	mov	r1, r5
 80015b6:	4620      	mov	r0, r4
 80015b8:	f002 f82a 	bl	8003610 <Displ_CString>

		float x = 0.0;
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
		while (x < FFT_WIDTH){
 80015c2:	e03a      	b.n	800163a <redrawFFTdisplay+0x232>
			Displ_Line(fftDisplay->x0+(uint16_t)x+4, fftDisplay->y0 + FFT_HEIGHT + 10, fftDisplay->x0+(uint16_t)x+4, fftDisplay->y0 + FFT_HEIGHT + 7, TEXT_COLOR);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	881a      	ldrh	r2, [r3, #0]
 80015c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015d0:	ee17 3a90 	vmov	r3, s15
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	4413      	add	r3, r2
 80015d8:	b29b      	uxth	r3, r3
 80015da:	3304      	adds	r3, #4
 80015dc:	b29b      	uxth	r3, r3
 80015de:	b218      	sxth	r0, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	885b      	ldrh	r3, [r3, #2]
 80015e4:	3346      	adds	r3, #70	; 0x46
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	b219      	sxth	r1, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	881a      	ldrh	r2, [r3, #0]
 80015ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80015f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015f6:	ee17 3a90 	vmov	r3, s15
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	4413      	add	r3, r2
 80015fe:	b29b      	uxth	r3, r3
 8001600:	3304      	adds	r3, #4
 8001602:	b29b      	uxth	r3, r3
 8001604:	b21a      	sxth	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	885b      	ldrh	r3, [r3, #2]
 800160a:	3343      	adds	r3, #67	; 0x43
 800160c:	b29b      	uxth	r3, r3
 800160e:	b21b      	sxth	r3, r3
 8001610:	f44f 64fc 	mov.w	r4, #2016	; 0x7e0
 8001614:	9400      	str	r4, [sp, #0]
 8001616:	f001 fd17 	bl	8003048 <Displ_Line>
			x += 10.667;
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f7fe ff94 	bl	8000548 <__aeabi_f2d>
 8001620:	a30d      	add	r3, pc, #52	; (adr r3, 8001658 <redrawFFTdisplay+0x250>)
 8001622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001626:	f7fe fe31 	bl	800028c <__adddf3>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	f7ff fab9 	bl	8000ba8 <__aeabi_d2f>
 8001636:	4603      	mov	r3, r0
 8001638:	60fb      	str	r3, [r7, #12]
		while (x < FFT_WIDTH){
 800163a:	edd7 7a03 	vldr	s15, [r7, #12]
 800163e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001678 <redrawFFTdisplay+0x270>
 8001642:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164a:	d4bb      	bmi.n	80015c4 <redrawFFTdisplay+0x1bc>
		}
		break;
 800164c:	bf00      	nop
	}
}
 800164e:	bf00      	nop
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001656:	bf00      	nop
 8001658:	0624dd2f 	.word	0x0624dd2f
 800165c:	40255581 	.word	0x40255581
 8001660:	20000000 	.word	0x20000000
 8001664:	0800e600 	.word	0x0800e600
 8001668:	0800e608 	.word	0x0800e608
 800166c:	20000018 	.word	0x20000018
 8001670:	0800e618 	.word	0x0800e618
 8001674:	0800e61c 	.word	0x0800e61c
 8001678:	43070000 	.word	0x43070000
 800167c:	00000000 	.word	0x00000000

08001680 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001680:	b5b0      	push	{r4, r5, r7, lr}
 8001682:	b08a      	sub	sp, #40	; 0x28
 8001684:	af08      	add	r7, sp, #32
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001686:	f002 fafa 	bl	8003c7e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800168a:	f000 f9cf 	bl	8001a2c <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 800168e:	f000 fa2f 	bl	8001af0 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001692:	f000 fb5f 	bl	8001d54 <MX_GPIO_Init>
	MX_DMA_Init();
 8001696:	f000 fb23 	bl	8001ce0 <MX_DMA_Init>
	MX_USART2_UART_Init();
 800169a:	f000 faf1 	bl	8001c80 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 800169e:	f000 fab1 	bl	8001c04 <MX_SPI1_Init>
	MX_SAI1_Init();
 80016a2:	f000 fa4f 	bl	8001b44 <MX_SAI1_Init>
	/* USER CODE BEGIN 2 */
	Displ_Init(Displ_Orientat_90);
 80016a6:	2001      	movs	r0, #1
 80016a8:	f001 fa58 	bl	8002b5c <Displ_Init>
	Displ_CLS(BACKGROUND_COLOR);
 80016ac:	f243 10e8 	movw	r0, #12776	; 0x31e8
 80016b0:	f001 fbd8 	bl	8002e64 <Displ_CLS>
	Displ_BackLight('F');
 80016b4:	2046      	movs	r0, #70	; 0x46
 80016b6:	f002 f897 	bl	80037e8 <Displ_BackLight>
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*) saiTx_buf, SAI_BUF_LEN);
 80016ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016be:	49c2      	ldr	r1, [pc, #776]	; (80019c8 <main+0x348>)
 80016c0:	48c2      	ldr	r0, [pc, #776]	; (80019cc <main+0x34c>)
 80016c2:	f005 f905 	bl	80068d0 <HAL_SAI_Transmit_DMA>
	HAL_SAI_Receive_DMA(&hsai_BlockB1, (uint8_t*) saiRx_buf, SAI_BUF_LEN);
 80016c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016ca:	49c1      	ldr	r1, [pc, #772]	; (80019d0 <main+0x350>)
 80016cc:	48c1      	ldr	r0, [pc, #772]	; (80019d4 <main+0x354>)
 80016ce:	f005 f9af 	bl	8006a30 <HAL_SAI_Receive_DMA>
	arm_rfft_fast_init_f32(&fft_instance, BUFFER_SIZE);
 80016d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016d6:	48c0      	ldr	r0, [pc, #768]	; (80019d8 <main+0x358>)
 80016d8:	f007 fdd4 	bl	8009284 <arm_rfft_fast_init_f32>

	initFFTdisplay(&fftDisplayLeft, 12, 148, style, octValuesLeft );
 80016dc:	4bbf      	ldr	r3, [pc, #764]	; (80019dc <main+0x35c>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	4abf      	ldr	r2, [pc, #764]	; (80019e0 <main+0x360>)
 80016e2:	9200      	str	r2, [sp, #0]
 80016e4:	2294      	movs	r2, #148	; 0x94
 80016e6:	210c      	movs	r1, #12
 80016e8:	48be      	ldr	r0, [pc, #760]	; (80019e4 <main+0x364>)
 80016ea:	f7ff fe6c 	bl	80013c6 <initFFTdisplay>
	initFFTdisplay(&fftDisplayRight, 172, 148, style, octValuesRight );
 80016ee:	4bbb      	ldr	r3, [pc, #748]	; (80019dc <main+0x35c>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	4abd      	ldr	r2, [pc, #756]	; (80019e8 <main+0x368>)
 80016f4:	9200      	str	r2, [sp, #0]
 80016f6:	2294      	movs	r2, #148	; 0x94
 80016f8:	21ac      	movs	r1, #172	; 0xac
 80016fa:	48bc      	ldr	r0, [pc, #752]	; (80019ec <main+0x36c>)
 80016fc:	f7ff fe63 	bl	80013c6 <initFFTdisplay>

	initVUmeter(12, 30);
 8001700:	211e      	movs	r1, #30
 8001702:	200c      	movs	r0, #12
 8001704:	f001 f8d0 	bl	80028a8 <initVUmeter>
	initVUmeter(172, 30);
 8001708:	211e      	movs	r1, #30
 800170a:	20ac      	movs	r0, #172	; 0xac
 800170c:	f001 f8cc 	bl	80028a8 <initVUmeter>

	Displ_CString(12, 112, 148, Font16.Height + 114, "Left", Font16, 1, TEXT_COLOR, BACKGROUND_COLOR);
 8001710:	4bb7      	ldr	r3, [pc, #732]	; (80019f0 <main+0x370>)
 8001712:	88db      	ldrh	r3, [r3, #6]
 8001714:	3372      	adds	r3, #114	; 0x72
 8001716:	b29c      	uxth	r4, r3
 8001718:	f243 13e8 	movw	r3, #12776	; 0x31e8
 800171c:	9306      	str	r3, [sp, #24]
 800171e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001722:	9305      	str	r3, [sp, #20]
 8001724:	2301      	movs	r3, #1
 8001726:	9304      	str	r3, [sp, #16]
 8001728:	4ab1      	ldr	r2, [pc, #708]	; (80019f0 <main+0x370>)
 800172a:	ab01      	add	r3, sp, #4
 800172c:	ca07      	ldmia	r2, {r0, r1, r2}
 800172e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001732:	4bb0      	ldr	r3, [pc, #704]	; (80019f4 <main+0x374>)
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	4623      	mov	r3, r4
 8001738:	2294      	movs	r2, #148	; 0x94
 800173a:	2170      	movs	r1, #112	; 0x70
 800173c:	200c      	movs	r0, #12
 800173e:	f001 ff67 	bl	8003610 <Displ_CString>
	Displ_CString(172, 112, 308, Font16.Height + 114, "Right", Font16, 1, TEXT_COLOR, BACKGROUND_COLOR);
 8001742:	4bab      	ldr	r3, [pc, #684]	; (80019f0 <main+0x370>)
 8001744:	88db      	ldrh	r3, [r3, #6]
 8001746:	3372      	adds	r3, #114	; 0x72
 8001748:	b29c      	uxth	r4, r3
 800174a:	f243 13e8 	movw	r3, #12776	; 0x31e8
 800174e:	9306      	str	r3, [sp, #24]
 8001750:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001754:	9305      	str	r3, [sp, #20]
 8001756:	2301      	movs	r3, #1
 8001758:	9304      	str	r3, [sp, #16]
 800175a:	4aa5      	ldr	r2, [pc, #660]	; (80019f0 <main+0x370>)
 800175c:	ab01      	add	r3, sp, #4
 800175e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001760:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001764:	4ba4      	ldr	r3, [pc, #656]	; (80019f8 <main+0x378>)
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	4623      	mov	r3, r4
 800176a:	f44f 729a 	mov.w	r2, #308	; 0x134
 800176e:	2170      	movs	r1, #112	; 0x70
 8001770:	20ac      	movs	r0, #172	; 0xac
 8001772:	f001 ff4d 	bl	8003610 <Displ_CString>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (!fft_data_request) {
 8001776:	4ba1      	ldr	r3, [pc, #644]	; (80019fc <main+0x37c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d124      	bne.n	80017c8 <main+0x148>
			arm_mult_f32(inputLeftFFT, KAISER_WINDOW, inputLeftFFT, BUFFER_SIZE);
 800177e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001782:	4a9f      	ldr	r2, [pc, #636]	; (8001a00 <main+0x380>)
 8001784:	499f      	ldr	r1, [pc, #636]	; (8001a04 <main+0x384>)
 8001786:	489e      	ldr	r0, [pc, #632]	; (8001a00 <main+0x380>)
 8001788:	f008 fbc8 	bl	8009f1c <arm_mult_f32>
			arm_rfft_fast_f32(&fft_instance, inputLeftFFT, outputFFT, 0);
 800178c:	2300      	movs	r3, #0
 800178e:	4a9e      	ldr	r2, [pc, #632]	; (8001a08 <main+0x388>)
 8001790:	499b      	ldr	r1, [pc, #620]	; (8001a00 <main+0x380>)
 8001792:	4891      	ldr	r0, [pc, #580]	; (80019d8 <main+0x358>)
 8001794:	f007 fe5a 	bl	800944c <arm_rfft_fast_f32>
			displayFFTdata(&fftDisplayLeft, outputFFT);
 8001798:	499b      	ldr	r1, [pc, #620]	; (8001a08 <main+0x388>)
 800179a:	4892      	ldr	r0, [pc, #584]	; (80019e4 <main+0x364>)
 800179c:	f7ff fbd8 	bl	8000f50 <displayFFTdata>
			arm_mult_f32(inputRightFFT, KAISER_WINDOW, inputRightFFT, BUFFER_SIZE);
 80017a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017a4:	4a99      	ldr	r2, [pc, #612]	; (8001a0c <main+0x38c>)
 80017a6:	4997      	ldr	r1, [pc, #604]	; (8001a04 <main+0x384>)
 80017a8:	4898      	ldr	r0, [pc, #608]	; (8001a0c <main+0x38c>)
 80017aa:	f008 fbb7 	bl	8009f1c <arm_mult_f32>
			arm_rfft_fast_f32(&fft_instance, inputRightFFT, outputFFT, 0);
 80017ae:	2300      	movs	r3, #0
 80017b0:	4a95      	ldr	r2, [pc, #596]	; (8001a08 <main+0x388>)
 80017b2:	4996      	ldr	r1, [pc, #600]	; (8001a0c <main+0x38c>)
 80017b4:	4888      	ldr	r0, [pc, #544]	; (80019d8 <main+0x358>)
 80017b6:	f007 fe49 	bl	800944c <arm_rfft_fast_f32>
			displayFFTdata(&fftDisplayRight, outputFFT);
 80017ba:	4993      	ldr	r1, [pc, #588]	; (8001a08 <main+0x388>)
 80017bc:	488b      	ldr	r0, [pc, #556]	; (80019ec <main+0x36c>)
 80017be:	f7ff fbc7 	bl	8000f50 <displayFFTdata>
			fft_data_request = 1;
 80017c2:	4b8e      	ldr	r3, [pc, #568]	; (80019fc <main+0x37c>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	601a      	str	r2, [r3, #0]
		}

		if (powerComputed) {
 80017c8:	4b91      	ldr	r3, [pc, #580]	; (8001a10 <main+0x390>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 80a5 	beq.w	800191c <main+0x29c>
			q15_t PwrLeft = PowerLeft >> 15;
 80017d2:	4b90      	ldr	r3, [pc, #576]	; (8001a14 <main+0x394>)
 80017d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	0bc2      	lsrs	r2, r0, #15
 80017e2:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 80017e6:	13cb      	asrs	r3, r1, #15
 80017e8:	4613      	mov	r3, r2
 80017ea:	80fb      	strh	r3, [r7, #6]
			q15_t PwrRight = PowerRight >> 15;
 80017ec:	4b8a      	ldr	r3, [pc, #552]	; (8001a18 <main+0x398>)
 80017ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	f04f 0300 	mov.w	r3, #0
 80017fa:	0bc2      	lsrs	r2, r0, #15
 80017fc:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8001800:	13cb      	asrs	r3, r1, #15
 8001802:	4613      	mov	r3, r2
 8001804:	80bb      	strh	r3, [r7, #4]
			q15_t VeffLeft, VeffRight;
			arm_sqrt_q15(PwrLeft, &VeffLeft);
 8001806:	1cba      	adds	r2, r7, #2
 8001808:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800180c:	4611      	mov	r1, r2
 800180e:	4618      	mov	r0, r3
 8001810:	f008 fb1e 	bl	8009e50 <arm_sqrt_q15>
			arm_sqrt_q15(PwrRight, &VeffRight);
 8001814:	463a      	mov	r2, r7
 8001816:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f008 fb17 	bl	8009e50 <arm_sqrt_q15>
			PwrAvgLeft = 0.93 * PwrAvgLeft + 0.07 * VU_GAIN / 32768 * (float32_t) (VeffLeft);
 8001822:	4b7e      	ldr	r3, [pc, #504]	; (8001a1c <main+0x39c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fe8e 	bl	8000548 <__aeabi_f2d>
 800182c:	a362      	add	r3, pc, #392	; (adr r3, 80019b8 <main+0x338>)
 800182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001832:	f7fe fee1 	bl	80005f8 <__aeabi_dmul>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4614      	mov	r4, r2
 800183c:	461d      	mov	r5, r3
 800183e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001842:	ee07 3a90 	vmov	s15, r3
 8001846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800184a:	ee17 0a90 	vmov	r0, s15
 800184e:	f7fe fe7b 	bl	8000548 <__aeabi_f2d>
 8001852:	a35b      	add	r3, pc, #364	; (adr r3, 80019c0 <main+0x340>)
 8001854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001858:	f7fe fece 	bl	80005f8 <__aeabi_dmul>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4620      	mov	r0, r4
 8001862:	4629      	mov	r1, r5
 8001864:	f7fe fd12 	bl	800028c <__adddf3>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	f7ff f99a 	bl	8000ba8 <__aeabi_d2f>
 8001874:	4603      	mov	r3, r0
 8001876:	4a69      	ldr	r2, [pc, #420]	; (8001a1c <main+0x39c>)
 8001878:	6013      	str	r3, [r2, #0]
			PwrAvgRight = 0.93 * PwrAvgRight + 0.07 * VU_GAIN / 32768 * (float32_t) (VeffRight);
 800187a:	4b69      	ldr	r3, [pc, #420]	; (8001a20 <main+0x3a0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fe62 	bl	8000548 <__aeabi_f2d>
 8001884:	a34c      	add	r3, pc, #304	; (adr r3, 80019b8 <main+0x338>)
 8001886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188a:	f7fe feb5 	bl	80005f8 <__aeabi_dmul>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4614      	mov	r4, r2
 8001894:	461d      	mov	r5, r3
 8001896:	f9b7 3000 	ldrsh.w	r3, [r7]
 800189a:	ee07 3a90 	vmov	s15, r3
 800189e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a2:	ee17 0a90 	vmov	r0, s15
 80018a6:	f7fe fe4f 	bl	8000548 <__aeabi_f2d>
 80018aa:	a345      	add	r3, pc, #276	; (adr r3, 80019c0 <main+0x340>)
 80018ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b0:	f7fe fea2 	bl	80005f8 <__aeabi_dmul>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4620      	mov	r0, r4
 80018ba:	4629      	mov	r1, r5
 80018bc:	f7fe fce6 	bl	800028c <__adddf3>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	f7ff f96e 	bl	8000ba8 <__aeabi_d2f>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4a54      	ldr	r2, [pc, #336]	; (8001a20 <main+0x3a0>)
 80018d0:	6013      	str	r3, [r2, #0]
			displayVUmeter(12, 30, (int) 100.0 * PwrAvgLeft);
 80018d2:	4b52      	ldr	r3, [pc, #328]	; (8001a1c <main+0x39c>)
 80018d4:	edd3 7a00 	vldr	s15, [r3]
 80018d8:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001a24 <main+0x3a4>
 80018dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018e4:	ee17 3a90 	vmov	r3, s15
 80018e8:	b21b      	sxth	r3, r3
 80018ea:	461a      	mov	r2, r3
 80018ec:	211e      	movs	r1, #30
 80018ee:	200c      	movs	r0, #12
 80018f0:	f000 fece 	bl	8002690 <displayVUmeter>
			displayVUmeter(172, 30, (int) 100.0 * PwrAvgRight);
 80018f4:	4b4a      	ldr	r3, [pc, #296]	; (8001a20 <main+0x3a0>)
 80018f6:	edd3 7a00 	vldr	s15, [r3]
 80018fa:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001a24 <main+0x3a4>
 80018fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001902:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001906:	ee17 3a90 	vmov	r3, s15
 800190a:	b21b      	sxth	r3, r3
 800190c:	461a      	mov	r2, r3
 800190e:	211e      	movs	r1, #30
 8001910:	20ac      	movs	r0, #172	; 0xac
 8001912:	f000 febd 	bl	8002690 <displayVUmeter>
			powerComputed = 0;
 8001916:	4b3e      	ldr	r3, [pc, #248]	; (8001a10 <main+0x390>)
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]

		}
		if (HAL_GetTick() - lastTouchTick > 20) {
 800191c:	f002 fa18 	bl	8003d50 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	4b41      	ldr	r3, [pc, #260]	; (8001a28 <main+0x3a8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b14      	cmp	r3, #20
 800192a:	f67f af24 	bls.w	8001776 <main+0xf6>
			if (Touch_GotATouch(1)) {
 800192e:	2001      	movs	r0, #1
 8001930:	f002 f952 	bl	8003bd8 <Touch_GotATouch>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	f43f af1d 	beq.w	8001776 <main+0xf6>
				if (Touch_In_XY_area(12, 148, 135, 60) || Touch_In_XY_area(172, 148, 135, 60)) {
 800193c:	233c      	movs	r3, #60	; 0x3c
 800193e:	2287      	movs	r2, #135	; 0x87
 8001940:	2194      	movs	r1, #148	; 0x94
 8001942:	200c      	movs	r0, #12
 8001944:	f002 f90e 	bl	8003b64 <Touch_In_XY_area>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d108      	bne.n	8001960 <main+0x2e0>
 800194e:	233c      	movs	r3, #60	; 0x3c
 8001950:	2287      	movs	r2, #135	; 0x87
 8001952:	2194      	movs	r1, #148	; 0x94
 8001954:	20ac      	movs	r0, #172	; 0xac
 8001956:	f002 f905 	bl	8003b64 <Touch_In_XY_area>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d022      	beq.n	80019a6 <main+0x326>
					if (style == LINEAR) {
 8001960:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <main+0x35c>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d10f      	bne.n	8001988 <main+0x308>
						style = OCTAVE;
 8001968:	4b1c      	ldr	r3, [pc, #112]	; (80019dc <main+0x35c>)
 800196a:	2201      	movs	r2, #1
 800196c:	701a      	strb	r2, [r3, #0]
						fftDisplayLeft.style = OCTAVE;
 800196e:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <main+0x364>)
 8001970:	2201      	movs	r2, #1
 8001972:	711a      	strb	r2, [r3, #4]
						redrawFFTdisplay(&fftDisplayLeft);
 8001974:	481b      	ldr	r0, [pc, #108]	; (80019e4 <main+0x364>)
 8001976:	f7ff fd47 	bl	8001408 <redrawFFTdisplay>
						fftDisplayRight.style = OCTAVE;
 800197a:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <main+0x36c>)
 800197c:	2201      	movs	r2, #1
 800197e:	711a      	strb	r2, [r3, #4]
						redrawFFTdisplay(&fftDisplayRight);
 8001980:	481a      	ldr	r0, [pc, #104]	; (80019ec <main+0x36c>)
 8001982:	f7ff fd41 	bl	8001408 <redrawFFTdisplay>
 8001986:	e00e      	b.n	80019a6 <main+0x326>
					} else {
						style = LINEAR;
 8001988:	4b14      	ldr	r3, [pc, #80]	; (80019dc <main+0x35c>)
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]
						fftDisplayLeft.style = LINEAR;
 800198e:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <main+0x364>)
 8001990:	2200      	movs	r2, #0
 8001992:	711a      	strb	r2, [r3, #4]
						redrawFFTdisplay(&fftDisplayLeft);
 8001994:	4813      	ldr	r0, [pc, #76]	; (80019e4 <main+0x364>)
 8001996:	f7ff fd37 	bl	8001408 <redrawFFTdisplay>
						fftDisplayRight.style = LINEAR;
 800199a:	4b14      	ldr	r3, [pc, #80]	; (80019ec <main+0x36c>)
 800199c:	2200      	movs	r2, #0
 800199e:	711a      	strb	r2, [r3, #4]
						redrawFFTdisplay(&fftDisplayRight);
 80019a0:	4812      	ldr	r0, [pc, #72]	; (80019ec <main+0x36c>)
 80019a2:	f7ff fd31 	bl	8001408 <redrawFFTdisplay>
					}
				}
				lastTouchTick = HAL_GetTick();
 80019a6:	f002 f9d3 	bl	8003d50 <HAL_GetTick>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4a1e      	ldr	r2, [pc, #120]	; (8001a28 <main+0x3a8>)
 80019ae:	6013      	str	r3, [r2, #0]
		if (!fft_data_request) {
 80019b0:	e6e1      	b.n	8001776 <main+0xf6>
 80019b2:	bf00      	nop
 80019b4:	f3af 8000 	nop.w
 80019b8:	5c28f5c3 	.word	0x5c28f5c3
 80019bc:	3fedc28f 	.word	0x3fedc28f
 80019c0:	1d7dbf49 	.word	0x1d7dbf49
 80019c4:	3edc6738 	.word	0x3edc6738
 80019c8:	200004f4 	.word	0x200004f4
 80019cc:	2000022c 	.word	0x2000022c
 80019d0:	20000cf4 	.word	0x20000cf4
 80019d4:	200002b0 	.word	0x200002b0
 80019d8:	20001514 	.word	0x20001514
 80019dc:	20002130 	.word	0x20002130
 80019e0:	2000214c 	.word	0x2000214c
 80019e4:	20002134 	.word	0x20002134
 80019e8:	20002168 	.word	0x20002168
 80019ec:	20002140 	.word	0x20002140
 80019f0:	2000000c 	.word	0x2000000c
 80019f4:	0800e620 	.word	0x0800e620
 80019f8:	0800e628 	.word	0x0800e628
 80019fc:	20000024 	.word	0x20000024
 8001a00:	2000152c 	.word	0x2000152c
 8001a04:	0800f984 	.word	0x0800f984
 8001a08:	20001d2c 	.word	0x20001d2c
 8001a0c:	2000192c 	.word	0x2000192c
 8001a10:	20001510 	.word	0x20001510
 8001a14:	200014f8 	.word	0x200014f8
 8001a18:	20001500 	.word	0x20001500
 8001a1c:	20001508 	.word	0x20001508
 8001a20:	2000150c 	.word	0x2000150c
 8001a24:	42c80000 	.word	0x42c80000
 8001a28:	2000212c 	.word	0x2000212c

08001a2c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b096      	sub	sp, #88	; 0x58
 8001a30:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	2244      	movs	r2, #68	; 0x44
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f008 fdf2 	bl	800a624 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001a40:	463b      	mov	r3, r7
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
 8001a4c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 8001a4e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a52:	f002 ff63 	bl	800491c <HAL_PWREx_ControlVoltageScaling>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <SystemClock_Config+0x34>
		Error_Handler();
 8001a5c:	f000 fae8 	bl	8002030 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001a60:	f002 ff3e 	bl	80048e0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a64:	4b21      	ldr	r3, [pc, #132]	; (8001aec <SystemClock_Config+0xc0>)
 8001a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a6a:	4a20      	ldr	r2, [pc, #128]	; (8001aec <SystemClock_Config+0xc0>)
 8001a6c:	f023 0318 	bic.w	r3, r3, #24
 8001a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
 8001a74:	2314      	movs	r3, #20
 8001a76:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8001a84:	2390      	movs	r3, #144	; 0x90
 8001a86:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 5;
 8001a90:	2305      	movs	r3, #5
 8001a92:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 33;
 8001a94:	2321      	movs	r3, #33	; 0x21
 8001a96:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a98:	2307      	movs	r3, #7
 8001a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f002 ff8d 	bl	80049c8 <HAL_RCC_OscConfig>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <SystemClock_Config+0x8c>
		Error_Handler();
 8001ab4:	f000 fabc 	bl	8002030 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ab8:	230f      	movs	r3, #15
 8001aba:	603b      	str	r3, [r7, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001abc:	2303      	movs	r3, #3
 8001abe:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001acc:	463b      	mov	r3, r7
 8001ace:	2104      	movs	r1, #4
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f003 fb8d 	bl	80051f0 <HAL_RCC_ClockConfig>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <SystemClock_Config+0xb4>
		Error_Handler();
 8001adc:	f000 faa8 	bl	8002030 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8001ae0:	f004 fb7e 	bl	80061e0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001ae4:	bf00      	nop
 8001ae6:	3758      	adds	r7, #88	; 0x58
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40021000 	.word	0x40021000

08001af0 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b096      	sub	sp, #88	; 0x58
 8001af4:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	2254      	movs	r2, #84	; 0x54
 8001afa:	2100      	movs	r1, #0
 8001afc:	4618      	mov	r0, r3
 8001afe:	f008 fd91 	bl	800a624 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001b02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b06:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8001b10:	2305      	movs	r3, #5
 8001b12:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 64;
 8001b14:	2340      	movs	r3, #64	; 0x40
 8001b16:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV25;
 8001b18:	2319      	movs	r3, #25
 8001b1a:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b20:	2302      	movs	r3, #2
 8001b22:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8001b24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b28:	623b      	str	r3, [r7, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f003 fd83 	bl	8005638 <HAL_RCCEx_PeriphCLKConfig>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <PeriphCommonClock_Config+0x4c>
		Error_Handler();
 8001b38:	f000 fa7a 	bl	8002030 <Error_Handler>
	}
}
 8001b3c:	bf00      	nop
 8001b3e:	3758      	adds	r7, #88	; 0x58
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <MX_SAI1_Init>:
/**
 * @brief SAI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI1_Init(void) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
	/* USER CODE END SAI1_Init 0 */

	/* USER CODE BEGIN SAI1_Init 1 */

	/* USER CODE END SAI1_Init 1 */
	hsai_BlockA1.Instance = SAI1_Block_A;
 8001b48:	4b2a      	ldr	r3, [pc, #168]	; (8001bf4 <MX_SAI1_Init+0xb0>)
 8001b4a:	4a2b      	ldr	r2, [pc, #172]	; (8001bf8 <MX_SAI1_Init+0xb4>)
 8001b4c:	601a      	str	r2, [r3, #0]
	hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001b4e:	4b29      	ldr	r3, [pc, #164]	; (8001bf4 <MX_SAI1_Init+0xb0>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	605a      	str	r2, [r3, #4]
	hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001b54:	4b27      	ldr	r3, [pc, #156]	; (8001bf4 <MX_SAI1_Init+0xb0>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
	hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001b5a:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <MX_SAI1_Init+0xb0>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
	hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001b60:	4b24      	ldr	r3, [pc, #144]	; (8001bf4 <MX_SAI1_Init+0xb0>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	615a      	str	r2, [r3, #20]
	hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001b66:	4b23      	ldr	r3, [pc, #140]	; (8001bf4 <MX_SAI1_Init+0xb0>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
	hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001b6c:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <MX_SAI1_Init+0xb0>)
 8001b6e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001b72:	61da      	str	r2, [r3, #28]
	hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001b74:	4b1f      	ldr	r3, [pc, #124]	; (8001bf4 <MX_SAI1_Init+0xb0>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	60da      	str	r2, [r3, #12]
	hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001b7a:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <MX_SAI1_Init+0xb0>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b80:	4b1c      	ldr	r3, [pc, #112]	; (8001bf4 <MX_SAI1_Init+0xb0>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001b86:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <MX_SAI1_Init+0xb0>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK) {
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2100      	movs	r1, #0
 8001b92:	4818      	ldr	r0, [pc, #96]	; (8001bf4 <MX_SAI1_Init+0xb0>)
 8001b94:	f004 fce2 	bl	800655c <HAL_SAI_InitProtocol>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_SAI1_Init+0x5e>
		Error_Handler();
 8001b9e:	f000 fa47 	bl	8002030 <Error_Handler>
	}
	hsai_BlockB1.Instance = SAI1_Block_B;
 8001ba2:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <MX_SAI1_Init+0xb8>)
 8001ba4:	4a16      	ldr	r2, [pc, #88]	; (8001c00 <MX_SAI1_Init+0xbc>)
 8001ba6:	601a      	str	r2, [r3, #0]
	hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001ba8:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <MX_SAI1_Init+0xb8>)
 8001baa:	2203      	movs	r2, #3
 8001bac:	605a      	str	r2, [r3, #4]
	hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001bae:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <MX_SAI1_Init+0xb8>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	609a      	str	r2, [r3, #8]
	hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001bb4:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <MX_SAI1_Init+0xb8>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	611a      	str	r2, [r3, #16]
	hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001bba:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <MX_SAI1_Init+0xb8>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
	hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001bc0:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <MX_SAI1_Init+0xb8>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
	hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001bc6:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <MX_SAI1_Init+0xb8>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <MX_SAI1_Init+0xb8>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <MX_SAI1_Init+0xb8>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK) {
 8001bd8:	2302      	movs	r3, #2
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4807      	ldr	r0, [pc, #28]	; (8001bfc <MX_SAI1_Init+0xb8>)
 8001be0:	f004 fcbc 	bl	800655c <HAL_SAI_InitProtocol>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_SAI1_Init+0xaa>
		Error_Handler();
 8001bea:	f000 fa21 	bl	8002030 <Error_Handler>
	}
	/* USER CODE BEGIN SAI1_Init 2 */

	/* USER CODE END SAI1_Init 2 */

}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	2000022c 	.word	0x2000022c
 8001bf8:	40015404 	.word	0x40015404
 8001bfc:	200002b0 	.word	0x200002b0
 8001c00:	40015424 	.word	0x40015424

08001c04 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001c08:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <MX_SPI1_Init+0x74>)
 8001c0a:	4a1c      	ldr	r2, [pc, #112]	; (8001c7c <MX_SPI1_Init+0x78>)
 8001c0c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <MX_SPI1_Init+0x74>)
 8001c10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c14:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c16:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <MX_SPI1_Init+0x74>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c1c:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <MX_SPI1_Init+0x74>)
 8001c1e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c22:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c24:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <MX_SPI1_Init+0x74>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <MX_SPI1_Init+0x74>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <MX_SPI1_Init+0x74>)
 8001c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c36:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <MX_SPI1_Init+0x74>)
 8001c3a:	2220      	movs	r2, #32
 8001c3c:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <MX_SPI1_Init+0x74>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <MX_SPI1_Init+0x74>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <MX_SPI1_Init+0x74>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <MX_SPI1_Init+0x74>)
 8001c52:	2207      	movs	r2, #7
 8001c54:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <MX_SPI1_Init+0x74>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <MX_SPI1_Init+0x74>)
 8001c5e:	2208      	movs	r2, #8
 8001c60:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001c62:	4805      	ldr	r0, [pc, #20]	; (8001c78 <MX_SPI1_Init+0x74>)
 8001c64:	f005 fbb4 	bl	80073d0 <HAL_SPI_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_SPI1_Init+0x6e>
		Error_Handler();
 8001c6e:	f000 f9df 	bl	8002030 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	200003c4 	.word	0x200003c4
 8001c7c:	40013000 	.word	0x40013000

08001c80 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001c84:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <MX_USART2_UART_Init+0x58>)
 8001c86:	4a15      	ldr	r2, [pc, #84]	; (8001cdc <MX_USART2_UART_Init+0x5c>)
 8001c88:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001c8a:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <MX_USART2_UART_Init+0x58>)
 8001c8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c90:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <MX_USART2_UART_Init+0x58>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001c98:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <MX_USART2_UART_Init+0x58>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <MX_USART2_UART_Init+0x58>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <MX_USART2_UART_Init+0x58>)
 8001ca6:	220c      	movs	r2, #12
 8001ca8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <MX_USART2_UART_Init+0x58>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb0:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <MX_USART2_UART_Init+0x58>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cb6:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <MX_USART2_UART_Init+0x58>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <MX_USART2_UART_Init+0x58>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001cc2:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <MX_USART2_UART_Init+0x58>)
 8001cc4:	f006 fd28 	bl	8008718 <HAL_UART_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8001cce:	f000 f9af 	bl	8002030 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000470 	.word	0x20000470
 8001cdc:	40004400 	.word	0x40004400

08001ce0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <MX_DMA_Init+0x70>)
 8001ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cea:	4a19      	ldr	r2, [pc, #100]	; (8001d50 <MX_DMA_Init+0x70>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6493      	str	r3, [r2, #72]	; 0x48
 8001cf2:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <MX_DMA_Init+0x70>)
 8001cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001cfe:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <MX_DMA_Init+0x70>)
 8001d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d02:	4a13      	ldr	r2, [pc, #76]	; (8001d50 <MX_DMA_Init+0x70>)
 8001d04:	f043 0302 	orr.w	r3, r3, #2
 8001d08:	6493      	str	r3, [r2, #72]	; 0x48
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <MX_DMA_Init+0x70>)
 8001d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	603b      	str	r3, [r7, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2100      	movs	r1, #0
 8001d1a:	200d      	movs	r0, #13
 8001d1c:	f002 f965 	bl	8003fea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001d20:	200d      	movs	r0, #13
 8001d22:	f002 f97e 	bl	8004022 <HAL_NVIC_EnableIRQ>
	/* DMA2_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2100      	movs	r1, #0
 8001d2a:	2038      	movs	r0, #56	; 0x38
 8001d2c:	f002 f95d 	bl	8003fea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001d30:	2038      	movs	r0, #56	; 0x38
 8001d32:	f002 f976 	bl	8004022 <HAL_NVIC_EnableIRQ>
	/* DMA2_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2100      	movs	r1, #0
 8001d3a:	2039      	movs	r0, #57	; 0x39
 8001d3c:	f002 f955 	bl	8003fea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8001d40:	2039      	movs	r0, #57	; 0x39
 8001d42:	f002 f96e 	bl	8004022 <HAL_NVIC_EnableIRQ>

}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40021000 	.word	0x40021000

08001d54 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001d5a:	f107 030c 	add.w	r3, r7, #12
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
 8001d68:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6a:	4b48      	ldr	r3, [pc, #288]	; (8001e8c <MX_GPIO_Init+0x138>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6e:	4a47      	ldr	r2, [pc, #284]	; (8001e8c <MX_GPIO_Init+0x138>)
 8001d70:	f043 0304 	orr.w	r3, r3, #4
 8001d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d76:	4b45      	ldr	r3, [pc, #276]	; (8001e8c <MX_GPIO_Init+0x138>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	4b42      	ldr	r3, [pc, #264]	; (8001e8c <MX_GPIO_Init+0x138>)
 8001d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d86:	4a41      	ldr	r2, [pc, #260]	; (8001e8c <MX_GPIO_Init+0x138>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d8e:	4b3f      	ldr	r3, [pc, #252]	; (8001e8c <MX_GPIO_Init+0x138>)
 8001d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9a:	4b3c      	ldr	r3, [pc, #240]	; (8001e8c <MX_GPIO_Init+0x138>)
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9e:	4a3b      	ldr	r2, [pc, #236]	; (8001e8c <MX_GPIO_Init+0x138>)
 8001da0:	f043 0302 	orr.w	r3, r3, #2
 8001da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da6:	4b39      	ldr	r3, [pc, #228]	; (8001e8c <MX_GPIO_Init+0x138>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, DISPL_DC_Pin | DISPL_CS_Pin, GPIO_PIN_SET);
 8001db2:	2201      	movs	r2, #1
 8001db4:	2130      	movs	r1, #48	; 0x30
 8001db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dba:	f002 fd61 	bl	8004880 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	2102      	movs	r1, #2
 8001dc2:	4833      	ldr	r0, [pc, #204]	; (8001e90 <MX_GPIO_Init+0x13c>)
 8001dc4:	f002 fd5c 	bl	8004880 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd2:	f002 fd55 	bl	8004880 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_RESET);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2108      	movs	r1, #8
 8001dda:	482d      	ldr	r0, [pc, #180]	; (8001e90 <MX_GPIO_Init+0x13c>)
 8001ddc:	f002 fd50 	bl	8004880 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : DISPL_DC_Pin DISPL_CS_Pin */
	GPIO_InitStruct.Pin = DISPL_DC_Pin | DISPL_CS_Pin;
 8001de0:	2330      	movs	r3, #48	; 0x30
 8001de2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de4:	2301      	movs	r3, #1
 8001de6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dec:	2302      	movs	r3, #2
 8001dee:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df0:	f107 030c 	add.w	r3, r7, #12
 8001df4:	4619      	mov	r1, r3
 8001df6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dfa:	f002 fbbf 	bl	800457c <HAL_GPIO_Init>

	/*Configure GPIO pin : TOUCH_CS_Pin */
	GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e02:	2301      	movs	r3, #1
 8001e04:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8001e0e:	f107 030c 	add.w	r3, r7, #12
 8001e12:	4619      	mov	r1, r3
 8001e14:	481e      	ldr	r0, [pc, #120]	; (8001e90 <MX_GPIO_Init+0x13c>)
 8001e16:	f002 fbb1 	bl	800457c <HAL_GPIO_Init>

	/*Configure GPIO pin : TOUCH_INT_Pin */
	GPIO_InitStruct.Pin = TOUCH_INT_Pin;
 8001e1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e1e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e20:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e24:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e26:	2301      	movs	r3, #1
 8001e28:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 8001e2a:	f107 030c 	add.w	r3, r7, #12
 8001e2e:	4619      	mov	r1, r3
 8001e30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e34:	f002 fba2 	bl	800457c <HAL_GPIO_Init>

	/*Configure GPIO pin : DISPL_RST_Pin */
	GPIO_InitStruct.Pin = DISPL_RST_Pin;
 8001e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e3c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(DISPL_RST_GPIO_Port, &GPIO_InitStruct);
 8001e4a:	f107 030c 	add.w	r3, r7, #12
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e54:	f002 fb92 	bl	800457c <HAL_GPIO_Init>

	/*Configure GPIO pin : DISPL_LED_Pin */
	GPIO_InitStruct.Pin = DISPL_LED_Pin;
 8001e58:	2308      	movs	r3, #8
 8001e5a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(DISPL_LED_GPIO_Port, &GPIO_InitStruct);
 8001e68:	f107 030c 	add.w	r3, r7, #12
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4808      	ldr	r0, [pc, #32]	; (8001e90 <MX_GPIO_Init+0x13c>)
 8001e70:	f002 fb84 	bl	800457c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e74:	2200      	movs	r2, #0
 8001e76:	2100      	movs	r1, #0
 8001e78:	2028      	movs	r0, #40	; 0x28
 8001e7a:	f002 f8b6 	bl	8003fea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e7e:	2028      	movs	r0, #40	; 0x28
 8001e80:	f002 f8cf 	bl	8004022 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001e84:	bf00      	nop
 8001e86:	3720      	adds	r7, #32
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	48000400 	.word	0x48000400

08001e94 <HAL_SAI_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	processData(&saiRx_buf[SAI_BUF_LEN / 2], &saiTx_buf[SAI_BUF_LEN / 2]);
 8001e9c:	4903      	ldr	r1, [pc, #12]	; (8001eac <HAL_SAI_RxCpltCallback+0x18>)
 8001e9e:	4804      	ldr	r0, [pc, #16]	; (8001eb0 <HAL_SAI_RxCpltCallback+0x1c>)
 8001ea0:	f000 f818 	bl	8001ed4 <processData>
}
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	200008f4 	.word	0x200008f4
 8001eb0:	200010f4 	.word	0x200010f4

08001eb4 <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
	processData(&saiRx_buf[0], &saiTx_buf[0]);
 8001ebc:	4903      	ldr	r1, [pc, #12]	; (8001ecc <HAL_SAI_RxHalfCpltCallback+0x18>)
 8001ebe:	4804      	ldr	r0, [pc, #16]	; (8001ed0 <HAL_SAI_RxHalfCpltCallback+0x1c>)
 8001ec0:	f000 f808 	bl	8001ed4 <processData>
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	200004f4 	.word	0x200004f4
 8001ed0:	20000cf4 	.word	0x20000cf4

08001ed4 <processData>:

void processData(int16_t *saiRxBuffer, int16_t *saiTxBuffer) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]

	static int16_t inputSignalLeft[BUFFER_SIZE], inputSignalRight[BUFFER_SIZE];
	static int16_t outputSignalLeft[BUFFER_SIZE], outputSignalRight[BUFFER_SIZE];

	// copy RxBuffer to leftSignalBuffer and rightSignalBuffer
	for (index1 = 0, index2 = 0; index1 < BUFFER_SIZE; index1++) {
 8001ede:	2300      	movs	r3, #0
 8001ee0:	81fb      	strh	r3, [r7, #14]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	81bb      	strh	r3, [r7, #12]
 8001ee6:	e01a      	b.n	8001f1e <processData+0x4a>
		inputSignalRight[index1] = saiRxBuffer[index2++];
 8001ee8:	89bb      	ldrh	r3, [r7, #12]
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	81ba      	strh	r2, [r7, #12]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	441a      	add	r2, r3
 8001ef4:	89fb      	ldrh	r3, [r7, #14]
 8001ef6:	f9b2 1000 	ldrsh.w	r1, [r2]
 8001efa:	4a43      	ldr	r2, [pc, #268]	; (8002008 <processData+0x134>)
 8001efc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		inputSignalLeft[index1] = saiRxBuffer[index2++];
 8001f00:	89bb      	ldrh	r3, [r7, #12]
 8001f02:	1c5a      	adds	r2, r3, #1
 8001f04:	81ba      	strh	r2, [r7, #12]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	441a      	add	r2, r3
 8001f0c:	89fb      	ldrh	r3, [r7, #14]
 8001f0e:	f9b2 1000 	ldrsh.w	r1, [r2]
 8001f12:	4a3e      	ldr	r2, [pc, #248]	; (800200c <processData+0x138>)
 8001f14:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (index1 = 0, index2 = 0; index1 < BUFFER_SIZE; index1++) {
 8001f18:	89fb      	ldrh	r3, [r7, #14]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	81fb      	strh	r3, [r7, #14]
 8001f1e:	89fb      	ldrh	r3, [r7, #14]
 8001f20:	2bff      	cmp	r3, #255	; 0xff
 8001f22:	d9e1      	bls.n	8001ee8 <processData+0x14>
	// Here, the data of inputSignalLeft[] and inputSignalRight[] can be processed
	// The result should be stored in outputSignalLeft[] and outpuSignalRight[].
	// Note that the arrays contain BUFFER_SIZE values each

	// copy input to output
	arm_copy_q15(inputSignalLeft, outputSignalLeft, BUFFER_SIZE);
 8001f24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f28:	4939      	ldr	r1, [pc, #228]	; (8002010 <processData+0x13c>)
 8001f2a:	4838      	ldr	r0, [pc, #224]	; (800200c <processData+0x138>)
 8001f2c:	f007 f886 	bl	800903c <arm_copy_q15>
	arm_copy_q15(inputSignalRight, outputSignalRight, BUFFER_SIZE);
 8001f30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f34:	4937      	ldr	r1, [pc, #220]	; (8002014 <processData+0x140>)
 8001f36:	4834      	ldr	r0, [pc, #208]	; (8002008 <processData+0x134>)
 8001f38:	f007 f880 	bl	800903c <arm_copy_q15>

	// determine power
	arm_dot_prod_q15(inputSignalLeft, inputSignalLeft, BUFFER_SIZE, &PowerLeft);
 8001f3c:	4b36      	ldr	r3, [pc, #216]	; (8002018 <processData+0x144>)
 8001f3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f42:	4932      	ldr	r1, [pc, #200]	; (800200c <processData+0x138>)
 8001f44:	4831      	ldr	r0, [pc, #196]	; (800200c <processData+0x138>)
 8001f46:	f008 f843 	bl	8009fd0 <arm_dot_prod_q15>
	PowerLeft = PowerLeft >> LOG2_BUFFERSIZE;
 8001f4a:	4b33      	ldr	r3, [pc, #204]	; (8002018 <processData+0x144>)
 8001f4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	f04f 0300 	mov.w	r3, #0
 8001f58:	0a02      	lsrs	r2, r0, #8
 8001f5a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001f5e:	120b      	asrs	r3, r1, #8
 8001f60:	492d      	ldr	r1, [pc, #180]	; (8002018 <processData+0x144>)
 8001f62:	e9c1 2300 	strd	r2, r3, [r1]
	arm_dot_prod_q15(inputSignalRight, inputSignalRight, BUFFER_SIZE, &PowerRight);
 8001f66:	4b2d      	ldr	r3, [pc, #180]	; (800201c <processData+0x148>)
 8001f68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f6c:	4926      	ldr	r1, [pc, #152]	; (8002008 <processData+0x134>)
 8001f6e:	4826      	ldr	r0, [pc, #152]	; (8002008 <processData+0x134>)
 8001f70:	f008 f82e 	bl	8009fd0 <arm_dot_prod_q15>
	PowerRight = PowerRight >> LOG2_BUFFERSIZE;
 8001f74:	4b29      	ldr	r3, [pc, #164]	; (800201c <processData+0x148>)
 8001f76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	0a02      	lsrs	r2, r0, #8
 8001f84:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001f88:	120b      	asrs	r3, r1, #8
 8001f8a:	4924      	ldr	r1, [pc, #144]	; (800201c <processData+0x148>)
 8001f8c:	e9c1 2300 	strd	r2, r3, [r1]
	powerComputed = 1;
 8001f90:	4b23      	ldr	r3, [pc, #140]	; (8002020 <processData+0x14c>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	601a      	str	r2, [r3, #0]

	// load new data for fft if requested
	if (fft_data_request) {
 8001f96:	4b23      	ldr	r3, [pc, #140]	; (8002024 <processData+0x150>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00e      	beq.n	8001fbc <processData+0xe8>
		arm_q15_to_float(inputSignalLeft, inputLeftFFT, BUFFER_SIZE);
 8001f9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fa2:	4921      	ldr	r1, [pc, #132]	; (8002028 <processData+0x154>)
 8001fa4:	4819      	ldr	r0, [pc, #100]	; (800200c <processData+0x138>)
 8001fa6:	f006 ffe1 	bl	8008f6c <arm_q15_to_float>
		arm_q15_to_float(inputSignalRight, inputRightFFT, BUFFER_SIZE);
 8001faa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fae:	491f      	ldr	r1, [pc, #124]	; (800202c <processData+0x158>)
 8001fb0:	4815      	ldr	r0, [pc, #84]	; (8002008 <processData+0x134>)
 8001fb2:	f006 ffdb 	bl	8008f6c <arm_q15_to_float>
		fft_data_request = 0;
 8001fb6:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <processData+0x150>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
	}

	// copy left and right txBuffer into TxBuffer
	for (index1 = 0, index2 = 0; index1 < BUFFER_SIZE; index1++) {
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	81fb      	strh	r3, [r7, #14]
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	81bb      	strh	r3, [r7, #12]
 8001fc4:	e018      	b.n	8001ff8 <processData+0x124>
		saiTxBuffer[index2++] = outputSignalRight[index1];
 8001fc6:	89fa      	ldrh	r2, [r7, #14]
 8001fc8:	89bb      	ldrh	r3, [r7, #12]
 8001fca:	1c59      	adds	r1, r3, #1
 8001fcc:	81b9      	strh	r1, [r7, #12]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	6839      	ldr	r1, [r7, #0]
 8001fd2:	440b      	add	r3, r1
 8001fd4:	490f      	ldr	r1, [pc, #60]	; (8002014 <processData+0x140>)
 8001fd6:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001fda:	801a      	strh	r2, [r3, #0]
		saiTxBuffer[index2++] = outputSignalLeft[index1];
 8001fdc:	89fa      	ldrh	r2, [r7, #14]
 8001fde:	89bb      	ldrh	r3, [r7, #12]
 8001fe0:	1c59      	adds	r1, r3, #1
 8001fe2:	81b9      	strh	r1, [r7, #12]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	6839      	ldr	r1, [r7, #0]
 8001fe8:	440b      	add	r3, r1
 8001fea:	4909      	ldr	r1, [pc, #36]	; (8002010 <processData+0x13c>)
 8001fec:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001ff0:	801a      	strh	r2, [r3, #0]
	for (index1 = 0, index2 = 0; index1 < BUFFER_SIZE; index1++) {
 8001ff2:	89fb      	ldrh	r3, [r7, #14]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	81fb      	strh	r3, [r7, #14]
 8001ff8:	89fb      	ldrh	r3, [r7, #14]
 8001ffa:	2bff      	cmp	r3, #255	; 0xff
 8001ffc:	d9e3      	bls.n	8001fc6 <processData+0xf2>
	}
}
 8001ffe:	bf00      	nop
 8002000:	bf00      	nop
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20002184 	.word	0x20002184
 800200c:	20002384 	.word	0x20002384
 8002010:	20002584 	.word	0x20002584
 8002014:	20002784 	.word	0x20002784
 8002018:	200014f8 	.word	0x200014f8
 800201c:	20001500 	.word	0x20001500
 8002020:	20001510 	.word	0x20001510
 8002024:	20000024 	.word	0x20000024
 8002028:	2000152c 	.word	0x2000152c
 800202c:	2000192c 	.word	0x2000192c

08002030 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
 \brief   Disable IRQ Interrupts
 \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void) {
	__ASM volatile ("cpsid i" : : : "memory");
 8002034:	b672      	cpsid	i
}
 8002036:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002038:	e7fe      	b.n	8002038 <Error_Handler+0x8>
	...

0800203c <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8002042:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <HAL_MspInit+0x44>)
 8002044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002046:	4a0e      	ldr	r2, [pc, #56]	; (8002080 <HAL_MspInit+0x44>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6613      	str	r3, [r2, #96]	; 0x60
 800204e:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <HAL_MspInit+0x44>)
 8002050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	607b      	str	r3, [r7, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <HAL_MspInit+0x44>)
 800205c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205e:	4a08      	ldr	r2, [pc, #32]	; (8002080 <HAL_MspInit+0x44>)
 8002060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002064:	6593      	str	r3, [r2, #88]	; 0x58
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_MspInit+0x44>)
 8002068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206e:	603b      	str	r3, [r7, #0]
 8002070:	683b      	ldr	r3, [r7, #0]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	40021000 	.word	0x40021000

08002084 <HAL_SPI_MspInit>:
 * @brief SPI MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hspi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 8002084:	b580      	push	{r7, lr}
 8002086:	b08a      	sub	sp, #40	; 0x28
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
	if (hspi->Instance == SPI1) {
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a30      	ldr	r2, [pc, #192]	; (8002164 <HAL_SPI_MspInit+0xe0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d159      	bne.n	800215a <HAL_SPI_MspInit+0xd6>
		/* USER CODE BEGIN SPI1_MspInit 0 */

		/* USER CODE END SPI1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_SPI1_CLK_ENABLE();
 80020a6:	4b30      	ldr	r3, [pc, #192]	; (8002168 <HAL_SPI_MspInit+0xe4>)
 80020a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020aa:	4a2f      	ldr	r2, [pc, #188]	; (8002168 <HAL_SPI_MspInit+0xe4>)
 80020ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020b0:	6613      	str	r3, [r2, #96]	; 0x60
 80020b2:	4b2d      	ldr	r3, [pc, #180]	; (8002168 <HAL_SPI_MspInit+0xe4>)
 80020b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80020be:	4b2a      	ldr	r3, [pc, #168]	; (8002168 <HAL_SPI_MspInit+0xe4>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c2:	4a29      	ldr	r2, [pc, #164]	; (8002168 <HAL_SPI_MspInit+0xe4>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ca:	4b27      	ldr	r3, [pc, #156]	; (8002168 <HAL_SPI_MspInit+0xe4>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
		/**SPI1 GPIO Configuration
		 PA1     ------> SPI1_SCK
		 PA6     ------> SPI1_MISO
		 PA7     ------> SPI1_MOSI
		 */
		GPIO_InitStruct.Pin = DISPL_SCK_Pin | TOUCH_MISO_Pin | DISPL_MOSI_Pin;
 80020d6:	23c2      	movs	r3, #194	; 0xc2
 80020d8:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e2:	2303      	movs	r3, #3
 80020e4:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020e6:	2305      	movs	r3, #5
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ea:	f107 0314 	add.w	r3, r7, #20
 80020ee:	4619      	mov	r1, r3
 80020f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f4:	f002 fa42 	bl	800457c <HAL_GPIO_Init>

		/* SPI1 DMA Init */
		/* SPI1_TX Init */
		hdma_spi1_tx.Instance = DMA1_Channel3;
 80020f8:	4b1c      	ldr	r3, [pc, #112]	; (800216c <HAL_SPI_MspInit+0xe8>)
 80020fa:	4a1d      	ldr	r2, [pc, #116]	; (8002170 <HAL_SPI_MspInit+0xec>)
 80020fc:	601a      	str	r2, [r3, #0]
		hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80020fe:	4b1b      	ldr	r3, [pc, #108]	; (800216c <HAL_SPI_MspInit+0xe8>)
 8002100:	2201      	movs	r2, #1
 8002102:	605a      	str	r2, [r3, #4]
		hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002104:	4b19      	ldr	r3, [pc, #100]	; (800216c <HAL_SPI_MspInit+0xe8>)
 8002106:	2210      	movs	r2, #16
 8002108:	609a      	str	r2, [r3, #8]
		hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800210a:	4b18      	ldr	r3, [pc, #96]	; (800216c <HAL_SPI_MspInit+0xe8>)
 800210c:	2200      	movs	r2, #0
 800210e:	60da      	str	r2, [r3, #12]
		hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002110:	4b16      	ldr	r3, [pc, #88]	; (800216c <HAL_SPI_MspInit+0xe8>)
 8002112:	2280      	movs	r2, #128	; 0x80
 8002114:	611a      	str	r2, [r3, #16]
		hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002116:	4b15      	ldr	r3, [pc, #84]	; (800216c <HAL_SPI_MspInit+0xe8>)
 8002118:	2200      	movs	r2, #0
 800211a:	615a      	str	r2, [r3, #20]
		hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800211c:	4b13      	ldr	r3, [pc, #76]	; (800216c <HAL_SPI_MspInit+0xe8>)
 800211e:	2200      	movs	r2, #0
 8002120:	619a      	str	r2, [r3, #24]
		hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002122:	4b12      	ldr	r3, [pc, #72]	; (800216c <HAL_SPI_MspInit+0xe8>)
 8002124:	2200      	movs	r2, #0
 8002126:	61da      	str	r2, [r3, #28]
		hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002128:	4b10      	ldr	r3, [pc, #64]	; (800216c <HAL_SPI_MspInit+0xe8>)
 800212a:	2200      	movs	r2, #0
 800212c:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK) {
 800212e:	480f      	ldr	r0, [pc, #60]	; (800216c <HAL_SPI_MspInit+0xe8>)
 8002130:	f001 ffae 	bl	8004090 <HAL_DMA_Init>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_SPI_MspInit+0xba>
			Error_Handler();
 800213a:	f7ff ff79 	bl	8002030 <Error_Handler>
		}

		__HAL_LINKDMA(hspi, hdmatx, hdma_spi1_tx);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a0a      	ldr	r2, [pc, #40]	; (800216c <HAL_SPI_MspInit+0xe8>)
 8002142:	655a      	str	r2, [r3, #84]	; 0x54
 8002144:	4a09      	ldr	r2, [pc, #36]	; (800216c <HAL_SPI_MspInit+0xe8>)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6293      	str	r3, [r2, #40]	; 0x28

		/* SPI1 interrupt Init */
		HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	2100      	movs	r1, #0
 800214e:	2023      	movs	r0, #35	; 0x23
 8002150:	f001 ff4b 	bl	8003fea <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002154:	2023      	movs	r0, #35	; 0x23
 8002156:	f001 ff64 	bl	8004022 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN SPI1_MspInit 1 */

		/* USER CODE END SPI1_MspInit 1 */
	}

}
 800215a:	bf00      	nop
 800215c:	3728      	adds	r7, #40	; 0x28
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40013000 	.word	0x40013000
 8002168:	40021000 	.word	0x40021000
 800216c:	20000428 	.word	0x20000428
 8002170:	40020030 	.word	0x40020030

08002174 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8002174:	b580      	push	{r7, lr}
 8002176:	b09e      	sub	sp, #120	; 0x78
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800217c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800218c:	f107 0310 	add.w	r3, r7, #16
 8002190:	2254      	movs	r2, #84	; 0x54
 8002192:	2100      	movs	r1, #0
 8002194:	4618      	mov	r0, r3
 8002196:	f008 fa45 	bl	800a624 <memset>
	if (huart->Instance == USART2) {
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a28      	ldr	r2, [pc, #160]	; (8002240 <HAL_UART_MspInit+0xcc>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d148      	bne.n	8002236 <HAL_UART_MspInit+0xc2>

		/* USER CODE END USART2_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021a4:	2302      	movs	r3, #2
 80021a6:	613b      	str	r3, [r7, #16]
		PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80021a8:	2300      	movs	r3, #0
 80021aa:	637b      	str	r3, [r7, #52]	; 0x34
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80021ac:	f107 0310 	add.w	r3, r7, #16
 80021b0:	4618      	mov	r0, r3
 80021b2:	f003 fa41 	bl	8005638 <HAL_RCCEx_PeriphCLKConfig>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <HAL_UART_MspInit+0x4c>
			Error_Handler();
 80021bc:	f7ff ff38 	bl	8002030 <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_USART2_CLK_ENABLE();
 80021c0:	4b20      	ldr	r3, [pc, #128]	; (8002244 <HAL_UART_MspInit+0xd0>)
 80021c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c4:	4a1f      	ldr	r2, [pc, #124]	; (8002244 <HAL_UART_MspInit+0xd0>)
 80021c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ca:	6593      	str	r3, [r2, #88]	; 0x58
 80021cc:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <HAL_UART_MspInit+0xd0>)
 80021ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	68fb      	ldr	r3, [r7, #12]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80021d8:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <HAL_UART_MspInit+0xd0>)
 80021da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021dc:	4a19      	ldr	r2, [pc, #100]	; (8002244 <HAL_UART_MspInit+0xd0>)
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021e4:	4b17      	ldr	r3, [pc, #92]	; (8002244 <HAL_UART_MspInit+0xd0>)
 80021e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	68bb      	ldr	r3, [r7, #8]
		/**USART2 GPIO Configuration
		 PA2     ------> USART2_TX
		 PA15 (JTDI)     ------> USART2_RX
		 */
		GPIO_InitStruct.Pin = VCP_TX_Pin;
 80021f0:	2304      	movs	r3, #4
 80021f2:	667b      	str	r3, [r7, #100]	; 0x64
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f4:	2302      	movs	r3, #2
 80021f6:	66bb      	str	r3, [r7, #104]	; 0x68
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	66fb      	str	r3, [r7, #108]	; 0x6c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fc:	2303      	movs	r3, #3
 80021fe:	673b      	str	r3, [r7, #112]	; 0x70
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002200:	2307      	movs	r3, #7
 8002202:	677b      	str	r3, [r7, #116]	; 0x74
		HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002204:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002208:	4619      	mov	r1, r3
 800220a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800220e:	f002 f9b5 	bl	800457c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002216:	667b      	str	r3, [r7, #100]	; 0x64
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002218:	2302      	movs	r3, #2
 800221a:	66bb      	str	r3, [r7, #104]	; 0x68
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	66fb      	str	r3, [r7, #108]	; 0x6c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002220:	2303      	movs	r3, #3
 8002222:	673b      	str	r3, [r7, #112]	; 0x70
		GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002224:	2303      	movs	r3, #3
 8002226:	677b      	str	r3, [r7, #116]	; 0x74
		HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002228:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800222c:	4619      	mov	r1, r3
 800222e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002232:	f002 f9a3 	bl	800457c <HAL_GPIO_Init>
		/* USER CODE BEGIN USART2_MspInit 1 */

		/* USER CODE END USART2_MspInit 1 */
	}

}
 8002236:	bf00      	nop
 8002238:	3778      	adds	r7, #120	; 0x78
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40004400 	.word	0x40004400
 8002244:	40021000 	.word	0x40021000

08002248 <HAL_SAI_MspInit>:

extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client = 0;

void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai) {
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	; 0x28
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct;
	/* SAI1 */
	if (hsai->Instance == SAI1_Block_A) {
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a64      	ldr	r2, [pc, #400]	; (80023e8 <HAL_SAI_MspInit+0x1a0>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d15f      	bne.n	800231a <HAL_SAI_MspInit+0xd2>
		/* Peripheral clock enable */
		if (SAI1_client == 0) {
 800225a:	4b64      	ldr	r3, [pc, #400]	; (80023ec <HAL_SAI_MspInit+0x1a4>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d113      	bne.n	800228a <HAL_SAI_MspInit+0x42>
			__HAL_RCC_SAI1_CLK_ENABLE();
 8002262:	4b63      	ldr	r3, [pc, #396]	; (80023f0 <HAL_SAI_MspInit+0x1a8>)
 8002264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002266:	4a62      	ldr	r2, [pc, #392]	; (80023f0 <HAL_SAI_MspInit+0x1a8>)
 8002268:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800226c:	6613      	str	r3, [r2, #96]	; 0x60
 800226e:	4b60      	ldr	r3, [pc, #384]	; (80023f0 <HAL_SAI_MspInit+0x1a8>)
 8002270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002272:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	693b      	ldr	r3, [r7, #16]

			/* Peripheral interrupt init*/
			HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 800227a:	2200      	movs	r2, #0
 800227c:	2100      	movs	r1, #0
 800227e:	204a      	movs	r0, #74	; 0x4a
 8002280:	f001 feb3 	bl	8003fea <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8002284:	204a      	movs	r0, #74	; 0x4a
 8002286:	f001 fecc 	bl	8004022 <HAL_NVIC_EnableIRQ>
		}
		SAI1_client++;
 800228a:	4b58      	ldr	r3, [pc, #352]	; (80023ec <HAL_SAI_MspInit+0x1a4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	3301      	adds	r3, #1
 8002290:	4a56      	ldr	r2, [pc, #344]	; (80023ec <HAL_SAI_MspInit+0x1a4>)
 8002292:	6013      	str	r3, [r2, #0]
		 PA3     ------> SAI1_MCLK_A
		 PA8     ------> SAI1_SCK_A
		 PA9     ------> SAI1_FS_A
		 PA10     ------> SAI1_SD_A
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8002294:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8002298:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229a:	2302      	movs	r3, #2
 800229c:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a2:	2300      	movs	r3, #0
 80022a4:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80022a6:	230d      	movs	r3, #13
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	4619      	mov	r1, r3
 80022b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022b4:	f002 f962 	bl	800457c <HAL_GPIO_Init>

		/* Peripheral DMA init*/

		hdma_sai1_a.Instance = DMA2_Channel1;
 80022b8:	4b4e      	ldr	r3, [pc, #312]	; (80023f4 <HAL_SAI_MspInit+0x1ac>)
 80022ba:	4a4f      	ldr	r2, [pc, #316]	; (80023f8 <HAL_SAI_MspInit+0x1b0>)
 80022bc:	601a      	str	r2, [r3, #0]
		hdma_sai1_a.Init.Request = DMA_REQUEST_1;
 80022be:	4b4d      	ldr	r3, [pc, #308]	; (80023f4 <HAL_SAI_MspInit+0x1ac>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	605a      	str	r2, [r3, #4]
		hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022c4:	4b4b      	ldr	r3, [pc, #300]	; (80023f4 <HAL_SAI_MspInit+0x1ac>)
 80022c6:	2210      	movs	r2, #16
 80022c8:	609a      	str	r2, [r3, #8]
		hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80022ca:	4b4a      	ldr	r3, [pc, #296]	; (80023f4 <HAL_SAI_MspInit+0x1ac>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	60da      	str	r2, [r3, #12]
		hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80022d0:	4b48      	ldr	r3, [pc, #288]	; (80023f4 <HAL_SAI_MspInit+0x1ac>)
 80022d2:	2280      	movs	r2, #128	; 0x80
 80022d4:	611a      	str	r2, [r3, #16]
		hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022d6:	4b47      	ldr	r3, [pc, #284]	; (80023f4 <HAL_SAI_MspInit+0x1ac>)
 80022d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022dc:	615a      	str	r2, [r3, #20]
		hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022de:	4b45      	ldr	r3, [pc, #276]	; (80023f4 <HAL_SAI_MspInit+0x1ac>)
 80022e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022e4:	619a      	str	r2, [r3, #24]
		hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80022e6:	4b43      	ldr	r3, [pc, #268]	; (80023f4 <HAL_SAI_MspInit+0x1ac>)
 80022e8:	2220      	movs	r2, #32
 80022ea:	61da      	str	r2, [r3, #28]
		hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 80022ec:	4b41      	ldr	r3, [pc, #260]	; (80023f4 <HAL_SAI_MspInit+0x1ac>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK) {
 80022f2:	4840      	ldr	r0, [pc, #256]	; (80023f4 <HAL_SAI_MspInit+0x1ac>)
 80022f4:	f001 fecc 	bl	8004090 <HAL_DMA_Init>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_SAI_MspInit+0xba>
			Error_Handler();
 80022fe:	f7ff fe97 	bl	8002030 <Error_Handler>
		}

		/* Several peripheral DMA handle pointers point to the same DMA handle.
		 Be aware that there is only one channel to perform all the requested DMAs. */
		__HAL_LINKDMA(hsai, hdmarx, hdma_sai1_a);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a3b      	ldr	r2, [pc, #236]	; (80023f4 <HAL_SAI_MspInit+0x1ac>)
 8002306:	671a      	str	r2, [r3, #112]	; 0x70
 8002308:	4a3a      	ldr	r2, [pc, #232]	; (80023f4 <HAL_SAI_MspInit+0x1ac>)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6293      	str	r3, [r2, #40]	; 0x28

		__HAL_LINKDMA(hsai, hdmatx, hdma_sai1_a);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a38      	ldr	r2, [pc, #224]	; (80023f4 <HAL_SAI_MspInit+0x1ac>)
 8002312:	66da      	str	r2, [r3, #108]	; 0x6c
 8002314:	4a37      	ldr	r2, [pc, #220]	; (80023f4 <HAL_SAI_MspInit+0x1ac>)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6293      	str	r3, [r2, #40]	; 0x28

	}
	if (hsai->Instance == SAI1_Block_B) {
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a37      	ldr	r2, [pc, #220]	; (80023fc <HAL_SAI_MspInit+0x1b4>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d15d      	bne.n	80023e0 <HAL_SAI_MspInit+0x198>
		/* Peripheral clock enable */
		if (SAI1_client == 0) {
 8002324:	4b31      	ldr	r3, [pc, #196]	; (80023ec <HAL_SAI_MspInit+0x1a4>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d113      	bne.n	8002354 <HAL_SAI_MspInit+0x10c>
			__HAL_RCC_SAI1_CLK_ENABLE();
 800232c:	4b30      	ldr	r3, [pc, #192]	; (80023f0 <HAL_SAI_MspInit+0x1a8>)
 800232e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002330:	4a2f      	ldr	r2, [pc, #188]	; (80023f0 <HAL_SAI_MspInit+0x1a8>)
 8002332:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002336:	6613      	str	r3, [r2, #96]	; 0x60
 8002338:	4b2d      	ldr	r3, [pc, #180]	; (80023f0 <HAL_SAI_MspInit+0x1a8>)
 800233a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800233c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	68fb      	ldr	r3, [r7, #12]

			/* Peripheral interrupt init*/
			HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8002344:	2200      	movs	r2, #0
 8002346:	2100      	movs	r1, #0
 8002348:	204a      	movs	r0, #74	; 0x4a
 800234a:	f001 fe4e 	bl	8003fea <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(SAI1_IRQn);
 800234e:	204a      	movs	r0, #74	; 0x4a
 8002350:	f001 fe67 	bl	8004022 <HAL_NVIC_EnableIRQ>
		}
		SAI1_client++;
 8002354:	4b25      	ldr	r3, [pc, #148]	; (80023ec <HAL_SAI_MspInit+0x1a4>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	3301      	adds	r3, #1
 800235a:	4a24      	ldr	r2, [pc, #144]	; (80023ec <HAL_SAI_MspInit+0x1a4>)
 800235c:	6013      	str	r3, [r2, #0]

		/**SAI1_B_Block_B GPIO Configuration
		 PB5     ------> SAI1_SD_B
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_5;
 800235e:	2320      	movs	r3, #32
 8002360:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236a:	2300      	movs	r3, #0
 800236c:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800236e:	230d      	movs	r3, #13
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002372:	f107 0314 	add.w	r3, r7, #20
 8002376:	4619      	mov	r1, r3
 8002378:	4821      	ldr	r0, [pc, #132]	; (8002400 <HAL_SAI_MspInit+0x1b8>)
 800237a:	f002 f8ff 	bl	800457c <HAL_GPIO_Init>

		/* Peripheral DMA init*/

		hdma_sai1_b.Instance = DMA2_Channel2;
 800237e:	4b21      	ldr	r3, [pc, #132]	; (8002404 <HAL_SAI_MspInit+0x1bc>)
 8002380:	4a21      	ldr	r2, [pc, #132]	; (8002408 <HAL_SAI_MspInit+0x1c0>)
 8002382:	601a      	str	r2, [r3, #0]
		hdma_sai1_b.Init.Request = DMA_REQUEST_1;
 8002384:	4b1f      	ldr	r3, [pc, #124]	; (8002404 <HAL_SAI_MspInit+0x1bc>)
 8002386:	2201      	movs	r2, #1
 8002388:	605a      	str	r2, [r3, #4]
		hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800238a:	4b1e      	ldr	r3, [pc, #120]	; (8002404 <HAL_SAI_MspInit+0x1bc>)
 800238c:	2200      	movs	r2, #0
 800238e:	609a      	str	r2, [r3, #8]
		hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8002390:	4b1c      	ldr	r3, [pc, #112]	; (8002404 <HAL_SAI_MspInit+0x1bc>)
 8002392:	2200      	movs	r2, #0
 8002394:	60da      	str	r2, [r3, #12]
		hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8002396:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <HAL_SAI_MspInit+0x1bc>)
 8002398:	2280      	movs	r2, #128	; 0x80
 800239a:	611a      	str	r2, [r3, #16]
		hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800239c:	4b19      	ldr	r3, [pc, #100]	; (8002404 <HAL_SAI_MspInit+0x1bc>)
 800239e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023a2:	615a      	str	r2, [r3, #20]
		hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023a4:	4b17      	ldr	r3, [pc, #92]	; (8002404 <HAL_SAI_MspInit+0x1bc>)
 80023a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023aa:	619a      	str	r2, [r3, #24]
		hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80023ac:	4b15      	ldr	r3, [pc, #84]	; (8002404 <HAL_SAI_MspInit+0x1bc>)
 80023ae:	2220      	movs	r2, #32
 80023b0:	61da      	str	r2, [r3, #28]
		hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 80023b2:	4b14      	ldr	r3, [pc, #80]	; (8002404 <HAL_SAI_MspInit+0x1bc>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK) {
 80023b8:	4812      	ldr	r0, [pc, #72]	; (8002404 <HAL_SAI_MspInit+0x1bc>)
 80023ba:	f001 fe69 	bl	8004090 <HAL_DMA_Init>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <HAL_SAI_MspInit+0x180>
			Error_Handler();
 80023c4:	f7ff fe34 	bl	8002030 <Error_Handler>
		}

		/* Several peripheral DMA handle pointers point to the same DMA handle.
		 Be aware that there is only one channel to perform all the requested DMAs. */
		__HAL_LINKDMA(hsai, hdmarx, hdma_sai1_b);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a0e      	ldr	r2, [pc, #56]	; (8002404 <HAL_SAI_MspInit+0x1bc>)
 80023cc:	671a      	str	r2, [r3, #112]	; 0x70
 80023ce:	4a0d      	ldr	r2, [pc, #52]	; (8002404 <HAL_SAI_MspInit+0x1bc>)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6293      	str	r3, [r2, #40]	; 0x28
		__HAL_LINKDMA(hsai, hdmatx, hdma_sai1_b);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a0b      	ldr	r2, [pc, #44]	; (8002404 <HAL_SAI_MspInit+0x1bc>)
 80023d8:	66da      	str	r2, [r3, #108]	; 0x6c
 80023da:	4a0a      	ldr	r2, [pc, #40]	; (8002404 <HAL_SAI_MspInit+0x1bc>)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6293      	str	r3, [r2, #40]	; 0x28
	}
}
 80023e0:	bf00      	nop
 80023e2:	3728      	adds	r7, #40	; 0x28
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40015404 	.word	0x40015404
 80023ec:	20002984 	.word	0x20002984
 80023f0:	40021000 	.word	0x40021000
 80023f4:	20000334 	.word	0x20000334
 80023f8:	40020408 	.word	0x40020408
 80023fc:	40015424 	.word	0x40015424
 8002400:	48000400 	.word	0x48000400
 8002404:	2000037c 	.word	0x2000037c
 8002408:	4002041c 	.word	0x4002041c

0800240c <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002410:	e7fe      	b.n	8002410 <NMI_Handler+0x4>

08002412 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8002416:	e7fe      	b.n	8002416 <HardFault_Handler+0x4>

08002418 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 800241c:	e7fe      	b.n	800241c <MemManage_Handler+0x4>

0800241e <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8002422:	e7fe      	b.n	8002422 <BusFault_Handler+0x4>

08002424 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8002428:	e7fe      	b.n	8002428 <UsageFault_Handler+0x4>

0800242a <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8002458:	f001 fc66 	bl	8003d28 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}

08002460 <DMA1_Channel3_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 channel3 global interrupt.
 */
void DMA1_Channel3_IRQHandler(void) {
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

	/* USER CODE END DMA1_Channel3_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002464:	4802      	ldr	r0, [pc, #8]	; (8002470 <DMA1_Channel3_IRQHandler+0x10>)
 8002466:	f001 ffaa 	bl	80043be <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

	/* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000428 	.word	0x20000428

08002474 <SPI1_IRQHandler>:

/**
 * @brief This function handles SPI1 global interrupt.
 */
void SPI1_IRQHandler(void) {
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SPI1_IRQn 0 */

	/* USER CODE END SPI1_IRQn 0 */
	HAL_SPI_IRQHandler(&hspi1);
 8002478:	4802      	ldr	r0, [pc, #8]	; (8002484 <SPI1_IRQHandler+0x10>)
 800247a:	f005 fdf1 	bl	8008060 <HAL_SPI_IRQHandler>
	/* USER CODE BEGIN SPI1_IRQn 1 */

	/* USER CODE END SPI1_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	200003c4 	.word	0x200003c4

08002488 <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void) {
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(TOUCH_INT_Pin);
 800248c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002490:	f002 fa0e 	bl	80048b0 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 8002494:	bf00      	nop
 8002496:	bd80      	pop	{r7, pc}

08002498 <DMA2_Channel1_IRQHandler>:

/**
 * @brief This function handles DMA2 channel1 global interrupt.
 */
void DMA2_Channel1_IRQHandler(void) {
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

	/* USER CODE END DMA2_Channel1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_sai1_a);
 800249c:	4802      	ldr	r0, [pc, #8]	; (80024a8 <DMA2_Channel1_IRQHandler+0x10>)
 800249e:	f001 ff8e 	bl	80043be <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

	/* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000334 	.word	0x20000334

080024ac <DMA2_Channel2_IRQHandler>:

/**
 * @brief This function handles DMA2 channel2 global interrupt.
 */
void DMA2_Channel2_IRQHandler(void) {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

	/* USER CODE END DMA2_Channel2_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_sai1_b);
 80024b0:	4802      	ldr	r0, [pc, #8]	; (80024bc <DMA2_Channel2_IRQHandler+0x10>)
 80024b2:	f001 ff84 	bl	80043be <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

	/* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	2000037c 	.word	0x2000037c

080024c0 <SAI1_IRQHandler>:

/**
 * @brief This function handles SAI1 global interrupt.
 */
void SAI1_IRQHandler(void) {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SAI1_IRQn 0 */

	/* USER CODE END SAI1_IRQn 0 */
	HAL_SAI_IRQHandler(&hsai_BlockA1);
 80024c4:	4803      	ldr	r0, [pc, #12]	; (80024d4 <SAI1_IRQHandler+0x14>)
 80024c6:	f004 fb41 	bl	8006b4c <HAL_SAI_IRQHandler>
	HAL_SAI_IRQHandler(&hsai_BlockB1);
 80024ca:	4803      	ldr	r0, [pc, #12]	; (80024d8 <SAI1_IRQHandler+0x18>)
 80024cc:	f004 fb3e 	bl	8006b4c <HAL_SAI_IRQHandler>
	/* USER CODE BEGIN SAI1_IRQn 1 */

	/* USER CODE END SAI1_IRQn 1 */
}
 80024d0:	bf00      	nop
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	2000022c 	.word	0x2000022c
 80024d8:	200002b0 	.word	0x200002b0

080024dc <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
	return 1;
 80024e0:	2301      	movs	r3, #1
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <_kill>:

int _kill(int pid, int sig) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 80024f6:	f008 f86b 	bl	800a5d0 <__errno>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2216      	movs	r2, #22
 80024fe:	601a      	str	r2, [r3, #0]
	return -1;
 8002500:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002504:	4618      	mov	r0, r3
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <_exit>:

void _exit(int status) {
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002514:	f04f 31ff 	mov.w	r1, #4294967295
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff ffe7 	bl	80024ec <_kill>
	while (1) {
 800251e:	e7fe      	b.n	800251e <_exit+0x12>

08002520 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	e00a      	b.n	8002548 <_read+0x28>
		*ptr++ = __io_getchar();
 8002532:	f3af 8000 	nop.w
 8002536:	4601      	mov	r1, r0
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	60ba      	str	r2, [r7, #8]
 800253e:	b2ca      	uxtb	r2, r1
 8002540:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	3301      	adds	r3, #1
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	429a      	cmp	r2, r3
 800254e:	dbf0      	blt.n	8002532 <_read+0x12>
	}

	return len;
 8002550:	687b      	ldr	r3, [r7, #4]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 800255a:	b580      	push	{r7, lr}
 800255c:	b086      	sub	sp, #24
 800255e:	af00      	add	r7, sp, #0
 8002560:	60f8      	str	r0, [r7, #12]
 8002562:	60b9      	str	r1, [r7, #8]
 8002564:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	e009      	b.n	8002580 <_write+0x26>
		__io_putchar(*ptr++);
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	60ba      	str	r2, [r7, #8]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	3301      	adds	r3, #1
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	429a      	cmp	r2, r3
 8002586:	dbf1      	blt.n	800256c <_write+0x12>
	}
	return len;
 8002588:	687b      	ldr	r3, [r7, #4]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <_close>:

int _close(int file) {
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 800259a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800259e:	4618      	mov	r0, r3
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <_fstat>:

int _fstat(int file, struct stat *st) {
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025ba:	605a      	str	r2, [r3, #4]
	return 0;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <_isatty>:

int _isatty(int file) {
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80025d2:	2301      	movs	r3, #1
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
	...

080025fc <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8002604:	4a14      	ldr	r2, [pc, #80]	; (8002658 <_sbrk+0x5c>)
 8002606:	4b15      	ldr	r3, [pc, #84]	; (800265c <_sbrk+0x60>)
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002610:	4b13      	ldr	r3, [pc, #76]	; (8002660 <_sbrk+0x64>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d102      	bne.n	800261e <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8002618:	4b11      	ldr	r3, [pc, #68]	; (8002660 <_sbrk+0x64>)
 800261a:	4a12      	ldr	r2, [pc, #72]	; (8002664 <_sbrk+0x68>)
 800261c:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800261e:	4b10      	ldr	r3, [pc, #64]	; (8002660 <_sbrk+0x64>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4413      	add	r3, r2
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	429a      	cmp	r2, r3
 800262a:	d207      	bcs.n	800263c <_sbrk+0x40>
		errno = ENOMEM;
 800262c:	f007 ffd0 	bl	800a5d0 <__errno>
 8002630:	4603      	mov	r3, r0
 8002632:	220c      	movs	r2, #12
 8002634:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8002636:	f04f 33ff 	mov.w	r3, #4294967295
 800263a:	e009      	b.n	8002650 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 800263c:	4b08      	ldr	r3, [pc, #32]	; (8002660 <_sbrk+0x64>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002642:	4b07      	ldr	r3, [pc, #28]	; (8002660 <_sbrk+0x64>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4413      	add	r3, r2
 800264a:	4a05      	ldr	r2, [pc, #20]	; (8002660 <_sbrk+0x64>)
 800264c:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800264e:	68fb      	ldr	r3, [r7, #12]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	20010000 	.word	0x20010000
 800265c:	00000400 	.word	0x00000400
 8002660:	20002988 	.word	0x20002988
 8002664:	2000a9b8 	.word	0x2000a9b8

08002668 <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void) {
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 800266c:	4b06      	ldr	r3, [pc, #24]	; (8002688 <SystemInit+0x20>)
 800266e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002672:	4a05      	ldr	r2, [pc, #20]	; (8002688 <SystemInit+0x20>)
 8002674:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002678:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800267c:	bf00      	nop
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	e000ed00 	.word	0xe000ed00
 800268c:	00000000 	.word	0x00000000

08002690 <displayVUmeter>:
 */
#include <math.h>
#include "main.h"
#include "colors.h"

void displayVUmeter(uint16_t x0, uint16_t y0, int16_t percentage) {
 8002690:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002694:	b088      	sub	sp, #32
 8002696:	af02      	add	r7, sp, #8
 8002698:	4603      	mov	r3, r0
 800269a:	80fb      	strh	r3, [r7, #6]
 800269c:	460b      	mov	r3, r1
 800269e:	80bb      	strh	r3, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	807b      	strh	r3, [r7, #2]
	int16_t x1, x2, y1, y2;
	float angle;

	if (percentage > 100) {
 80026a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80026a8:	2b64      	cmp	r3, #100	; 0x64
 80026aa:	dd01      	ble.n	80026b0 <displayVUmeter+0x20>
		percentage = 100;
 80026ac:	2364      	movs	r3, #100	; 0x64
 80026ae:	807b      	strh	r3, [r7, #2]
	}
	ILI9488_DrawImage(x0, y0, VU_WIDTH, VU_HEIGHT, (uint8_t*) vu_meter_135x59, VU_WIDTH * VU_HEIGHT * 2);
 80026b0:	88b9      	ldrh	r1, [r7, #4]
 80026b2:	88f8      	ldrh	r0, [r7, #6]
 80026b4:	f643 633a 	movw	r3, #15930	; 0x3e3a
 80026b8:	9301      	str	r3, [sp, #4]
 80026ba:	4b77      	ldr	r3, [pc, #476]	; (8002898 <displayVUmeter+0x208>)
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	233b      	movs	r3, #59	; 0x3b
 80026c0:	2287      	movs	r2, #135	; 0x87
 80026c2:	f000 fba5 	bl	8002e10 <ILI9488_DrawImage>
	angle = (100.0 - percentage) * 1.68 / 100.0 + 0.73;
 80026c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fd ff2a 	bl	8000524 <__aeabi_i2d>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	f04f 0000 	mov.w	r0, #0
 80026d8:	4970      	ldr	r1, [pc, #448]	; (800289c <displayVUmeter+0x20c>)
 80026da:	f7fd fdd5 	bl	8000288 <__aeabi_dsub>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4610      	mov	r0, r2
 80026e4:	4619      	mov	r1, r3
 80026e6:	a364      	add	r3, pc, #400	; (adr r3, 8002878 <displayVUmeter+0x1e8>)
 80026e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ec:	f7fd ff84 	bl	80005f8 <__aeabi_dmul>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4610      	mov	r0, r2
 80026f6:	4619      	mov	r1, r3
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	4b67      	ldr	r3, [pc, #412]	; (800289c <displayVUmeter+0x20c>)
 80026fe:	f7fe f8a5 	bl	800084c <__aeabi_ddiv>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4610      	mov	r0, r2
 8002708:	4619      	mov	r1, r3
 800270a:	a35d      	add	r3, pc, #372	; (adr r3, 8002880 <displayVUmeter+0x1f0>)
 800270c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002710:	f7fd fdbc 	bl	800028c <__adddf3>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4610      	mov	r0, r2
 800271a:	4619      	mov	r1, r3
 800271c:	f7fe fa44 	bl	8000ba8 <__aeabi_d2f>
 8002720:	4603      	mov	r3, r0
 8002722:	617b      	str	r3, [r7, #20]
	x1 = (int16_t) (x0 + 66.1 + 68 * cos(angle));
 8002724:	88fb      	ldrh	r3, [r7, #6]
 8002726:	4618      	mov	r0, r3
 8002728:	f7fd fefc 	bl	8000524 <__aeabi_i2d>
 800272c:	a356      	add	r3, pc, #344	; (adr r3, 8002888 <displayVUmeter+0x1f8>)
 800272e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002732:	f7fd fdab 	bl	800028c <__adddf3>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	4614      	mov	r4, r2
 800273c:	461d      	mov	r5, r3
 800273e:	6978      	ldr	r0, [r7, #20]
 8002740:	f7fd ff02 	bl	8000548 <__aeabi_f2d>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	ec43 2b10 	vmov	d0, r2, r3
 800274c:	f00a fc88 	bl	800d060 <cos>
 8002750:	ec51 0b10 	vmov	r0, r1, d0
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	4b51      	ldr	r3, [pc, #324]	; (80028a0 <displayVUmeter+0x210>)
 800275a:	f7fd ff4d 	bl	80005f8 <__aeabi_dmul>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	4620      	mov	r0, r4
 8002764:	4629      	mov	r1, r5
 8002766:	f7fd fd91 	bl	800028c <__adddf3>
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	4610      	mov	r0, r2
 8002770:	4619      	mov	r1, r3
 8002772:	f7fe f9f1 	bl	8000b58 <__aeabi_d2iz>
 8002776:	4603      	mov	r3, r0
 8002778:	827b      	strh	r3, [r7, #18]
	y1 = (int16_t) (y0 + 79.5 - 68 * sin(angle));
 800277a:	88bb      	ldrh	r3, [r7, #4]
 800277c:	4618      	mov	r0, r3
 800277e:	f7fd fed1 	bl	8000524 <__aeabi_i2d>
 8002782:	a343      	add	r3, pc, #268	; (adr r3, 8002890 <displayVUmeter+0x200>)
 8002784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002788:	f7fd fd80 	bl	800028c <__adddf3>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	4614      	mov	r4, r2
 8002792:	461d      	mov	r5, r3
 8002794:	6978      	ldr	r0, [r7, #20]
 8002796:	f7fd fed7 	bl	8000548 <__aeabi_f2d>
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	ec43 2b10 	vmov	d0, r2, r3
 80027a2:	f00a fcb1 	bl	800d108 <sin>
 80027a6:	ec51 0b10 	vmov	r0, r1, d0
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	4b3c      	ldr	r3, [pc, #240]	; (80028a0 <displayVUmeter+0x210>)
 80027b0:	f7fd ff22 	bl	80005f8 <__aeabi_dmul>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4620      	mov	r0, r4
 80027ba:	4629      	mov	r1, r5
 80027bc:	f7fd fd64 	bl	8000288 <__aeabi_dsub>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4610      	mov	r0, r2
 80027c6:	4619      	mov	r1, r3
 80027c8:	f7fe f9c6 	bl	8000b58 <__aeabi_d2iz>
 80027cc:	4603      	mov	r3, r0
 80027ce:	823b      	strh	r3, [r7, #16]
	x2 = (int16_t) (x0 + 66.1 + 20.5 * cos(angle) / sin(angle));
 80027d0:	88fb      	ldrh	r3, [r7, #6]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fd fea6 	bl	8000524 <__aeabi_i2d>
 80027d8:	a32b      	add	r3, pc, #172	; (adr r3, 8002888 <displayVUmeter+0x1f8>)
 80027da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027de:	f7fd fd55 	bl	800028c <__adddf3>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	4614      	mov	r4, r2
 80027e8:	461d      	mov	r5, r3
 80027ea:	6978      	ldr	r0, [r7, #20]
 80027ec:	f7fd feac 	bl	8000548 <__aeabi_f2d>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	ec43 2b10 	vmov	d0, r2, r3
 80027f8:	f00a fc32 	bl	800d060 <cos>
 80027fc:	ec51 0b10 	vmov	r0, r1, d0
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	4b27      	ldr	r3, [pc, #156]	; (80028a4 <displayVUmeter+0x214>)
 8002806:	f7fd fef7 	bl	80005f8 <__aeabi_dmul>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4690      	mov	r8, r2
 8002810:	4699      	mov	r9, r3
 8002812:	6978      	ldr	r0, [r7, #20]
 8002814:	f7fd fe98 	bl	8000548 <__aeabi_f2d>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	ec43 2b10 	vmov	d0, r2, r3
 8002820:	f00a fc72 	bl	800d108 <sin>
 8002824:	ec53 2b10 	vmov	r2, r3, d0
 8002828:	4640      	mov	r0, r8
 800282a:	4649      	mov	r1, r9
 800282c:	f7fe f80e 	bl	800084c <__aeabi_ddiv>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4620      	mov	r0, r4
 8002836:	4629      	mov	r1, r5
 8002838:	f7fd fd28 	bl	800028c <__adddf3>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4610      	mov	r0, r2
 8002842:	4619      	mov	r1, r3
 8002844:	f7fe f988 	bl	8000b58 <__aeabi_d2iz>
 8002848:	4603      	mov	r3, r0
 800284a:	81fb      	strh	r3, [r7, #14]
	y2 = (int16_t) (y0 + 59);
 800284c:	88bb      	ldrh	r3, [r7, #4]
 800284e:	333b      	adds	r3, #59	; 0x3b
 8002850:	b29b      	uxth	r3, r3
 8002852:	81bb      	strh	r3, [r7, #12]
	Displ_Line(x1, y1, x2, y2, BLACK);
 8002854:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002858:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800285c:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8002860:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 8002864:	2400      	movs	r4, #0
 8002866:	9400      	str	r4, [sp, #0]
 8002868:	f000 fbee 	bl	8003048 <Displ_Line>
}
 800286c:	bf00      	nop
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002876:	bf00      	nop
 8002878:	ae147ae1 	.word	0xae147ae1
 800287c:	3ffae147 	.word	0x3ffae147
 8002880:	f5c28f5c 	.word	0xf5c28f5c
 8002884:	3fe75c28 	.word	0x3fe75c28
 8002888:	66666666 	.word	0x66666666
 800288c:	40508666 	.word	0x40508666
 8002890:	00000000 	.word	0x00000000
 8002894:	4053e000 	.word	0x4053e000
 8002898:	0800fdcc 	.word	0x0800fdcc
 800289c:	40590000 	.word	0x40590000
 80028a0:	40510000 	.word	0x40510000
 80028a4:	40348000 	.word	0x40348000

080028a8 <initVUmeter>:

void initVUmeter(uint16_t x0, uint16_t y0) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	4603      	mov	r3, r0
 80028b0:	460a      	mov	r2, r1
 80028b2:	80fb      	strh	r3, [r7, #6]
 80028b4:	4613      	mov	r3, r2
 80028b6:	80bb      	strh	r3, [r7, #4]
	Displ_fillRoundRect(x0 - 5, y0 - 5, VU_WIDTH + 10, VU_HEIGHT + 10, 3, FRAME_COLOR);
 80028b8:	88fb      	ldrh	r3, [r7, #6]
 80028ba:	3b05      	subs	r3, #5
 80028bc:	b29b      	uxth	r3, r3
 80028be:	b218      	sxth	r0, r3
 80028c0:	88bb      	ldrh	r3, [r7, #4]
 80028c2:	3b05      	subs	r3, #5
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	b219      	sxth	r1, r3
 80028c8:	2300      	movs	r3, #0
 80028ca:	9301      	str	r3, [sp, #4]
 80028cc:	2303      	movs	r3, #3
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	2345      	movs	r3, #69	; 0x45
 80028d2:	2291      	movs	r2, #145	; 0x91
 80028d4:	f000 fde8 	bl	80034a8 <Displ_fillRoundRect>
	ILI9488_DrawImage(x0, y0, VU_WIDTH, VU_HEIGHT, (uint8_t*) vu_meter_135x59, VU_WIDTH * VU_HEIGHT * 2);
 80028d8:	88b9      	ldrh	r1, [r7, #4]
 80028da:	88f8      	ldrh	r0, [r7, #6]
 80028dc:	f643 633a 	movw	r3, #15930	; 0x3e3a
 80028e0:	9301      	str	r3, [sp, #4]
 80028e2:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <initVUmeter+0x50>)
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	233b      	movs	r3, #59	; 0x3b
 80028e8:	2287      	movs	r2, #135	; 0x87
 80028ea:	f000 fa91 	bl	8002e10 <ILI9488_DrawImage>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	0800fdcc 	.word	0x0800fdcc

080028fc <Displ_Select>:

/******************************************
 * @brief	enable display, disabling touch
 * 			device selected if CS low
 ******************************************/
void Displ_Select(void) {
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
	if (TOUCH_SPI == DISPL_SPI) {											// if SPI port shared (display <-> touch)
		if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {					// if display not yet selected
 8002900:	2120      	movs	r1, #32
 8002902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002906:	f001 ffa3 	bl	8004850 <HAL_GPIO_ReadPin>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d015      	beq.n	800293c <Displ_Select+0x40>
			HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); 		// unselect touch
 8002910:	2201      	movs	r2, #1
 8002912:	2102      	movs	r1, #2
 8002914:	480a      	ldr	r0, [pc, #40]	; (8002940 <Displ_Select+0x44>)
 8002916:	f001 ffb3 	bl	8004880 <HAL_GPIO_WritePin>
			SET_DISPL_SPI_BAUDRATE
 800291a:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <Displ_Select+0x48>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	4909      	ldr	r1, [pc, #36]	; (8002944 <Displ_Select+0x48>)
 8002920:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8002924:	4013      	ands	r3, r2
 8002926:	600b      	str	r3, [r1, #0]
 8002928:	4b06      	ldr	r3, [pc, #24]	; (8002944 <Displ_Select+0x48>)
 800292a:	4a06      	ldr	r2, [pc, #24]	; (8002944 <Displ_Select+0x48>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6013      	str	r3, [r2, #0]
			;				   									//change SPI port speed as per display needs
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);	// select display
 8002930:	2200      	movs	r2, #0
 8002932:	2120      	movs	r1, #32
 8002934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002938:	f001 ffa2 	bl	8004880 <HAL_GPIO_WritePin>
		}
	}
}
 800293c:	bf00      	nop
 800293e:	bd80      	pop	{r7, pc}
 8002940:	48000400 	.word	0x48000400
 8002944:	40013000 	.word	0x40013000

08002948 <Displ_Transmit>:
 * @PARAM	DC_Status 	indicates if sending command or data
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t *data, uint16_t dataSize, uint8_t isTouchGFXBuffer) {
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6039      	str	r1, [r7, #0]
 8002950:	4611      	mov	r1, r2
 8002952:	461a      	mov	r2, r3
 8002954:	4603      	mov	r3, r0
 8002956:	71fb      	strb	r3, [r7, #7]
 8002958:	460b      	mov	r3, r1
 800295a:	80bb      	strh	r3, [r7, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {
 8002960:	bf00      	nop
 8002962:	4b23      	ldr	r3, [pc, #140]	; (80029f0 <Displ_Transmit+0xa8>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0fa      	beq.n	8002962 <Displ_Transmit+0x1a>
	};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback

	Displ_Select();
 800296c:	f7ff ffc6 	bl	80028fc <Displ_Select>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 8002970:	79fb      	ldrb	r3, [r7, #7]
 8002972:	461a      	mov	r2, r3
 8002974:	2110      	movs	r1, #16
 8002976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800297a:	f001 ff81 	bl	8004880 <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer) {
 800297e:	79bb      	ldrb	r3, [r7, #6]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d016      	beq.n	80029b2 <Displ_Transmit+0x6a>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
		uint32_t *limit = (uint32_t*) (data + dataSize);
 8002984:	88bb      	ldrh	r3, [r7, #4]
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	4413      	add	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
		for (uint32_t *data32 = (uint32_t*) data; data32 < limit; data32++) {
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	e00b      	b.n	80029aa <Displ_Transmit+0x62>
			*data32 = __REV16(*data32);
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	60fb      	str	r3, [r7, #12]
 \return               Reversed value
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value) {
	uint32_t result;

	__ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	ba5b      	rev16	r3, r3
 800299c:	60bb      	str	r3, [r7, #8]
	return result;
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	601a      	str	r2, [r3, #0]
		for (uint32_t *data32 = (uint32_t*) data; data32 < limit; data32++) {
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	3304      	adds	r3, #4
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d3ef      	bcc.n	8002992 <Displ_Transmit+0x4a>
#ifdef DISPLAY_SPI_INTERRUPT_MODE
		Displ_SpiAvailable=0;
		HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
	if (dataSize < DISPL_DMA_CUTOFF) {
 80029b2:	88bb      	ldrh	r3, [r7, #4]
 80029b4:	2b13      	cmp	r3, #19
 80029b6:	d80d      	bhi.n	80029d4 <Displ_Transmit+0x8c>
#endif //DISPLAY_SPI_DMA_MODE
		Displ_SpiAvailable = 0;
 80029b8:	4b0d      	ldr	r3, [pc, #52]	; (80029f0 <Displ_Transmit+0xa8>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&DISPL_SPI_PORT, data, dataSize, HAL_MAX_DELAY);
 80029be:	88ba      	ldrh	r2, [r7, #4]
 80029c0:	f04f 33ff 	mov.w	r3, #4294967295
 80029c4:	6839      	ldr	r1, [r7, #0]
 80029c6:	480b      	ldr	r0, [pc, #44]	; (80029f4 <Displ_Transmit+0xac>)
 80029c8:	f004 fda5 	bl	8007516 <HAL_SPI_Transmit>
		Displ_SpiAvailable = 1;
 80029cc:	4b08      	ldr	r3, [pc, #32]	; (80029f0 <Displ_Transmit+0xa8>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	701a      	strb	r2, [r3, #0]
		Displ_SpiAvailable = 0;
		HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT, data, dataSize);
	}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
}
 80029d2:	e008      	b.n	80029e6 <Displ_Transmit+0x9e>
		Displ_SpiAvailable = 0;
 80029d4:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <Displ_Transmit+0xa8>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT, data, dataSize);
 80029da:	88bb      	ldrh	r3, [r7, #4]
 80029dc:	461a      	mov	r2, r3
 80029de:	6839      	ldr	r1, [r7, #0]
 80029e0:	4804      	ldr	r0, [pc, #16]	; (80029f4 <Displ_Transmit+0xac>)
 80029e2:	f005 fa49 	bl	8007e78 <HAL_SPI_Transmit_DMA>
}
 80029e6:	bf00      	nop
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	2000002c 	.word	0x2000002c
 80029f4:	200003c4 	.word	0x200003c4

080029f8 <Displ_WriteCommand>:

/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd) {
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	71fb      	strb	r3, [r7, #7]
	Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd), 0);
 8002a02:	1df9      	adds	r1, r7, #7
 8002a04:	2300      	movs	r3, #0
 8002a06:	2201      	movs	r2, #1
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f7ff ff9d 	bl	8002948 <Displ_Transmit>
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t *buff, size_t buff_size, uint8_t isTouchGFXBuffer) {
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b084      	sub	sp, #16
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	60f8      	str	r0, [r7, #12]
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	4613      	mov	r3, r2
 8002a22:	71fb      	strb	r3, [r7, #7]
	if (buff_size == 0)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d007      	beq.n	8002a3a <Displ_WriteData+0x24>
		return;
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	68f9      	ldr	r1, [r7, #12]
 8002a32:	2001      	movs	r0, #1
 8002a34:	f7ff ff88 	bl	8002948 <Displ_Transmit>
 8002a38:	e000      	b.n	8002a3c <Displ_WriteData+0x26>
		return;
 8002a3a:	bf00      	nop
}
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <ILI9XXX_Init>:

/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init() {
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
	Displ_Select();
 8002a48:	f7ff ff58 	bl	80028fc <Displ_Select>

	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a56:	f001 ff13 	bl	8004880 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002a5a:	2001      	movs	r0, #1
 8002a5c:	f001 f984 	bl	8003d68 <HAL_Delay>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8002a60:	2201      	movs	r2, #1
 8002a62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a6a:	f001 ff09 	bl	8004880 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8002a6e:	2096      	movs	r0, #150	; 0x96
 8002a70:	f001 f97a 	bl	8003d68 <HAL_Delay>
	 data[2]=0x30; //default 0x30
	 Displ_WriteData(data,3);
	 #endif
	 */

	Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8002a74:	203a      	movs	r0, #58	; 0x3a
 8002a76:	f7ff ffbf 	bl	80029f8 <Displ_WriteCommand>
#ifdef Z_RGB666
	Displ_WriteData((uint8_t *)"\x66",1,0);		// RGB666
#endif
#ifdef Z_RGB565
	Displ_WriteData((uint8_t*) "\x55", 1, 0);		// RGB565
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	4810      	ldr	r0, [pc, #64]	; (8002ac0 <ILI9XXX_Init+0x7c>)
 8002a80:	f7ff ffc9 	bl	8002a16 <Displ_WriteData>
#endif
	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8002a84:	20b0      	movs	r0, #176	; 0xb0
 8002a86:	f7ff ffb7 	bl	80029f8 <Displ_WriteCommand>
	Displ_WriteData((uint8_t*) "\x80", 1, 0);        // disable MISO pin
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	480d      	ldr	r0, [pc, #52]	; (8002ac4 <ILI9XXX_Init+0x80>)
 8002a90:	f7ff ffc1 	bl	8002a16 <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8002a94:	20b0      	movs	r0, #176	; 0xb0
 8002a96:	f7ff ffaf 	bl	80029f8 <Displ_WriteCommand>
	Displ_WriteData((uint8_t*) "\x80", 1, 0);        // disable MISO pin
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	4809      	ldr	r0, [pc, #36]	; (8002ac4 <ILI9XXX_Init+0x80>)
 8002aa0:	f7ff ffb9 	bl	8002a16 <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8002aa4:	2011      	movs	r0, #17
 8002aa6:	f7ff ffa7 	bl	80029f8 <Displ_WriteCommand>
	HAL_Delay(120);
 8002aaa:	2078      	movs	r0, #120	; 0x78
 8002aac:	f001 f95c 	bl	8003d68 <HAL_Delay>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 8002ab0:	2029      	movs	r0, #41	; 0x29
 8002ab2:	f7ff ffa1 	bl	80029f8 <Displ_WriteCommand>
	HAL_Delay(5);
 8002ab6:	2005      	movs	r0, #5
 8002ab8:	f001 f956 	bl	8003d68 <HAL_Delay>

}
 8002abc:	bf00      	nop
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	0800e630 	.word	0x0800e630
 8002ac4:	0800e634 	.word	0x0800e634

08002ac8 <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8002ac8:	b590      	push	{r4, r7, lr}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4604      	mov	r4, r0
 8002ad0:	4608      	mov	r0, r1
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	4623      	mov	r3, r4
 8002ad8:	80fb      	strh	r3, [r7, #6]
 8002ada:	4603      	mov	r3, r0
 8002adc:	80bb      	strh	r3, [r7, #4]
 8002ade:	460b      	mov	r3, r1
 8002ae0:	807b      	strh	r3, [r7, #2]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t*) data)[0] = (((x2 & 0xFF) << 24) | ((x2 & 0xFF00) << 8) | ((x1 & 0xFF) << 8) | ((x1 & 0xFF00) >> 8));
 8002ae6:	887b      	ldrh	r3, [r7, #2]
 8002ae8:	061a      	lsls	r2, r3, #24
 8002aea:	887b      	ldrh	r3, [r7, #2]
 8002aec:	021b      	lsls	r3, r3, #8
 8002aee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002af2:	431a      	orrs	r2, r3
 8002af4:	88fb      	ldrh	r3, [r7, #6]
 8002af6:	021b      	lsls	r3, r3, #8
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	4313      	orrs	r3, r2
 8002afc:	88fa      	ldrh	r2, [r7, #6]
 8002afe:	0a12      	lsrs	r2, r2, #8
 8002b00:	b292      	uxth	r2, r2
 8002b02:	431a      	orrs	r2, r3
 8002b04:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <Displ_SetAddressWindow+0x90>)
 8002b06:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 8002b08:	202a      	movs	r0, #42	; 0x2a
 8002b0a:	f7ff ff75 	bl	80029f8 <Displ_WriteCommand>
	Displ_WriteData(data, 4, 0);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2104      	movs	r1, #4
 8002b12:	4811      	ldr	r0, [pc, #68]	; (8002b58 <Displ_SetAddressWindow+0x90>)
 8002b14:	f7ff ff7f 	bl	8002a16 <Displ_WriteData>

	((uint32_t*) data)[0] = (((y2 & 0xFF) << 24) | ((y2 & 0xFF00) << 8) | ((y1 & 0xFF) << 8) | ((y1 & 0xFF00) >> 8));
 8002b18:	883b      	ldrh	r3, [r7, #0]
 8002b1a:	061a      	lsls	r2, r3, #24
 8002b1c:	883b      	ldrh	r3, [r7, #0]
 8002b1e:	021b      	lsls	r3, r3, #8
 8002b20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002b24:	431a      	orrs	r2, r3
 8002b26:	88bb      	ldrh	r3, [r7, #4]
 8002b28:	021b      	lsls	r3, r3, #8
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	88ba      	ldrh	r2, [r7, #4]
 8002b30:	0a12      	lsrs	r2, r2, #8
 8002b32:	b292      	uxth	r2, r2
 8002b34:	431a      	orrs	r2, r3
 8002b36:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <Displ_SetAddressWindow+0x90>)
 8002b38:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 8002b3a:	202b      	movs	r0, #43	; 0x2b
 8002b3c:	f7ff ff5c 	bl	80029f8 <Displ_WriteCommand>
	Displ_WriteData(data, 4, 0);
 8002b40:	2200      	movs	r2, #0
 8002b42:	2104      	movs	r1, #4
 8002b44:	4804      	ldr	r0, [pc, #16]	; (8002b58 <Displ_SetAddressWindow+0x90>)
 8002b46:	f7ff ff66 	bl	8002a16 <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 8002b4a:	202c      	movs	r0, #44	; 0x2c
 8002b4c:	f7ff ff54 	bl	80029f8 <Displ_WriteCommand>
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd90      	pop	{r4, r7, pc}
 8002b58:	2000a994 	.word	0x2000a994

08002b5c <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation) {
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	71fb      	strb	r3, [r7, #7]
	if (TOUCH_SPI == DISPL_SPI) {										// if touch and display share the same SPI port
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); // unselect display (will be selected at writing time)
 8002b66:	2201      	movs	r2, #1
 8002b68:	2120      	movs	r1, #32
 8002b6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b6e:	f001 fe87 	bl	8004880 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);// unselect touch (will be selected at writing time)
 8002b72:	2201      	movs	r2, #1
 8002b74:	2102      	movs	r1, #2
 8002b76:	4806      	ldr	r0, [pc, #24]	; (8002b90 <Displ_Init+0x34>)
 8002b78:	f001 fe82 	bl	8004880 <HAL_GPIO_WritePin>
		;
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
		SET_TOUCH_SPI_BAUDRATE
		;
	}
	ILI9XXX_Init();
 8002b7c:	f7ff ff62 	bl	8002a44 <ILI9XXX_Init>
	Displ_Orientation(orientation);
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 f806 	bl	8002b94 <Displ_Orientation>
}
 8002b88:	bf00      	nop
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	48000400 	.word	0x48000400

08002b94 <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation) {
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	71fb      	strb	r3, [r7, #7]
	static uint8_t data[1];
	switch (orientation) {
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	d837      	bhi.n	8002c14 <Displ_Orientation+0x80>
 8002ba4:	a201      	add	r2, pc, #4	; (adr r2, 8002bac <Displ_Orientation+0x18>)
 8002ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002baa:	bf00      	nop
 8002bac:	08002bbd 	.word	0x08002bbd
 8002bb0:	08002bd3 	.word	0x08002bd3
 8002bb4:	08002be9 	.word	0x08002be9
 8002bb8:	08002bff 	.word	0x08002bff
	case Displ_Orientat_0:
		data[0] = ILI9XXX_MADCTL_0DEG;
 8002bbc:	4b1d      	ldr	r3, [pc, #116]	; (8002c34 <Displ_Orientation+0xa0>)
 8002bbe:	2288      	movs	r2, #136	; 0x88
 8002bc0:	701a      	strb	r2, [r3, #0]
		_height = DISPL_HEIGHT;
 8002bc2:	4b1d      	ldr	r3, [pc, #116]	; (8002c38 <Displ_Orientation+0xa4>)
 8002bc4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002bc8:	801a      	strh	r2, [r3, #0]
		_width = DISPL_WIDTH;
 8002bca:	4b1c      	ldr	r3, [pc, #112]	; (8002c3c <Displ_Orientation+0xa8>)
 8002bcc:	22f0      	movs	r2, #240	; 0xf0
 8002bce:	801a      	strh	r2, [r3, #0]
		break;
 8002bd0:	e020      	b.n	8002c14 <Displ_Orientation+0x80>
	case Displ_Orientat_90:
		data[0] = ILI9XXX_MADCTL_90DEG;
 8002bd2:	4b18      	ldr	r3, [pc, #96]	; (8002c34 <Displ_Orientation+0xa0>)
 8002bd4:	22e8      	movs	r2, #232	; 0xe8
 8002bd6:	701a      	strb	r2, [r3, #0]
		_height = DISPL_WIDTH;
 8002bd8:	4b17      	ldr	r3, [pc, #92]	; (8002c38 <Displ_Orientation+0xa4>)
 8002bda:	22f0      	movs	r2, #240	; 0xf0
 8002bdc:	801a      	strh	r2, [r3, #0]
		_width = DISPL_HEIGHT;
 8002bde:	4b17      	ldr	r3, [pc, #92]	; (8002c3c <Displ_Orientation+0xa8>)
 8002be0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002be4:	801a      	strh	r2, [r3, #0]
		break;
 8002be6:	e015      	b.n	8002c14 <Displ_Orientation+0x80>
	case Displ_Orientat_180:
		data[0] = ILI9XXX_MADCTL_180DEG;
 8002be8:	4b12      	ldr	r3, [pc, #72]	; (8002c34 <Displ_Orientation+0xa0>)
 8002bea:	2248      	movs	r2, #72	; 0x48
 8002bec:	701a      	strb	r2, [r3, #0]
		_height = DISPL_HEIGHT;
 8002bee:	4b12      	ldr	r3, [pc, #72]	; (8002c38 <Displ_Orientation+0xa4>)
 8002bf0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002bf4:	801a      	strh	r2, [r3, #0]
		_width = DISPL_WIDTH;
 8002bf6:	4b11      	ldr	r3, [pc, #68]	; (8002c3c <Displ_Orientation+0xa8>)
 8002bf8:	22f0      	movs	r2, #240	; 0xf0
 8002bfa:	801a      	strh	r2, [r3, #0]
		break;
 8002bfc:	e00a      	b.n	8002c14 <Displ_Orientation+0x80>
	case Displ_Orientat_270:
		data[0] = ILI9XXX_MADCTL_270DEG;
 8002bfe:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <Displ_Orientation+0xa0>)
 8002c00:	2228      	movs	r2, #40	; 0x28
 8002c02:	701a      	strb	r2, [r3, #0]
		_height = DISPL_WIDTH;
 8002c04:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <Displ_Orientation+0xa4>)
 8002c06:	22f0      	movs	r2, #240	; 0xf0
 8002c08:	801a      	strh	r2, [r3, #0]
		_width = DISPL_HEIGHT;
 8002c0a:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <Displ_Orientation+0xa8>)
 8002c0c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002c10:	801a      	strh	r2, [r3, #0]
		break;
 8002c12:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 8002c14:	2036      	movs	r0, #54	; 0x36
 8002c16:	f7ff feef 	bl	80029f8 <Displ_WriteCommand>
	Displ_WriteData(data, 1, 0);
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	4805      	ldr	r0, [pc, #20]	; (8002c34 <Displ_Orientation+0xa0>)
 8002c20:	f7ff fef9 	bl	8002a16 <Displ_WriteData>
	current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 8002c24:	4a06      	ldr	r2, [pc, #24]	; (8002c40 <Displ_Orientation+0xac>)
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	7013      	strb	r3, [r2, #0]
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	2000a998 	.word	0x2000a998
 8002c38:	20002990 	.word	0x20002990
 8002c3c:	2000298e 	.word	0x2000298e
 8002c40:	2000298c 	.word	0x2000298c

08002c44 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == DISPL_SPI) {
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a05      	ldr	r2, [pc, #20]	; (8002c68 <HAL_SPI_ErrorCallback+0x24>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d102      	bne.n	8002c5c <HAL_SPI_ErrorCallback+0x18>
		Displ_SpiAvailable = 1;
 8002c56:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <HAL_SPI_ErrorCallback+0x28>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	701a      	strb	r2, [r3, #0]
	}
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	40013000 	.word	0x40013000
 8002c6c:	2000002c 	.word	0x2000002c

08002c70 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == DISPL_SPI) {
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a05      	ldr	r2, [pc, #20]	; (8002c94 <HAL_SPI_TxCpltCallback+0x24>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d102      	bne.n	8002c88 <HAL_SPI_TxCpltCallback+0x18>
		Displ_SpiAvailable = 1;
 8002c82:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <HAL_SPI_TxCpltCallback+0x28>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	701a      	strb	r2, [r3, #0]
#ifdef DISPLAY_USING_TOUCHGFX
		DisplayDriver_TransferCompleteCallback();
	#endif

	}
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	40013000 	.word	0x40013000
 8002c98:	2000002c 	.word	0x2000002c

08002c9c <Displ_FillArea>:
/*****************************
 * @brief	fill a rectangle with a color
 * @param	x, y	top left corner of the rectangle
 * 			w, h 	width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002c9c:	b590      	push	{r4, r7, lr}
 8002c9e:	b08b      	sub	sp, #44	; 0x2c
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4604      	mov	r4, r0
 8002ca4:	4608      	mov	r0, r1
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4623      	mov	r3, r4
 8002cac:	80fb      	strh	r3, [r7, #6]
 8002cae:	4603      	mov	r3, r0
 8002cb0:	80bb      	strh	r3, [r7, #4]
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	807b      	strh	r3, [r7, #2]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	803b      	strh	r3, [r7, #0]
	 * -	swap buffers
	 */

	uint32_t k, x1, y1, area, times;

	if ((x >= _width) || (y >= _height) || (w == 0) || (h == 0))
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	4a4f      	ldr	r2, [pc, #316]	; (8002dfc <Displ_FillArea+0x160>)
 8002cbe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	f280 8096 	bge.w	8002df4 <Displ_FillArea+0x158>
 8002cc8:	88bb      	ldrh	r3, [r7, #4]
 8002cca:	4a4d      	ldr	r2, [pc, #308]	; (8002e00 <Displ_FillArea+0x164>)
 8002ccc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	f280 808f 	bge.w	8002df4 <Displ_FillArea+0x158>
 8002cd6:	887b      	ldrh	r3, [r7, #2]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 808b 	beq.w	8002df4 <Displ_FillArea+0x158>
 8002cde:	883b      	ldrh	r3, [r7, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 8087 	beq.w	8002df4 <Displ_FillArea+0x158>
		return;  //

	x1 = x + w - 1;
 8002ce6:	88fa      	ldrh	r2, [r7, #6]
 8002ce8:	887b      	ldrh	r3, [r7, #2]
 8002cea:	4413      	add	r3, r2
 8002cec:	3b01      	subs	r3, #1
 8002cee:	623b      	str	r3, [r7, #32]
	if (x1 > _width) {
 8002cf0:	4b42      	ldr	r3, [pc, #264]	; (8002dfc <Displ_FillArea+0x160>)
 8002cf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d903      	bls.n	8002d06 <Displ_FillArea+0x6a>
		x1 = _width;
 8002cfe:	4b3f      	ldr	r3, [pc, #252]	; (8002dfc <Displ_FillArea+0x160>)
 8002d00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d04:	623b      	str	r3, [r7, #32]
	}

	y1 = y + h - 1;
 8002d06:	88ba      	ldrh	r2, [r7, #4]
 8002d08:	883b      	ldrh	r3, [r7, #0]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	61fb      	str	r3, [r7, #28]
	if (y1 > _height) {
 8002d10:	4b3b      	ldr	r3, [pc, #236]	; (8002e00 <Displ_FillArea+0x164>)
 8002d12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d16:	461a      	mov	r2, r3
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d903      	bls.n	8002d26 <Displ_FillArea+0x8a>
		y1 = _height;
 8002d1e:	4b38      	ldr	r3, [pc, #224]	; (8002e00 <Displ_FillArea+0x164>)
 8002d20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d24:	61fb      	str	r3, [r7, #28]
// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

	uint32_t data32;

	data32 = (color >> 8) | (color << 8) | (color << 24); // supposing color is 0xABCD, data32 becomes 0xCDABCDAB - set a 32 bit variable with swapped endians
 8002d26:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002d28:	0a1b      	lsrs	r3, r3, #8
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002d30:	021b      	lsls	r3, r3, #8
 8002d32:	431a      	orrs	r2, r3
 8002d34:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002d36:	061b      	lsls	r3, r3, #24
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]
	area = ((y1 - y + 1) * (x1 - x + 1)); 						// area to fill in 16bit pixels
 8002d3c:	88bb      	ldrh	r3, [r7, #4]
 8002d3e:	69fa      	ldr	r2, [r7, #28]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	3301      	adds	r3, #1
 8002d44:	88fa      	ldrh	r2, [r7, #6]
 8002d46:	6a39      	ldr	r1, [r7, #32]
 8002d48:	1a8a      	subs	r2, r1, r2
 8002d4a:	3201      	adds	r2, #1
 8002d4c:	fb02 f303 	mul.w	r3, r2, r3
 8002d50:	60fb      	str	r3, [r7, #12]
	uint32_t *buf32Pos = (uint32_t*) dispBuffer; 	//dispBuffer defined in bytes, buf32Pos access it as 32 bit words
 8002d52:	4b2c      	ldr	r3, [pc, #176]	; (8002e04 <Displ_FillArea+0x168>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	617b      	str	r3, [r7, #20]
	if (area < (SIZEBUF >> 1)) 							// if area is smaller than dispBuffer
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d5e:	d204      	bcs.n	8002d6a <Displ_FillArea+0xce>
		times = (area >> 1) + 1; 							// number of times data32 has to be loaded into buffer
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	085b      	lsrs	r3, r3, #1
 8002d64:	3301      	adds	r3, #1
 8002d66:	61bb      	str	r3, [r7, #24]
 8002d68:	e002      	b.n	8002d70 <Displ_FillArea+0xd4>
	else
		times = (SIZEBUF >> 2);  						// dispBuffer size as 32bit-words
 8002d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d6e:	61bb      	str	r3, [r7, #24]
	for (k = 0; k < times; k++)
 8002d70:	2300      	movs	r3, #0
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
 8002d74:	e007      	b.n	8002d86 <Displ_FillArea+0xea>
		*(buf32Pos++) = data32; 						// loads buffer moving 32bit-words
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	1d1a      	adds	r2, r3, #4
 8002d7a:	617a      	str	r2, [r7, #20]
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	601a      	str	r2, [r3, #0]
	for (k = 0; k < times; k++)
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	3301      	adds	r3, #1
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
 8002d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d3f3      	bcc.n	8002d76 <Displ_FillArea+0xda>
	}
	datasize=(buf8Pos-dispBuffer);
#endif

//START WRITING TO DISPLAY
	Displ_SetAddressWindow(x, y, x1, y1);
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	88b9      	ldrh	r1, [r7, #4]
 8002d98:	88f8      	ldrh	r0, [r7, #6]
 8002d9a:	f7ff fe95 	bl	8002ac8 <Displ_SetAddressWindow>

#ifdef Z_RGB565 // transferring RGB666 format dispBuffer
	times = (area >> (BUFLEVEL - 1)); //how many times buffer must be sent via SPI. It is (BUFFLEVEL-1) because area is 16-bit while dispBuffer is 8-bit
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	0b5b      	lsrs	r3, r3, #13
 8002da2:	61bb      	str	r3, [r7, #24]
	for (k = 0; k < times; k++) {
 8002da4:	2300      	movs	r3, #0
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24
 8002da8:	e00a      	b.n	8002dc0 <Displ_FillArea+0x124>
		Displ_WriteData(dispBuffer, SIZEBUF, 0);
 8002daa:	4b16      	ldr	r3, [pc, #88]	; (8002e04 <Displ_FillArea+0x168>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff fe2e 	bl	8002a16 <Displ_WriteData>
	for (k = 0; k < times; k++) {
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d3f0      	bcc.n	8002daa <Displ_FillArea+0x10e>
	}
	Displ_WriteData(dispBuffer, (area << 1) - (times << BUFLEVEL), 0);
 8002dc8:	4b0e      	ldr	r3, [pc, #56]	; (8002e04 <Displ_FillArea+0x168>)
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	005a      	lsls	r2, r3, #1
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	039b      	lsls	r3, r3, #14
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	4619      	mov	r1, r3
 8002dda:	f7ff fe1c 	bl	8002a16 <Displ_WriteData>
	}
	Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
#endif

//BUFFER SWAP
	dispBuffer = (dispBuffer == dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8002dde:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <Displ_FillArea+0x168>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a09      	ldr	r2, [pc, #36]	; (8002e08 <Displ_FillArea+0x16c>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d101      	bne.n	8002dec <Displ_FillArea+0x150>
 8002de8:	4b08      	ldr	r3, [pc, #32]	; (8002e0c <Displ_FillArea+0x170>)
 8002dea:	e000      	b.n	8002dee <Displ_FillArea+0x152>
 8002dec:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <Displ_FillArea+0x16c>)
 8002dee:	4a05      	ldr	r2, [pc, #20]	; (8002e04 <Displ_FillArea+0x168>)
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	e000      	b.n	8002df6 <Displ_FillArea+0x15a>
		return;  //
 8002df4:	bf00      	nop

}
 8002df6:	372c      	adds	r7, #44	; 0x2c
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd90      	pop	{r4, r7, pc}
 8002dfc:	2000298e 	.word	0x2000298e
 8002e00:	20002990 	.word	0x20002990
 8002e04:	20000030 	.word	0x20000030
 8002e08:	20002994 	.word	0x20002994
 8002e0c:	20006994 	.word	0x20006994

08002e10 <ILI9488_DrawImage>:
#ifndef DISPLAY_USING_TOUCHGFX

/*****************************************
 * WARNING: non tested, never used
 *****************************************/
void ILI9488_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t *data, uint32_t size) {
 8002e10:	b590      	push	{r4, r7, lr}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4604      	mov	r4, r0
 8002e18:	4608      	mov	r0, r1
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4623      	mov	r3, r4
 8002e20:	80fb      	strh	r3, [r7, #6]
 8002e22:	4603      	mov	r3, r0
 8002e24:	80bb      	strh	r3, [r7, #4]
 8002e26:	460b      	mov	r3, r1
 8002e28:	807b      	strh	r3, [r7, #2]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	803b      	strh	r3, [r7, #0]
	Displ_SetAddressWindow(x, y, w + x - 1, h + y - 1);
 8002e2e:	887a      	ldrh	r2, [r7, #2]
 8002e30:	88fb      	ldrh	r3, [r7, #6]
 8002e32:	4413      	add	r3, r2
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	3b01      	subs	r3, #1
 8002e38:	b29c      	uxth	r4, r3
 8002e3a:	883a      	ldrh	r2, [r7, #0]
 8002e3c:	88bb      	ldrh	r3, [r7, #4]
 8002e3e:	4413      	add	r3, r2
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	88b9      	ldrh	r1, [r7, #4]
 8002e48:	88f8      	ldrh	r0, [r7, #6]
 8002e4a:	4622      	mov	r2, r4
 8002e4c:	f7ff fe3c 	bl	8002ac8 <Displ_SetAddressWindow>
	Displ_WriteData(data, size, 0);
 8002e50:	2200      	movs	r2, #0
 8002e52:	69f9      	ldr	r1, [r7, #28]
 8002e54:	69b8      	ldr	r0, [r7, #24]
 8002e56:	f7ff fdde 	bl	8002a16 <Displ_WriteData>
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd90      	pop	{r4, r7, pc}
	...

08002e64 <Displ_CLS>:

/*****************
 * @brief	clear display with a color.
 * @param	bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor) {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af02      	add	r7, sp, #8
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	80fb      	strh	r3, [r7, #6]
	Displ_FillArea(0, 0, _width, _height, bgcolor);
 8002e6e:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <Displ_CLS+0x30>)
 8002e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <Displ_CLS+0x34>)
 8002e78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e7c:	b299      	uxth	r1, r3
 8002e7e:	88fb      	ldrh	r3, [r7, #6]
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	460b      	mov	r3, r1
 8002e84:	2100      	movs	r1, #0
 8002e86:	2000      	movs	r0, #0
 8002e88:	f7ff ff08 	bl	8002c9c <Displ_FillArea>
}
 8002e8c:	bf00      	nop
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	2000298e 	.word	0x2000298e
 8002e98:	20002990 	.word	0x20002990

08002e9c <fillCircleHelper>:
			Displ_Pixel(x0 - x, y0 - y, color);
		}
	}
}

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color) {
 8002e9c:	b590      	push	{r4, r7, lr}
 8002e9e:	b089      	sub	sp, #36	; 0x24
 8002ea0:	af02      	add	r7, sp, #8
 8002ea2:	4604      	mov	r4, r0
 8002ea4:	4608      	mov	r0, r1
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4623      	mov	r3, r4
 8002eac:	80fb      	strh	r3, [r7, #6]
 8002eae:	4603      	mov	r3, r0
 8002eb0:	80bb      	strh	r3, [r7, #4]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	807b      	strh	r3, [r7, #2]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8002eba:	887b      	ldrh	r3, [r7, #2]
 8002ebc:	f1c3 0301 	rsb	r3, r3, #1
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8002ec8:	887b      	ldrh	r3, [r7, #2]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	03d2      	lsls	r2, r2, #15
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8002eda:	887b      	ldrh	r3, [r7, #2]
 8002edc:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 8002ede:	e0a7      	b.n	8003030 <fillCircleHelper+0x194>
		if (f >= 0) {
 8002ee0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	db0e      	blt.n	8002f06 <fillCircleHelper+0x6a>
			y--;
 8002ee8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8002ef4:	8a7b      	ldrh	r3, [r7, #18]
 8002ef6:	3302      	adds	r3, #2
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8002efc:	8afa      	ldrh	r2, [r7, #22]
 8002efe:	8a7b      	ldrh	r3, [r7, #18]
 8002f00:	4413      	add	r3, r2
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8002f06:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8002f12:	8abb      	ldrh	r3, [r7, #20]
 8002f14:	3302      	adds	r3, #2
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8002f1a:	8afa      	ldrh	r2, [r7, #22]
 8002f1c:	8abb      	ldrh	r3, [r7, #20]
 8002f1e:	4413      	add	r3, r2
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1) {
 8002f24:	787b      	ldrb	r3, [r7, #1]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d03d      	beq.n	8002faa <fillCircleHelper+0x10e>
			Displ_Line(x0 + x, y0 - y, x0 + x, y0 + y + 1 + delta, color);
 8002f2e:	88fa      	ldrh	r2, [r7, #6]
 8002f30:	8a3b      	ldrh	r3, [r7, #16]
 8002f32:	4413      	add	r3, r2
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	b218      	sxth	r0, r3
 8002f38:	88ba      	ldrh	r2, [r7, #4]
 8002f3a:	89fb      	ldrh	r3, [r7, #14]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	b219      	sxth	r1, r3
 8002f42:	88fa      	ldrh	r2, [r7, #6]
 8002f44:	8a3b      	ldrh	r3, [r7, #16]
 8002f46:	4413      	add	r3, r2
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	b21c      	sxth	r4, r3
 8002f4c:	88ba      	ldrh	r2, [r7, #4]
 8002f4e:	89fb      	ldrh	r3, [r7, #14]
 8002f50:	4413      	add	r3, r2
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002f56:	4413      	add	r3, r2
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	b21a      	sxth	r2, r3
 8002f60:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	4613      	mov	r3, r2
 8002f66:	4622      	mov	r2, r4
 8002f68:	f000 f86e 	bl	8003048 <Displ_Line>
			Displ_Line(x0 + y, y0 - x, x0 + y, y0 + x + 1 + delta, color);
 8002f6c:	88fa      	ldrh	r2, [r7, #6]
 8002f6e:	89fb      	ldrh	r3, [r7, #14]
 8002f70:	4413      	add	r3, r2
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	b218      	sxth	r0, r3
 8002f76:	88ba      	ldrh	r2, [r7, #4]
 8002f78:	8a3b      	ldrh	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	b219      	sxth	r1, r3
 8002f80:	88fa      	ldrh	r2, [r7, #6]
 8002f82:	89fb      	ldrh	r3, [r7, #14]
 8002f84:	4413      	add	r3, r2
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	b21c      	sxth	r4, r3
 8002f8a:	88ba      	ldrh	r2, [r7, #4]
 8002f8c:	8a3b      	ldrh	r3, [r7, #16]
 8002f8e:	4413      	add	r3, r2
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002f94:	4413      	add	r3, r2
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3301      	adds	r3, #1
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	b21a      	sxth	r2, r3
 8002f9e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	4622      	mov	r2, r4
 8002fa6:	f000 f84f 	bl	8003048 <Displ_Line>
		}
		if (cornername & 0x2) {
 8002faa:	787b      	ldrb	r3, [r7, #1]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d03d      	beq.n	8003030 <fillCircleHelper+0x194>
			Displ_Line(x0 - x, y0 - y, x0 - x, y0 + y + 1 + delta, color);
 8002fb4:	88fa      	ldrh	r2, [r7, #6]
 8002fb6:	8a3b      	ldrh	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	b218      	sxth	r0, r3
 8002fbe:	88ba      	ldrh	r2, [r7, #4]
 8002fc0:	89fb      	ldrh	r3, [r7, #14]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	b219      	sxth	r1, r3
 8002fc8:	88fa      	ldrh	r2, [r7, #6]
 8002fca:	8a3b      	ldrh	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	b21c      	sxth	r4, r3
 8002fd2:	88ba      	ldrh	r2, [r7, #4]
 8002fd4:	89fb      	ldrh	r3, [r7, #14]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002fdc:	4413      	add	r3, r2
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	b21a      	sxth	r2, r3
 8002fe6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	4613      	mov	r3, r2
 8002fec:	4622      	mov	r2, r4
 8002fee:	f000 f82b 	bl	8003048 <Displ_Line>
			Displ_Line(x0 - y, y0 - x, x0 - y, y0 + x + 1 + delta, color);
 8002ff2:	88fa      	ldrh	r2, [r7, #6]
 8002ff4:	89fb      	ldrh	r3, [r7, #14]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	b218      	sxth	r0, r3
 8002ffc:	88ba      	ldrh	r2, [r7, #4]
 8002ffe:	8a3b      	ldrh	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	b29b      	uxth	r3, r3
 8003004:	b219      	sxth	r1, r3
 8003006:	88fa      	ldrh	r2, [r7, #6]
 8003008:	89fb      	ldrh	r3, [r7, #14]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	b29b      	uxth	r3, r3
 800300e:	b21c      	sxth	r4, r3
 8003010:	88ba      	ldrh	r2, [r7, #4]
 8003012:	8a3b      	ldrh	r3, [r7, #16]
 8003014:	4413      	add	r3, r2
 8003016:	b29a      	uxth	r2, r3
 8003018:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800301a:	4413      	add	r3, r2
 800301c:	b29b      	uxth	r3, r3
 800301e:	3301      	adds	r3, #1
 8003020:	b29b      	uxth	r3, r3
 8003022:	b21a      	sxth	r2, r3
 8003024:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	4613      	mov	r3, r2
 800302a:	4622      	mov	r2, r4
 800302c:	f000 f80c 	bl	8003048 <Displ_Line>
	while (x < y) {
 8003030:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003034:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003038:	429a      	cmp	r2, r3
 800303a:	f6ff af51 	blt.w	8002ee0 <fillCircleHelper+0x44>
		}
	}
}
 800303e:	bf00      	nop
 8003040:	bf00      	nop
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	bd90      	pop	{r4, r7, pc}

08003048 <Displ_Line>:
}

/************************************************************************
 * @brief	draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 8003048:	b590      	push	{r4, r7, lr}
 800304a:	b08b      	sub	sp, #44	; 0x2c
 800304c:	af02      	add	r7, sp, #8
 800304e:	4604      	mov	r4, r0
 8003050:	4608      	mov	r0, r1
 8003052:	4611      	mov	r1, r2
 8003054:	461a      	mov	r2, r3
 8003056:	4623      	mov	r3, r4
 8003058:	80fb      	strh	r3, [r7, #6]
 800305a:	4603      	mov	r3, r0
 800305c:	80bb      	strh	r3, [r7, #4]
 800305e:	460b      	mov	r3, r1
 8003060:	807b      	strh	r3, [r7, #2]
 8003062:	4613      	mov	r3, r2
 8003064:	803b      	strh	r3, [r7, #0]
	int16_t l, x, steep, ystep, err, dx, dy;

	if (x0 == x1) {  // fast solve vertical lines
 8003066:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800306a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800306e:	429a      	cmp	r2, r3
 8003070:	d123      	bne.n	80030ba <Displ_Line+0x72>
		if (y1 > y0) {
 8003072:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003076:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800307a:	429a      	cmp	r2, r3
 800307c:	dd0e      	ble.n	800309c <Displ_Line+0x54>
			Displ_FillArea(x0, y0, 1, y1 - y0 + 1, color);
 800307e:	88f8      	ldrh	r0, [r7, #6]
 8003080:	88b9      	ldrh	r1, [r7, #4]
 8003082:	883a      	ldrh	r2, [r7, #0]
 8003084:	88bb      	ldrh	r3, [r7, #4]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	b29b      	uxth	r3, r3
 800308a:	3301      	adds	r3, #1
 800308c:	b29a      	uxth	r2, r3
 800308e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	4613      	mov	r3, r2
 8003094:	2201      	movs	r2, #1
 8003096:	f7ff fe01 	bl	8002c9c <Displ_FillArea>
		} else {
			Displ_FillArea(x0, y1, 1, y0 - y1 + 1, color);
		}
		return;
 800309a:	e103      	b.n	80032a4 <Displ_Line+0x25c>
			Displ_FillArea(x0, y1, 1, y0 - y1 + 1, color);
 800309c:	88f8      	ldrh	r0, [r7, #6]
 800309e:	8839      	ldrh	r1, [r7, #0]
 80030a0:	88ba      	ldrh	r2, [r7, #4]
 80030a2:	883b      	ldrh	r3, [r7, #0]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3301      	adds	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	4613      	mov	r3, r2
 80030b2:	2201      	movs	r2, #1
 80030b4:	f7ff fdf2 	bl	8002c9c <Displ_FillArea>
		return;
 80030b8:	e0f4      	b.n	80032a4 <Displ_Line+0x25c>
	}
	if (y0 == y1) { // fast solve horizontal lines
 80030ba:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80030be:	f9b7 3000 	ldrsh.w	r3, [r7]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d121      	bne.n	800310a <Displ_Line+0xc2>
		if (x1 > x0)
 80030c6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80030ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	dd0d      	ble.n	80030ee <Displ_Line+0xa6>
			Displ_FillArea(x0, y0, x1 - x0 + 1, 1, color);
 80030d2:	88f8      	ldrh	r0, [r7, #6]
 80030d4:	88b9      	ldrh	r1, [r7, #4]
 80030d6:	887a      	ldrh	r2, [r7, #2]
 80030d8:	88fb      	ldrh	r3, [r7, #6]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	b29b      	uxth	r3, r3
 80030de:	3301      	adds	r3, #1
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	2301      	movs	r3, #1
 80030e8:	f7ff fdd8 	bl	8002c9c <Displ_FillArea>
		else
			Displ_FillArea(x1, y1, x0 - x1 + 1, 1, color);
		return;
 80030ec:	e0da      	b.n	80032a4 <Displ_Line+0x25c>
			Displ_FillArea(x1, y1, x0 - x1 + 1, 1, color);
 80030ee:	8878      	ldrh	r0, [r7, #2]
 80030f0:	8839      	ldrh	r1, [r7, #0]
 80030f2:	88fa      	ldrh	r2, [r7, #6]
 80030f4:	887b      	ldrh	r3, [r7, #2]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	3301      	adds	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	2301      	movs	r3, #1
 8003104:	f7ff fdca 	bl	8002c9c <Displ_FillArea>
		return;
 8003108:	e0cc      	b.n	80032a4 <Displ_Line+0x25c>
	}

	steep = (y1 > y0 ? y1 - y0 : y0 - y1) > (x1 > x0 ? x1 - x0 : x0 - x1);
 800310a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800310e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003112:	429a      	cmp	r2, r3
 8003114:	dd05      	ble.n	8003122 <Displ_Line+0xda>
 8003116:	f9b7 2000 	ldrsh.w	r2, [r7]
 800311a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800311e:	1ad2      	subs	r2, r2, r3
 8003120:	e004      	b.n	800312c <Displ_Line+0xe4>
 8003122:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003126:	f9b7 3000 	ldrsh.w	r3, [r7]
 800312a:	1ad2      	subs	r2, r2, r3
 800312c:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8003130:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003134:	4299      	cmp	r1, r3
 8003136:	dd05      	ble.n	8003144 <Displ_Line+0xfc>
 8003138:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800313c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003140:	1acb      	subs	r3, r1, r3
 8003142:	e004      	b.n	800314e <Displ_Line+0x106>
 8003144:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8003148:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800314c:	1acb      	subs	r3, r1, r3
 800314e:	429a      	cmp	r2, r3
 8003150:	bfcc      	ite	gt
 8003152:	2301      	movgt	r3, #1
 8003154:	2300      	movle	r3, #0
 8003156:	b2db      	uxtb	r3, r3
 8003158:	82bb      	strh	r3, [r7, #20]

	if (steep) {
 800315a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00b      	beq.n	800317a <Displ_Line+0x132>
		_swap_int16_t(x0, y0);
 8003162:	88fb      	ldrh	r3, [r7, #6]
 8003164:	827b      	strh	r3, [r7, #18]
 8003166:	88bb      	ldrh	r3, [r7, #4]
 8003168:	80fb      	strh	r3, [r7, #6]
 800316a:	8a7b      	ldrh	r3, [r7, #18]
 800316c:	80bb      	strh	r3, [r7, #4]
		_swap_int16_t(x1, y1);
 800316e:	887b      	ldrh	r3, [r7, #2]
 8003170:	823b      	strh	r3, [r7, #16]
 8003172:	883b      	ldrh	r3, [r7, #0]
 8003174:	807b      	strh	r3, [r7, #2]
 8003176:	8a3b      	ldrh	r3, [r7, #16]
 8003178:	803b      	strh	r3, [r7, #0]
	}

	if (x0 > x1) {
 800317a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800317e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003182:	429a      	cmp	r2, r3
 8003184:	dd0b      	ble.n	800319e <Displ_Line+0x156>
		_swap_int16_t(x0, x1);
 8003186:	88fb      	ldrh	r3, [r7, #6]
 8003188:	81fb      	strh	r3, [r7, #14]
 800318a:	887b      	ldrh	r3, [r7, #2]
 800318c:	80fb      	strh	r3, [r7, #6]
 800318e:	89fb      	ldrh	r3, [r7, #14]
 8003190:	807b      	strh	r3, [r7, #2]
		_swap_int16_t(y0, y1);
 8003192:	88bb      	ldrh	r3, [r7, #4]
 8003194:	81bb      	strh	r3, [r7, #12]
 8003196:	883b      	ldrh	r3, [r7, #0]
 8003198:	80bb      	strh	r3, [r7, #4]
 800319a:	89bb      	ldrh	r3, [r7, #12]
 800319c:	803b      	strh	r3, [r7, #0]
	}

	dx = x1 - x0;
 800319e:	887a      	ldrh	r2, [r7, #2]
 80031a0:	88fb      	ldrh	r3, [r7, #6]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	817b      	strh	r3, [r7, #10]
	err = dx >> 1;
 80031a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80031ac:	105b      	asrs	r3, r3, #1
 80031ae:	833b      	strh	r3, [r7, #24]
	if (y0 < y1) {
 80031b0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80031b4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	da07      	bge.n	80031cc <Displ_Line+0x184>
		dy = y1 - y0;
 80031bc:	883a      	ldrh	r2, [r7, #0]
 80031be:	88bb      	ldrh	r3, [r7, #4]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	82fb      	strh	r3, [r7, #22]
		ystep = 1;
 80031c6:	2301      	movs	r3, #1
 80031c8:	837b      	strh	r3, [r7, #26]
 80031ca:	e007      	b.n	80031dc <Displ_Line+0x194>
	} else {
		dy = y0 - y1;
 80031cc:	88ba      	ldrh	r2, [r7, #4]
 80031ce:	883b      	ldrh	r3, [r7, #0]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	82fb      	strh	r3, [r7, #22]
		ystep = -1;
 80031d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031da:	837b      	strh	r3, [r7, #26]
	}

	l = 00;
 80031dc:	2300      	movs	r3, #0
 80031de:	83fb      	strh	r3, [r7, #30]
	for (x = x0; x <= x1; x++) {
 80031e0:	88fb      	ldrh	r3, [r7, #6]
 80031e2:	83bb      	strh	r3, [r7, #28]
 80031e4:	e03a      	b.n	800325c <Displ_Line+0x214>
		l++;
 80031e6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3301      	adds	r3, #1
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	83fb      	strh	r3, [r7, #30]
		err -= dy;
 80031f2:	8b3a      	ldrh	r2, [r7, #24]
 80031f4:	8afb      	ldrh	r3, [r7, #22]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	833b      	strh	r3, [r7, #24]
		if (err < 0) {
 80031fc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003200:	2b00      	cmp	r3, #0
 8003202:	da25      	bge.n	8003250 <Displ_Line+0x208>
			if (steep) {
 8003204:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d009      	beq.n	8003220 <Displ_Line+0x1d8>
				Displ_FillArea(y0, x0, 1, l, color);
 800320c:	88b8      	ldrh	r0, [r7, #4]
 800320e:	88f9      	ldrh	r1, [r7, #6]
 8003210:	8bfa      	ldrh	r2, [r7, #30]
 8003212:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	4613      	mov	r3, r2
 8003218:	2201      	movs	r2, #1
 800321a:	f7ff fd3f 	bl	8002c9c <Displ_FillArea>
 800321e:	e007      	b.n	8003230 <Displ_Line+0x1e8>
			} else {
				Displ_FillArea(x0, y0, l, 1, color);
 8003220:	88f8      	ldrh	r0, [r7, #6]
 8003222:	88b9      	ldrh	r1, [r7, #4]
 8003224:	8bfa      	ldrh	r2, [r7, #30]
 8003226:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	2301      	movs	r3, #1
 800322c:	f7ff fd36 	bl	8002c9c <Displ_FillArea>
			}
			y0 += ystep;
 8003230:	88ba      	ldrh	r2, [r7, #4]
 8003232:	8b7b      	ldrh	r3, [r7, #26]
 8003234:	4413      	add	r3, r2
 8003236:	b29b      	uxth	r3, r3
 8003238:	80bb      	strh	r3, [r7, #4]
			l = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	83fb      	strh	r3, [r7, #30]
			x0 = x + 1;
 800323e:	8bbb      	ldrh	r3, [r7, #28]
 8003240:	3301      	adds	r3, #1
 8003242:	b29b      	uxth	r3, r3
 8003244:	80fb      	strh	r3, [r7, #6]
			err += dx;
 8003246:	8b3a      	ldrh	r2, [r7, #24]
 8003248:	897b      	ldrh	r3, [r7, #10]
 800324a:	4413      	add	r3, r2
 800324c:	b29b      	uxth	r3, r3
 800324e:	833b      	strh	r3, [r7, #24]
	for (x = x0; x <= x1; x++) {
 8003250:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003254:	b29b      	uxth	r3, r3
 8003256:	3301      	adds	r3, #1
 8003258:	b29b      	uxth	r3, r3
 800325a:	83bb      	strh	r3, [r7, #28]
 800325c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003260:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003264:	429a      	cmp	r2, r3
 8003266:	ddbe      	ble.n	80031e6 <Displ_Line+0x19e>
		}
	}
	if (l != 0) {
 8003268:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d019      	beq.n	80032a4 <Displ_Line+0x25c>
		if (steep) {
 8003270:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00b      	beq.n	8003290 <Displ_Line+0x248>
			Displ_FillArea(y0, x0, 1, l - 1, color);
 8003278:	88b8      	ldrh	r0, [r7, #4]
 800327a:	88f9      	ldrh	r1, [r7, #6]
 800327c:	8bfb      	ldrh	r3, [r7, #30]
 800327e:	3b01      	subs	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	4613      	mov	r3, r2
 8003288:	2201      	movs	r2, #1
 800328a:	f7ff fd07 	bl	8002c9c <Displ_FillArea>
 800328e:	e009      	b.n	80032a4 <Displ_Line+0x25c>
		} else {
			Displ_FillArea(x0, y0, l - 1, 1, color);
 8003290:	88f8      	ldrh	r0, [r7, #6]
 8003292:	88b9      	ldrh	r1, [r7, #4]
 8003294:	8bfb      	ldrh	r3, [r7, #30]
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	2301      	movs	r3, #1
 80032a0:	f7ff fcfc 	bl	8002c9c <Displ_FillArea>
		}
	}
}
 80032a4:	3724      	adds	r7, #36	; 0x24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd90      	pop	{r4, r7, pc}
	...

080032ac <Displ_WChar>:
 * @brief	display one character on the display
 * @param 	x,y: top left corner of the character to be printed
 * 			ch, font, color, bgcolor: as per parameter name
 * 			size: (1 or 2) single or double wided printing
 **********************/
void Displ_WChar(uint16_t x, uint16_t y, char ch, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 80032ac:	b082      	sub	sp, #8
 80032ae:	b590      	push	{r4, r7, lr}
 80032b0:	b08d      	sub	sp, #52	; 0x34
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	647b      	str	r3, [r7, #68]	; 0x44
 80032b6:	4603      	mov	r3, r0
 80032b8:	80fb      	strh	r3, [r7, #6]
 80032ba:	460b      	mov	r3, r1
 80032bc:	80bb      	strh	r3, [r7, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, bytes, j, bufSize, mask;

	const uint8_t *pos;
	uint8_t wsize = font.Width; //printing char width
 80032c2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80032c6:	76fb      	strb	r3, [r7, #27]

	if (size == 2)
 80032c8:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d102      	bne.n	80032d6 <Displ_WChar+0x2a>
		wsize <<= 1;
 80032d0:	7efb      	ldrb	r3, [r7, #27]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	76fb      	strb	r3, [r7, #27]
	bufSize = 0;
 80032d6:	2300      	movs	r3, #0
 80032d8:	623b      	str	r3, [r7, #32]
	bytes = font.Height * font.Size;
 80032da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80032de:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80032e2:	fb02 f303 	mul.w	r3, r2, r3
 80032e6:	617b      	str	r3, [r7, #20]
	pos = font.table + (ch - 32) * bytes; //that's char position in table
 80032e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032ea:	78fb      	ldrb	r3, [r7, #3]
 80032ec:	3b20      	subs	r3, #32
 80032ee:	4619      	mov	r1, r3
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	fb01 f303 	mul.w	r3, r1, r3
 80032f6:	4413      	add	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
	switch (font.Size) {
 80032fa:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d005      	beq.n	800330e <Displ_WChar+0x62>
 8003302:	2b03      	cmp	r3, #3
 8003304:	d107      	bne.n	8003316 <Displ_WChar+0x6a>
	case 3:
		mask = 0x800000;
 8003306:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800330a:	61fb      	str	r3, [r7, #28]
		break;
 800330c:	e005      	b.n	800331a <Displ_WChar+0x6e>
	case 2:
		mask = 0x8000;
 800330e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003312:	61fb      	str	r3, [r7, #28]
		break;
 8003314:	e001      	b.n	800331a <Displ_WChar+0x6e>
	default:
		mask = 0x80;
 8003316:	2380      	movs	r3, #128	; 0x80
 8003318:	61fb      	str	r3, [r7, #28]
	}

#ifdef Z_RGB565

	uint16_t color1, bgcolor1;
	uint16_t *dispBuffer16 = (uint16_t*) dispBuffer;
 800331a:	4b60      	ldr	r3, [pc, #384]	; (800349c <Displ_WChar+0x1f0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	60fb      	str	r3, [r7, #12]

	color1 = ((color & 0xFF) << 8 | (color >> 8));  //swapping byte endian: STM32 is little endian, ST7735 is big endian
 8003320:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003324:	021b      	lsls	r3, r3, #8
 8003326:	b21a      	sxth	r2, r3
 8003328:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800332c:	0a1b      	lsrs	r3, r3, #8
 800332e:	b29b      	uxth	r3, r3
 8003330:	b21b      	sxth	r3, r3
 8003332:	4313      	orrs	r3, r2
 8003334:	b21b      	sxth	r3, r3
 8003336:	817b      	strh	r3, [r7, #10]
	bgcolor1 = ((bgcolor & 0xFF) << 8 | (bgcolor >> 8));//swapping byte endian: STM32 is little endian, ST7735 is big endian
 8003338:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800333c:	021b      	lsls	r3, r3, #8
 800333e:	b21a      	sxth	r2, r3
 8003340:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003344:	0a1b      	lsrs	r3, r3, #8
 8003346:	b29b      	uxth	r3, r3
 8003348:	b21b      	sxth	r3, r3
 800334a:	4313      	orrs	r3, r2
 800334c:	b21b      	sxth	r3, r3
 800334e:	813b      	strh	r3, [r7, #8]

	for (i = 0; i < (bytes); i += font.Size) {
 8003350:	2300      	movs	r3, #0
 8003352:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003354:	e06f      	b.n	8003436 <Displ_WChar+0x18a>
		b = 0;
 8003356:	2300      	movs	r3, #0
 8003358:	62bb      	str	r3, [r7, #40]	; 0x28
		switch (font.Size) {
 800335a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800335e:	2b02      	cmp	r3, #2
 8003360:	d015      	beq.n	800338e <Displ_WChar+0xe2>
 8003362:	2b03      	cmp	r3, #3
 8003364:	d120      	bne.n	80033a8 <Displ_WChar+0xfc>
		case 3:
			b = pos[i] << 16 | pos[i + 1] << 8 | pos[i + 2];
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336a:	4413      	add	r3, r2
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	041a      	lsls	r2, r3, #16
 8003370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003372:	3301      	adds	r3, #1
 8003374:	6939      	ldr	r1, [r7, #16]
 8003376:	440b      	add	r3, r1
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	021b      	lsls	r3, r3, #8
 800337c:	4313      	orrs	r3, r2
 800337e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003380:	3202      	adds	r2, #2
 8003382:	6939      	ldr	r1, [r7, #16]
 8003384:	440a      	add	r2, r1
 8003386:	7812      	ldrb	r2, [r2, #0]
 8003388:	4313      	orrs	r3, r2
 800338a:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 800338c:	e011      	b.n	80033b2 <Displ_WChar+0x106>
		case 2:
			b = pos[i] << 8 | pos[i + 1];
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003392:	4413      	add	r3, r2
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	021b      	lsls	r3, r3, #8
 8003398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800339a:	3201      	adds	r2, #1
 800339c:	6939      	ldr	r1, [r7, #16]
 800339e:	440a      	add	r2, r1
 80033a0:	7812      	ldrb	r2, [r2, #0]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 80033a6:	e004      	b.n	80033b2 <Displ_WChar+0x106>
		default:
			b = pos[i];
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ac:	4413      	add	r3, r2
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		for (j = 0; j < font.Width; j++) {
 80033b2:	2300      	movs	r3, #0
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
 80033b6:	e032      	b.n	800341e <Displ_WChar+0x172>
			if ((b << j) & mask) {
 80033b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	409a      	lsls	r2, r3
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	4013      	ands	r3, r2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d014      	beq.n	80033f0 <Displ_WChar+0x144>
				dispBuffer16[bufSize++] = color1;
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	1c5a      	adds	r2, r3, #1
 80033ca:	623a      	str	r2, [r7, #32]
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	4413      	add	r3, r2
 80033d2:	897a      	ldrh	r2, [r7, #10]
 80033d4:	801a      	strh	r2, [r3, #0]
				if (size == 2) {
 80033d6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d11c      	bne.n	8003418 <Displ_WChar+0x16c>
					dispBuffer16[bufSize++] = color1;
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	623a      	str	r2, [r7, #32]
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4413      	add	r3, r2
 80033ea:	897a      	ldrh	r2, [r7, #10]
 80033ec:	801a      	strh	r2, [r3, #0]
 80033ee:	e013      	b.n	8003418 <Displ_WChar+0x16c>
				}
			} else {
				dispBuffer16[bufSize++] = bgcolor1;
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	1c5a      	adds	r2, r3, #1
 80033f4:	623a      	str	r2, [r7, #32]
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	4413      	add	r3, r2
 80033fc:	893a      	ldrh	r2, [r7, #8]
 80033fe:	801a      	strh	r2, [r3, #0]
				if (size == 2) {
 8003400:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8003404:	2b02      	cmp	r3, #2
 8003406:	d107      	bne.n	8003418 <Displ_WChar+0x16c>
					dispBuffer16[bufSize++] = bgcolor1;
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	623a      	str	r2, [r7, #32]
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	4413      	add	r3, r2
 8003414:	893a      	ldrh	r2, [r7, #8]
 8003416:	801a      	strh	r2, [r3, #0]
		for (j = 0; j < font.Width; j++) {
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	3301      	adds	r3, #1
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
 800341e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003422:	461a      	mov	r2, r3
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	4293      	cmp	r3, r2
 8003428:	d3c6      	bcc.n	80033b8 <Displ_WChar+0x10c>
	for (i = 0; i < (bytes); i += font.Size) {
 800342a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800342e:	461a      	mov	r2, r3
 8003430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003432:	4413      	add	r3, r2
 8003434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	429a      	cmp	r2, r3
 800343c:	d38b      	bcc.n	8003356 <Displ_WChar+0xaa>
				}
			}
		}
	}
	bufSize <<= 1;
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	623b      	str	r3, [r7, #32]
			}
		}
	}
#endif

	Displ_SetAddressWindow(x, y, x + wsize - 1, y + font.Height - 1);
 8003444:	7efb      	ldrb	r3, [r7, #27]
 8003446:	b29a      	uxth	r2, r3
 8003448:	88fb      	ldrh	r3, [r7, #6]
 800344a:	4413      	add	r3, r2
 800344c:	b29b      	uxth	r3, r3
 800344e:	3b01      	subs	r3, #1
 8003450:	b29c      	uxth	r4, r3
 8003452:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8003456:	88bb      	ldrh	r3, [r7, #4]
 8003458:	4413      	add	r3, r2
 800345a:	b29b      	uxth	r3, r3
 800345c:	3b01      	subs	r3, #1
 800345e:	b29b      	uxth	r3, r3
 8003460:	88b9      	ldrh	r1, [r7, #4]
 8003462:	88f8      	ldrh	r0, [r7, #6]
 8003464:	4622      	mov	r2, r4
 8003466:	f7ff fb2f 	bl	8002ac8 <Displ_SetAddressWindow>
	Displ_WriteData(dispBuffer, bufSize, 0);
 800346a:	4b0c      	ldr	r3, [pc, #48]	; (800349c <Displ_WChar+0x1f0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2200      	movs	r2, #0
 8003470:	6a39      	ldr	r1, [r7, #32]
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff facf 	bl	8002a16 <Displ_WriteData>
	dispBuffer = (dispBuffer == dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8003478:	4b08      	ldr	r3, [pc, #32]	; (800349c <Displ_WChar+0x1f0>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a08      	ldr	r2, [pc, #32]	; (80034a0 <Displ_WChar+0x1f4>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d101      	bne.n	8003486 <Displ_WChar+0x1da>
 8003482:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <Displ_WChar+0x1f8>)
 8003484:	e000      	b.n	8003488 <Displ_WChar+0x1dc>
 8003486:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <Displ_WChar+0x1f4>)
 8003488:	4a04      	ldr	r2, [pc, #16]	; (800349c <Displ_WChar+0x1f0>)
 800348a:	6013      	str	r3, [r2, #0]

}
 800348c:	bf00      	nop
 800348e:	3734      	adds	r7, #52	; 0x34
 8003490:	46bd      	mov	sp, r7
 8003492:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003496:	b002      	add	sp, #8
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20000030 	.word	0x20000030
 80034a0:	20002994 	.word	0x20002994
 80034a4:	20006994 	.word	0x20006994

080034a8 <Displ_fillRoundRect>:
	drawCircleHelper(x + w - r - 1, y + r, r, 2, color);
	drawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
	drawCircleHelper(x + r, y + h - r - 1, r, 8, color);
}

void Displ_fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color) {
 80034a8:	b590      	push	{r4, r7, lr}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	4604      	mov	r4, r0
 80034b0:	4608      	mov	r0, r1
 80034b2:	4611      	mov	r1, r2
 80034b4:	461a      	mov	r2, r3
 80034b6:	4623      	mov	r3, r4
 80034b8:	80fb      	strh	r3, [r7, #6]
 80034ba:	4603      	mov	r3, r0
 80034bc:	80bb      	strh	r3, [r7, #4]
 80034be:	460b      	mov	r3, r1
 80034c0:	807b      	strh	r3, [r7, #2]
 80034c2:	4613      	mov	r3, r2
 80034c4:	803b      	strh	r3, [r7, #0]
	int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 80034c6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80034ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80034ce:	4293      	cmp	r3, r2
 80034d0:	bfa8      	it	ge
 80034d2:	4613      	movge	r3, r2
 80034d4:	b21b      	sxth	r3, r3
 80034d6:	0fda      	lsrs	r2, r3, #31
 80034d8:	4413      	add	r3, r2
 80034da:	105b      	asrs	r3, r3, #1
 80034dc:	81fb      	strh	r3, [r7, #14]
	if (r > max_radius)
 80034de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80034e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	dd01      	ble.n	80034ee <Displ_fillRoundRect+0x46>
		r = max_radius;
 80034ea:	89fb      	ldrh	r3, [r7, #14]
 80034ec:	843b      	strh	r3, [r7, #32]
	Displ_FillArea(x + r, y, w - 2 * r, h, color);
 80034ee:	88fa      	ldrh	r2, [r7, #6]
 80034f0:	8c3b      	ldrh	r3, [r7, #32]
 80034f2:	4413      	add	r3, r2
 80034f4:	b298      	uxth	r0, r3
 80034f6:	88b9      	ldrh	r1, [r7, #4]
 80034f8:	887a      	ldrh	r2, [r7, #2]
 80034fa:	8c3b      	ldrh	r3, [r7, #32]
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	b29b      	uxth	r3, r3
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	b29a      	uxth	r2, r3
 8003504:	883c      	ldrh	r4, [r7, #0]
 8003506:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	4623      	mov	r3, r4
 800350c:	f7ff fbc6 	bl	8002c9c <Displ_FillArea>
	fillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 8003510:	88fa      	ldrh	r2, [r7, #6]
 8003512:	887b      	ldrh	r3, [r7, #2]
 8003514:	4413      	add	r3, r2
 8003516:	b29a      	uxth	r2, r3
 8003518:	8c3b      	ldrh	r3, [r7, #32]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	b29b      	uxth	r3, r3
 800351e:	3b01      	subs	r3, #1
 8003520:	b29b      	uxth	r3, r3
 8003522:	b218      	sxth	r0, r3
 8003524:	88ba      	ldrh	r2, [r7, #4]
 8003526:	8c3b      	ldrh	r3, [r7, #32]
 8003528:	4413      	add	r3, r2
 800352a:	b29b      	uxth	r3, r3
 800352c:	b219      	sxth	r1, r3
 800352e:	883a      	ldrh	r2, [r7, #0]
 8003530:	8c3b      	ldrh	r3, [r7, #32]
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	b29b      	uxth	r3, r3
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	b29b      	uxth	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	b29b      	uxth	r3, r3
 800353e:	b21b      	sxth	r3, r3
 8003540:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8003544:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003546:	9201      	str	r2, [sp, #4]
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	2301      	movs	r3, #1
 800354c:	4622      	mov	r2, r4
 800354e:	f7ff fca5 	bl	8002e9c <fillCircleHelper>
	fillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 8003552:	88fa      	ldrh	r2, [r7, #6]
 8003554:	8c3b      	ldrh	r3, [r7, #32]
 8003556:	4413      	add	r3, r2
 8003558:	b29b      	uxth	r3, r3
 800355a:	b218      	sxth	r0, r3
 800355c:	88ba      	ldrh	r2, [r7, #4]
 800355e:	8c3b      	ldrh	r3, [r7, #32]
 8003560:	4413      	add	r3, r2
 8003562:	b29b      	uxth	r3, r3
 8003564:	b219      	sxth	r1, r3
 8003566:	883a      	ldrh	r2, [r7, #0]
 8003568:	8c3b      	ldrh	r3, [r7, #32]
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	b29b      	uxth	r3, r3
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	b29b      	uxth	r3, r3
 8003572:	3b01      	subs	r3, #1
 8003574:	b29b      	uxth	r3, r3
 8003576:	b21b      	sxth	r3, r3
 8003578:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 800357c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800357e:	9201      	str	r2, [sp, #4]
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	2302      	movs	r3, #2
 8003584:	4622      	mov	r2, r4
 8003586:	f7ff fc89 	bl	8002e9c <fillCircleHelper>
}
 800358a:	bf00      	nop
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	bd90      	pop	{r4, r7, pc}

08003592 <Displ_WString>:
 * 			font	to bu used
 * 			size	1 (normal), 2 (double width)
 * 			color	font color
 * 			bgcolor	background color
 ************************/
void Displ_WString(uint16_t x, uint16_t y, const char *str, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8003592:	b082      	sub	sp, #8
 8003594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003596:	b08b      	sub	sp, #44	; 0x2c
 8003598:	af06      	add	r7, sp, #24
 800359a:	603a      	str	r2, [r7, #0]
 800359c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800359e:	4603      	mov	r3, r0
 80035a0:	80fb      	strh	r3, [r7, #6]
 80035a2:	460b      	mov	r3, r1
 80035a4:	80bb      	strh	r3, [r7, #4]
	uint16_t delta = font.Width;
 80035a6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80035a8:	81fb      	strh	r3, [r7, #14]
	if (size > 1)
 80035aa:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d922      	bls.n	80035f8 <Displ_WString+0x66>
		delta <<= 1;
 80035b2:	89fb      	ldrh	r3, [r7, #14]
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	81fb      	strh	r3, [r7, #14]

	while (*str) {
 80035b8:	e01e      	b.n	80035f8 <Displ_WString+0x66>
		 str++;
		 continue;
		 }
		 }
		 */
		Displ_WChar(x, y, *str, font, size, color, bgcolor);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	781a      	ldrb	r2, [r3, #0]
 80035be:	88bd      	ldrh	r5, [r7, #4]
 80035c0:	88fc      	ldrh	r4, [r7, #6]
 80035c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80035c6:	9304      	str	r3, [sp, #16]
 80035c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80035ca:	9303      	str	r3, [sp, #12]
 80035cc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80035d0:	9302      	str	r3, [sp, #8]
 80035d2:	466e      	mov	r6, sp
 80035d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80035dc:	e886 0003 	stmia.w	r6, {r0, r1}
 80035e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e2:	4629      	mov	r1, r5
 80035e4:	4620      	mov	r0, r4
 80035e6:	f7ff fe61 	bl	80032ac <Displ_WChar>
		x += delta;
 80035ea:	88fa      	ldrh	r2, [r7, #6]
 80035ec:	89fb      	ldrh	r3, [r7, #14]
 80035ee:	4413      	add	r3, r2
 80035f0:	80fb      	strh	r3, [r7, #6]
		str++;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	3301      	adds	r3, #1
 80035f6:	603b      	str	r3, [r7, #0]
	while (*str) {
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1dc      	bne.n	80035ba <Displ_WString+0x28>
	}
}
 8003600:	bf00      	nop
 8003602:	bf00      	nop
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800360c:	b002      	add	sp, #8
 800360e:	4770      	bx	lr

08003610 <Displ_CString>:
 * 			size	1 (normal), 2 (double width)
 * 			color	font color
 * 			bgcolor	background color
 ************************/
void Displ_CString(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, const char *str, sFONT font, uint8_t size,
		uint16_t color, uint16_t bgcolor) {
 8003610:	b5b0      	push	{r4, r5, r7, lr}
 8003612:	b08a      	sub	sp, #40	; 0x28
 8003614:	af06      	add	r7, sp, #24
 8003616:	4604      	mov	r4, r0
 8003618:	4608      	mov	r0, r1
 800361a:	4611      	mov	r1, r2
 800361c:	461a      	mov	r2, r3
 800361e:	4623      	mov	r3, r4
 8003620:	80fb      	strh	r3, [r7, #6]
 8003622:	4603      	mov	r3, r0
 8003624:	80bb      	strh	r3, [r7, #4]
 8003626:	460b      	mov	r3, r1
 8003628:	807b      	strh	r3, [r7, #2]
 800362a:	4613      	mov	r3, r2
 800362c:	803b      	strh	r3, [r7, #0]
	uint16_t x, y;
	uint16_t wsize = font.Width;
 800362e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003630:	817b      	strh	r3, [r7, #10]
	static uint8_t cambia = 0;
	if (size > 1)
 8003632:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003636:	2b01      	cmp	r3, #1
 8003638:	d902      	bls.n	8003640 <Displ_CString+0x30>
		wsize <<= 1;
 800363a:	897b      	ldrh	r3, [r7, #10]
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	817b      	strh	r3, [r7, #10]
	if ((strlen(str) * wsize) > (x1 - x0 + 1))
 8003640:	6a38      	ldr	r0, [r7, #32]
 8003642:	f7fc fdc5 	bl	80001d0 <strlen>
 8003646:	4602      	mov	r2, r0
 8003648:	897b      	ldrh	r3, [r7, #10]
 800364a:	fb02 f303 	mul.w	r3, r2, r3
 800364e:	8879      	ldrh	r1, [r7, #2]
 8003650:	88fa      	ldrh	r2, [r7, #6]
 8003652:	1a8a      	subs	r2, r1, r2
 8003654:	3201      	adds	r2, #1
 8003656:	4293      	cmp	r3, r2
 8003658:	d902      	bls.n	8003660 <Displ_CString+0x50>
		x = x0;
 800365a:	88fb      	ldrh	r3, [r7, #6]
 800365c:	81fb      	strh	r3, [r7, #14]
 800365e:	e00e      	b.n	800367e <Displ_CString+0x6e>
	else
		x = (x1 + x0 + 1 - strlen(str) * wsize) >> 1;
 8003660:	887a      	ldrh	r2, [r7, #2]
 8003662:	88fb      	ldrh	r3, [r7, #6]
 8003664:	4413      	add	r3, r2
 8003666:	461c      	mov	r4, r3
 8003668:	6a38      	ldr	r0, [r7, #32]
 800366a:	f7fc fdb1 	bl	80001d0 <strlen>
 800366e:	4602      	mov	r2, r0
 8003670:	897b      	ldrh	r3, [r7, #10]
 8003672:	fb02 f303 	mul.w	r3, r2, r3
 8003676:	1ae3      	subs	r3, r4, r3
 8003678:	3301      	adds	r3, #1
 800367a:	085b      	lsrs	r3, r3, #1
 800367c:	81fb      	strh	r3, [r7, #14]
	if (font.Height > (y1 - y0 + 1))
 800367e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003680:	4619      	mov	r1, r3
 8003682:	883a      	ldrh	r2, [r7, #0]
 8003684:	88bb      	ldrh	r3, [r7, #4]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	3301      	adds	r3, #1
 800368a:	4299      	cmp	r1, r3
 800368c:	dd02      	ble.n	8003694 <Displ_CString+0x84>
		y = y0;
 800368e:	88bb      	ldrh	r3, [r7, #4]
 8003690:	81bb      	strh	r3, [r7, #12]
 8003692:	e007      	b.n	80036a4 <Displ_CString+0x94>
	else
		y = (y1 + y0 + 1 - font.Height) >> 1;
 8003694:	883a      	ldrh	r2, [r7, #0]
 8003696:	88bb      	ldrh	r3, [r7, #4]
 8003698:	4413      	add	r3, r2
 800369a:	3301      	adds	r3, #1
 800369c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800369e:	1a9b      	subs	r3, r3, r2
 80036a0:	105b      	asrs	r3, r3, #1
 80036a2:	81bb      	strh	r3, [r7, #12]

	if (x > x0) {
 80036a4:	89fa      	ldrh	r2, [r7, #14]
 80036a6:	88fb      	ldrh	r3, [r7, #6]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d912      	bls.n	80036d2 <Displ_CString+0xc2>
		Displ_FillArea(x0, y0, x - x0, y1 - y0 + 1, bgcolor);
 80036ac:	89fa      	ldrh	r2, [r7, #14]
 80036ae:	88fb      	ldrh	r3, [r7, #6]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	b29c      	uxth	r4, r3
 80036b4:	883a      	ldrh	r2, [r7, #0]
 80036b6:	88bb      	ldrh	r3, [r7, #4]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3301      	adds	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	88b9      	ldrh	r1, [r7, #4]
 80036c2:	88f8      	ldrh	r0, [r7, #6]
 80036c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	4613      	mov	r3, r2
 80036ca:	4622      	mov	r2, r4
 80036cc:	f7ff fae6 	bl	8002c9c <Displ_FillArea>
 80036d0:	e001      	b.n	80036d6 <Displ_CString+0xc6>
	} else
		x = x0; // fixing here mistake could be due to roundings: x lower than x0.
 80036d2:	88fb      	ldrh	r3, [r7, #6]
 80036d4:	81fb      	strh	r3, [r7, #14]
	if (x1 > (strlen(str) * wsize + x0))
 80036d6:	887c      	ldrh	r4, [r7, #2]
 80036d8:	6a38      	ldr	r0, [r7, #32]
 80036da:	f7fc fd79 	bl	80001d0 <strlen>
 80036de:	4602      	mov	r2, r0
 80036e0:	897b      	ldrh	r3, [r7, #10]
 80036e2:	fb03 f202 	mul.w	r2, r3, r2
 80036e6:	88fb      	ldrh	r3, [r7, #6]
 80036e8:	4413      	add	r3, r2
 80036ea:	429c      	cmp	r4, r3
 80036ec:	d91b      	bls.n	8003726 <Displ_CString+0x116>
		Displ_FillArea(x1 - x + x0 - 1, y0, x - x0 + 1, y1 - y0 + 1, bgcolor);
 80036ee:	887a      	ldrh	r2, [r7, #2]
 80036f0:	89fb      	ldrh	r3, [r7, #14]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	88fb      	ldrh	r3, [r7, #6]
 80036f8:	4413      	add	r3, r2
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b298      	uxth	r0, r3
 8003700:	89fa      	ldrh	r2, [r7, #14]
 8003702:	88fb      	ldrh	r3, [r7, #6]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	b29b      	uxth	r3, r3
 8003708:	3301      	adds	r3, #1
 800370a:	b29c      	uxth	r4, r3
 800370c:	883a      	ldrh	r2, [r7, #0]
 800370e:	88bb      	ldrh	r3, [r7, #4]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	b29b      	uxth	r3, r3
 8003714:	3301      	adds	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	88b9      	ldrh	r1, [r7, #4]
 800371a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	4613      	mov	r3, r2
 8003720:	4622      	mov	r2, r4
 8003722:	f7ff fabb 	bl	8002c9c <Displ_FillArea>

	if (y > y0) {
 8003726:	89ba      	ldrh	r2, [r7, #12]
 8003728:	88bb      	ldrh	r3, [r7, #4]
 800372a:	429a      	cmp	r2, r3
 800372c:	d912      	bls.n	8003754 <Displ_CString+0x144>
		Displ_FillArea(x0, y0, x1 - x0 + 1, y - y0, bgcolor);
 800372e:	887a      	ldrh	r2, [r7, #2]
 8003730:	88fb      	ldrh	r3, [r7, #6]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	b29b      	uxth	r3, r3
 8003736:	3301      	adds	r3, #1
 8003738:	b29c      	uxth	r4, r3
 800373a:	89ba      	ldrh	r2, [r7, #12]
 800373c:	88bb      	ldrh	r3, [r7, #4]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	b29a      	uxth	r2, r3
 8003742:	88b9      	ldrh	r1, [r7, #4]
 8003744:	88f8      	ldrh	r0, [r7, #6]
 8003746:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	4613      	mov	r3, r2
 800374c:	4622      	mov	r2, r4
 800374e:	f7ff faa5 	bl	8002c9c <Displ_FillArea>
 8003752:	e001      	b.n	8003758 <Displ_CString+0x148>
	} else
		y = y0; //same comment as above
 8003754:	88bb      	ldrh	r3, [r7, #4]
 8003756:	81bb      	strh	r3, [r7, #12]
	if (y1 >= (font.Height + y0))
 8003758:	883a      	ldrh	r2, [r7, #0]
 800375a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800375c:	4619      	mov	r1, r3
 800375e:	88bb      	ldrh	r3, [r7, #4]
 8003760:	440b      	add	r3, r1
 8003762:	429a      	cmp	r2, r3
 8003764:	db19      	blt.n	800379a <Displ_CString+0x18a>
		Displ_FillArea(x0, y1 - y + y0, x1 - x0 + 1, y - y0 + 1, bgcolor);
 8003766:	883a      	ldrh	r2, [r7, #0]
 8003768:	89bb      	ldrh	r3, [r7, #12]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	b29a      	uxth	r2, r3
 800376e:	88bb      	ldrh	r3, [r7, #4]
 8003770:	4413      	add	r3, r2
 8003772:	b299      	uxth	r1, r3
 8003774:	887a      	ldrh	r2, [r7, #2]
 8003776:	88fb      	ldrh	r3, [r7, #6]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	b29b      	uxth	r3, r3
 800377c:	3301      	adds	r3, #1
 800377e:	b29c      	uxth	r4, r3
 8003780:	89ba      	ldrh	r2, [r7, #12]
 8003782:	88bb      	ldrh	r3, [r7, #4]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	b29b      	uxth	r3, r3
 8003788:	3301      	adds	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	88f8      	ldrh	r0, [r7, #6]
 800378e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	4613      	mov	r3, r2
 8003794:	4622      	mov	r2, r4
 8003796:	f7ff fa81 	bl	8002c9c <Displ_FillArea>

	cambia = !cambia;
 800379a:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <Displ_CString+0x1d4>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	bf0c      	ite	eq
 80037a2:	2301      	moveq	r3, #1
 80037a4:	2300      	movne	r3, #0
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	461a      	mov	r2, r3
 80037aa:	4b0e      	ldr	r3, [pc, #56]	; (80037e4 <Displ_CString+0x1d4>)
 80037ac:	701a      	strb	r2, [r3, #0]

	Displ_WString(x, y, str, font, size, color, bgcolor);
 80037ae:	89bd      	ldrh	r5, [r7, #12]
 80037b0:	89fc      	ldrh	r4, [r7, #14]
 80037b2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80037b4:	9304      	str	r3, [sp, #16]
 80037b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80037b8:	9303      	str	r3, [sp, #12]
 80037ba:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80037be:	9302      	str	r3, [sp, #8]
 80037c0:	466a      	mov	r2, sp
 80037c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80037ca:	e882 0003 	stmia.w	r2, {r0, r1}
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	6a3a      	ldr	r2, [r7, #32]
 80037d2:	4629      	mov	r1, r5
 80037d4:	4620      	mov	r0, r4
 80037d6:	f7ff fedc 	bl	8003592 <Displ_WString>

}
 80037da:	bf00      	nop
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bdb0      	pop	{r4, r5, r7, pc}
 80037e2:	bf00      	nop
 80037e4:	2000a999 	.word	0x2000a999

080037e8 <Displ_BackLight>:
 *				'0'		set the display level to 0 (off)
 *				'I'		'Initialize'  IT MUST BE in dimming mode
 *              'Q'		do nothing, just return current level
 * @return		current backlight level
 **************************************/
uint32_t Displ_BackLight(uint8_t cmd) {
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	71fb      	strb	r3, [r7, #7]

#ifdef DISPLAY_DIMMING_MODE
	static uint16_t memCCR1=0;  			//it stores CCR1 value while in stand-by
#endif

	switch (cmd) {
 80037f2:	79fb      	ldrb	r3, [r7, #7]
 80037f4:	2b51      	cmp	r3, #81	; 0x51
 80037f6:	d00a      	beq.n	800380e <Displ_BackLight+0x26>
 80037f8:	2b51      	cmp	r3, #81	; 0x51
 80037fa:	dc16      	bgt.n	800382a <Displ_BackLight+0x42>
 80037fc:	2b46      	cmp	r3, #70	; 0x46
 80037fe:	d008      	beq.n	8003812 <Displ_BackLight+0x2a>
 8003800:	2b46      	cmp	r3, #70	; 0x46
 8003802:	dc12      	bgt.n	800382a <Displ_BackLight+0x42>
 8003804:	2b30      	cmp	r3, #48	; 0x30
 8003806:	d00a      	beq.n	800381e <Displ_BackLight+0x36>
 8003808:	2b31      	cmp	r3, #49	; 0x31
 800380a:	d002      	beq.n	8003812 <Displ_BackLight+0x2a>
	  	HAL_TIM_PWM_Start(&BKLIT_T, BKLIT_CHANNEL);
		BKLIT_TIMER->BKLIT_CCR=BKLIT_INIT_LEVEL;
		break;
#endif
	default:
		break;
 800380c:	e00d      	b.n	800382a <Displ_BackLight+0x42>
		__NOP();
 800380e:	bf00      	nop
		break;
 8003810:	e00c      	b.n	800382c <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_SET);
 8003812:	2201      	movs	r2, #1
 8003814:	2108      	movs	r1, #8
 8003816:	480a      	ldr	r0, [pc, #40]	; (8003840 <Displ_BackLight+0x58>)
 8003818:	f001 f832 	bl	8004880 <HAL_GPIO_WritePin>
		break;
 800381c:	e006      	b.n	800382c <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_RESET);
 800381e:	2200      	movs	r2, #0
 8003820:	2108      	movs	r1, #8
 8003822:	4807      	ldr	r0, [pc, #28]	; (8003840 <Displ_BackLight+0x58>)
 8003824:	f001 f82c 	bl	8004880 <HAL_GPIO_WritePin>
		break;
 8003828:	e000      	b.n	800382c <Displ_BackLight+0x44>
		break;
 800382a:	bf00      	nop
	}
#ifndef DISPLAY_DIMMING_MODE
	return HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin);
 800382c:	2108      	movs	r1, #8
 800382e:	4804      	ldr	r0, [pc, #16]	; (8003840 <Displ_BackLight+0x58>)
 8003830:	f001 f80e 	bl	8004850 <HAL_GPIO_ReadPin>
 8003834:	4603      	mov	r3, r0
#else
	return (BKLIT_TIMER->BKLIT_CCR);
#endif
}
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	48000400 	.word	0x48000400

08003844 <Touch_HandlePenDownInterrupt>:
extern Displ_Orientat_e current_orientation;	// indicates the active display orientation. Set by Displ_Orientation

volatile uint8_t Touch_PenDown = 0;						// set to 1 by pendown interrupt callback, reset to 0 by sw
volatile uint8_t Touch_Int_Enabled = 1;	// while reading touch sensor touch interrupt handling is disabled through this flag

void Touch_HandlePenDownInterrupt() {
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
	if (Touch_Int_Enabled) {
 8003848:	4b06      	ldr	r3, [pc, #24]	; (8003864 <Touch_HandlePenDownInterrupt+0x20>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <Touch_HandlePenDownInterrupt+0x14>
		Touch_PenDown = 1;
 8003852:	4b05      	ldr	r3, [pc, #20]	; (8003868 <Touch_HandlePenDownInterrupt+0x24>)
 8003854:	2201      	movs	r2, #1
 8003856:	701a      	strb	r2, [r3, #0]
	}
}
 8003858:	bf00      	nop
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	20000034 	.word	0x20000034
 8003868:	2000a99a 	.word	0x2000a99a

0800386c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == TOUCH_INT_Pin) {
 8003876:	88fb      	ldrh	r3, [r7, #6]
 8003878:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800387c:	d101      	bne.n	8003882 <HAL_GPIO_EXTI_Callback+0x16>
		Touch_HandlePenDownInterrupt();
 800387e:	f7ff ffe1 	bl	8003844 <Touch_HandlePenDownInterrupt>
	}
}
 8003882:	bf00      	nop
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <Touch_Select>:

/******************************************
 * @brief	enable touch, disabling display
 * 			set SPI baudrate as needed
 ******************************************/
void Touch_Select(void) {
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
	if (TOUCH_SPI == DISPL_SPI) {										// if touch and display share the same SPI port
		if (!HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {					// if display selected
 8003890:	2120      	movs	r1, #32
 8003892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003896:	f000 ffdb 	bl	8004850 <HAL_GPIO_ReadPin>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10b      	bne.n	80038b8 <Touch_Select+0x2c>
			while (!Displ_SpiAvailable) {
 80038a0:	bf00      	nop
 80038a2:	4b0f      	ldr	r3, [pc, #60]	; (80038e0 <Touch_Select+0x54>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0fa      	beq.n	80038a2 <Touch_Select+0x16>
			}; // waiting for completing display communication. Flag is set to 1 by transmission-complete interrupt callback
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display
 80038ac:	2201      	movs	r2, #1
 80038ae:	2120      	movs	r1, #32
 80038b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038b4:	f000 ffe4 	bl	8004880 <HAL_GPIO_WritePin>
		}
		SET_TOUCH_SPI_BAUDRATE
 80038b8:	4b0a      	ldr	r3, [pc, #40]	; (80038e4 <Touch_Select+0x58>)
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	4909      	ldr	r1, [pc, #36]	; (80038e4 <Touch_Select+0x58>)
 80038be:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 80038c2:	4013      	ands	r3, r2
 80038c4:	600b      	str	r3, [r1, #0]
 80038c6:	4b07      	ldr	r3, [pc, #28]	; (80038e4 <Touch_Select+0x58>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a06      	ldr	r2, [pc, #24]	; (80038e4 <Touch_Select+0x58>)
 80038cc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80038d0:	6013      	str	r3, [r2, #0]
		;				   										//change SPI port speed as per display needs
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);
 80038d2:	2200      	movs	r2, #0
 80038d4:	2102      	movs	r1, #2
 80038d6:	4804      	ldr	r0, [pc, #16]	; (80038e8 <Touch_Select+0x5c>)
 80038d8:	f000 ffd2 	bl	8004880 <HAL_GPIO_WritePin>
	}
}
 80038dc:	bf00      	nop
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	2000002c 	.word	0x2000002c
 80038e4:	40013000 	.word	0x40013000
 80038e8:	48000400 	.word	0x48000400

080038ec <Touch_UnSelect>:

/******************************************
 * @brief	disable touch
 ******************************************/
void Touch_UnSelect(void) {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
	if (TOUCH_SPI == DISPL_SPI) {										// if touch and display share the same SPI port
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);			// unselect touch
 80038f0:	2201      	movs	r2, #1
 80038f2:	2102      	movs	r1, #2
 80038f4:	4802      	ldr	r0, [pc, #8]	; (8003900 <Touch_UnSelect+0x14>)
 80038f6:	f000 ffc3 	bl	8004880 <HAL_GPIO_WritePin>
	}
}
 80038fa:	bf00      	nop
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	48000400 	.word	0x48000400

08003904 <Touch_PollAxis>:
 * @params	axis	use only one of the three options X_AXIS, Y_AXIS or Z_AXIS
 * @return			the level measured on the "axis" axis
 * 					PLEASE NOTE this function should be only for internal usage
 * 								Use Touch_GetXYTouch() instead
 *******************************************************************************/
uint16_t Touch_PollAxis(uint8_t axis) {
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	71fb      	strb	r3, [r7, #7]
	uint8_t poll[2] = { 0, 0 };
 800390e:	2300      	movs	r3, #0
 8003910:	813b      	strh	r3, [r7, #8]
	uint32_t poll16;

	if (TOUCH_SPI == DISPL_SPI) {				// if touch and display share the same SPI port
		Touch_Select();						// enable CS on touch device
 8003912:	f7ff ffbb 	bl	800388c <Touch_Select>
	}

	Touch_Int_Enabled = 0;	//disable interrupt handling: sensor reading triggers interrupt
 8003916:	4b17      	ldr	r3, [pc, #92]	; (8003974 <Touch_PollAxis+0x70>)
 8003918:	2200      	movs	r2, #0
 800391a:	701a      	strb	r2, [r3, #0]
	// disable interrupt while enquiring the touch sensor because it triggers the interrupt pin
	HAL_NVIC_DisableIRQ(TOUCH_INT_EXTI_IRQn);
 800391c:	2028      	movs	r0, #40	; 0x28
 800391e:	f000 fb8e 	bl	800403e <HAL_NVIC_DisableIRQ>

	HAL_SPI_Transmit(&TOUCH_SPI_PORT, &axis, 1, 10);
 8003922:	1df9      	adds	r1, r7, #7
 8003924:	230a      	movs	r3, #10
 8003926:	2201      	movs	r2, #1
 8003928:	4813      	ldr	r0, [pc, #76]	; (8003978 <Touch_PollAxis+0x74>)
 800392a:	f003 fdf4 	bl	8007516 <HAL_SPI_Transmit>
	if (HAL_SPI_Receive(&TOUCH_SPI_PORT, poll, 2, 10) == HAL_OK) {
 800392e:	f107 0108 	add.w	r1, r7, #8
 8003932:	230a      	movs	r3, #10
 8003934:	2202      	movs	r2, #2
 8003936:	4810      	ldr	r0, [pc, #64]	; (8003978 <Touch_PollAxis+0x74>)
 8003938:	f003 ff5b 	bl	80077f2 <HAL_SPI_Receive>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d105      	bne.n	800394e <Touch_PollAxis+0x4a>
		poll16 = (poll[0] << 8) + poll[1];
 8003942:	7a3b      	ldrb	r3, [r7, #8]
 8003944:	021b      	lsls	r3, r3, #8
 8003946:	7a7a      	ldrb	r2, [r7, #9]
 8003948:	4413      	add	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	e001      	b.n	8003952 <Touch_PollAxis+0x4e>
	} else {
		poll16 = 0;
 800394e:	2300      	movs	r3, #0
 8003950:	60fb      	str	r3, [r7, #12]
	}

//enable back interrupt after reading the sensor
	HAL_NVIC_ClearPendingIRQ(TOUCH_INT_EXTI_IRQn);
 8003952:	2028      	movs	r0, #40	; 0x28
 8003954:	f000 fb8d 	bl	8004072 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(TOUCH_INT_EXTI_IRQn);
 8003958:	2028      	movs	r0, #40	; 0x28
 800395a:	f000 fb62 	bl	8004022 <HAL_NVIC_EnableIRQ>

	Touch_Int_Enabled = 1;
 800395e:	4b05      	ldr	r3, [pc, #20]	; (8003974 <Touch_PollAxis+0x70>)
 8003960:	2201      	movs	r2, #1
 8003962:	701a      	strb	r2, [r3, #0]

	if (TOUCH_SPI == DISPL_SPI) {	// if touch and display share the same SPI port
		Touch_UnSelect();
 8003964:	f7ff ffc2 	bl	80038ec <Touch_UnSelect>
	}

	return poll16;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	b29b      	uxth	r3, r3
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	20000034 	.word	0x20000034
 8003978:	200003c4 	.word	0x200003c4

0800397c <Touch_GetXYtouch>:
 * @brief			polls touch screen and returning its XY screen position
 * 					that's regardless touch recording flag (interrupt received)
 * @return	x,y		in case isTouch=1 contain touch coordinates
 * 			isTouch is 1 if detected a touch, otherwise 0;
 *********************************************************************************/
void Touch_GetXYtouch(uint16_t *x, uint16_t *y, uint8_t *isTouch) {
 800397c:	b580      	push	{r7, lr}
 800397e:	b08a      	sub	sp, #40	; 0x28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]

	const uint8_t pollingLevel = 4;
 8003988:	2304      	movs	r3, #4
 800398a:	77fb      	strb	r3, [r7, #31]
	uint32_t touchx, touchy, touch;

// get the average value (over "1<<pollingLevel" attempts of X, Y and Z axes readings)

	// reading Z
	touch = 0;
 800398c:	2300      	movs	r3, #0
 800398e:	623b      	str	r3, [r7, #32]
	for (k = 0; k < (1 << pollingLevel); k++)
 8003990:	2300      	movs	r3, #0
 8003992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003996:	e00c      	b.n	80039b2 <Touch_GetXYtouch+0x36>
		touch += Touch_PollAxis(Z_AXIS);
 8003998:	20b0      	movs	r0, #176	; 0xb0
 800399a:	f7ff ffb3 	bl	8003904 <Touch_PollAxis>
 800399e:	4603      	mov	r3, r0
 80039a0:	461a      	mov	r2, r3
 80039a2:	6a3b      	ldr	r3, [r7, #32]
 80039a4:	4413      	add	r3, r2
 80039a6:	623b      	str	r3, [r7, #32]
	for (k = 0; k < (1 << pollingLevel); k++)
 80039a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039ac:	3301      	adds	r3, #1
 80039ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80039b2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80039b6:	7ffb      	ldrb	r3, [r7, #31]
 80039b8:	2101      	movs	r1, #1
 80039ba:	fa01 f303 	lsl.w	r3, r1, r3
 80039be:	429a      	cmp	r2, r3
 80039c0:	dbea      	blt.n	8003998 <Touch_GetXYtouch+0x1c>
	touch >>= pollingLevel;  //get the average value
 80039c2:	7ffb      	ldrb	r3, [r7, #31]
 80039c4:	6a3a      	ldr	r2, [r7, #32]
 80039c6:	fa22 f303 	lsr.w	r3, r2, r3
 80039ca:	623b      	str	r3, [r7, #32]
	if (touch <= Z_THRESHOLD) {
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039d2:	d806      	bhi.n	80039e2 <Touch_GetXYtouch+0x66>
		*isTouch = 0;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	701a      	strb	r2, [r3, #0]
		HAL_NVIC_ClearPendingIRQ(TOUCH_INT_EXTI_IRQn);
 80039da:	2028      	movs	r0, #40	; 0x28
 80039dc:	f000 fb49 	bl	8004072 <HAL_NVIC_ClearPendingIRQ>
		return;	// no touch: return 0
 80039e0:	e0b2      	b.n	8003b48 <Touch_GetXYtouch+0x1cc>
	}

	// reading X
	touch = 0;
 80039e2:	2300      	movs	r3, #0
 80039e4:	623b      	str	r3, [r7, #32]
	for (k = 0; k < (1 << pollingLevel); k++)
 80039e6:	2300      	movs	r3, #0
 80039e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80039ec:	e00c      	b.n	8003a08 <Touch_GetXYtouch+0x8c>
		touch += Touch_PollAxis(X_AXIS);
 80039ee:	20d0      	movs	r0, #208	; 0xd0
 80039f0:	f7ff ff88 	bl	8003904 <Touch_PollAxis>
 80039f4:	4603      	mov	r3, r0
 80039f6:	461a      	mov	r2, r3
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	4413      	add	r3, r2
 80039fc:	623b      	str	r3, [r7, #32]
	for (k = 0; k < (1 << pollingLevel); k++)
 80039fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a02:	3301      	adds	r3, #1
 8003a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003a08:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003a0c:	7ffb      	ldrb	r3, [r7, #31]
 8003a0e:	2101      	movs	r1, #1
 8003a10:	fa01 f303 	lsl.w	r3, r1, r3
 8003a14:	429a      	cmp	r2, r3
 8003a16:	dbea      	blt.n	80039ee <Touch_GetXYtouch+0x72>
	touch >>= pollingLevel;  //get the average value
 8003a18:	7ffb      	ldrb	r3, [r7, #31]
 8003a1a:	6a3a      	ldr	r2, [r7, #32]
 8003a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a20:	623b      	str	r3, [r7, #32]
	if (touch <= X_THRESHOLD) {
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a28:	d806      	bhi.n	8003a38 <Touch_GetXYtouch+0xbc>
		*isTouch = 0;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	701a      	strb	r2, [r3, #0]
		HAL_NVIC_ClearPendingIRQ(TOUCH_INT_EXTI_IRQn);
 8003a30:	2028      	movs	r0, #40	; 0x28
 8003a32:	f000 fb1e 	bl	8004072 <HAL_NVIC_ClearPendingIRQ>
		return;	// no touch: return 0
 8003a36:	e087      	b.n	8003b48 <Touch_GetXYtouch+0x1cc>
	}
	touchx = (AX * touch + BX);
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	ee07 3a90 	vmov	s15, r3
 8003a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a42:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003b50 <Touch_GetXYtouch+0x1d4>
 8003a46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a4a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8003b54 <Touch_GetXYtouch+0x1d8>
 8003a4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a56:	ee17 3a90 	vmov	r3, s15
 8003a5a:	61bb      	str	r3, [r7, #24]

	// reading Y - there is no a threshold for Y
	touch = 0;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	623b      	str	r3, [r7, #32]
	for (k = 0; k < (1 << pollingLevel); k++)
 8003a60:	2300      	movs	r3, #0
 8003a62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003a66:	e00c      	b.n	8003a82 <Touch_GetXYtouch+0x106>
		touch += Touch_PollAxis(Y_AXIS);
 8003a68:	2090      	movs	r0, #144	; 0x90
 8003a6a:	f7ff ff4b 	bl	8003904 <Touch_PollAxis>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	461a      	mov	r2, r3
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	4413      	add	r3, r2
 8003a76:	623b      	str	r3, [r7, #32]
	for (k = 0; k < (1 << pollingLevel); k++)
 8003a78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003a82:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003a86:	7ffb      	ldrb	r3, [r7, #31]
 8003a88:	2101      	movs	r1, #1
 8003a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	dbea      	blt.n	8003a68 <Touch_GetXYtouch+0xec>
	touch >>= pollingLevel; //get the average value
 8003a92:	7ffb      	ldrb	r3, [r7, #31]
 8003a94:	6a3a      	ldr	r2, [r7, #32]
 8003a96:	fa22 f303 	lsr.w	r3, r2, r3
 8003a9a:	623b      	str	r3, [r7, #32]

	touchy = (AY * touch + BY);
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	ee07 3a90 	vmov	s15, r3
 8003aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa6:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8003b58 <Touch_GetXYtouch+0x1dc>
 8003aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003aae:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003b5c <Touch_GetXYtouch+0x1e0>
 8003ab2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ab6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aba:	ee17 3a90 	vmov	r3, s15
 8003abe:	617b      	str	r3, [r7, #20]

//having X and Y axis average values
// calculating coordinates as per screen orientation
	switch (current_orientation) {
 8003ac0:	4b27      	ldr	r3, [pc, #156]	; (8003b60 <Touch_GetXYtouch+0x1e4>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b03      	cmp	r3, #3
 8003ac6:	d83b      	bhi.n	8003b40 <Touch_GetXYtouch+0x1c4>
 8003ac8:	a201      	add	r2, pc, #4	; (adr r2, 8003ad0 <Touch_GetXYtouch+0x154>)
 8003aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ace:	bf00      	nop
 8003ad0:	08003ae1 	.word	0x08003ae1
 8003ad4:	08003af3 	.word	0x08003af3
 8003ad8:	08003b0b 	.word	0x08003b0b
 8003adc:	08003b29 	.word	0x08003b29
	case TOUCH0:
		*x = touchx;
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	801a      	strh	r2, [r3, #0]
		*y = touchy;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	801a      	strh	r2, [r3, #0]
		break;
 8003af0:	e026      	b.n	8003b40 <Touch_GetXYtouch+0x1c4>
	case TOUCH90:
		*x = touchy;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	801a      	strh	r2, [r3, #0]
		*y = (TOUCH_0_WIDTH - touchx);
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	801a      	strh	r2, [r3, #0]
		break;
 8003b08:	e01a      	b.n	8003b40 <Touch_GetXYtouch+0x1c4>
	case TOUCH180:
		*x = (TOUCH_0_WIDTH - touchx);
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	801a      	strh	r2, [r3, #0]
		*y = (TOUCH_0_HEIGHT - touchy);
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	801a      	strh	r2, [r3, #0]
		break;
 8003b26:	e00b      	b.n	8003b40 <Touch_GetXYtouch+0x1c4>
	case TOUCH270:
		*x = (TOUCH_0_HEIGHT - touchy);
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	801a      	strh	r2, [r3, #0]
		*y = touchx;
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	801a      	strh	r2, [r3, #0]
		break;
 8003b3e:	bf00      	nop
	}

// set flag indicating there was a touch
	*isTouch = 1;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	701a      	strb	r2, [r3, #0]
	return;
 8003b46:	bf00      	nop
}
 8003b48:	3728      	adds	r7, #40	; 0x28
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	bc0090b4 	.word	0xbc0090b4
 8003b54:	437758e2 	.word	0x437758e2
 8003b58:	3c29eb20 	.word	0x3c29eb20
 8003b5c:	40eff2fa 	.word	0x40eff2fa
 8003b60:	2000298c 	.word	0x2000298c

08003b64 <Touch_In_XY_area>:
 * 			width,
 * 			height	display area to be polled for a touch
 * @return	1		if there is a touch inside area
 * 			0		if no touch or touch outside area defined
 ***********************************************************/
uint8_t Touch_In_XY_area(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height) {
 8003b64:	b590      	push	{r4, r7, lr}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	4604      	mov	r4, r0
 8003b6c:	4608      	mov	r0, r1
 8003b6e:	4611      	mov	r1, r2
 8003b70:	461a      	mov	r2, r3
 8003b72:	4623      	mov	r3, r4
 8003b74:	80fb      	strh	r3, [r7, #6]
 8003b76:	4603      	mov	r3, r0
 8003b78:	80bb      	strh	r3, [r7, #4]
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	807b      	strh	r3, [r7, #2]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	803b      	strh	r3, [r7, #0]
//sTouchData posXY;
	uint16_t x, y;
	uint8_t isTouch;
	Touch_GetXYtouch(&x, &y, &isTouch);
 8003b82:	f107 020b 	add.w	r2, r7, #11
 8003b86:	f107 010c 	add.w	r1, r7, #12
 8003b8a:	f107 030e 	add.w	r3, r7, #14
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff fef4 	bl	800397c <Touch_GetXYtouch>
	if (!isTouch)
 8003b94:	7afb      	ldrb	r3, [r7, #11]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <Touch_In_XY_area+0x3a>
		return 0;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	e018      	b.n	8003bd0 <Touch_In_XY_area+0x6c>
	if (x >= xpos)
 8003b9e:	89fb      	ldrh	r3, [r7, #14]
 8003ba0:	88fa      	ldrh	r2, [r7, #6]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d813      	bhi.n	8003bce <Touch_In_XY_area+0x6a>
		if (x < xpos + width)
 8003ba6:	89fb      	ldrh	r3, [r7, #14]
 8003ba8:	4619      	mov	r1, r3
 8003baa:	88fa      	ldrh	r2, [r7, #6]
 8003bac:	887b      	ldrh	r3, [r7, #2]
 8003bae:	4413      	add	r3, r2
 8003bb0:	4299      	cmp	r1, r3
 8003bb2:	da0c      	bge.n	8003bce <Touch_In_XY_area+0x6a>
			if (y >= ypos)
 8003bb4:	89bb      	ldrh	r3, [r7, #12]
 8003bb6:	88ba      	ldrh	r2, [r7, #4]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d808      	bhi.n	8003bce <Touch_In_XY_area+0x6a>
				if (y < ypos + height)
 8003bbc:	89bb      	ldrh	r3, [r7, #12]
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	88ba      	ldrh	r2, [r7, #4]
 8003bc2:	883b      	ldrh	r3, [r7, #0]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	4299      	cmp	r1, r3
 8003bc8:	da01      	bge.n	8003bce <Touch_In_XY_area+0x6a>
					return 1;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e000      	b.n	8003bd0 <Touch_In_XY_area+0x6c>
	return 0;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd90      	pop	{r4, r7, pc}

08003bd8 <Touch_GotATouch>:
 * 						(use "2" in main loop activating touchgfxSignalVSync()
 * @returns		1	if recorded a touch
 * 				0	if no touch recorded
 ***********************************************************/

uint8_t Touch_GotATouch(uint8_t reset) {
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	4603      	mov	r3, r0
 8003be0:	71fb      	strb	r3, [r7, #7]
	static uint32_t touchTime = 0;
	uint8_t result = Touch_PenDown;
 8003be2:	4b10      	ldr	r3, [pc, #64]	; (8003c24 <Touch_GotATouch+0x4c>)
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	73fb      	strb	r3, [r7, #15]

//	if (result)
//		result=Touch_PollTouch();

	if (reset == 2) {
 8003be8:	79fb      	ldrb	r3, [r7, #7]
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d10f      	bne.n	8003c0e <Touch_GotATouch+0x36>
		if ((HAL_GetTick() - touchTime) >= TOUCHGFX_TIMING)
 8003bee:	f000 f8af 	bl	8003d50 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <Touch_GotATouch+0x50>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b3b      	cmp	r3, #59	; 0x3b
 8003bfc:	d905      	bls.n	8003c0a <Touch_GotATouch+0x32>
			touchTime = HAL_GetTick();
 8003bfe:	f000 f8a7 	bl	8003d50 <HAL_GetTick>
 8003c02:	4603      	mov	r3, r0
 8003c04:	4a08      	ldr	r2, [pc, #32]	; (8003c28 <Touch_GotATouch+0x50>)
 8003c06:	6013      	str	r3, [r2, #0]
 8003c08:	e001      	b.n	8003c0e <Touch_GotATouch+0x36>
		else
			result = 0;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	73fb      	strb	r3, [r7, #15]
	}
	if (reset == 1)
 8003c0e:	79fb      	ldrb	r3, [r7, #7]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d102      	bne.n	8003c1a <Touch_GotATouch+0x42>
		Touch_PenDown = 0;
 8003c14:	4b03      	ldr	r3, [pc, #12]	; (8003c24 <Touch_GotATouch+0x4c>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	701a      	strb	r2, [r3, #0]
	return result;
 8003c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	2000a99a 	.word	0x2000a99a
 8003c28:	2000a99c 	.word	0x2000a99c

08003c2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003c30:	f7fe fd1a 	bl	8002668 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c34:	480c      	ldr	r0, [pc, #48]	; (8003c68 <LoopForever+0x6>)
  ldr r1, =_edata
 8003c36:	490d      	ldr	r1, [pc, #52]	; (8003c6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c38:	4a0d      	ldr	r2, [pc, #52]	; (8003c70 <LoopForever+0xe>)
  movs r3, #0
 8003c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c3c:	e002      	b.n	8003c44 <LoopCopyDataInit>

08003c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c42:	3304      	adds	r3, #4

08003c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c48:	d3f9      	bcc.n	8003c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c4a:	4a0a      	ldr	r2, [pc, #40]	; (8003c74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003c4c:	4c0a      	ldr	r4, [pc, #40]	; (8003c78 <LoopForever+0x16>)
  movs r3, #0
 8003c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c50:	e001      	b.n	8003c56 <LoopFillZerobss>

08003c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c54:	3204      	adds	r2, #4

08003c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c58:	d3fb      	bcc.n	8003c52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c5a:	f006 fcbf 	bl	800a5dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003c5e:	f7fd fd0f 	bl	8001680 <main>

08003c62 <LoopForever>:

LoopForever:
    b LoopForever
 8003c62:	e7fe      	b.n	8003c62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003c64:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c6c:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8003c70:	080271b8 	.word	0x080271b8
  ldr r2, =_sbss
 8003c74:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8003c78:	2000a9b4 	.word	0x2000a9b4

08003c7c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c7c:	e7fe      	b.n	8003c7c <ADC1_IRQHandler>

08003c7e <HAL_Init>:
 *         Once done, time base tick starts incrementing: the tick variable counter is incremented
 *         each 1ms in the SysTick_Handler() interrupt handler.
 *
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b082      	sub	sp, #8
 8003c82:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

	/* Set Interrupt Group Priority */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c88:	2003      	movs	r0, #3
 8003c8a:	f000 f9a3 	bl	8003fd4 <HAL_NVIC_SetPriorityGrouping>

	/* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
	if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK) {
 8003c8e:	2000      	movs	r0, #0
 8003c90:	f000 f80e 	bl	8003cb0 <HAL_InitTick>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <HAL_Init+0x22>
		status = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	71fb      	strb	r3, [r7, #7]
 8003c9e:	e001      	b.n	8003ca4 <HAL_Init+0x26>
	} else {
		/* Init the low level hardware */
		HAL_MspInit();
 8003ca0:	f7fe f9cc 	bl	800203c <HAL_MspInit>
	}

	/* Return function status */
	return status;
 8003ca4:	79fb      	ldrb	r3, [r7, #7]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <HAL_InitTick>:
 *       The function is declared as __weak  to be overwritten  in case of other
 *       implementation  in user file.
 * @param TickPriority  Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	73fb      	strb	r3, [r7, #15]

	/* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
	if ((uint32_t) uwTickFreq != 0U) {
 8003cbc:	4b17      	ldr	r3, [pc, #92]	; (8003d1c <HAL_InitTick+0x6c>)
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d023      	beq.n	8003d0c <HAL_InitTick+0x5c>
		/*Configure the SysTick to have interrupt in 1ms time basis*/
		if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t) uwTickFreq)) == 0U) {
 8003cc4:	4b16      	ldr	r3, [pc, #88]	; (8003d20 <HAL_InitTick+0x70>)
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <HAL_InitTick+0x6c>)
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	4619      	mov	r1, r3
 8003cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 f9bd 	bl	800405a <HAL_SYSTICK_Config>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10f      	bne.n	8003d06 <HAL_InitTick+0x56>
			/* Configure the SysTick IRQ priority */
			if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b0f      	cmp	r3, #15
 8003cea:	d809      	bhi.n	8003d00 <HAL_InitTick+0x50>
				HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cec:	2200      	movs	r2, #0
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf4:	f000 f979 	bl	8003fea <HAL_NVIC_SetPriority>
				uwTickPrio = TickPriority;
 8003cf8:	4a0a      	ldr	r2, [pc, #40]	; (8003d24 <HAL_InitTick+0x74>)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6013      	str	r3, [r2, #0]
 8003cfe:	e007      	b.n	8003d10 <HAL_InitTick+0x60>
			} else {
				status = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	73fb      	strb	r3, [r7, #15]
 8003d04:	e004      	b.n	8003d10 <HAL_InitTick+0x60>
			}
		} else {
			status = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	73fb      	strb	r3, [r7, #15]
 8003d0a:	e001      	b.n	8003d10 <HAL_InitTick+0x60>
		}
	} else {
		status = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	73fb      	strb	r3, [r7, #15]
	}

	/* Return function status */
	return status;
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	2000003c 	.word	0x2000003c
 8003d20:	20000028 	.word	0x20000028
 8003d24:	20000038 	.word	0x20000038

08003d28 <HAL_IncTick>:
 *       in SysTick ISR.
 * @note This function is declared as __weak to be overwritten in case of other
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
	uwTick += (uint32_t) uwTickFreq;
 8003d2c:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <HAL_IncTick+0x20>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	461a      	mov	r2, r3
 8003d32:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <HAL_IncTick+0x24>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4413      	add	r3, r2
 8003d38:	4a04      	ldr	r2, [pc, #16]	; (8003d4c <HAL_IncTick+0x24>)
 8003d3a:	6013      	str	r3, [r2, #0]
}
 8003d3c:	bf00      	nop
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	2000003c 	.word	0x2000003c
 8003d4c:	2000a9a0 	.word	0x2000a9a0

08003d50 <HAL_GetTick>:
 * @brief Provide a tick value in millisecond.
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
	return uwTick;
 8003d54:	4b03      	ldr	r3, [pc, #12]	; (8003d64 <HAL_GetTick+0x14>)
 8003d56:	681b      	ldr	r3, [r3, #0]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	2000a9a0 	.word	0x2000a9a0

08003d68 <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay  specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 8003d70:	f7ff ffee 	bl	8003d50 <HAL_GetTick>
 8003d74:	60b8      	str	r0, [r7, #8]
	uint32_t wait = Delay;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	60fb      	str	r3, [r7, #12]

	/* Add a period to guaranty minimum wait */
	if (wait < HAL_MAX_DELAY) {
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d80:	d005      	beq.n	8003d8e <HAL_Delay+0x26>
		wait += (uint32_t) uwTickFreq;
 8003d82:	4b0a      	ldr	r3, [pc, #40]	; (8003dac <HAL_Delay+0x44>)
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	461a      	mov	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 8003d8e:	bf00      	nop
 8003d90:	f7ff ffde 	bl	8003d50 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d8f7      	bhi.n	8003d90 <HAL_Delay+0x28>
	}
}
 8003da0:	bf00      	nop
 8003da2:	bf00      	nop
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	2000003c 	.word	0x2000003c

08003db0 <__NVIC_SetPriorityGrouping>:
	 Only values from 0..7 are used.
	 In case of a conflict between priority grouping and available
	 priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
	 \param [in]      PriorityGroup  Priority grouping field.
	 */
	__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
		uint32_t reg_value;
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	60fb      	str	r3, [r7, #12]

		reg_value = SCB->AIRCR; /* read old register configuration    */
 8003dc0:	4b0c      	ldr	r3, [pc, #48]	; (8003df4 <__NVIC_SetPriorityGrouping+0x44>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	60bb      	str	r3, [r7, #8]
		reg_value &= ~((uint32_t) (SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dcc:	4013      	ands	r3, r2
 8003dce:	60bb      	str	r3, [r7, #8]
		reg_value = (reg_value | ((uint32_t) 0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
				| (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)); /* Insert write key and priority group */
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	021a      	lsls	r2, r3, #8
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4313      	orrs	r3, r2
		reg_value = (reg_value | ((uint32_t) 0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
 8003dd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003de0:	60bb      	str	r3, [r7, #8]
		SCB->AIRCR = reg_value;
 8003de2:	4a04      	ldr	r2, [pc, #16]	; (8003df4 <__NVIC_SetPriorityGrouping+0x44>)
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	60d3      	str	r3, [r2, #12]
	}
 8003de8:	bf00      	nop
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	e000ed00 	.word	0xe000ed00

08003df8 <__NVIC_GetPriorityGrouping>:
	/**
	 \brief   Get Priority Grouping
	 \details Reads the priority grouping field from the NVIC Interrupt Controller.
	 \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
	 */
	__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void) {
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
		return ((uint32_t) ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dfc:	4b04      	ldr	r3, [pc, #16]	; (8003e10 <__NVIC_GetPriorityGrouping+0x18>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	0a1b      	lsrs	r3, r3, #8
 8003e02:	f003 0307 	and.w	r3, r3, #7
	}
 8003e06:	4618      	mov	r0, r3
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	e000ed00 	.word	0xe000ed00

08003e14 <__NVIC_EnableIRQ>:
	 \brief   Enable Interrupt
	 \details Enables a device specific interrupt in the NVIC interrupt controller.
	 \param [in]      IRQn  Device specific interrupt number.
	 \note    IRQn must not be negative.
	 */
	__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn) {
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 8003e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	db0b      	blt.n	8003e3e <__NVIC_EnableIRQ+0x2a>
			__COMPILER_BARRIER();
			NVIC->ISER[(((uint32_t) IRQn) >> 5UL)] = (uint32_t) (1UL << (((uint32_t) IRQn) & 0x1FUL));
 8003e26:	79fb      	ldrb	r3, [r7, #7]
 8003e28:	f003 021f 	and.w	r2, r3, #31
 8003e2c:	4907      	ldr	r1, [pc, #28]	; (8003e4c <__NVIC_EnableIRQ+0x38>)
 8003e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	2001      	movs	r0, #1
 8003e36:	fa00 f202 	lsl.w	r2, r0, r2
 8003e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			__COMPILER_BARRIER();
		}
	}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	e000e100 	.word	0xe000e100

08003e50 <__NVIC_DisableIRQ>:
	 \brief   Disable Interrupt
	 \details Disables a device specific interrupt in the NVIC interrupt controller.
	 \param [in]      IRQn  Device specific interrupt number.
	 \note    IRQn must not be negative.
	 */
	__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn) {
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	4603      	mov	r3, r0
 8003e58:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 8003e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	db12      	blt.n	8003e88 <__NVIC_DisableIRQ+0x38>
			NVIC->ICER[(((uint32_t) IRQn) >> 5UL)] = (uint32_t) (1UL << (((uint32_t) IRQn) & 0x1FUL));
 8003e62:	79fb      	ldrb	r3, [r7, #7]
 8003e64:	f003 021f 	and.w	r2, r3, #31
 8003e68:	490a      	ldr	r1, [pc, #40]	; (8003e94 <__NVIC_DisableIRQ+0x44>)
 8003e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6e:	095b      	lsrs	r3, r3, #5
 8003e70:	2001      	movs	r0, #1
 8003e72:	fa00 f202 	lsl.w	r2, r0, r2
 8003e76:	3320      	adds	r3, #32
 8003e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	__ASM volatile ("dsb 0xF":::"memory");
 8003e7c:	f3bf 8f4f 	dsb	sy
}
 8003e80:	bf00      	nop
	__ASM volatile ("isb 0xF":::"memory");
 8003e82:	f3bf 8f6f 	isb	sy
}
 8003e86:	bf00      	nop
			__DSB();
			__ISB();
		}
	}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	e000e100 	.word	0xe000e100

08003e98 <__NVIC_ClearPendingIRQ>:
	 \brief   Clear Pending Interrupt
	 \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
	 \param [in]      IRQn  Device specific interrupt number.
	 \note    IRQn must not be negative.
	 */
	__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn) {
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 8003ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	db0c      	blt.n	8003ec4 <__NVIC_ClearPendingIRQ+0x2c>
			NVIC->ICPR[(((uint32_t) IRQn) >> 5UL)] = (uint32_t) (1UL << (((uint32_t) IRQn) & 0x1FUL));
 8003eaa:	79fb      	ldrb	r3, [r7, #7]
 8003eac:	f003 021f 	and.w	r2, r3, #31
 8003eb0:	4907      	ldr	r1, [pc, #28]	; (8003ed0 <__NVIC_ClearPendingIRQ+0x38>)
 8003eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb6:	095b      	lsrs	r3, r3, #5
 8003eb8:	2001      	movs	r0, #1
 8003eba:	fa00 f202 	lsl.w	r2, r0, r2
 8003ebe:	3360      	adds	r3, #96	; 0x60
 8003ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
	}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	e000e100 	.word	0xe000e100

08003ed4 <__NVIC_SetPriority>:
	 or negative to specify a processor exception.
	 \param [in]      IRQn  Interrupt number.
	 \param [in]  priority  Priority to set.
	 \note    The priority cannot be set for every processor exception.
	 */
	__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority) {
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	6039      	str	r1, [r7, #0]
 8003ede:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 8003ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	db0a      	blt.n	8003efe <__NVIC_SetPriority+0x2a>
			NVIC->IP[((uint32_t) IRQn)] = (uint8_t) ((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	490c      	ldr	r1, [pc, #48]	; (8003f20 <__NVIC_SetPriority+0x4c>)
 8003eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef2:	0112      	lsls	r2, r2, #4
 8003ef4:	b2d2      	uxtb	r2, r2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
		} else {
			SCB->SHP[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority << (8U - __NVIC_PRIO_BITS))
					& (uint32_t) 0xFFUL);
		}
	}
 8003efc:	e00a      	b.n	8003f14 <__NVIC_SetPriority+0x40>
			SCB->SHP[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority << (8U - __NVIC_PRIO_BITS))
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	4908      	ldr	r1, [pc, #32]	; (8003f24 <__NVIC_SetPriority+0x50>)
 8003f04:	79fb      	ldrb	r3, [r7, #7]
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	3b04      	subs	r3, #4
 8003f0c:	0112      	lsls	r2, r2, #4
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	440b      	add	r3, r1
 8003f12:	761a      	strb	r2, [r3, #24]
	}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	e000e100 	.word	0xe000e100
 8003f24:	e000ed00 	.word	0xe000ed00

08003f28 <NVIC_EncodePriority>:
	 \param [in]     PriorityGroup  Used priority group.
	 \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
	 \param [in]       SubPriority  Subpriority value (starting from 0).
	 \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
	 */
	__STATIC_INLINE uint32_t NVIC_EncodePriority(uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority) {
 8003f28:	b480      	push	{r7}
 8003f2a:	b089      	sub	sp, #36	; 0x24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	61fb      	str	r3, [r7, #28]
		uint32_t PreemptPriorityBits;
		uint32_t SubPriorityBits;

		PreemptPriorityBits =
				((7UL - PriorityGroupTmp) > (uint32_t) (__NVIC_PRIO_BITS)) ?
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	f1c3 0307 	rsb	r3, r3, #7
		PreemptPriorityBits =
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	bf28      	it	cs
 8003f46:	2304      	movcs	r3, #4
 8003f48:	61bb      	str	r3, [r7, #24]
						(uint32_t) (__NVIC_PRIO_BITS) : (uint32_t) (7UL - PriorityGroupTmp);
		SubPriorityBits =
				((PriorityGroupTmp + (uint32_t) (__NVIC_PRIO_BITS)) < (uint32_t) 7UL) ?
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	3304      	adds	r3, #4
						(uint32_t) 0UL : (uint32_t) ((PriorityGroupTmp - 7UL) + (uint32_t) (__NVIC_PRIO_BITS));
 8003f4e:	2b06      	cmp	r3, #6
 8003f50:	d902      	bls.n	8003f58 <NVIC_EncodePriority+0x30>
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	3b03      	subs	r3, #3
 8003f56:	e000      	b.n	8003f5a <NVIC_EncodePriority+0x32>
 8003f58:	2300      	movs	r3, #0
		SubPriorityBits =
 8003f5a:	617b      	str	r3, [r7, #20]

		return (((PreemptPriority & (uint32_t) ((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits)
 8003f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	43da      	mvns	r2, r3
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	401a      	ands	r2, r3
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	409a      	lsls	r2, r3
				| ((SubPriority & (uint32_t) ((1UL << (SubPriorityBits)) - 1UL))));
 8003f70:	f04f 31ff 	mov.w	r1, #4294967295
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7a:	43d9      	mvns	r1, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	400b      	ands	r3, r1
 8003f80:	4313      	orrs	r3, r2
	}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3724      	adds	r7, #36	; 0x24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
	...

08003f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fa0:	d301      	bcc.n	8003fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e00f      	b.n	8003fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fa6:	4a0a      	ldr	r2, [pc, #40]	; (8003fd0 <SysTick_Config+0x40>)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fae:	210f      	movs	r1, #15
 8003fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb4:	f7ff ff8e 	bl	8003ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fb8:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <SysTick_Config+0x40>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fbe:	4b04      	ldr	r3, [pc, #16]	; (8003fd0 <SysTick_Config+0x40>)
 8003fc0:	2207      	movs	r2, #7
 8003fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	e000e010 	.word	0xe000e010

08003fd4 <HAL_NVIC_SetPriorityGrouping>:
 *                                    0 bit  for subpriority
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
 *         The pending IRQ priority will be managed only by the subpriority.
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f7ff fee7 	bl	8003db0 <__NVIC_SetPriorityGrouping>
}
 8003fe2:	bf00      	nop
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <HAL_NVIC_SetPriority>:
 * @param  SubPriority: the subpriority level for the IRQ channel.
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority) {
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b086      	sub	sp, #24
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	60b9      	str	r1, [r7, #8]
 8003ff4:	607a      	str	r2, [r7, #4]
 8003ff6:	73fb      	strb	r3, [r7, #15]
	uint32_t prioritygroup = 0x00;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	617b      	str	r3, [r7, #20]

	/* Check the parameters */
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

	prioritygroup = NVIC_GetPriorityGrouping();
 8003ffc:	f7ff fefc 	bl	8003df8 <__NVIC_GetPriorityGrouping>
 8004000:	6178      	str	r0, [r7, #20]

	NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	68b9      	ldr	r1, [r7, #8]
 8004006:	6978      	ldr	r0, [r7, #20]
 8004008:	f7ff ff8e 	bl	8003f28 <NVIC_EncodePriority>
 800400c:	4602      	mov	r2, r0
 800400e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004012:	4611      	mov	r1, r2
 8004014:	4618      	mov	r0, r3
 8004016:	f7ff ff5d 	bl	8003ed4 <__NVIC_SetPriority>
}
 800401a:	bf00      	nop
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <HAL_NVIC_EnableIRQ>:
 * @param  IRQn External interrupt number.
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn) {
 8004022:	b580      	push	{r7, lr}
 8004024:	b082      	sub	sp, #8
 8004026:	af00      	add	r7, sp, #0
 8004028:	4603      	mov	r3, r0
 800402a:	71fb      	strb	r3, [r7, #7]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Enable interrupt */
	NVIC_EnableIRQ(IRQn);
 800402c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff feef 	bl	8003e14 <__NVIC_EnableIRQ>
}
 8004036:	bf00      	nop
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <HAL_NVIC_DisableIRQ>:
 * @param  IRQn External interrupt number.
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
 * @retval None
 */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn) {
 800403e:	b580      	push	{r7, lr}
 8004040:	b082      	sub	sp, #8
 8004042:	af00      	add	r7, sp, #0
 8004044:	4603      	mov	r3, r0
 8004046:	71fb      	strb	r3, [r7, #7]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Disable interrupt */
	NVIC_DisableIRQ(IRQn);
 8004048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff feff 	bl	8003e50 <__NVIC_DisableIRQ>
}
 8004052:	bf00      	nop
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <HAL_SYSTICK_Config>:
 *         Counter is in free running mode to generate periodic interrupts.
 * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb) {
 800405a:	b580      	push	{r7, lr}
 800405c:	b082      	sub	sp, #8
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
	return SysTick_Config(TicksNumb);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff ff94 	bl	8003f90 <SysTick_Config>
 8004068:	4603      	mov	r3, r0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <HAL_NVIC_ClearPendingIRQ>:
 * @param  IRQn External interrupt number.
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
 * @retval None
 */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn) {
 8004072:	b580      	push	{r7, lr}
 8004074:	b082      	sub	sp, #8
 8004076:	af00      	add	r7, sp, #0
 8004078:	4603      	mov	r3, r0
 800407a:	71fb      	strb	r3, [r7, #7]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Clear pending interrupt */
	NVIC_ClearPendingIRQ(IRQn);
 800407c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff ff09 	bl	8003e98 <__NVIC_ClearPendingIRQ>
}
 8004086:	bf00      	nop
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <HAL_DMA_Init>:
 *         parameters in the DMA_InitTypeDef and initialize the associated handle.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *              the configuration information for the specified DMA Channel.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma) {
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
	uint32_t tmp;

	/* Check the DMA handle allocation */
	if (hdma == NULL) {
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_DMA_Init+0x12>
		return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e098      	b.n	80041d4 <HAL_DMA_Init+0x144>
	assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

	assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

	/* Compute the channel index */
	if ((uint32_t) (hdma->Instance) < (uint32_t) (DMA2_Channel1)) {
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	4b4d      	ldr	r3, [pc, #308]	; (80041e0 <HAL_DMA_Init+0x150>)
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d80f      	bhi.n	80040ce <HAL_DMA_Init+0x3e>
		/* DMA1 */
		hdma->ChannelIndex = (((uint32_t) hdma->Instance - (uint32_t) DMA1_Channel1)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	4b4b      	ldr	r3, [pc, #300]	; (80041e4 <HAL_DMA_Init+0x154>)
 80040b6:	4413      	add	r3, r2
				/ ((uint32_t) DMA1_Channel2 - (uint32_t) DMA1_Channel1)) << 2U;
 80040b8:	4a4b      	ldr	r2, [pc, #300]	; (80041e8 <HAL_DMA_Init+0x158>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	091b      	lsrs	r3, r3, #4
 80040c0:	009a      	lsls	r2, r3, #2
		hdma->ChannelIndex = (((uint32_t) hdma->Instance - (uint32_t) DMA1_Channel1)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	645a      	str	r2, [r3, #68]	; 0x44
		hdma->DmaBaseAddress = DMA1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a48      	ldr	r2, [pc, #288]	; (80041ec <HAL_DMA_Init+0x15c>)
 80040ca:	641a      	str	r2, [r3, #64]	; 0x40
 80040cc:	e00e      	b.n	80040ec <HAL_DMA_Init+0x5c>
	} else {
		/* DMA2 */
		hdma->ChannelIndex = (((uint32_t) hdma->Instance - (uint32_t) DMA2_Channel1)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	4b46      	ldr	r3, [pc, #280]	; (80041f0 <HAL_DMA_Init+0x160>)
 80040d6:	4413      	add	r3, r2
				/ ((uint32_t) DMA2_Channel2 - (uint32_t) DMA2_Channel1)) << 2U;
 80040d8:	4a43      	ldr	r2, [pc, #268]	; (80041e8 <HAL_DMA_Init+0x158>)
 80040da:	fba2 2303 	umull	r2, r3, r2, r3
 80040de:	091b      	lsrs	r3, r3, #4
 80040e0:	009a      	lsls	r2, r3, #2
		hdma->ChannelIndex = (((uint32_t) hdma->Instance - (uint32_t) DMA2_Channel1)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	645a      	str	r2, [r3, #68]	; 0x44
		hdma->DmaBaseAddress = DMA2;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a42      	ldr	r2, [pc, #264]	; (80041f4 <HAL_DMA_Init+0x164>)
 80040ea:	641a      	str	r2, [r3, #64]	; 0x40
	}

	/* Change DMA peripheral state */
	hdma->State = HAL_DMA_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	/* Get the CR register value */
	tmp = hdma->Instance->CCR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	60fb      	str	r3, [r7, #12]

	/* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
	tmp &= ((uint32_t) ~(DMA_CCR_PL | DMA_CCR_MSIZE | DMA_CCR_PSIZE |
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004106:	60fb      	str	r3, [r7, #12]
	DMA_CCR_MINC | DMA_CCR_PINC | DMA_CCR_CIRC |
	DMA_CCR_DIR | DMA_CCR_MEM2MEM));

	/* Prepare the DMA Channel configuration */
	tmp |= hdma->Init.Direction | hdma->Init.PeriphInc | hdma->Init.MemInc | hdma->Init.PeriphDataAlignment
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	431a      	orrs	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	431a      	orrs	r2, r3
			| hdma->Init.MemDataAlignment | hdma->Init.Mode | hdma->Init.Priority;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	431a      	orrs	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	4313      	orrs	r3, r2
	tmp |= hdma->Init.Direction | hdma->Init.PeriphInc | hdma->Init.MemInc | hdma->Init.PeriphDataAlignment
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]

	/* Write to DMA Channel CR register */
	hdma->Instance->CCR = tmp;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

	/* Set request selection */
	if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY) {
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004146:	d039      	beq.n	80041bc <HAL_DMA_Init+0x12c>
		/* Write to DMA channel selection register */
		if (DMA1 == hdma->DmaBaseAddress) {
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	4a27      	ldr	r2, [pc, #156]	; (80041ec <HAL_DMA_Init+0x15c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d11a      	bne.n	8004188 <HAL_DMA_Init+0xf8>
			/* Reset request selection for DMA1 Channelx */
			DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004152:	4b29      	ldr	r3, [pc, #164]	; (80041f8 <HAL_DMA_Init+0x168>)
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415a:	f003 031c 	and.w	r3, r3, #28
 800415e:	210f      	movs	r1, #15
 8004160:	fa01 f303 	lsl.w	r3, r1, r3
 8004164:	43db      	mvns	r3, r3
 8004166:	4924      	ldr	r1, [pc, #144]	; (80041f8 <HAL_DMA_Init+0x168>)
 8004168:	4013      	ands	r3, r2
 800416a:	600b      	str	r3, [r1, #0]

			/* Configure request selection for DMA1 Channelx */
			DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800416c:	4b22      	ldr	r3, [pc, #136]	; (80041f8 <HAL_DMA_Init+0x168>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6859      	ldr	r1, [r3, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004178:	f003 031c 	and.w	r3, r3, #28
 800417c:	fa01 f303 	lsl.w	r3, r1, r3
 8004180:	491d      	ldr	r1, [pc, #116]	; (80041f8 <HAL_DMA_Init+0x168>)
 8004182:	4313      	orrs	r3, r2
 8004184:	600b      	str	r3, [r1, #0]
 8004186:	e019      	b.n	80041bc <HAL_DMA_Init+0x12c>
		} else /* DMA2 */
		{
			/* Reset request selection for DMA2 Channelx */
			DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004188:	4b1c      	ldr	r3, [pc, #112]	; (80041fc <HAL_DMA_Init+0x16c>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004190:	f003 031c 	and.w	r3, r3, #28
 8004194:	210f      	movs	r1, #15
 8004196:	fa01 f303 	lsl.w	r3, r1, r3
 800419a:	43db      	mvns	r3, r3
 800419c:	4917      	ldr	r1, [pc, #92]	; (80041fc <HAL_DMA_Init+0x16c>)
 800419e:	4013      	ands	r3, r2
 80041a0:	600b      	str	r3, [r1, #0]

			/* Configure request selection for DMA2 Channelx */
			DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80041a2:	4b16      	ldr	r3, [pc, #88]	; (80041fc <HAL_DMA_Init+0x16c>)
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6859      	ldr	r1, [r3, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ae:	f003 031c 	and.w	r3, r3, #28
 80041b2:	fa01 f303 	lsl.w	r3, r1, r3
 80041b6:	4911      	ldr	r1, [pc, #68]	; (80041fc <HAL_DMA_Init+0x16c>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
	/* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
	/* STM32L496xx || STM32L4A6xx                                              */

	/* Initialise the error code */
	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	63da      	str	r2, [r3, #60]	; 0x3c

	/* Initialize the DMA state*/
	hdma->State = HAL_DMA_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	/* Allocate lock resource and initialize it */
	hdma->Lock = HAL_UNLOCKED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	40020407 	.word	0x40020407
 80041e4:	bffdfff8 	.word	0xbffdfff8
 80041e8:	cccccccd 	.word	0xcccccccd
 80041ec:	40020000 	.word	0x40020000
 80041f0:	bffdfbf8 	.word	0xbffdfbf8
 80041f4:	40020400 	.word	0x40020400
 80041f8:	400200a8 	.word	0x400200a8
 80041fc:	400204a8 	.word	0x400204a8

08004200 <HAL_DMA_Start_IT>:
 * @param  DstAddress The destination memory Buffer address
 * @param  DataLength The length of data to be transferred from source to destination
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
		uint32_t DataLength) {
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800420e:	2300      	movs	r3, #0
 8004210:	75fb      	strb	r3, [r7, #23]

	/* Check the parameters */
	assert_param(IS_DMA_BUFFER_SIZE(DataLength));

	/* Process locked */
	__HAL_LOCK(hdma);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004218:	2b01      	cmp	r3, #1
 800421a:	d101      	bne.n	8004220 <HAL_DMA_Start_IT+0x20>
 800421c:	2302      	movs	r3, #2
 800421e:	e04b      	b.n	80042b8 <HAL_DMA_Start_IT+0xb8>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (HAL_DMA_STATE_READY == hdma->State) {
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b01      	cmp	r3, #1
 8004232:	d13a      	bne.n	80042aa <HAL_DMA_Start_IT+0xaa>
		/* Change DMA peripheral state */
		hdma->State = HAL_DMA_STATE_BUSY;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Disable the peripheral */
		__HAL_DMA_DISABLE(hdma);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0201 	bic.w	r2, r2, #1
 8004250:	601a      	str	r2, [r3, #0]

		/* Configure the source, destination address and the data length & clear flags*/
		DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	68b9      	ldr	r1, [r7, #8]
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 f95f 	bl	800451c <DMA_SetConfig>

		/* Enable the transfer complete interrupt */
		/* Enable the transfer Error interrupt */
		if (NULL != hdma->XferHalfCpltCallback) {
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	2b00      	cmp	r3, #0
 8004264:	d008      	beq.n	8004278 <HAL_DMA_Start_IT+0x78>
			/* Enable the Half transfer complete interrupt as well */
			__HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f042 020e 	orr.w	r2, r2, #14
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	e00f      	b.n	8004298 <HAL_DMA_Start_IT+0x98>
		} else {
			__HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0204 	bic.w	r2, r2, #4
 8004286:	601a      	str	r2, [r3, #0]
			__HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 020a 	orr.w	r2, r2, #10
 8004296:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

		/* Enable the Peripheral */
		__HAL_DMA_ENABLE(hdma);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0201 	orr.w	r2, r2, #1
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	e005      	b.n	80042b6 <HAL_DMA_Start_IT+0xb6>
	} else {
		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		/* Remain BUSY */
		status = HAL_BUSY;
 80042b2:	2302      	movs	r3, #2
 80042b4:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 80042b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <HAL_DMA_Abort>:
 * @brief  Abort the DMA Transfer.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA Channel.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma) {
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 80042c8:	2300      	movs	r3, #0
 80042ca:	73fb      	strb	r3, [r7, #15]

	/* Check the DMA peripheral state */
	if (hdma->State != HAL_DMA_STATE_BUSY) {
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d008      	beq.n	80042ea <HAL_DMA_Abort+0x2a>
		hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2204      	movs	r2, #4
 80042dc:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e022      	b.n	8004330 <HAL_DMA_Abort+0x70>
	} else {
		/* Disable DMA IT */
		__HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 020e 	bic.w	r2, r2, #14
 80042f8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

		/* Disable the channel */
		__HAL_DMA_DISABLE(hdma);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 0201 	bic.w	r2, r2, #1
 8004308:	601a      	str	r2, [r3, #0]

		/* Clear all flags */
		hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430e:	f003 021c 	and.w	r2, r3, #28
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	2101      	movs	r1, #1
 8004318:	fa01 f202 	lsl.w	r2, r1, r2
 800431c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

		/* Change the DMA state */
		hdma->State = HAL_DMA_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		return status;
 800432e:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 8004330:	4618      	mov	r0, r3
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_DMA_Abort_IT>:
 * @brief  Aborts the DMA Transfer in Interrupt mode.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *                 the configuration information for the specified DMA Channel.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma) {
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8004344:	2300      	movs	r3, #0
 8004346:	73fb      	strb	r3, [r7, #15]

	if (HAL_DMA_STATE_BUSY != hdma->State) {
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d005      	beq.n	8004360 <HAL_DMA_Abort_IT+0x24>
		/* no transfer ongoing */
		hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2204      	movs	r2, #4
 8004358:	63da      	str	r2, [r3, #60]	; 0x3c

		status = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	73fb      	strb	r3, [r7, #15]
 800435e:	e029      	b.n	80043b4 <HAL_DMA_Abort_IT+0x78>
	} else {
		/* Disable DMA IT */
		__HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 020e 	bic.w	r2, r2, #14
 800436e:	601a      	str	r2, [r3, #0]

		/* Disable the channel */
		__HAL_DMA_DISABLE(hdma);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0201 	bic.w	r2, r2, #1
 800437e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
		/* Clear all flags */
		hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004384:	f003 021c 	and.w	r2, r3, #28
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	2101      	movs	r1, #1
 800438e:	fa01 f202 	lsl.w	r2, r1, r2
 8004392:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

		/* Change the DMA state */
		hdma->State = HAL_DMA_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		/* Call User Abort callback */
		if (hdma->XferAbortCallback != NULL) {
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <HAL_DMA_Abort_IT+0x78>
			hdma->XferAbortCallback(hdma);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	4798      	blx	r3
		}
	}
	return status;
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <HAL_DMA_IRQHandler>:
 * @brief  Handle DMA interrupt request.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA Channel.
 * @retval None
 */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma) {
 80043be:	b580      	push	{r7, lr}
 80043c0:	b084      	sub	sp, #16
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	60fb      	str	r3, [r7, #12]
	uint32_t source_it = hdma->Instance->CCR;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	60bb      	str	r3, [r7, #8]

	/* Half Transfer Complete Interrupt management ******************************/
	if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U)) {
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043da:	f003 031c 	and.w	r3, r3, #28
 80043de:	2204      	movs	r2, #4
 80043e0:	409a      	lsls	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4013      	ands	r3, r2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d026      	beq.n	8004438 <HAL_DMA_IRQHandler+0x7a>
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d021      	beq.n	8004438 <HAL_DMA_IRQHandler+0x7a>
		/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
		if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U) {
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0320 	and.w	r3, r3, #32
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d107      	bne.n	8004412 <HAL_DMA_IRQHandler+0x54>
			/* Disable the half transfer interrupt */
			__HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0204 	bic.w	r2, r2, #4
 8004410:	601a      	str	r2, [r3, #0]
		}
		/* Clear the half transfer complete flag */
		hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004416:	f003 021c 	and.w	r2, r3, #28
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	2104      	movs	r1, #4
 8004420:	fa01 f202 	lsl.w	r2, r1, r2
 8004424:	605a      	str	r2, [r3, #4]

		/* DMA peripheral state is not updated in Half Transfer */
		/* but in Transfer Complete case */

		if (hdma->XferHalfCpltCallback != NULL) {
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	2b00      	cmp	r3, #0
 800442c:	d071      	beq.n	8004512 <HAL_DMA_IRQHandler+0x154>
			/* Half transfer callback */
			hdma->XferHalfCpltCallback(hdma);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	4798      	blx	r3
		if (hdma->XferHalfCpltCallback != NULL) {
 8004436:	e06c      	b.n	8004512 <HAL_DMA_IRQHandler+0x154>
		}
	}

	/* Transfer Complete Interrupt management ***********************************/
	else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U)) {
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443c:	f003 031c 	and.w	r3, r3, #28
 8004440:	2202      	movs	r2, #2
 8004442:	409a      	lsls	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4013      	ands	r3, r2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d02e      	beq.n	80044aa <HAL_DMA_IRQHandler+0xec>
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d029      	beq.n	80044aa <HAL_DMA_IRQHandler+0xec>
		if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U) {
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0320 	and.w	r3, r3, #32
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10b      	bne.n	800447c <HAL_DMA_IRQHandler+0xbe>
			/* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
			/* Disable the transfer complete and error interrupt */
			/* if the DMA mode is not CIRCULAR  */
			__HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 020a 	bic.w	r2, r2, #10
 8004472:	601a      	str	r2, [r3, #0]

			/* Change the DMA state */
			hdma->State = HAL_DMA_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		}
		/* Clear the transfer complete flag */
		hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004480:	f003 021c 	and.w	r2, r3, #28
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004488:	2102      	movs	r1, #2
 800448a:	fa01 f202 	lsl.w	r2, r1, r2
 800448e:	605a      	str	r2, [r3, #4]

		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		if (hdma->XferCpltCallback != NULL) {
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449c:	2b00      	cmp	r3, #0
 800449e:	d038      	beq.n	8004512 <HAL_DMA_IRQHandler+0x154>
			/* Transfer complete callback */
			hdma->XferCpltCallback(hdma);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	4798      	blx	r3
		if (hdma->XferCpltCallback != NULL) {
 80044a8:	e033      	b.n	8004512 <HAL_DMA_IRQHandler+0x154>
		}
	}

	/* Transfer Error Interrupt management **************************************/
	else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U)) {
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ae:	f003 031c 	and.w	r3, r3, #28
 80044b2:	2208      	movs	r2, #8
 80044b4:	409a      	lsls	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	4013      	ands	r3, r2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d02a      	beq.n	8004514 <HAL_DMA_IRQHandler+0x156>
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	f003 0308 	and.w	r3, r3, #8
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d025      	beq.n	8004514 <HAL_DMA_IRQHandler+0x156>
		/* When a DMA transfer error occurs */
		/* A hardware clear of its EN bits is performed */
		/* Disable ALL DMA IT */
		__HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 020e 	bic.w	r2, r2, #14
 80044d6:	601a      	str	r2, [r3, #0]

		/* Clear all flags */
		hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044dc:	f003 021c 	and.w	r2, r3, #28
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e4:	2101      	movs	r1, #1
 80044e6:	fa01 f202 	lsl.w	r2, r1, r2
 80044ea:	605a      	str	r2, [r3, #4]

		/* Update error code */
		hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Change the DMA state */
		hdma->State = HAL_DMA_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		if (hdma->XferErrorCallback != NULL) {
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004506:	2b00      	cmp	r3, #0
 8004508:	d004      	beq.n	8004514 <HAL_DMA_IRQHandler+0x156>
			/* Transfer error callback */
			hdma->XferErrorCallback(hdma);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	4798      	blx	r3
		}
	} else {
		/* Nothing To Do */
	}
	return;
 8004512:	bf00      	nop
 8004514:	bf00      	nop
}
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <DMA_SetConfig>:
 * @param  SrcAddress The source memory Buffer address
 * @param  DstAddress The destination memory Buffer address
 * @param  DataLength The length of data to be transferred from source to destination
 * @retval HAL status
 */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength) {
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
 8004528:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

	/* Clear all flags */
	hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452e:	f003 021c 	and.w	r2, r3, #28
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	2101      	movs	r1, #1
 8004538:	fa01 f202 	lsl.w	r2, r1, r2
 800453c:	605a      	str	r2, [r3, #4]

	/* Configure DMA Channel data length */
	hdma->Instance->CNDTR = DataLength;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	605a      	str	r2, [r3, #4]

	/* Memory to Peripheral */
	if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH) {
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	2b10      	cmp	r3, #16
 800454c:	d108      	bne.n	8004560 <DMA_SetConfig+0x44>
		/* Configure DMA Channel destination address */
		hdma->Instance->CPAR = DstAddress;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	609a      	str	r2, [r3, #8]

		/* Configure DMA Channel source address */
		hdma->Instance->CMAR = SrcAddress;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	60da      	str	r2, [r3, #12]
		hdma->Instance->CPAR = SrcAddress;

		/* Configure DMA Channel destination address */
		hdma->Instance->CMAR = DstAddress;
	}
}
 800455e:	e007      	b.n	8004570 <DMA_SetConfig+0x54>
		hdma->Instance->CPAR = SrcAddress;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	609a      	str	r2, [r3, #8]
		hdma->Instance->CMAR = DstAddress;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	60da      	str	r2, [r3, #12]
}
 8004570:	bf00      	nop
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <HAL_GPIO_Init>:
 * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
 * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 800457c:	b480      	push	{r7}
 800457e:	b087      	sub	sp, #28
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
	uint32_t position = 0x00u;
 8004586:	2300      	movs	r3, #0
 8004588:	617b      	str	r3, [r7, #20]
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	while (((GPIO_Init->Pin) >> position) != 0x00u) {
 800458a:	e148      	b.n	800481e <HAL_GPIO_Init+0x2a2>
		/* Get current io position */
		iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	2101      	movs	r1, #1
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	fa01 f303 	lsl.w	r3, r1, r3
 8004598:	4013      	ands	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]

		if (iocurrent != 0x00u) {
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f000 813a 	beq.w	8004818 <HAL_GPIO_Init+0x29c>
			/*--------------------- GPIO Mode Configuration ------------------------*/
			/* In case of Output or Alternate function mode selection */
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)) {
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f003 0303 	and.w	r3, r3, #3
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d005      	beq.n	80045bc <HAL_GPIO_Init+0x40>
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f003 0303 	and.w	r3, r3, #3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d130      	bne.n	800461e <HAL_GPIO_Init+0xa2>
				/* Check the Speed parameter */
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

				/* Configure the IO Speed */
				temp = GPIOx->OSPEEDR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	613b      	str	r3, [r7, #16]
				temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	2203      	movs	r2, #3
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	43db      	mvns	r3, r3
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4013      	ands	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
				temp |= (GPIO_Init->Speed << (position * 2u));
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	68da      	ldr	r2, [r3, #12]
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]
				GPIOx->OSPEEDR = temp;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	609a      	str	r2, [r3, #8]

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	613b      	str	r3, [r7, #16]
				temp &= ~(GPIO_OTYPER_OT0 << position);
 80045f2:	2201      	movs	r2, #1
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	fa02 f303 	lsl.w	r3, r2, r3
 80045fa:	43db      	mvns	r3, r3
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	4013      	ands	r3, r2
 8004600:	613b      	str	r3, [r7, #16]
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	091b      	lsrs	r3, r3, #4
 8004608:	f003 0201 	and.w	r2, r3, #1
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	fa02 f303 	lsl.w	r3, r2, r3
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	4313      	orrs	r3, r2
 8004616:	613b      	str	r3, [r7, #16]
				GPIOx->OTYPER = temp;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

			/* Activate the Pull-up or Pull down resistor for the current IO */
			if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	2b03      	cmp	r3, #3
 8004628:	d017      	beq.n	800465a <HAL_GPIO_Init+0xde>
				/* Check the Pull parameter */
				assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

				temp = GPIOx->PUPDR;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	613b      	str	r3, [r7, #16]
				temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	2203      	movs	r2, #3
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	43db      	mvns	r3, r3
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	4013      	ands	r3, r2
 8004640:	613b      	str	r3, [r7, #16]
				temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	fa02 f303 	lsl.w	r3, r2, r3
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	4313      	orrs	r3, r2
 8004652:	613b      	str	r3, [r7, #16]
				GPIOx->PUPDR = temp;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	60da      	str	r2, [r3, #12]
			}

			/* In case of Alternate function mode selection */
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f003 0303 	and.w	r3, r3, #3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d123      	bne.n	80046ae <HAL_GPIO_Init+0x132>
				/* Check the Alternate function parameters */
				assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3u];
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	08da      	lsrs	r2, r3, #3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	3208      	adds	r2, #8
 800466e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004672:	613b      	str	r3, [r7, #16]
				temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	220f      	movs	r2, #15
 800467e:	fa02 f303 	lsl.w	r3, r2, r3
 8004682:	43db      	mvns	r3, r3
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	4013      	ands	r3, r2
 8004688:	613b      	str	r3, [r7, #16]
				temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	691a      	ldr	r2, [r3, #16]
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	4313      	orrs	r3, r2
 800469e:	613b      	str	r3, [r7, #16]
				GPIOx->AFR[position >> 3u] = temp;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	08da      	lsrs	r2, r3, #3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3208      	adds	r2, #8
 80046a8:	6939      	ldr	r1, [r7, #16]
 80046aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}

			/* Configure IO Direction mode (Input, Output, Alternate or Analog) */
			temp = GPIOx->MODER;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	613b      	str	r3, [r7, #16]
			temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	2203      	movs	r2, #3
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	43db      	mvns	r3, r3
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	4013      	ands	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f003 0203 	and.w	r2, r3, #3
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	fa02 f303 	lsl.w	r3, r2, r3
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	4313      	orrs	r3, r2
 80046da:	613b      	str	r3, [r7, #16]
			GPIOx->MODER = temp;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	601a      	str	r2, [r3, #0]

			/*--------------------- EXTI Mode Configuration ------------------------*/
			/* Configure the External Interrupt or event for the current IO */
			if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u) {
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 8094 	beq.w	8004818 <HAL_GPIO_Init+0x29c>
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 80046f0:	4b52      	ldr	r3, [pc, #328]	; (800483c <HAL_GPIO_Init+0x2c0>)
 80046f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046f4:	4a51      	ldr	r2, [pc, #324]	; (800483c <HAL_GPIO_Init+0x2c0>)
 80046f6:	f043 0301 	orr.w	r3, r3, #1
 80046fa:	6613      	str	r3, [r2, #96]	; 0x60
 80046fc:	4b4f      	ldr	r3, [pc, #316]	; (800483c <HAL_GPIO_Init+0x2c0>)
 80046fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	60bb      	str	r3, [r7, #8]
 8004706:	68bb      	ldr	r3, [r7, #8]

				temp = SYSCFG->EXTICR[position >> 2u];
 8004708:	4a4d      	ldr	r2, [pc, #308]	; (8004840 <HAL_GPIO_Init+0x2c4>)
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	089b      	lsrs	r3, r3, #2
 800470e:	3302      	adds	r3, #2
 8004710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004714:	613b      	str	r3, [r7, #16]
				temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f003 0303 	and.w	r3, r3, #3
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	220f      	movs	r2, #15
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	43db      	mvns	r3, r3
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	4013      	ands	r3, r2
 800472a:	613b      	str	r3, [r7, #16]
				temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004732:	d00d      	beq.n	8004750 <HAL_GPIO_Init+0x1d4>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a43      	ldr	r2, [pc, #268]	; (8004844 <HAL_GPIO_Init+0x2c8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d007      	beq.n	800474c <HAL_GPIO_Init+0x1d0>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a42      	ldr	r2, [pc, #264]	; (8004848 <HAL_GPIO_Init+0x2cc>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d101      	bne.n	8004748 <HAL_GPIO_Init+0x1cc>
 8004744:	2302      	movs	r3, #2
 8004746:	e004      	b.n	8004752 <HAL_GPIO_Init+0x1d6>
 8004748:	2307      	movs	r3, #7
 800474a:	e002      	b.n	8004752 <HAL_GPIO_Init+0x1d6>
 800474c:	2301      	movs	r3, #1
 800474e:	e000      	b.n	8004752 <HAL_GPIO_Init+0x1d6>
 8004750:	2300      	movs	r3, #0
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	f002 0203 	and.w	r2, r2, #3
 8004758:	0092      	lsls	r2, r2, #2
 800475a:	4093      	lsls	r3, r2
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	613b      	str	r3, [r7, #16]
				SYSCFG->EXTICR[position >> 2u] = temp;
 8004762:	4937      	ldr	r1, [pc, #220]	; (8004840 <HAL_GPIO_Init+0x2c4>)
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	089b      	lsrs	r3, r3, #2
 8004768:	3302      	adds	r3, #2
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR1;
 8004770:	4b36      	ldr	r3, [pc, #216]	; (800484c <HAL_GPIO_Init+0x2d0>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	613b      	str	r3, [r7, #16]
				temp &= ~(iocurrent);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	43db      	mvns	r3, r3
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	4013      	ands	r3, r2
 800477e:	613b      	str	r3, [r7, #16]
				if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u) {
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <HAL_GPIO_Init+0x218>
					temp |= iocurrent;
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4313      	orrs	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
				}
				EXTI->RTSR1 = temp;
 8004794:	4a2d      	ldr	r2, [pc, #180]	; (800484c <HAL_GPIO_Init+0x2d0>)
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	6093      	str	r3, [r2, #8]

				temp = EXTI->FTSR1;
 800479a:	4b2c      	ldr	r3, [pc, #176]	; (800484c <HAL_GPIO_Init+0x2d0>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	613b      	str	r3, [r7, #16]
				temp &= ~(iocurrent);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	43db      	mvns	r3, r3
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	4013      	ands	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]
				if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u) {
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_GPIO_Init+0x242>
					temp |= iocurrent;
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]
				}
				EXTI->FTSR1 = temp;
 80047be:	4a23      	ldr	r2, [pc, #140]	; (800484c <HAL_GPIO_Init+0x2d0>)
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	60d3      	str	r3, [r2, #12]

				/* Clear EXTI line configuration */
				temp = EXTI->EMR1;
 80047c4:	4b21      	ldr	r3, [pc, #132]	; (800484c <HAL_GPIO_Init+0x2d0>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	613b      	str	r3, [r7, #16]
				temp &= ~(iocurrent);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	43db      	mvns	r3, r3
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	4013      	ands	r3, r2
 80047d2:	613b      	str	r3, [r7, #16]
				if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u) {
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d003      	beq.n	80047e8 <HAL_GPIO_Init+0x26c>
					temp |= iocurrent;
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
				}
				EXTI->EMR1 = temp;
 80047e8:	4a18      	ldr	r2, [pc, #96]	; (800484c <HAL_GPIO_Init+0x2d0>)
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	6053      	str	r3, [r2, #4]

				temp = EXTI->IMR1;
 80047ee:	4b17      	ldr	r3, [pc, #92]	; (800484c <HAL_GPIO_Init+0x2d0>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	613b      	str	r3, [r7, #16]
				temp &= ~(iocurrent);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	43db      	mvns	r3, r3
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	4013      	ands	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]
				if ((GPIO_Init->Mode & EXTI_IT) != 0x00u) {
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_GPIO_Init+0x296>
					temp |= iocurrent;
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4313      	orrs	r3, r2
 8004810:	613b      	str	r3, [r7, #16]
				}
				EXTI->IMR1 = temp;
 8004812:	4a0e      	ldr	r2, [pc, #56]	; (800484c <HAL_GPIO_Init+0x2d0>)
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	6013      	str	r3, [r2, #0]
			}
		}

		position++;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	3301      	adds	r3, #1
 800481c:	617b      	str	r3, [r7, #20]
	while (((GPIO_Init->Pin) >> position) != 0x00u) {
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	fa22 f303 	lsr.w	r3, r2, r3
 8004828:	2b00      	cmp	r3, #0
 800482a:	f47f aeaf 	bne.w	800458c <HAL_GPIO_Init+0x10>
	}
}
 800482e:	bf00      	nop
 8004830:	bf00      	nop
 8004832:	371c      	adds	r7, #28
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	40021000 	.word	0x40021000
 8004840:	40010000 	.word	0x40010000
 8004844:	48000400 	.word	0x48000400
 8004848:	48000800 	.word	0x48000800
 800484c:	40010400 	.word	0x40010400

08004850 <HAL_GPIO_ReadPin>:
 * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
 * @param  GPIO_Pin specifies the port bit to read.
 *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
 * @retval The input port pin value.
 */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	460b      	mov	r3, r1
 800485a:	807b      	strh	r3, [r7, #2]
	GPIO_PinState bitstatus;

	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));

	if ((GPIOx->IDR & GPIO_Pin) != 0x00u) {
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691a      	ldr	r2, [r3, #16]
 8004860:	887b      	ldrh	r3, [r7, #2]
 8004862:	4013      	ands	r3, r2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d002      	beq.n	800486e <HAL_GPIO_ReadPin+0x1e>
		bitstatus = GPIO_PIN_SET;
 8004868:	2301      	movs	r3, #1
 800486a:	73fb      	strb	r3, [r7, #15]
 800486c:	e001      	b.n	8004872 <HAL_GPIO_ReadPin+0x22>
	} else {
		bitstatus = GPIO_PIN_RESET;
 800486e:	2300      	movs	r3, #0
 8004870:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus;
 8004872:	7bfb      	ldrb	r3, [r7, #15]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_GPIO_WritePin>:
 *         This parameter can be one of the GPIO_PinState enum values:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState) {
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	460b      	mov	r3, r1
 800488a:	807b      	strh	r3, [r7, #2]
 800488c:	4613      	mov	r3, r2
 800488e:	707b      	strb	r3, [r7, #1]
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 8004890:	787b      	ldrb	r3, [r7, #1]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_GPIO_WritePin+0x1e>
		GPIOx->BSRR = (uint32_t) GPIO_Pin;
 8004896:	887a      	ldrh	r2, [r7, #2]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	619a      	str	r2, [r3, #24]
	} else {
		GPIOx->BRR = (uint32_t) GPIO_Pin;
	}
}
 800489c:	e002      	b.n	80048a4 <HAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t) GPIO_Pin;
 800489e:	887a      	ldrh	r2, [r7, #2]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_GPIO_EXTI_IRQHandler>:
/**
 * @brief  Handle EXTI interrupt request.
 * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin) {
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4603      	mov	r3, r0
 80048b8:	80fb      	strh	r3, [r7, #6]
	/* EXTI line interrupt detected */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u) {
 80048ba:	4b08      	ldr	r3, [pc, #32]	; (80048dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048bc:	695a      	ldr	r2, [r3, #20]
 80048be:	88fb      	ldrh	r3, [r7, #6]
 80048c0:	4013      	ands	r3, r2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d006      	beq.n	80048d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048c6:	4a05      	ldr	r2, [pc, #20]	; (80048dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048c8:	88fb      	ldrh	r3, [r7, #6]
 80048ca:	6153      	str	r3, [r2, #20]
		HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048cc:	88fb      	ldrh	r3, [r7, #6]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fe ffcc 	bl	800386c <HAL_GPIO_EXTI_Callback>
	}
}
 80048d4:	bf00      	nop
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40010400 	.word	0x40010400

080048e0 <HAL_PWR_EnableBkUpAccess>:
 *        disabled.
 * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
 *        back-up domain.
 * @retval None
 */
void HAL_PWR_EnableBkUpAccess(void) {
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
	SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048e4:	4b05      	ldr	r3, [pc, #20]	; (80048fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a04      	ldr	r2, [pc, #16]	; (80048fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80048ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ee:	6013      	str	r3, [r2, #0]
}
 80048f0:	bf00      	nop
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40007000 	.word	0x40007000

08004900 <HAL_PWREx_GetVoltageRange>:
/**
 * @brief Return Voltage Scaling Range.
 * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
 *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
 */
uint32_t HAL_PWREx_GetVoltageRange(void) {
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
	return (PWR->CR1 & PWR_CR1_VOS);
 8004904:	4b04      	ldr	r3, [pc, #16]	; (8004918 <HAL_PWREx_GetVoltageRange+0x18>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800490c:	4618      	mov	r0, r3
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	40007000 	.word	0x40007000

0800491c <HAL_PWREx_ControlVoltageScaling>:
 * @note  When moving from Range 2 to Range 1, the API waits for VOSF flag to be
 *        cleared before returning the status. If the flag is not cleared within
 *        50 microseconds, HAL_TIMEOUT status is reported.
 * @retval HAL Status
 */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling) {
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  }

#else

	/* If Set Range 1 */
	if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1) {
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800492a:	d130      	bne.n	800498e <HAL_PWREx_ControlVoltageScaling+0x72>
		if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1) {
 800492c:	4b23      	ldr	r3, [pc, #140]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004938:	d038      	beq.n	80049ac <HAL_PWREx_ControlVoltageScaling+0x90>
			/* Set Range 1 */
			MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800493a:	4b20      	ldr	r3, [pc, #128]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004942:	4a1e      	ldr	r2, [pc, #120]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004944:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004948:	6013      	str	r3, [r2, #0]

			/* Wait until VOSF is cleared */
			wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800494a:	4b1d      	ldr	r3, [pc, #116]	; (80049c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2232      	movs	r2, #50	; 0x32
 8004950:	fb02 f303 	mul.w	r3, r2, r3
 8004954:	4a1b      	ldr	r2, [pc, #108]	; (80049c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004956:	fba2 2303 	umull	r2, r3, r2, r3
 800495a:	0c9b      	lsrs	r3, r3, #18
 800495c:	3301      	adds	r3, #1
 800495e:	60fb      	str	r3, [r7, #12]
			while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U)) {
 8004960:	e002      	b.n	8004968 <HAL_PWREx_ControlVoltageScaling+0x4c>
				wait_loop_index--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	3b01      	subs	r3, #1
 8004966:	60fb      	str	r3, [r7, #12]
			while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U)) {
 8004968:	4b14      	ldr	r3, [pc, #80]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004974:	d102      	bne.n	800497c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1f2      	bne.n	8004962 <HAL_PWREx_ControlVoltageScaling+0x46>
			}
			if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) {
 800497c:	4b0f      	ldr	r3, [pc, #60]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004988:	d110      	bne.n	80049ac <HAL_PWREx_ControlVoltageScaling+0x90>
				return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e00f      	b.n	80049ae <HAL_PWREx_ControlVoltageScaling+0x92>
			}
		}
	} else {
		if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2) {
 800498e:	4b0b      	ldr	r3, [pc, #44]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800499a:	d007      	beq.n	80049ac <HAL_PWREx_ControlVoltageScaling+0x90>
			/* Set Range 2 */
			MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800499c:	4b07      	ldr	r3, [pc, #28]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049a4:	4a05      	ldr	r2, [pc, #20]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049aa:	6013      	str	r3, [r2, #0]
			/* No need to wait for VOSF to be cleared for this transition */
		}
	}
#endif

	return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	40007000 	.word	0x40007000
 80049c0:	20000028 	.word	0x20000028
 80049c4:	431bde83 	.word	0x431bde83

080049c8 <HAL_RCC_OscConfig>:
 * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 *         supported by this macro. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct) {
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b088      	sub	sp, #32
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	HAL_StatusTypeDef status;
	uint32_t sysclk_source, pll_config;

	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d102      	bne.n	80049dc <HAL_RCC_OscConfig+0x14>
		return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	f000 bc02 	b.w	80051e0 <HAL_RCC_OscConfig+0x818>
	}

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

	sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049dc:	4b96      	ldr	r3, [pc, #600]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f003 030c 	and.w	r3, r3, #12
 80049e4:	61bb      	str	r3, [r7, #24]
	pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049e6:	4b94      	ldr	r3, [pc, #592]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	617b      	str	r3, [r7, #20]

	/*----------------------------- MSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI) {
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0310 	and.w	r3, r3, #16
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 80e4 	beq.w	8004bc6 <HAL_RCC_OscConfig+0x1fe>
		assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
		assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
		assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

		/* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((sysclk_source == RCC_CFGR_SWS_MSI)
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d007      	beq.n	8004a14 <HAL_RCC_OscConfig+0x4c>
				|| ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI))) {
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	2b0c      	cmp	r3, #12
 8004a08:	f040 808b 	bne.w	8004b22 <HAL_RCC_OscConfig+0x15a>
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	f040 8087 	bne.w	8004b22 <HAL_RCC_OscConfig+0x15a>
			if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)) {
 8004a14:	4b88      	ldr	r3, [pc, #544]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d005      	beq.n	8004a2c <HAL_RCC_OscConfig+0x64>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <HAL_RCC_OscConfig+0x64>
				return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e3d9      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
			/* Otherwise, just the calibration and MSI range change are allowed */
			else {
				/* To correctly read data from FLASH memory, the number of wait states (LATENCY)
				 must be correctly programmed according to the frequency of the CPU clock
				 (HCLK) and the supply voltage of the device. */
				if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE()) {
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a1a      	ldr	r2, [r3, #32]
 8004a30:	4b81      	ldr	r3, [pc, #516]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d004      	beq.n	8004a46 <HAL_RCC_OscConfig+0x7e>
 8004a3c:	4b7e      	ldr	r3, [pc, #504]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a44:	e005      	b.n	8004a52 <HAL_RCC_OscConfig+0x8a>
 8004a46:	4b7c      	ldr	r3, [pc, #496]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a4c:	091b      	lsrs	r3, r3, #4
 8004a4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d223      	bcs.n	8004a9e <HAL_RCC_OscConfig+0xd6>
					/* First increase number of wait states update if necessary */
					if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK) {
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 fd8c 	bl	8005578 <RCC_SetFlashLatencyFromMSIRange>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <HAL_RCC_OscConfig+0xa2>
						return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e3ba      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
					}

					/* Selects the Multiple Speed oscillator (MSI) clock range .*/
					__HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a6a:	4b73      	ldr	r3, [pc, #460]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a72      	ldr	r2, [pc, #456]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004a70:	f043 0308 	orr.w	r3, r3, #8
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	4b70      	ldr	r3, [pc, #448]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	496d      	ldr	r1, [pc, #436]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	600b      	str	r3, [r1, #0]
					/* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
					__HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a88:	4b6b      	ldr	r3, [pc, #428]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	021b      	lsls	r3, r3, #8
 8004a96:	4968      	ldr	r1, [pc, #416]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	604b      	str	r3, [r1, #4]
 8004a9c:	e025      	b.n	8004aea <HAL_RCC_OscConfig+0x122>
				} else {
					/* Else, keep current flash latency while decreasing applies */
					/* Selects the Multiple Speed oscillator (MSI) clock range .*/
					__HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a9e:	4b66      	ldr	r3, [pc, #408]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a65      	ldr	r2, [pc, #404]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004aa4:	f043 0308 	orr.w	r3, r3, #8
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	4b63      	ldr	r3, [pc, #396]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	4960      	ldr	r1, [pc, #384]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	600b      	str	r3, [r1, #0]
					/* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
					__HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004abc:	4b5e      	ldr	r3, [pc, #376]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	021b      	lsls	r3, r3, #8
 8004aca:	495b      	ldr	r1, [pc, #364]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	604b      	str	r3, [r1, #4]

					/* Decrease number of wait states update if necessary */
					/* Only possible when MSI is the System clock source  */
					if (sysclk_source == RCC_CFGR_SWS_MSI) {
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d109      	bne.n	8004aea <HAL_RCC_OscConfig+0x122>
						if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK) {
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fd4c 	bl	8005578 <RCC_SetFlashLatencyFromMSIRange>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <HAL_RCC_OscConfig+0x122>
							return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e37a      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
						}
					}
				}

				/* Update the SystemCoreClock global variable */
				SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8004aea:	f000 fc81 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8004aee:	4602      	mov	r2, r0
						>> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004af0:	4b51      	ldr	r3, [pc, #324]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	091b      	lsrs	r3, r3, #4
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	4950      	ldr	r1, [pc, #320]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004afc:	5ccb      	ldrb	r3, [r1, r3]
 8004afe:	f003 031f 	and.w	r3, r3, #31
 8004b02:	fa22 f303 	lsr.w	r3, r2, r3
				SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8004b06:	4a4e      	ldr	r2, [pc, #312]	; (8004c40 <HAL_RCC_OscConfig+0x278>)
 8004b08:	6013      	str	r3, [r2, #0]

				/* Configure the source of time base considering new system clocks settings*/
				status = HAL_InitTick(uwTickPrio);
 8004b0a:	4b4e      	ldr	r3, [pc, #312]	; (8004c44 <HAL_RCC_OscConfig+0x27c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7ff f8ce 	bl	8003cb0 <HAL_InitTick>
 8004b14:	4603      	mov	r3, r0
 8004b16:	73fb      	strb	r3, [r7, #15]
				if (status != HAL_OK) {
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d052      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x1fc>
					return status;
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
 8004b20:	e35e      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
				}
			}
		} else {
			/* Check the MSI State */
			if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF) {
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d032      	beq.n	8004b90 <HAL_RCC_OscConfig+0x1c8>
				/* Enable the Internal High Speed oscillator (MSI). */
				__HAL_RCC_MSI_ENABLE();
 8004b2a:	4b43      	ldr	r3, [pc, #268]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a42      	ldr	r2, [pc, #264]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004b30:	f043 0301 	orr.w	r3, r3, #1
 8004b34:	6013      	str	r3, [r2, #0]

				/* Get timeout */
				tickstart = HAL_GetTick();
 8004b36:	f7ff f90b 	bl	8003d50 <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

				/* Wait till MSI is ready */
				while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U) {
 8004b3c:	e008      	b.n	8004b50 <HAL_RCC_OscConfig+0x188>
					if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE) {
 8004b3e:	f7ff f907 	bl	8003d50 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0x188>
						return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e347      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
				while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U) {
 8004b50:	4b39      	ldr	r3, [pc, #228]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0f0      	beq.n	8004b3e <HAL_RCC_OscConfig+0x176>
					}
				}
				/* Selects the Multiple Speed oscillator (MSI) clock range .*/
				__HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b5c:	4b36      	ldr	r3, [pc, #216]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a35      	ldr	r2, [pc, #212]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004b62:	f043 0308 	orr.w	r3, r3, #8
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	4b33      	ldr	r3, [pc, #204]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	4930      	ldr	r1, [pc, #192]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	600b      	str	r3, [r1, #0]
				/* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
				__HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b7a:	4b2f      	ldr	r3, [pc, #188]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	021b      	lsls	r3, r3, #8
 8004b88:	492b      	ldr	r1, [pc, #172]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	604b      	str	r3, [r1, #4]
 8004b8e:	e01a      	b.n	8004bc6 <HAL_RCC_OscConfig+0x1fe>

			} else {
				/* Disable the Internal High Speed oscillator (MSI). */
				__HAL_RCC_MSI_DISABLE();
 8004b90:	4b29      	ldr	r3, [pc, #164]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a28      	ldr	r2, [pc, #160]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004b96:	f023 0301 	bic.w	r3, r3, #1
 8004b9a:	6013      	str	r3, [r2, #0]

				/* Get timeout */
				tickstart = HAL_GetTick();
 8004b9c:	f7ff f8d8 	bl	8003d50 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

				/* Wait till MSI is ready */
				while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) {
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x1ee>
					if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE) {
 8004ba4:	f7ff f8d4 	bl	8003d50 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x1ee>
						return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e314      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
				while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) {
 8004bb6:	4b20      	ldr	r3, [pc, #128]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1f0      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x1dc>
 8004bc2:	e000      	b.n	8004bc6 <HAL_RCC_OscConfig+0x1fe>
			if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)) {
 8004bc4:	bf00      	nop
				}
			}
		}
	}
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE) {
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d073      	beq.n	8004cba <HAL_RCC_OscConfig+0x2f2>
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

		/* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
		if ((sysclk_source == RCC_CFGR_SWS_HSE)
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d005      	beq.n	8004be4 <HAL_RCC_OscConfig+0x21c>
				|| ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE))) {
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	2b0c      	cmp	r3, #12
 8004bdc:	d10e      	bne.n	8004bfc <HAL_RCC_OscConfig+0x234>
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b03      	cmp	r3, #3
 8004be2:	d10b      	bne.n	8004bfc <HAL_RCC_OscConfig+0x234>
			if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8004be4:	4b14      	ldr	r3, [pc, #80]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d063      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x2f0>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d15f      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x2f0>
				return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e2f1      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c04:	d106      	bne.n	8004c14 <HAL_RCC_OscConfig+0x24c>
 8004c06:	4b0c      	ldr	r3, [pc, #48]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a0b      	ldr	r2, [pc, #44]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	e025      	b.n	8004c60 <HAL_RCC_OscConfig+0x298>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c1c:	d114      	bne.n	8004c48 <HAL_RCC_OscConfig+0x280>
 8004c1e:	4b06      	ldr	r3, [pc, #24]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a05      	ldr	r2, [pc, #20]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	4b03      	ldr	r3, [pc, #12]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a02      	ldr	r2, [pc, #8]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	e013      	b.n	8004c60 <HAL_RCC_OscConfig+0x298>
 8004c38:	40021000 	.word	0x40021000
 8004c3c:	0800fd84 	.word	0x0800fd84
 8004c40:	20000028 	.word	0x20000028
 8004c44:	20000038 	.word	0x20000038
 8004c48:	4ba0      	ldr	r3, [pc, #640]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a9f      	ldr	r2, [pc, #636]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c52:	6013      	str	r3, [r2, #0]
 8004c54:	4b9d      	ldr	r3, [pc, #628]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a9c      	ldr	r2, [pc, #624]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c5e:	6013      	str	r3, [r2, #0]

			/* Check the HSE State */
			if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF) {
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d013      	beq.n	8004c90 <HAL_RCC_OscConfig+0x2c8>
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8004c68:	f7ff f872 	bl	8003d50 <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is ready */
				while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U) {
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0x2ba>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8004c70:	f7ff f86e 	bl	8003d50 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b64      	cmp	r3, #100	; 0x64
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x2ba>
						return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e2ae      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
				while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U) {
 8004c82:	4b92      	ldr	r3, [pc, #584]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d0f0      	beq.n	8004c70 <HAL_RCC_OscConfig+0x2a8>
 8004c8e:	e014      	b.n	8004cba <HAL_RCC_OscConfig+0x2f2>
					}
				}
			} else {
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8004c90:	f7ff f85e 	bl	8003d50 <HAL_GetTick>
 8004c94:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is disabled */
				while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) {
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0x2e2>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8004c98:	f7ff f85a 	bl	8003d50 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b64      	cmp	r3, #100	; 0x64
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0x2e2>
						return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e29a      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
				while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) {
 8004caa:	4b88      	ldr	r3, [pc, #544]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1f0      	bne.n	8004c98 <HAL_RCC_OscConfig+0x2d0>
 8004cb6:	e000      	b.n	8004cba <HAL_RCC_OscConfig+0x2f2>
			if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8004cb8:	bf00      	nop
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI) {
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d060      	beq.n	8004d88 <HAL_RCC_OscConfig+0x3c0>
		/* Check the parameters */
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((sysclk_source == RCC_CFGR_SWS_HSI)
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	2b04      	cmp	r3, #4
 8004cca:	d005      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x310>
				|| ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI))) {
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	2b0c      	cmp	r3, #12
 8004cd0:	d119      	bne.n	8004d06 <HAL_RCC_OscConfig+0x33e>
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d116      	bne.n	8004d06 <HAL_RCC_OscConfig+0x33e>
			/* When HSI is used as system clock it will not be disabled */
			if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)) {
 8004cd8:	4b7c      	ldr	r3, [pc, #496]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d005      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x328>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x328>
				return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e277      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
			}
			/* Otherwise, just the calibration is allowed */
			else {
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf0:	4b76      	ldr	r3, [pc, #472]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	061b      	lsls	r3, r3, #24
 8004cfe:	4973      	ldr	r1, [pc, #460]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	604b      	str	r3, [r1, #4]
			if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)) {
 8004d04:	e040      	b.n	8004d88 <HAL_RCC_OscConfig+0x3c0>
			}
		} else {
			/* Check the HSI State */
			if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF) {
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d023      	beq.n	8004d56 <HAL_RCC_OscConfig+0x38e>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 8004d0e:	4b6f      	ldr	r3, [pc, #444]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a6e      	ldr	r2, [pc, #440]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d18:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8004d1a:	f7ff f819 	bl	8003d50 <HAL_GetTick>
 8004d1e:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U) {
 8004d20:	e008      	b.n	8004d34 <HAL_RCC_OscConfig+0x36c>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8004d22:	f7ff f815 	bl	8003d50 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x36c>
						return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e255      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
				while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U) {
 8004d34:	4b65      	ldr	r3, [pc, #404]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0f0      	beq.n	8004d22 <HAL_RCC_OscConfig+0x35a>
					}
				}

				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d40:	4b62      	ldr	r3, [pc, #392]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	061b      	lsls	r3, r3, #24
 8004d4e:	495f      	ldr	r1, [pc, #380]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	604b      	str	r3, [r1, #4]
 8004d54:	e018      	b.n	8004d88 <HAL_RCC_OscConfig+0x3c0>
			} else {
				/* Disable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_DISABLE();
 8004d56:	4b5d      	ldr	r3, [pc, #372]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a5c      	ldr	r2, [pc, #368]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004d5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d60:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8004d62:	f7fe fff5 	bl	8003d50 <HAL_GetTick>
 8004d66:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is disabled */
				while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) {
 8004d68:	e008      	b.n	8004d7c <HAL_RCC_OscConfig+0x3b4>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8004d6a:	f7fe fff1 	bl	8003d50 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCC_OscConfig+0x3b4>
						return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e231      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
				while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) {
 8004d7c:	4b53      	ldr	r3, [pc, #332]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1f0      	bne.n	8004d6a <HAL_RCC_OscConfig+0x3a2>
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI) {
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0308 	and.w	r3, r3, #8
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d03c      	beq.n	8004e0e <HAL_RCC_OscConfig+0x446>
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF) {
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d01c      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 8004d9c:	4b4b      	ldr	r3, [pc, #300]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004da2:	4a4a      	ldr	r2, [pc, #296]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004da4:	f043 0301 	orr.w	r3, r3, #1
 8004da8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8004dac:	f7fe ffd0 	bl	8003d50 <HAL_GetTick>
 8004db0:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U) {
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0x3fe>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8004db4:	f7fe ffcc 	bl	8003d50 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x3fe>
					return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e20c      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
			while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U) {
 8004dc6:	4b41      	ldr	r3, [pc, #260]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0ef      	beq.n	8004db4 <HAL_RCC_OscConfig+0x3ec>
 8004dd4:	e01b      	b.n	8004e0e <HAL_RCC_OscConfig+0x446>
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 8004dd6:	4b3d      	ldr	r3, [pc, #244]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ddc:	4a3b      	ldr	r2, [pc, #236]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004dde:	f023 0301 	bic.w	r3, r3, #1
 8004de2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8004de6:	f7fe ffb3 	bl	8003d50 <HAL_GetTick>
 8004dea:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is disabled */
			while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U) {
 8004dec:	e008      	b.n	8004e00 <HAL_RCC_OscConfig+0x438>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8004dee:	f7fe ffaf 	bl	8003d50 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCC_OscConfig+0x438>
					return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e1ef      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
			while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U) {
 8004e00:	4b32      	ldr	r3, [pc, #200]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1ef      	bne.n	8004dee <HAL_RCC_OscConfig+0x426>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE) {
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0304 	and.w	r3, r3, #4
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 80a6 	beq.w	8004f68 <HAL_RCC_OscConfig+0x5a0>
		FlagStatus pwrclkchanged = RESET;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	77fb      	strb	r3, [r7, #31]
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN)) {
 8004e20:	4b2a      	ldr	r3, [pc, #168]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10d      	bne.n	8004e48 <HAL_RCC_OscConfig+0x480>
			__HAL_RCC_PWR_CLK_ENABLE();
 8004e2c:	4b27      	ldr	r3, [pc, #156]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e30:	4a26      	ldr	r2, [pc, #152]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e36:	6593      	str	r3, [r2, #88]	; 0x58
 8004e38:	4b24      	ldr	r3, [pc, #144]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e40:	60bb      	str	r3, [r7, #8]
 8004e42:	68bb      	ldr	r3, [r7, #8]
			pwrclkchanged = SET;
 8004e44:	2301      	movs	r3, #1
 8004e46:	77fb      	strb	r3, [r7, #31]
		}

		if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 8004e48:	4b21      	ldr	r3, [pc, #132]	; (8004ed0 <HAL_RCC_OscConfig+0x508>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d118      	bne.n	8004e86 <HAL_RCC_OscConfig+0x4be>
			/* Enable write access to Backup domain */
			SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e54:	4b1e      	ldr	r3, [pc, #120]	; (8004ed0 <HAL_RCC_OscConfig+0x508>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a1d      	ldr	r2, [pc, #116]	; (8004ed0 <HAL_RCC_OscConfig+0x508>)
 8004e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e5e:	6013      	str	r3, [r2, #0]

			/* Wait for Backup domain Write protection disable */
			tickstart = HAL_GetTick();
 8004e60:	f7fe ff76 	bl	8003d50 <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

			while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x4b2>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8004e68:	f7fe ff72 	bl	8003d50 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x4b2>
					return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e1b2      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
			while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 8004e7a:	4b15      	ldr	r3, [pc, #84]	; (8004ed0 <HAL_RCC_OscConfig+0x508>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0f0      	beq.n	8004e68 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d108      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x4d8>
 8004e8e:	4b0f      	ldr	r3, [pc, #60]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e94:	4a0d      	ldr	r2, [pc, #52]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004e96:	f043 0301 	orr.w	r3, r3, #1
 8004e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e9e:	e029      	b.n	8004ef4 <HAL_RCC_OscConfig+0x52c>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	2b05      	cmp	r3, #5
 8004ea6:	d115      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x50c>
 8004ea8:	4b08      	ldr	r3, [pc, #32]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eae:	4a07      	ldr	r2, [pc, #28]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004eb0:	f043 0304 	orr.w	r3, r3, #4
 8004eb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004eb8:	4b04      	ldr	r3, [pc, #16]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ebe:	4a03      	ldr	r2, [pc, #12]	; (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004ec0:	f043 0301 	orr.w	r3, r3, #1
 8004ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ec8:	e014      	b.n	8004ef4 <HAL_RCC_OscConfig+0x52c>
 8004eca:	bf00      	nop
 8004ecc:	40021000 	.word	0x40021000
 8004ed0:	40007000 	.word	0x40007000
 8004ed4:	4b9a      	ldr	r3, [pc, #616]	; (8005140 <HAL_RCC_OscConfig+0x778>)
 8004ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eda:	4a99      	ldr	r2, [pc, #612]	; (8005140 <HAL_RCC_OscConfig+0x778>)
 8004edc:	f023 0301 	bic.w	r3, r3, #1
 8004ee0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ee4:	4b96      	ldr	r3, [pc, #600]	; (8005140 <HAL_RCC_OscConfig+0x778>)
 8004ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eea:	4a95      	ldr	r2, [pc, #596]	; (8005140 <HAL_RCC_OscConfig+0x778>)
 8004eec:	f023 0304 	bic.w	r3, r3, #4
 8004ef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

		/* Check the LSE State */
		if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF) {
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d016      	beq.n	8004f2a <HAL_RCC_OscConfig+0x562>
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8004efc:	f7fe ff28 	bl	8003d50 <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U) {
 8004f02:	e00a      	b.n	8004f1a <HAL_RCC_OscConfig+0x552>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8004f04:	f7fe ff24 	bl	8003d50 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x552>
					return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e162      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
			while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U) {
 8004f1a:	4b89      	ldr	r3, [pc, #548]	; (8005140 <HAL_RCC_OscConfig+0x778>)
 8004f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0ed      	beq.n	8004f04 <HAL_RCC_OscConfig+0x53c>
 8004f28:	e015      	b.n	8004f56 <HAL_RCC_OscConfig+0x58e>
				}
			}
		} else {
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8004f2a:	f7fe ff11 	bl	8003d50 <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is disabled */
			while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U) {
 8004f30:	e00a      	b.n	8004f48 <HAL_RCC_OscConfig+0x580>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8004f32:	f7fe ff0d 	bl	8003d50 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0x580>
					return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e14b      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
			while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U) {
 8004f48:	4b7d      	ldr	r3, [pc, #500]	; (8005140 <HAL_RCC_OscConfig+0x778>)
 8004f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1ed      	bne.n	8004f32 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET) {
 8004f56:	7ffb      	ldrb	r3, [r7, #31]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d105      	bne.n	8004f68 <HAL_RCC_OscConfig+0x5a0>
			__HAL_RCC_PWR_CLK_DISABLE();
 8004f5c:	4b78      	ldr	r3, [pc, #480]	; (8005140 <HAL_RCC_OscConfig+0x778>)
 8004f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f60:	4a77      	ldr	r2, [pc, #476]	; (8005140 <HAL_RCC_OscConfig+0x778>)
 8004f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f66:	6593      	str	r3, [r2, #88]	; 0x58
		}
	}
#if defined(RCC_HSI48_SUPPORT)
	/*------------------------------ HSI48 Configuration -----------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48) {
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0320 	and.w	r3, r3, #32
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d03c      	beq.n	8004fee <HAL_RCC_OscConfig+0x626>
		/* Check the parameters */
		assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

		/* Check the LSI State */
		if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF) {
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d01c      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x5ee>
			/* Enable the Internal Low Speed oscillator (HSI48). */
			__HAL_RCC_HSI48_ENABLE();
 8004f7c:	4b70      	ldr	r3, [pc, #448]	; (8005140 <HAL_RCC_OscConfig+0x778>)
 8004f7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f82:	4a6f      	ldr	r2, [pc, #444]	; (8005140 <HAL_RCC_OscConfig+0x778>)
 8004f84:	f043 0301 	orr.w	r3, r3, #1
 8004f88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8004f8c:	f7fe fee0 	bl	8003d50 <HAL_GetTick>
 8004f90:	6138      	str	r0, [r7, #16]

			/* Wait till HSI48 is ready */
			while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U) {
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_OscConfig+0x5de>
				if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE) {
 8004f94:	f7fe fedc 	bl	8003d50 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x5de>
					return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e11c      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
			while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U) {
 8004fa6:	4b66      	ldr	r3, [pc, #408]	; (8005140 <HAL_RCC_OscConfig+0x778>)
 8004fa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0ef      	beq.n	8004f94 <HAL_RCC_OscConfig+0x5cc>
 8004fb4:	e01b      	b.n	8004fee <HAL_RCC_OscConfig+0x626>
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (HSI48). */
			__HAL_RCC_HSI48_DISABLE();
 8004fb6:	4b62      	ldr	r3, [pc, #392]	; (8005140 <HAL_RCC_OscConfig+0x778>)
 8004fb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fbc:	4a60      	ldr	r2, [pc, #384]	; (8005140 <HAL_RCC_OscConfig+0x778>)
 8004fbe:	f023 0301 	bic.w	r3, r3, #1
 8004fc2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8004fc6:	f7fe fec3 	bl	8003d50 <HAL_GetTick>
 8004fca:	6138      	str	r0, [r7, #16]

			/* Wait till HSI48 is disabled */
			while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U) {
 8004fcc:	e008      	b.n	8004fe0 <HAL_RCC_OscConfig+0x618>
				if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE) {
 8004fce:	f7fe febf 	bl	8003d50 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d901      	bls.n	8004fe0 <HAL_RCC_OscConfig+0x618>
					return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e0ff      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
			while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U) {
 8004fe0:	4b57      	ldr	r3, [pc, #348]	; (8005140 <HAL_RCC_OscConfig+0x778>)
 8004fe2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1ef      	bne.n	8004fce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

	if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE) {
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 80f3 	beq.w	80051de <HAL_RCC_OscConfig+0x816>
		/* PLL On ? */
		if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON) {
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	f040 80c9 	bne.w	8005194 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
			assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
			assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

			/* Do nothing if PLL configuration is the unchanged */
			pll_config = RCC->PLLCFGR;
 8005002:	4b4f      	ldr	r3, [pc, #316]	; (8005140 <HAL_RCC_OscConfig+0x778>)
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	617b      	str	r3, [r7, #20]
			if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f003 0203 	and.w	r2, r3, #3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005012:	429a      	cmp	r2, r3
 8005014:	d12c      	bne.n	8005070 <HAL_RCC_OscConfig+0x6a8>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f003 0270 	and.w	r2, r3, #112	; 0x70
							!= ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005020:	3b01      	subs	r3, #1
 8005022:	011b      	lsls	r3, r3, #4
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8005024:	429a      	cmp	r2, r3
 8005026:	d123      	bne.n	8005070 <HAL_RCC_OscConfig+0x6a8>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005032:	021b      	lsls	r3, r3, #8
 8005034:	429a      	cmp	r2, r3
 8005036:	d11b      	bne.n	8005070 <HAL_RCC_OscConfig+0x6a8>
					||
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
					(READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV)
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
							!= (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005042:	06db      	lsls	r3, r3, #27
					||
 8005044:	429a      	cmp	r2, r3
 8005046:	d113      	bne.n	8005070 <HAL_RCC_OscConfig+0x6a8>
					||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
					(READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
							!= ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005052:	085b      	lsrs	r3, r3, #1
 8005054:	3b01      	subs	r3, #1
 8005056:	055b      	lsls	r3, r3, #21
					||
 8005058:	429a      	cmp	r2, r3
 800505a:	d109      	bne.n	8005070 <HAL_RCC_OscConfig+0x6a8>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
							!= ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos))) {
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005066:	085b      	lsrs	r3, r3, #1
 8005068:	3b01      	subs	r3, #1
 800506a:	065b      	lsls	r3, r3, #25
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 800506c:	429a      	cmp	r2, r3
 800506e:	d06b      	beq.n	8005148 <HAL_RCC_OscConfig+0x780>
				/* Check if the PLL is used as system clock or not */
				if (sysclk_source != RCC_CFGR_SWS_PLL) {
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	2b0c      	cmp	r3, #12
 8005074:	d062      	beq.n	800513c <HAL_RCC_OscConfig+0x774>
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
					/* Check if main PLL can be updated */
					/* Not possible if the source is shared by other enabled PLLSAIx */
					if ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005076:	4b32      	ldr	r3, [pc, #200]	; (8005140 <HAL_RCC_OscConfig+0x778>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
					) {
						return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e0ac      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
					} else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
					{
						/* Disable the main PLL. */
						__HAL_RCC_PLL_DISABLE();
 8005086:	4b2e      	ldr	r3, [pc, #184]	; (8005140 <HAL_RCC_OscConfig+0x778>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a2d      	ldr	r2, [pc, #180]	; (8005140 <HAL_RCC_OscConfig+0x778>)
 800508c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005090:	6013      	str	r3, [r2, #0]

						/* Get Start Tick*/
						tickstart = HAL_GetTick();
 8005092:	f7fe fe5d 	bl	8003d50 <HAL_GetTick>
 8005096:	6138      	str	r0, [r7, #16]

						/* Wait till PLL is ready */
						while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U) {
 8005098:	e008      	b.n	80050ac <HAL_RCC_OscConfig+0x6e4>
							if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 800509a:	f7fe fe59 	bl	8003d50 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0x6e4>
								return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e099      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
						while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U) {
 80050ac:	4b24      	ldr	r3, [pc, #144]	; (8005140 <HAL_RCC_OscConfig+0x778>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1f0      	bne.n	800509a <HAL_RCC_OscConfig+0x6d2>
							}
						}

						/* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
						__HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource, RCC_OscInitStruct->PLL.PLLM,
 80050b8:	4b21      	ldr	r3, [pc, #132]	; (8005140 <HAL_RCC_OscConfig+0x778>)
 80050ba:	68da      	ldr	r2, [r3, #12]
 80050bc:	4b21      	ldr	r3, [pc, #132]	; (8005144 <HAL_RCC_OscConfig+0x77c>)
 80050be:	4013      	ands	r3, r2
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80050c8:	3a01      	subs	r2, #1
 80050ca:	0112      	lsls	r2, r2, #4
 80050cc:	4311      	orrs	r1, r2
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050d2:	0212      	lsls	r2, r2, #8
 80050d4:	4311      	orrs	r1, r2
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80050da:	0852      	lsrs	r2, r2, #1
 80050dc:	3a01      	subs	r2, #1
 80050de:	0552      	lsls	r2, r2, #21
 80050e0:	4311      	orrs	r1, r2
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80050e6:	0852      	lsrs	r2, r2, #1
 80050e8:	3a01      	subs	r2, #1
 80050ea:	0652      	lsls	r2, r2, #25
 80050ec:	4311      	orrs	r1, r2
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050f2:	06d2      	lsls	r2, r2, #27
 80050f4:	430a      	orrs	r2, r1
 80050f6:	4912      	ldr	r1, [pc, #72]	; (8005140 <HAL_RCC_OscConfig+0x778>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

						/* Enable the main PLL. */
						__HAL_RCC_PLL_ENABLE();
 80050fc:	4b10      	ldr	r3, [pc, #64]	; (8005140 <HAL_RCC_OscConfig+0x778>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a0f      	ldr	r2, [pc, #60]	; (8005140 <HAL_RCC_OscConfig+0x778>)
 8005102:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005106:	6013      	str	r3, [r2, #0]

						/* Enable PLL System Clock output. */
						__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005108:	4b0d      	ldr	r3, [pc, #52]	; (8005140 <HAL_RCC_OscConfig+0x778>)
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	4a0c      	ldr	r2, [pc, #48]	; (8005140 <HAL_RCC_OscConfig+0x778>)
 800510e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005112:	60d3      	str	r3, [r2, #12]

						/* Get Start Tick*/
						tickstart = HAL_GetTick();
 8005114:	f7fe fe1c 	bl	8003d50 <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

						/* Wait till PLL is ready */
						while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) {
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0x766>
							if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 800511c:	f7fe fe18 	bl	8003d50 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0x766>
								return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e058      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
						while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) {
 800512e:	4b04      	ldr	r3, [pc, #16]	; (8005140 <HAL_RCC_OscConfig+0x778>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d0f0      	beq.n	800511c <HAL_RCC_OscConfig+0x754>
				if (sysclk_source != RCC_CFGR_SWS_PLL) {
 800513a:	e050      	b.n	80051de <HAL_RCC_OscConfig+0x816>
							}
						}
					}
				} else {
					/* PLL is already used as System core clock */
					return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e04f      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
 8005140:	40021000 	.word	0x40021000
 8005144:	019d808c 	.word	0x019d808c
				}
			} else {
				/* PLL configuration is unchanged */
				/* Re-enable PLL if it was disabled (ie. low power mode) */
				if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) {
 8005148:	4b27      	ldr	r3, [pc, #156]	; (80051e8 <HAL_RCC_OscConfig+0x820>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d144      	bne.n	80051de <HAL_RCC_OscConfig+0x816>
					/* Enable the main PLL. */
					__HAL_RCC_PLL_ENABLE();
 8005154:	4b24      	ldr	r3, [pc, #144]	; (80051e8 <HAL_RCC_OscConfig+0x820>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a23      	ldr	r2, [pc, #140]	; (80051e8 <HAL_RCC_OscConfig+0x820>)
 800515a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800515e:	6013      	str	r3, [r2, #0]

					/* Enable PLL System Clock output. */
					__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005160:	4b21      	ldr	r3, [pc, #132]	; (80051e8 <HAL_RCC_OscConfig+0x820>)
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	4a20      	ldr	r2, [pc, #128]	; (80051e8 <HAL_RCC_OscConfig+0x820>)
 8005166:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800516a:	60d3      	str	r3, [r2, #12]

					/* Get Start Tick*/
					tickstart = HAL_GetTick();
 800516c:	f7fe fdf0 	bl	8003d50 <HAL_GetTick>
 8005170:	6138      	str	r0, [r7, #16]

					/* Wait till PLL is ready */
					while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) {
 8005172:	e008      	b.n	8005186 <HAL_RCC_OscConfig+0x7be>
						if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8005174:	f7fe fdec 	bl	8003d50 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b02      	cmp	r3, #2
 8005180:	d901      	bls.n	8005186 <HAL_RCC_OscConfig+0x7be>
							return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e02c      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
					while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) {
 8005186:	4b18      	ldr	r3, [pc, #96]	; (80051e8 <HAL_RCC_OscConfig+0x820>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d0f0      	beq.n	8005174 <HAL_RCC_OscConfig+0x7ac>
 8005192:	e024      	b.n	80051de <HAL_RCC_OscConfig+0x816>
					}
				}
			}
		} else {
			/* Check that PLL is not used as system clock or not */
			if (sysclk_source != RCC_CFGR_SWS_PLL) {
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	2b0c      	cmp	r3, #12
 8005198:	d01f      	beq.n	80051da <HAL_RCC_OscConfig+0x812>
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 800519a:	4b13      	ldr	r3, [pc, #76]	; (80051e8 <HAL_RCC_OscConfig+0x820>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a12      	ldr	r2, [pc, #72]	; (80051e8 <HAL_RCC_OscConfig+0x820>)
 80051a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051a4:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80051a6:	f7fe fdd3 	bl	8003d50 <HAL_GetTick>
 80051aa:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is disabled */
				while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U) {
 80051ac:	e008      	b.n	80051c0 <HAL_RCC_OscConfig+0x7f8>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80051ae:	f7fe fdcf 	bl	8003d50 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCC_OscConfig+0x7f8>
						return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e00f      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
				while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U) {
 80051c0:	4b09      	ldr	r3, [pc, #36]	; (80051e8 <HAL_RCC_OscConfig+0x820>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1f0      	bne.n	80051ae <HAL_RCC_OscConfig+0x7e6>
				}
				/* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
				RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80051cc:	4b06      	ldr	r3, [pc, #24]	; (80051e8 <HAL_RCC_OscConfig+0x820>)
 80051ce:	68da      	ldr	r2, [r3, #12]
 80051d0:	4905      	ldr	r1, [pc, #20]	; (80051e8 <HAL_RCC_OscConfig+0x820>)
 80051d2:	4b06      	ldr	r3, [pc, #24]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 80051d4:	4013      	ands	r3, r2
 80051d6:	60cb      	str	r3, [r1, #12]
 80051d8:	e001      	b.n	80051de <HAL_RCC_OscConfig+0x816>
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
			} else {
				/* PLL is already used as System core clock */
				return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e000      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
			}
		}
	}
	return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3720      	adds	r7, #32
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	40021000 	.word	0x40021000
 80051ec:	feeefffc 	.word	0xfeeefffc

080051f0 <HAL_RCC_ClockConfig>:
 * @note   Depending on the device voltage range, the software has to set correctly
 *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 *         (for more details refer to section above "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency) {
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
	HAL_StatusTypeDef status;

	/* Check Null pointer */
	if (RCC_ClkInitStruct == NULL) {
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <HAL_RCC_ClockConfig+0x14>
		return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e0e7      	b.n	80053d4 <HAL_RCC_ClockConfig+0x1e4>
	/* To correctly read data from FLASH memory, the number of wait states (LATENCY)
	 must be correctly programmed according to the frequency of the CPU clock
	 (HCLK) and the supply voltage of the device. */

	/* Increasing the number of wait states because of higher CPU frequency */
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 8005204:	4b75      	ldr	r3, [pc, #468]	; (80053dc <HAL_RCC_ClockConfig+0x1ec>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	429a      	cmp	r2, r3
 8005210:	d910      	bls.n	8005234 <HAL_RCC_ClockConfig+0x44>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8005212:	4b72      	ldr	r3, [pc, #456]	; (80053dc <HAL_RCC_ClockConfig+0x1ec>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f023 0207 	bic.w	r2, r3, #7
 800521a:	4970      	ldr	r1, [pc, #448]	; (80053dc <HAL_RCC_ClockConfig+0x1ec>)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	4313      	orrs	r3, r2
 8005220:	600b      	str	r3, [r1, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8005222:	4b6e      	ldr	r3, [pc, #440]	; (80053dc <HAL_RCC_ClockConfig+0x1ec>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	429a      	cmp	r2, r3
 800522e:	d001      	beq.n	8005234 <HAL_RCC_ClockConfig+0x44>
			return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e0cf      	b.n	80053d4 <HAL_RCC_ClockConfig+0x1e4>
		}
	}

	/*----------------- HCLK Configuration prior to SYSCLK----------------------*/
	/* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) {
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d010      	beq.n	8005262 <HAL_RCC_ClockConfig+0x72>
		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

		if (RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE)) {
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	4b66      	ldr	r3, [pc, #408]	; (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800524c:	429a      	cmp	r2, r3
 800524e:	d908      	bls.n	8005262 <HAL_RCC_ClockConfig+0x72>
			MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005250:	4b63      	ldr	r3, [pc, #396]	; (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	4960      	ldr	r1, [pc, #384]	; (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 800525e:	4313      	orrs	r3, r2
 8005260:	608b      	str	r3, [r1, #8]
		}
	}

	/*------------------------- SYSCLK Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK) {
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	d04c      	beq.n	8005308 <HAL_RCC_ClockConfig+0x118>
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

		/* PLL is selected as System Clock Source */
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	2b03      	cmp	r3, #3
 8005274:	d107      	bne.n	8005286 <HAL_RCC_ClockConfig+0x96>
			/* Check the PLL ready flag */
			if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) {
 8005276:	4b5a      	ldr	r3, [pc, #360]	; (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d121      	bne.n	80052c6 <HAL_RCC_ClockConfig+0xd6>
				return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e0a6      	b.n	80053d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
#endif
		} else {
			/* HSE is selected as System Clock Source */
			if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2b02      	cmp	r3, #2
 800528c:	d107      	bne.n	800529e <HAL_RCC_ClockConfig+0xae>
				/* Check the HSE ready flag */
				if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U) {
 800528e:	4b54      	ldr	r3, [pc, #336]	; (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d115      	bne.n	80052c6 <HAL_RCC_ClockConfig+0xd6>
					return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e09a      	b.n	80053d4 <HAL_RCC_ClockConfig+0x1e4>
				}
			}
			/* MSI is selected as System Clock Source */
			else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI) {
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d107      	bne.n	80052b6 <HAL_RCC_ClockConfig+0xc6>
				/* Check the MSI ready flag */
				if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U) {
 80052a6:	4b4e      	ldr	r3, [pc, #312]	; (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d109      	bne.n	80052c6 <HAL_RCC_ClockConfig+0xd6>
					return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e08e      	b.n	80053d4 <HAL_RCC_ClockConfig+0x1e4>
				}
			}
			/* HSI is selected as System Clock Source */
			else {
				/* Check the HSI ready flag */
				if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U) {
 80052b6:	4b4a      	ldr	r3, [pc, #296]	; (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_RCC_ClockConfig+0xd6>
					return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e086      	b.n	80053d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

		}

		MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052c6:	4b46      	ldr	r3, [pc, #280]	; (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f023 0203 	bic.w	r2, r3, #3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	4943      	ldr	r1, [pc, #268]	; (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	608b      	str	r3, [r1, #8]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 80052d8:	f7fe fd3a 	bl	8003d50 <HAL_GetTick>
 80052dc:	60f8      	str	r0, [r7, #12]

		while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 80052de:	e00a      	b.n	80052f6 <HAL_RCC_ClockConfig+0x106>
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 80052e0:	f7fe fd36 	bl	8003d50 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_ClockConfig+0x106>
				return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e06e      	b.n	80053d4 <HAL_RCC_ClockConfig+0x1e4>
		while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 80052f6:	4b3a      	ldr	r3, [pc, #232]	; (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f003 020c 	and.w	r2, r3, #12
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	429a      	cmp	r2, r3
 8005306:	d1eb      	bne.n	80052e0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

	/*----------------- HCLK Configuration after SYSCLK-------------------------*/
	/* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) {
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d010      	beq.n	8005336 <HAL_RCC_ClockConfig+0x146>
		if (RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE)) {
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	4b31      	ldr	r3, [pc, #196]	; (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005320:	429a      	cmp	r2, r3
 8005322:	d208      	bcs.n	8005336 <HAL_RCC_ClockConfig+0x146>
			MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005324:	4b2e      	ldr	r3, [pc, #184]	; (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	492b      	ldr	r1, [pc, #172]	; (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005332:	4313      	orrs	r3, r2
 8005334:	608b      	str	r3, [r1, #8]
		}
	}

	/* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 8005336:	4b29      	ldr	r3, [pc, #164]	; (80053dc <HAL_RCC_ClockConfig+0x1ec>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	429a      	cmp	r2, r3
 8005342:	d210      	bcs.n	8005366 <HAL_RCC_ClockConfig+0x176>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8005344:	4b25      	ldr	r3, [pc, #148]	; (80053dc <HAL_RCC_ClockConfig+0x1ec>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f023 0207 	bic.w	r2, r3, #7
 800534c:	4923      	ldr	r1, [pc, #140]	; (80053dc <HAL_RCC_ClockConfig+0x1ec>)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	4313      	orrs	r3, r2
 8005352:	600b      	str	r3, [r1, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8005354:	4b21      	ldr	r3, [pc, #132]	; (80053dc <HAL_RCC_ClockConfig+0x1ec>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d001      	beq.n	8005366 <HAL_RCC_ClockConfig+0x176>
			return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e036      	b.n	80053d4 <HAL_RCC_ClockConfig+0x1e4>
		}
	}

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0304 	and.w	r3, r3, #4
 800536e:	2b00      	cmp	r3, #0
 8005370:	d008      	beq.n	8005384 <HAL_RCC_ClockConfig+0x194>
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005372:	4b1b      	ldr	r3, [pc, #108]	; (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	4918      	ldr	r1, [pc, #96]	; (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005380:	4313      	orrs	r3, r2
 8005382:	608b      	str	r3, [r1, #8]
	}

	/*-------------------------- PCLK2 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0308 	and.w	r3, r3, #8
 800538c:	2b00      	cmp	r3, #0
 800538e:	d009      	beq.n	80053a4 <HAL_RCC_ClockConfig+0x1b4>
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005390:	4b13      	ldr	r3, [pc, #76]	; (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	00db      	lsls	r3, r3, #3
 800539e:	4910      	ldr	r1, [pc, #64]	; (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	608b      	str	r3, [r1, #8]
	}

	/* Update the SystemCoreClock global variable */
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 80053a4:	f000 f824 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 80053a8:	4602      	mov	r2, r0
			>> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053aa:	4b0d      	ldr	r3, [pc, #52]	; (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	091b      	lsrs	r3, r3, #4
 80053b0:	f003 030f 	and.w	r3, r3, #15
 80053b4:	490b      	ldr	r1, [pc, #44]	; (80053e4 <HAL_RCC_ClockConfig+0x1f4>)
 80053b6:	5ccb      	ldrb	r3, [r1, r3]
 80053b8:	f003 031f 	and.w	r3, r3, #31
 80053bc:	fa22 f303 	lsr.w	r3, r2, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 80053c0:	4a09      	ldr	r2, [pc, #36]	; (80053e8 <HAL_RCC_ClockConfig+0x1f8>)
 80053c2:	6013      	str	r3, [r2, #0]

	/* Configure the source of time base considering new system clocks settings*/
	status = HAL_InitTick(uwTickPrio);
 80053c4:	4b09      	ldr	r3, [pc, #36]	; (80053ec <HAL_RCC_ClockConfig+0x1fc>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7fe fc71 	bl	8003cb0 <HAL_InitTick>
 80053ce:	4603      	mov	r3, r0
 80053d0:	72fb      	strb	r3, [r7, #11]

	return status;
 80053d2:	7afb      	ldrb	r3, [r7, #11]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	40022000 	.word	0x40022000
 80053e0:	40021000 	.word	0x40021000
 80053e4:	0800fd84 	.word	0x0800fd84
 80053e8:	20000028 	.word	0x20000028
 80053ec:	20000038 	.word	0x20000038

080053f0 <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
uint32_t HAL_RCC_GetSysClockFreq(void) {
 80053f0:	b480      	push	{r7}
 80053f2:	b089      	sub	sp, #36	; 0x24
 80053f4:	af00      	add	r7, sp, #0
	uint32_t msirange = 0U, sysclockfreq = 0U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	61fb      	str	r3, [r7, #28]
 80053fa:	2300      	movs	r3, #0
 80053fc:	61bb      	str	r3, [r7, #24]
	uint32_t pllvco, pllsource, pllr, pllm; /* no init needed */
	uint32_t sysclk_source, pll_oscsource;

	sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053fe:	4b3e      	ldr	r3, [pc, #248]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f003 030c 	and.w	r3, r3, #12
 8005406:	613b      	str	r3, [r7, #16]
	pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005408:	4b3b      	ldr	r3, [pc, #236]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f003 0303 	and.w	r3, r3, #3
 8005410:	60fb      	str	r3, [r7, #12]

	if ((sysclk_source == RCC_CFGR_SWS_MSI)
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d005      	beq.n	8005424 <HAL_RCC_GetSysClockFreq+0x34>
			|| ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI))) {
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	2b0c      	cmp	r3, #12
 800541c:	d121      	bne.n	8005462 <HAL_RCC_GetSysClockFreq+0x72>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d11e      	bne.n	8005462 <HAL_RCC_GetSysClockFreq+0x72>
		/* MSI or PLL with MSI source used as system clock source */

		/* Get SYSCLK source */
		if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U) { /* MSISRANGE from RCC_CSR applies */
 8005424:	4b34      	ldr	r3, [pc, #208]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0308 	and.w	r3, r3, #8
 800542c:	2b00      	cmp	r3, #0
 800542e:	d107      	bne.n	8005440 <HAL_RCC_GetSysClockFreq+0x50>
			msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005430:	4b31      	ldr	r3, [pc, #196]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005436:	0a1b      	lsrs	r3, r3, #8
 8005438:	f003 030f 	and.w	r3, r3, #15
 800543c:	61fb      	str	r3, [r7, #28]
 800543e:	e005      	b.n	800544c <HAL_RCC_GetSysClockFreq+0x5c>
		} else { /* MSIRANGE from RCC_CR applies */
			msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005440:	4b2d      	ldr	r3, [pc, #180]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	091b      	lsrs	r3, r3, #4
 8005446:	f003 030f 	and.w	r3, r3, #15
 800544a:	61fb      	str	r3, [r7, #28]
		}
		/*MSI frequency range in HZ*/
		msirange = MSIRangeTable[msirange];
 800544c:	4a2b      	ldr	r2, [pc, #172]	; (80054fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005454:	61fb      	str	r3, [r7, #28]

		if (sysclk_source == RCC_CFGR_SWS_MSI) {
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10d      	bne.n	8005478 <HAL_RCC_GetSysClockFreq+0x88>
			/* MSI used as system clock source */
			sysclockfreq = msirange;
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	61bb      	str	r3, [r7, #24]
		if (sysclk_source == RCC_CFGR_SWS_MSI) {
 8005460:	e00a      	b.n	8005478 <HAL_RCC_GetSysClockFreq+0x88>
		}
	} else if (sysclk_source == RCC_CFGR_SWS_HSI) {
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	2b04      	cmp	r3, #4
 8005466:	d102      	bne.n	800546e <HAL_RCC_GetSysClockFreq+0x7e>
		/* HSI used as system clock source */
		sysclockfreq = HSI_VALUE;
 8005468:	4b25      	ldr	r3, [pc, #148]	; (8005500 <HAL_RCC_GetSysClockFreq+0x110>)
 800546a:	61bb      	str	r3, [r7, #24]
 800546c:	e004      	b.n	8005478 <HAL_RCC_GetSysClockFreq+0x88>
	} else if (sysclk_source == RCC_CFGR_SWS_HSE) {
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	2b08      	cmp	r3, #8
 8005472:	d101      	bne.n	8005478 <HAL_RCC_GetSysClockFreq+0x88>
		/* HSE used as system clock source */
		sysclockfreq = HSE_VALUE;
 8005474:	4b23      	ldr	r3, [pc, #140]	; (8005504 <HAL_RCC_GetSysClockFreq+0x114>)
 8005476:	61bb      	str	r3, [r7, #24]
	} else {
		/* unexpected case: sysclockfreq at 0 */
	}

	if (sysclk_source == RCC_CFGR_SWS_PLL) {
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	2b0c      	cmp	r3, #12
 800547c:	d134      	bne.n	80054e8 <HAL_RCC_GetSysClockFreq+0xf8>
		/* PLL used as system clock  source */

		/* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
		 SYSCLK = PLL_VCO / PLLR
		 */
		pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800547e:	4b1e      	ldr	r3, [pc, #120]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f003 0303 	and.w	r3, r3, #3
 8005486:	60bb      	str	r3, [r7, #8]

		switch (pllsource) {
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2b02      	cmp	r3, #2
 800548c:	d003      	beq.n	8005496 <HAL_RCC_GetSysClockFreq+0xa6>
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b03      	cmp	r3, #3
 8005492:	d003      	beq.n	800549c <HAL_RCC_GetSysClockFreq+0xac>
 8005494:	e005      	b.n	80054a2 <HAL_RCC_GetSysClockFreq+0xb2>
		case RCC_PLLSOURCE_HSI: /* HSI used as PLL clock source */
			pllvco = HSI_VALUE;
 8005496:	4b1a      	ldr	r3, [pc, #104]	; (8005500 <HAL_RCC_GetSysClockFreq+0x110>)
 8005498:	617b      	str	r3, [r7, #20]
			break;
 800549a:	e005      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0xb8>

		case RCC_PLLSOURCE_HSE: /* HSE used as PLL clock source */
			pllvco = HSE_VALUE;
 800549c:	4b19      	ldr	r3, [pc, #100]	; (8005504 <HAL_RCC_GetSysClockFreq+0x114>)
 800549e:	617b      	str	r3, [r7, #20]
			break;
 80054a0:	e002      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0xb8>

		case RCC_PLLSOURCE_MSI: /* MSI used as PLL clock source */
		default:
			pllvco = msirange;
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	617b      	str	r3, [r7, #20]
			break;
 80054a6:	bf00      	nop
		}
		pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 80054a8:	4b13      	ldr	r3, [pc, #76]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	091b      	lsrs	r3, r3, #4
 80054ae:	f003 0307 	and.w	r3, r3, #7
 80054b2:	3301      	adds	r3, #1
 80054b4:	607b      	str	r3, [r7, #4]
		pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80054b6:	4b10      	ldr	r3, [pc, #64]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	0a1b      	lsrs	r3, r3, #8
 80054bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	fb03 f202 	mul.w	r2, r3, r2
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054cc:	617b      	str	r3, [r7, #20]
		pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80054ce:	4b0a      	ldr	r3, [pc, #40]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	0e5b      	lsrs	r3, r3, #25
 80054d4:	f003 0303 	and.w	r3, r3, #3
 80054d8:	3301      	adds	r3, #1
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	603b      	str	r3, [r7, #0]
		sysclockfreq = pllvco / pllr;
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e6:	61bb      	str	r3, [r7, #24]
	}

	return sysclockfreq;
 80054e8:	69bb      	ldr	r3, [r7, #24]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3724      	adds	r7, #36	; 0x24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	40021000 	.word	0x40021000
 80054fc:	0800fd9c 	.word	0x0800fd9c
 8005500:	00f42400 	.word	0x00f42400
 8005504:	007a1200 	.word	0x007a1200

08005508 <HAL_RCC_GetHCLKFreq>:
 *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
 * @retval HCLK frequency in Hz
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
 8005508:	b480      	push	{r7}
 800550a:	af00      	add	r7, sp, #0
	return SystemCoreClock;
 800550c:	4b03      	ldr	r3, [pc, #12]	; (800551c <HAL_RCC_GetHCLKFreq+0x14>)
 800550e:	681b      	ldr	r3, [r3, #0]
}
 8005510:	4618      	mov	r0, r3
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	20000028 	.word	0x20000028

08005520 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Return the PCLK1 frequency.
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency in Hz
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005524:	f7ff fff0 	bl	8005508 <HAL_RCC_GetHCLKFreq>
 8005528:	4602      	mov	r2, r0
 800552a:	4b06      	ldr	r3, [pc, #24]	; (8005544 <HAL_RCC_GetPCLK1Freq+0x24>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	0a1b      	lsrs	r3, r3, #8
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	4904      	ldr	r1, [pc, #16]	; (8005548 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005536:	5ccb      	ldrb	r3, [r1, r3]
 8005538:	f003 031f 	and.w	r3, r3, #31
 800553c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005540:	4618      	mov	r0, r3
 8005542:	bd80      	pop	{r7, pc}
 8005544:	40021000 	.word	0x40021000
 8005548:	0800fd94 	.word	0x0800fd94

0800554c <HAL_RCC_GetPCLK2Freq>:
 * @brief  Return the PCLK2 frequency.
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency in Hz
 */
uint32_t HAL_RCC_GetPCLK2Freq(void) {
 800554c:	b580      	push	{r7, lr}
 800554e:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005550:	f7ff ffda 	bl	8005508 <HAL_RCC_GetHCLKFreq>
 8005554:	4602      	mov	r2, r0
 8005556:	4b06      	ldr	r3, [pc, #24]	; (8005570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	0adb      	lsrs	r3, r3, #11
 800555c:	f003 0307 	and.w	r3, r3, #7
 8005560:	4904      	ldr	r1, [pc, #16]	; (8005574 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005562:	5ccb      	ldrb	r3, [r1, r3]
 8005564:	f003 031f 	and.w	r3, r3, #31
 8005568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800556c:	4618      	mov	r0, r3
 800556e:	bd80      	pop	{r7, pc}
 8005570:	40021000 	.word	0x40021000
 8005574:	0800fd94 	.word	0x0800fd94

08005578 <RCC_SetFlashLatencyFromMSIRange>:
 * @brief  Update number of Flash wait states in line with MSI range and current
 voltage range.
 * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
 * @retval HAL status
 */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange) {
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
	uint32_t vos;
	uint32_t latency = FLASH_LATENCY_0; /* default value 0WS */
 8005580:	2300      	movs	r3, #0
 8005582:	613b      	str	r3, [r7, #16]

	if (__HAL_RCC_PWR_IS_CLK_ENABLED()) {
 8005584:	4b2a      	ldr	r3, [pc, #168]	; (8005630 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <RCC_SetFlashLatencyFromMSIRange+0x20>
		vos = HAL_PWREx_GetVoltageRange();
 8005590:	f7ff f9b6 	bl	8004900 <HAL_PWREx_GetVoltageRange>
 8005594:	6178      	str	r0, [r7, #20]
 8005596:	e014      	b.n	80055c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
	} else {
		__HAL_RCC_PWR_CLK_ENABLE();
 8005598:	4b25      	ldr	r3, [pc, #148]	; (8005630 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800559a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800559c:	4a24      	ldr	r2, [pc, #144]	; (8005630 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800559e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055a2:	6593      	str	r3, [r2, #88]	; 0x58
 80055a4:	4b22      	ldr	r3, [pc, #136]	; (8005630 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ac:	60fb      	str	r3, [r7, #12]
 80055ae:	68fb      	ldr	r3, [r7, #12]
		vos = HAL_PWREx_GetVoltageRange();
 80055b0:	f7ff f9a6 	bl	8004900 <HAL_PWREx_GetVoltageRange>
 80055b4:	6178      	str	r0, [r7, #20]
		__HAL_RCC_PWR_CLK_DISABLE();
 80055b6:	4b1e      	ldr	r3, [pc, #120]	; (8005630 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ba:	4a1d      	ldr	r2, [pc, #116]	; (8005630 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055c0:	6593      	str	r3, [r2, #88]	; 0x58
	}

	if (vos == PWR_REGULATOR_VOLTAGE_SCALE1) {
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055c8:	d10b      	bne.n	80055e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
		if (msirange > RCC_MSIRANGE_8) {
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b80      	cmp	r3, #128	; 0x80
 80055ce:	d919      	bls.n	8005604 <RCC_SetFlashLatencyFromMSIRange+0x8c>
			/* MSI > 16Mhz */
			if (msirange > RCC_MSIRANGE_10) {
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2ba0      	cmp	r3, #160	; 0xa0
 80055d4:	d902      	bls.n	80055dc <RCC_SetFlashLatencyFromMSIRange+0x64>
				/* MSI 48Mhz */
				latency = FLASH_LATENCY_2; /* 2WS */
 80055d6:	2302      	movs	r3, #2
 80055d8:	613b      	str	r3, [r7, #16]
 80055da:	e013      	b.n	8005604 <RCC_SetFlashLatencyFromMSIRange+0x8c>
			} else {
				/* MSI 24Mhz or 32Mhz */
				latency = FLASH_LATENCY_1; /* 1WS */
 80055dc:	2301      	movs	r3, #1
 80055de:	613b      	str	r3, [r7, #16]
 80055e0:	e010      	b.n	8005604 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
		if (msirange > RCC_MSIRANGE_8) {
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b80      	cmp	r3, #128	; 0x80
 80055e6:	d902      	bls.n	80055ee <RCC_SetFlashLatencyFromMSIRange+0x76>
			/* MSI > 16Mhz */
			latency = FLASH_LATENCY_3; /* 3WS */
 80055e8:	2303      	movs	r3, #3
 80055ea:	613b      	str	r3, [r7, #16]
 80055ec:	e00a      	b.n	8005604 <RCC_SetFlashLatencyFromMSIRange+0x8c>
		} else {
			if (msirange == RCC_MSIRANGE_8) {
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b80      	cmp	r3, #128	; 0x80
 80055f2:	d102      	bne.n	80055fa <RCC_SetFlashLatencyFromMSIRange+0x82>
				/* MSI 16Mhz */
				latency = FLASH_LATENCY_2; /* 2WS */
 80055f4:	2302      	movs	r3, #2
 80055f6:	613b      	str	r3, [r7, #16]
 80055f8:	e004      	b.n	8005604 <RCC_SetFlashLatencyFromMSIRange+0x8c>
			} else if (msirange == RCC_MSIRANGE_7) {
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2b70      	cmp	r3, #112	; 0x70
 80055fe:	d101      	bne.n	8005604 <RCC_SetFlashLatencyFromMSIRange+0x8c>
				/* MSI 8Mhz */
				latency = FLASH_LATENCY_1; /* 1WS */
 8005600:	2301      	movs	r3, #1
 8005602:	613b      	str	r3, [r7, #16]
			/* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
		}
#endif
	}

	__HAL_FLASH_SET_LATENCY(latency);
 8005604:	4b0b      	ldr	r3, [pc, #44]	; (8005634 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f023 0207 	bic.w	r2, r3, #7
 800560c:	4909      	ldr	r1, [pc, #36]	; (8005634 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	4313      	orrs	r3, r2
 8005612:	600b      	str	r3, [r1, #0]

	/* Check that the new number of wait states is taken into account to access the Flash
	 memory by reading the FLASH_ACR register */
	if (__HAL_FLASH_GET_LATENCY() != latency) {
 8005614:	4b07      	ldr	r3, [pc, #28]	; (8005634 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0307 	and.w	r3, r3, #7
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	429a      	cmp	r2, r3
 8005620:	d001      	beq.n	8005626 <RCC_SetFlashLatencyFromMSIRange+0xae>
		return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e000      	b.n	8005628 <RCC_SetFlashLatencyFromMSIRange+0xb0>
	}

	return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3718      	adds	r7, #24
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	40021000 	.word	0x40021000
 8005634:	40022000 	.word	0x40022000

08005638 <HAL_RCCEx_PeriphCLKConfig>:
 * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
 *         the RTC clock source: in this case the access to Backup domain is enabled.
 *
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef *PeriphClkInit) {
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
	uint32_t tmpregister, tickstart; /* no init needed */
	HAL_StatusTypeDef ret = HAL_OK; /* Intermediate status */
 8005640:	2300      	movs	r3, #0
 8005642:	74fb      	strb	r3, [r7, #19]
	HAL_StatusTypeDef status = HAL_OK; /* Final status */
 8005644:	2300      	movs	r3, #0
 8005646:	74bb      	strb	r3, [r7, #18]
	assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

	/*-------------------------- SAI1 clock source configuration ---------------------*/
	if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)) {
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005650:	2b00      	cmp	r3, #0
 8005652:	d031      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
		/* Check the parameters */
		assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

		switch (PeriphClkInit->Sai1ClockSelection) {
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005658:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800565c:	d01a      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800565e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005662:	d814      	bhi.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005664:	2b00      	cmp	r3, #0
 8005666:	d009      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005668:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800566c:	d10f      	bne.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x56>
		case RCC_SAI1CLKSOURCE_PLL: /* PLL is used as clock source for SAI1*/
			/* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
			__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800566e:	4b5d      	ldr	r3, [pc, #372]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	4a5c      	ldr	r2, [pc, #368]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005678:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
			/* SAI1 clock source config set later after clock selection check */
			break;
 800567a:	e00c      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x5e>

		case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1*/
			/* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
			ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3304      	adds	r3, #4
 8005680:	2100      	movs	r1, #0
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fdbc 	bl	8006200 <RCCEx_PLLSAI1_Config>
 8005688:	4603      	mov	r3, r0
 800568a:	74fb      	strb	r3, [r7, #19]
			/* SAI1 clock source config set later after clock selection check */
			break;
 800568c:	e003      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
			/* SAI1 clock source config set later after clock selection check */
			break;

		default:
			ret = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	74fb      	strb	r3, [r7, #19]
			break;
 8005692:	e000      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x5e>
			break;
 8005694:	bf00      	nop
		}

		if (ret == HAL_OK) {
 8005696:	7cfb      	ldrb	r3, [r7, #19]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10b      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
			/* Set the source of SAI1 clock*/
			__HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800569c:	4b51      	ldr	r3, [pc, #324]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800569e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056aa:	494e      	ldr	r1, [pc, #312]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80056b2:	e001      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
		} else {
			/* set overall return value */
			status = ret;
 80056b4:	7cfb      	ldrb	r3, [r7, #19]
 80056b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

	/*-------------------------- RTC clock source configuration ----------------------*/
	if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) {
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f000 809e 	beq.w	8005802 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
		FlagStatus pwrclkchanged = RESET;
 80056c6:	2300      	movs	r3, #0
 80056c8:	747b      	strb	r3, [r7, #17]

		/* Check for RTC Parameters used to output RTCCLK */
		assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

		/* Enable Power Clock */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U) {
 80056ca:	4b46      	ldr	r3, [pc, #280]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80056d6:	2301      	movs	r3, #1
 80056d8:	e000      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80056da:	2300      	movs	r3, #0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00d      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
			__HAL_RCC_PWR_CLK_ENABLE();
 80056e0:	4b40      	ldr	r3, [pc, #256]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e4:	4a3f      	ldr	r2, [pc, #252]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056ea:	6593      	str	r3, [r2, #88]	; 0x58
 80056ec:	4b3d      	ldr	r3, [pc, #244]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056f4:	60bb      	str	r3, [r7, #8]
 80056f6:	68bb      	ldr	r3, [r7, #8]
			pwrclkchanged = SET;
 80056f8:	2301      	movs	r3, #1
 80056fa:	747b      	strb	r3, [r7, #17]
		}

		/* Enable write access to Backup domain */
		SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056fc:	4b3a      	ldr	r3, [pc, #232]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a39      	ldr	r2, [pc, #228]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005706:	6013      	str	r3, [r2, #0]

		/* Wait for Backup domain Write protection disable */
		tickstart = HAL_GetTick();
 8005708:	f7fe fb22 	bl	8003d50 <HAL_GetTick>
 800570c:	60f8      	str	r0, [r7, #12]

		while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U) {
 800570e:	e009      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xec>
			if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8005710:	f7fe fb1e 	bl	8003d50 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	2b02      	cmp	r3, #2
 800571c:	d902      	bls.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xec>
				ret = HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	74fb      	strb	r3, [r7, #19]
				break;
 8005722:	e005      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xf8>
		while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U) {
 8005724:	4b30      	ldr	r3, [pc, #192]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572c:	2b00      	cmp	r3, #0
 800572e:	d0ef      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xd8>
			}
		}

		if (ret == HAL_OK) {
 8005730:	7cfb      	ldrb	r3, [r7, #19]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d15a      	bne.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
			/* Reset the Backup domain only if the RTC Clock source selection is modified from default */
			tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005736:	4b2b      	ldr	r3, [pc, #172]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800573c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005740:	617b      	str	r3, [r7, #20]

			if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection)) {
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d01e      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	429a      	cmp	r2, r3
 8005750:	d019      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x14e>
				/* Store the content of BDCR register before the reset of Backup Domain */
				tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005752:	4b24      	ldr	r3, [pc, #144]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800575c:	617b      	str	r3, [r7, #20]
				/* RTC Clock selection can be changed only if the Backup Domain is reset */
				__HAL_RCC_BACKUPRESET_FORCE();
 800575e:	4b21      	ldr	r3, [pc, #132]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005764:	4a1f      	ldr	r2, [pc, #124]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800576a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
				__HAL_RCC_BACKUPRESET_RELEASE();
 800576e:	4b1d      	ldr	r3, [pc, #116]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005774:	4a1b      	ldr	r2, [pc, #108]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800577a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
				/* Restore the Content of BDCR register */
				RCC->BDCR = tmpregister;
 800577e:	4a19      	ldr	r2, [pc, #100]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
			}

			/* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
			if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON)) {
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b00      	cmp	r3, #0
 800578e:	d016      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x186>
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8005790:	f7fe fade 	bl	8003d50 <HAL_GetTick>
 8005794:	60f8      	str	r0, [r7, #12]

				/* Wait till LSE is ready */
				while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U) {
 8005796:	e00b      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
					if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8005798:	f7fe fada 	bl	8003d50 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d902      	bls.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
						ret = HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	74fb      	strb	r3, [r7, #19]
						break;
 80057ae:	e006      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x186>
				while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U) {
 80057b0:	4b0c      	ldr	r3, [pc, #48]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0ec      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x160>
					}
				}
			}

			if (ret == HAL_OK) {
 80057be:	7cfb      	ldrb	r3, [r7, #19]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10b      	bne.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
				/* Apply new RTC clock source selection */
				__HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057c4:	4b07      	ldr	r3, [pc, #28]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d2:	4904      	ldr	r1, [pc, #16]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80057da:	e009      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
			} else {
				/* set overall return value */
				status = ret;
 80057dc:	7cfb      	ldrb	r3, [r7, #19]
 80057de:	74bb      	strb	r3, [r7, #18]
 80057e0:	e006      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80057e2:	bf00      	nop
 80057e4:	40021000 	.word	0x40021000
 80057e8:	40007000 	.word	0x40007000
			}
		} else {
			/* set overall return value */
			status = ret;
 80057ec:	7cfb      	ldrb	r3, [r7, #19]
 80057ee:	74bb      	strb	r3, [r7, #18]
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET) {
 80057f0:	7c7b      	ldrb	r3, [r7, #17]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d105      	bne.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
			__HAL_RCC_PWR_CLK_DISABLE();
 80057f6:	4b8a      	ldr	r3, [pc, #552]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057fa:	4a89      	ldr	r2, [pc, #548]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005800:	6593      	str	r3, [r2, #88]	; 0x58
		}
	}

	/*-------------------------- USART1 clock source configuration -------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1) {
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
		/* Check the parameters */
		assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

		/* Configure the USART1 clock source */
		__HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800580e:	4b84      	ldr	r3, [pc, #528]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005814:	f023 0203 	bic.w	r2, r3, #3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	4980      	ldr	r1, [pc, #512]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800581e:	4313      	orrs	r3, r2
 8005820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
	}

	/*-------------------------- USART2 clock source configuration -------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2) {
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00a      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x20e>
		/* Check the parameters */
		assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

		/* Configure the USART2 clock source */
		__HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005830:	4b7b      	ldr	r3, [pc, #492]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005836:	f023 020c 	bic.w	r2, r3, #12
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	4978      	ldr	r1, [pc, #480]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005840:	4313      	orrs	r3, r2
 8005842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

	/*-------------------------- LPUART1 clock source configuration ------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1) {
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0320 	and.w	r3, r3, #32
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00a      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x230>
		/* Check the parameters */
		assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

		/* Configure the LPUART1 clock source */
		__HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005852:	4b73      	ldr	r3, [pc, #460]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005858:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005860:	496f      	ldr	r1, [pc, #444]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005862:	4313      	orrs	r3, r2
 8005864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
	}

	/*-------------------------- LPTIM1 clock source configuration -------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1)) {
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00a      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x252>
		assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
		__HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005874:	4b6a      	ldr	r3, [pc, #424]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800587a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005882:	4967      	ldr	r1, [pc, #412]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005884:	4313      	orrs	r3, r2
 8005886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
	}

	/*-------------------------- LPTIM2 clock source configuration -------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2)) {
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x274>
		assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
		__HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005896:	4b62      	ldr	r3, [pc, #392]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800589c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a4:	495e      	ldr	r1, [pc, #376]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
	}

	/*-------------------------- I2C1 clock source configuration ---------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1) {
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00a      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x296>
		/* Check the parameters */
		assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

		/* Configure the I2C1 clock source */
		__HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058b8:	4b59      	ldr	r3, [pc, #356]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c6:	4956      	ldr	r1, [pc, #344]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

	/*-------------------------- I2C3 clock source configuration ---------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3) {
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
		/* Check the parameters */
		assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

		/* Configure the I2C3 clock source */
		__HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058da:	4b51      	ldr	r3, [pc, #324]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e8:	494d      	ldr	r1, [pc, #308]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

	/*-------------------------- USB clock source configuration ----------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB)) {
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d028      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x316>
		assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
		__HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058fc:	4b48      	ldr	r3, [pc, #288]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005902:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	4945      	ldr	r1, [pc, #276]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800590c:	4313      	orrs	r3, r2
 800590e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

		if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL) {
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800591a:	d106      	bne.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
			/* Enable PLL48M1CLK output clock */
			__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800591c:	4b40      	ldr	r3, [pc, #256]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	4a3f      	ldr	r2, [pc, #252]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005922:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005926:	60d3      	str	r3, [r2, #12]
 8005928:	e011      	b.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x316>
		} else {
#if defined(RCC_PLLSAI1_SUPPORT)
			if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1) {
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005932:	d10c      	bne.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x316>
				/* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
				ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	3304      	adds	r3, #4
 8005938:	2101      	movs	r1, #1
 800593a:	4618      	mov	r0, r3
 800593c:	f000 fc60 	bl	8006200 <RCCEx_PLLSAI1_Config>
 8005940:	4603      	mov	r3, r0
 8005942:	74fb      	strb	r3, [r7, #19]

				if (ret != HAL_OK) {
 8005944:	7cfb      	ldrb	r3, [r7, #19]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x316>
					/* set overall return value */
					status = ret;
 800594a:	7cfb      	ldrb	r3, [r7, #19]
 800594c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

	/*-------------------------- RNG clock source configuration ----------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG)) {
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d028      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x374>
		assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
		__HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800595a:	4b31      	ldr	r3, [pc, #196]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800595c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005960:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005968:	492d      	ldr	r1, [pc, #180]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800596a:	4313      	orrs	r3, r2
 800596c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

		if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL) {
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005974:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005978:	d106      	bne.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x350>
			/* Enable PLL48M1CLK output clock */
			__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800597a:	4b29      	ldr	r3, [pc, #164]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	4a28      	ldr	r2, [pc, #160]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005980:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005984:	60d3      	str	r3, [r2, #12]
 8005986:	e011      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x374>
		}
#if defined(RCC_PLLSAI1_SUPPORT)
		else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1) {
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800598c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005990:	d10c      	bne.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x374>
			/* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
			ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	3304      	adds	r3, #4
 8005996:	2101      	movs	r1, #1
 8005998:	4618      	mov	r0, r3
 800599a:	f000 fc31 	bl	8006200 <RCCEx_PLLSAI1_Config>
 800599e:	4603      	mov	r3, r0
 80059a0:	74fb      	strb	r3, [r7, #19]

			if (ret != HAL_OK) {
 80059a2:	7cfb      	ldrb	r3, [r7, #19]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d001      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x374>
				/* set overall return value */
				status = ret;
 80059a8:	7cfb      	ldrb	r3, [r7, #19]
 80059aa:	74bb      	strb	r3, [r7, #18]
		}
	}

	/*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC) {
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d01c      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
		/* Check the parameters */
		assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

		/* Configure the ADC interface clock source */
		__HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059b8:	4b19      	ldr	r3, [pc, #100]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059c6:	4916      	ldr	r1, [pc, #88]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
		if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1) {
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059d6:	d10c      	bne.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
			/* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
			ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3304      	adds	r3, #4
 80059dc:	2102      	movs	r1, #2
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 fc0e 	bl	8006200 <RCCEx_PLLSAI1_Config>
 80059e4:	4603      	mov	r3, r0
 80059e6:	74fb      	strb	r3, [r7, #19]

			if (ret != HAL_OK) {
 80059e8:	7cfb      	ldrb	r3, [r7, #19]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
				/* set overall return value */
				status = ret;
 80059ee:	7cfb      	ldrb	r3, [r7, #19]
 80059f0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

	/*-------------------------- SWPMI1 clock source configuration -------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1) {
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00a      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
		/* Check the parameters */
		assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

		/* Configure the SWPMI1 clock source */
		__HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80059fe:	4b08      	ldr	r3, [pc, #32]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a04:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a0c:	4904      	ldr	r1, [pc, #16]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

	return status;
 8005a14:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	40021000 	.word	0x40021000

08005a24 <HAL_RCCEx_GetPeriphCLKFreq>:
 *            @arg @ref RCC_PERIPHCLK_DSI  DSI peripheral clock (only for devices with DSI)
 *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
 @endif
 * @retval Frequency in Hz
 */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk) {
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b088      	sub	sp, #32
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
	uint32_t frequency = 0U;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	61fb      	str	r3, [r7, #28]
#endif

	/* Check the parameters */
	assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

	if (PeriphClk == RCC_PERIPHCLK_RTC) {
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a36:	d13a      	bne.n	8005aae <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
		/* Get the current RTC source */
		srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005a38:	4b9a      	ldr	r3, [pc, #616]	; (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a42:	613b      	str	r3, [r7, #16]

		switch (srcclk) {
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a4a:	d025      	beq.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a52:	f200 83b2 	bhi.w	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a5c:	d004      	beq.n	8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a64:	d00c      	beq.n	8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
				frequency = HSE_VALUE / 32U;
			}
			break;
		default:
			/* No clock source, frequency default init at 0 */
			break;
 8005a66:	e3a8      	b.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x796>
			if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) {
 8005a68:	4b8e      	ldr	r3, [pc, #568]	; (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	f040 83a3 	bne.w	80061be <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
				frequency = LSE_VALUE;
 8005a78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a7c:	61fb      	str	r3, [r7, #28]
			break;
 8005a7e:	e39e      	b.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
			if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) {
 8005a80:	4b88      	ldr	r3, [pc, #544]	; (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	f040 8399 	bne.w	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
					frequency = LSI_VALUE;
 8005a90:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005a94:	61fb      	str	r3, [r7, #28]
			break;
 8005a96:	e394      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
			if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) {
 8005a98:	4b82      	ldr	r3, [pc, #520]	; (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005aa4:	f040 8394 	bne.w	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
				frequency = HSE_VALUE / 32U;
 8005aa8:	4b7f      	ldr	r3, [pc, #508]	; (8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005aaa:	61fb      	str	r3, [r7, #28]
			break;
 8005aac:	e390      	b.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
		}
	} else {
		/* Other external peripheral clock source than RTC */
		pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005aae:	4b7d      	ldr	r3, [pc, #500]	; (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f003 0303 	and.w	r3, r3, #3
 8005ab6:	617b      	str	r3, [r7, #20]

		/* Compute PLL clock input */
		switch (pll_oscsource) {
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	2b03      	cmp	r3, #3
 8005abc:	d036      	beq.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	2b03      	cmp	r3, #3
 8005ac2:	d840      	bhi.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d003      	beq.n	8005ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d020      	beq.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8005ad0:	e039      	b.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
		case RCC_PLLSOURCE_MSI: /* MSI ? */
			if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY)) {
 8005ad2:	4b74      	ldr	r3, [pc, #464]	; (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d116      	bne.n	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
				/*MSI frequency range in HZ*/
				pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005ade:	4b71      	ldr	r3, [pc, #452]	; (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0308 	and.w	r3, r3, #8
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d005      	beq.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8005aea:	4b6e      	ldr	r3, [pc, #440]	; (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	091b      	lsrs	r3, r3, #4
 8005af0:	f003 030f 	and.w	r3, r3, #15
 8005af4:	e005      	b.n	8005b02 <HAL_RCCEx_GetPeriphCLKFreq+0xde>
 8005af6:	4b6b      	ldr	r3, [pc, #428]	; (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005afc:	0a1b      	lsrs	r3, r3, #8
 8005afe:	f003 030f 	and.w	r3, r3, #15
 8005b02:	4a6a      	ldr	r2, [pc, #424]	; (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b08:	61bb      	str	r3, [r7, #24]
			} else {
				pllvco = 0U;
			}
			break;
 8005b0a:	e01f      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
				pllvco = 0U;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	61bb      	str	r3, [r7, #24]
			break;
 8005b10:	e01c      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
		case RCC_PLLSOURCE_HSI: /* HSI ? */
			if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) {
 8005b12:	4b64      	ldr	r3, [pc, #400]	; (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b1e:	d102      	bne.n	8005b26 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
				pllvco = HSI_VALUE;
 8005b20:	4b63      	ldr	r3, [pc, #396]	; (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005b22:	61bb      	str	r3, [r7, #24]
			} else {
				pllvco = 0U;
			}
			break;
 8005b24:	e012      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
				pllvco = 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	61bb      	str	r3, [r7, #24]
			break;
 8005b2a:	e00f      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
		case RCC_PLLSOURCE_HSE: /* HSE ? */
			if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) {
 8005b2c:	4b5d      	ldr	r3, [pc, #372]	; (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b38:	d102      	bne.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
				pllvco = HSE_VALUE;
 8005b3a:	4b5e      	ldr	r3, [pc, #376]	; (8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b3c:	61bb      	str	r3, [r7, #24]
			} else {
				pllvco = 0U;
			}
			break;
 8005b3e:	e005      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
				pllvco = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	61bb      	str	r3, [r7, #24]
			break;
 8005b44:	e002      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
		default:
			/* No source */
			pllvco = 0U;
 8005b46:	2300      	movs	r3, #0
 8005b48:	61bb      	str	r3, [r7, #24]
			break;
 8005b4a:	bf00      	nop
		}

		switch (PeriphClk) {
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b52:	d068      	beq.n	8005c26 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b5a:	f200 833b 	bhi.w	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b64:	f000 830c 	beq.w	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b6e:	f200 8331 	bhi.w	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b78:	f000 81ce 	beq.w	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b82:	f200 8327 	bhi.w	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b8c:	d04b      	beq.n	8005c26 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b94:	f200 831e 	bhi.w	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b9e:	d03b      	beq.n	8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ba6:	f200 8315 	bhi.w	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bb0:	f000 829c 	beq.w	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bba:	f200 830b 	bhi.w	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bc4:	f000 8248 	beq.w	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bce:	f200 8301 	bhi.w	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bd8:	f000 8212 	beq.w	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005be2:	f200 82f7 	bhi.w	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b40      	cmp	r3, #64	; 0x40
 8005bea:	f000 81dd 	beq.w	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b40      	cmp	r3, #64	; 0x40
 8005bf2:	f200 82ef 	bhi.w	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b20      	cmp	r3, #32
 8005bfa:	f000 814c 	beq.w	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b20      	cmp	r3, #32
 8005c02:	f200 82e7 	bhi.w	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	f000 80c3 	beq.w	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	f000 80f6 	beq.w	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

		default:
			break;
 8005c16:	e2dd      	b.n	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
			frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005c18:	69b9      	ldr	r1, [r7, #24]
 8005c1a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005c1e:	f000 fbe1 	bl	80063e4 <RCCEx_GetSAIxPeriphCLKFreq>
 8005c22:	61f8      	str	r0, [r7, #28]
			break;
 8005c24:	e2d7      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
			srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005c26:	4b1f      	ldr	r3, [pc, #124]	; (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c2c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005c30:	613b      	str	r3, [r7, #16]
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005c38:	d016      	beq.n	8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005c40:	f200 809e 	bhi.w	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c4a:	d035      	beq.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c52:	f200 8095 	bhi.w	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f000 8087 	beq.w	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c64:	d055      	beq.n	8005d12 <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
				break;
 8005c66:	e08b      	b.n	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
				if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY)) {
 8005c68:	4b0e      	ldr	r3, [pc, #56]	; (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	f040 8087 	bne.w	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
					frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005c76:	4b0b      	ldr	r3, [pc, #44]	; (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0308 	and.w	r3, r3, #8
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d005      	beq.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005c82:	4b08      	ldr	r3, [pc, #32]	; (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	091b      	lsrs	r3, r3, #4
 8005c88:	f003 030f 	and.w	r3, r3, #15
 8005c8c:	e005      	b.n	8005c9a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8005c8e:	4b05      	ldr	r3, [pc, #20]	; (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c94:	0a1b      	lsrs	r3, r3, #8
 8005c96:	f003 030f 	and.w	r3, r3, #15
 8005c9a:	4a04      	ldr	r2, [pc, #16]	; (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ca0:	61fb      	str	r3, [r7, #28]
				break;
 8005ca2:	e06f      	b.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8005ca4:	40021000 	.word	0x40021000
 8005ca8:	0003d090 	.word	0x0003d090
 8005cac:	0800fd9c 	.word	0x0800fd9c
 8005cb0:	00f42400 	.word	0x00f42400
 8005cb4:	007a1200 	.word	0x007a1200
				if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)) {
 8005cb8:	4ba0      	ldr	r3, [pc, #640]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cc4:	d160      	bne.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
					if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN)) {
 8005cc6:	4b9d      	ldr	r3, [pc, #628]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cd2:	d159      	bne.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
						plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005cd4:	4b99      	ldr	r3, [pc, #612]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	0a1b      	lsrs	r3, r3, #8
 8005cda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cde:	60fb      	str	r3, [r7, #12]
						pllvco = ((pllvco * plln)
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	fb03 f202 	mul.w	r2, r3, r2
								/ ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005ce8:	4b94      	ldr	r3, [pc, #592]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	091b      	lsrs	r3, r3, #4
 8005cee:	f003 0307 	and.w	r3, r3, #7
 8005cf2:	3301      	adds	r3, #1
						pllvco = ((pllvco * plln)
 8005cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf8:	61bb      	str	r3, [r7, #24]
								/ (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005cfa:	4b90      	ldr	r3, [pc, #576]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	0d5b      	lsrs	r3, r3, #21
 8005d00:	f003 0303 	and.w	r3, r3, #3
 8005d04:	3301      	adds	r3, #1
 8005d06:	005b      	lsls	r3, r3, #1
						frequency = (pllvco
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0e:	61fb      	str	r3, [r7, #28]
				break;
 8005d10:	e03a      	b.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
				if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY)) {
 8005d12:	4b8a      	ldr	r3, [pc, #552]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d1e:	d135      	bne.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x368>
					if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN)) {
 8005d20:	4b86      	ldr	r3, [pc, #536]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d2c:	d12e      	bne.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x368>
						plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005d2e:	4b83      	ldr	r3, [pc, #524]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	0a1b      	lsrs	r3, r3, #8
 8005d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d38:	60fb      	str	r3, [r7, #12]
						pllvco = ((pllvco * plln)
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	fb03 f202 	mul.w	r2, r3, r2
								/ ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005d42:	4b7e      	ldr	r3, [pc, #504]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	091b      	lsrs	r3, r3, #4
 8005d48:	f003 0307 	and.w	r3, r3, #7
 8005d4c:	3301      	adds	r3, #1
						pllvco = ((pllvco * plln)
 8005d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d52:	61bb      	str	r3, [r7, #24]
								/ (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q)
 8005d54:	4b79      	ldr	r3, [pc, #484]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005d56:	691b      	ldr	r3, [r3, #16]
										>> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005d58:	0d5b      	lsrs	r3, r3, #21
 8005d5a:	f003 0303 	and.w	r3, r3, #3
 8005d5e:	3301      	adds	r3, #1
 8005d60:	005b      	lsls	r3, r3, #1
						frequency = (pllvco
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d68:	61fb      	str	r3, [r7, #28]
				break;
 8005d6a:	e00f      	b.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x368>
				if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005d6c:	4b73      	ldr	r3, [pc, #460]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005d6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d10a      	bne.n	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
					frequency = HSI48_VALUE;
 8005d7a:	4b71      	ldr	r3, [pc, #452]	; (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8005d7c:	61fb      	str	r3, [r7, #28]
				break;
 8005d7e:	e007      	b.n	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
				break;
 8005d80:	bf00      	nop
 8005d82:	e228      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 8005d84:	bf00      	nop
 8005d86:	e226      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 8005d88:	bf00      	nop
 8005d8a:	e224      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 8005d8c:	bf00      	nop
 8005d8e:	e222      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 8005d90:	bf00      	nop
			break;
 8005d92:	e220      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
			srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005d94:	4b69      	ldr	r3, [pc, #420]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9a:	f003 0303 	and.w	r3, r3, #3
 8005d9e:	613b      	str	r3, [r7, #16]
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	2b03      	cmp	r3, #3
 8005da4:	d827      	bhi.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8005da6:	a201      	add	r2, pc, #4	; (adr r2, 8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 8005da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dac:	08005dbd 	.word	0x08005dbd
 8005db0:	08005dc5 	.word	0x08005dc5
 8005db4:	08005dcd 	.word	0x08005dcd
 8005db8:	08005de1 	.word	0x08005de1
				frequency = HAL_RCC_GetPCLK2Freq();
 8005dbc:	f7ff fbc6 	bl	800554c <HAL_RCC_GetPCLK2Freq>
 8005dc0:	61f8      	str	r0, [r7, #28]
				break;
 8005dc2:	e01d      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
				frequency = HAL_RCC_GetSysClockFreq();
 8005dc4:	f7ff fb14 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8005dc8:	61f8      	str	r0, [r7, #28]
				break;
 8005dca:	e019      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
				if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) {
 8005dcc:	4b5b      	ldr	r3, [pc, #364]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd8:	d10f      	bne.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
					frequency = HSI_VALUE;
 8005dda:	4b5a      	ldr	r3, [pc, #360]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8005ddc:	61fb      	str	r3, [r7, #28]
				break;
 8005dde:	e00c      	b.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
				if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) {
 8005de0:	4b56      	ldr	r3, [pc, #344]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d107      	bne.n	8005dfe <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
					frequency = LSE_VALUE;
 8005dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005df2:	61fb      	str	r3, [r7, #28]
				break;
 8005df4:	e003      	b.n	8005dfe <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
				break;
 8005df6:	bf00      	nop
 8005df8:	e1ed      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 8005dfa:	bf00      	nop
 8005dfc:	e1eb      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 8005dfe:	bf00      	nop
			break;
 8005e00:	e1e9      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
			srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005e02:	4b4e      	ldr	r3, [pc, #312]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e08:	f003 030c 	and.w	r3, r3, #12
 8005e0c:	613b      	str	r3, [r7, #16]
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	2b0c      	cmp	r3, #12
 8005e12:	d83a      	bhi.n	8005e8a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005e14:	a201      	add	r2, pc, #4	; (adr r2, 8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>)
 8005e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1a:	bf00      	nop
 8005e1c:	08005e51 	.word	0x08005e51
 8005e20:	08005e8b 	.word	0x08005e8b
 8005e24:	08005e8b 	.word	0x08005e8b
 8005e28:	08005e8b 	.word	0x08005e8b
 8005e2c:	08005e59 	.word	0x08005e59
 8005e30:	08005e8b 	.word	0x08005e8b
 8005e34:	08005e8b 	.word	0x08005e8b
 8005e38:	08005e8b 	.word	0x08005e8b
 8005e3c:	08005e61 	.word	0x08005e61
 8005e40:	08005e8b 	.word	0x08005e8b
 8005e44:	08005e8b 	.word	0x08005e8b
 8005e48:	08005e8b 	.word	0x08005e8b
 8005e4c:	08005e75 	.word	0x08005e75
				frequency = HAL_RCC_GetPCLK1Freq();
 8005e50:	f7ff fb66 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 8005e54:	61f8      	str	r0, [r7, #28]
				break;
 8005e56:	e01d      	b.n	8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
				frequency = HAL_RCC_GetSysClockFreq();
 8005e58:	f7ff faca 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8005e5c:	61f8      	str	r0, [r7, #28]
				break;
 8005e5e:	e019      	b.n	8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
				if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) {
 8005e60:	4b36      	ldr	r3, [pc, #216]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e6c:	d10f      	bne.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
					frequency = HSI_VALUE;
 8005e6e:	4b35      	ldr	r3, [pc, #212]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8005e70:	61fb      	str	r3, [r7, #28]
				break;
 8005e72:	e00c      	b.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
				if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) {
 8005e74:	4b31      	ldr	r3, [pc, #196]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d107      	bne.n	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
					frequency = LSE_VALUE;
 8005e82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e86:	61fb      	str	r3, [r7, #28]
				break;
 8005e88:	e003      	b.n	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
				break;
 8005e8a:	bf00      	nop
 8005e8c:	e1a3      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 8005e8e:	bf00      	nop
 8005e90:	e1a1      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 8005e92:	bf00      	nop
			break;
 8005e94:	e19f      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
			srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005e96:	4b29      	ldr	r3, [pc, #164]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ea0:	613b      	str	r3, [r7, #16]
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ea8:	d025      	beq.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005eb0:	d82c      	bhi.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eb8:	d013      	beq.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ec0:	d824      	bhi.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d004      	beq.n	8005ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ece:	d004      	beq.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
				break;
 8005ed0:	e01c      	b.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
				frequency = HAL_RCC_GetPCLK1Freq();
 8005ed2:	f7ff fb25 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 8005ed6:	61f8      	str	r0, [r7, #28]
				break;
 8005ed8:	e01d      	b.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
				frequency = HAL_RCC_GetSysClockFreq();
 8005eda:	f7ff fa89 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8005ede:	61f8      	str	r0, [r7, #28]
				break;
 8005ee0:	e019      	b.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
				if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) {
 8005ee2:	4b16      	ldr	r3, [pc, #88]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eee:	d10f      	bne.n	8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
					frequency = HSI_VALUE;
 8005ef0:	4b14      	ldr	r3, [pc, #80]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8005ef2:	61fb      	str	r3, [r7, #28]
				break;
 8005ef4:	e00c      	b.n	8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
				if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) {
 8005ef6:	4b11      	ldr	r3, [pc, #68]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d107      	bne.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
					frequency = LSE_VALUE;
 8005f04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f08:	61fb      	str	r3, [r7, #28]
				break;
 8005f0a:	e003      	b.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
				break;
 8005f0c:	bf00      	nop
 8005f0e:	e162      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 8005f10:	bf00      	nop
 8005f12:	e160      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 8005f14:	bf00      	nop
			break;
 8005f16:	e15e      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
			srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005f18:	4b08      	ldr	r3, [pc, #32]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f22:	613b      	str	r3, [r7, #16]
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f2a:	d00d      	beq.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f32:	d135      	bne.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
				frequency = HAL_RCC_GetSysClockFreq();
 8005f34:	f7ff fa5c 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8005f38:	61f8      	str	r0, [r7, #28]
				break;
 8005f3a:	e034      	b.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x582>
 8005f3c:	40021000 	.word	0x40021000
 8005f40:	02dc6c00 	.word	0x02dc6c00
 8005f44:	00f42400 	.word	0x00f42400
				if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY)
 8005f48:	4b9f      	ldr	r3, [pc, #636]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f54:	d126      	bne.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
						&& (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)) {
 8005f56:	4b9c      	ldr	r3, [pc, #624]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d020      	beq.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
					plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005f62:	4b99      	ldr	r3, [pc, #612]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	0a1b      	lsrs	r3, r3, #8
 8005f68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f6c:	60fb      	str	r3, [r7, #12]
					pllvco = ((pllvco * plln)
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	fb03 f202 	mul.w	r2, r3, r2
							/ ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005f76:	4b94      	ldr	r3, [pc, #592]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	091b      	lsrs	r3, r3, #4
 8005f7c:	f003 0307 	and.w	r3, r3, #7
 8005f80:	3301      	adds	r3, #1
					pllvco = ((pllvco * plln)
 8005f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f86:	61bb      	str	r3, [r7, #24]
							/ (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos)
 8005f88:	4b8f      	ldr	r3, [pc, #572]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	0e5b      	lsrs	r3, r3, #25
 8005f8e:	f003 0303 	and.w	r3, r3, #3
									+ 1U) << 1U));
 8005f92:	3301      	adds	r3, #1
 8005f94:	005b      	lsls	r3, r3, #1
					frequency = (pllvco
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9c:	61fb      	str	r3, [r7, #28]
				break;
 8005f9e:	e001      	b.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
				break;
 8005fa0:	bf00      	nop
 8005fa2:	e118      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 8005fa4:	bf00      	nop
			break;
 8005fa6:	e116      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
			srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005fa8:	4b87      	ldr	r3, [pc, #540]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8005faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005fb2:	613b      	str	r3, [r7, #16]
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fba:	d013      	beq.n	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fc2:	d819      	bhi.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d004      	beq.n	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fd0:	d004      	beq.n	8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
				break;
 8005fd2:	e011      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
				frequency = HAL_RCC_GetPCLK1Freq();
 8005fd4:	f7ff faa4 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 8005fd8:	61f8      	str	r0, [r7, #28]
				break;
 8005fda:	e010      	b.n	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
				frequency = HAL_RCC_GetSysClockFreq();
 8005fdc:	f7ff fa08 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8005fe0:	61f8      	str	r0, [r7, #28]
				break;
 8005fe2:	e00c      	b.n	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
				if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) {
 8005fe4:	4b78      	ldr	r3, [pc, #480]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ff0:	d104      	bne.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
					frequency = HSI_VALUE;
 8005ff2:	4b76      	ldr	r3, [pc, #472]	; (80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005ff4:	61fb      	str	r3, [r7, #28]
				break;
 8005ff6:	e001      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
				break;
 8005ff8:	bf00      	nop
 8005ffa:	e0ec      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 8005ffc:	bf00      	nop
			break;
 8005ffe:	e0ea      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
			srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006000:	4b71      	ldr	r3, [pc, #452]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8006002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006006:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800600a:	613b      	str	r3, [r7, #16]
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006012:	d013      	beq.n	800603c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800601a:	d819      	bhi.n	8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d004      	beq.n	800602c <HAL_RCCEx_GetPeriphCLKFreq+0x608>
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006028:	d004      	beq.n	8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x610>
				break;
 800602a:	e011      	b.n	8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
				frequency = HAL_RCC_GetPCLK1Freq();
 800602c:	f7ff fa78 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 8006030:	61f8      	str	r0, [r7, #28]
				break;
 8006032:	e010      	b.n	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0x632>
				frequency = HAL_RCC_GetSysClockFreq();
 8006034:	f7ff f9dc 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8006038:	61f8      	str	r0, [r7, #28]
				break;
 800603a:	e00c      	b.n	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0x632>
				if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) {
 800603c:	4b62      	ldr	r3, [pc, #392]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006048:	d104      	bne.n	8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
					frequency = HSI_VALUE;
 800604a:	4b60      	ldr	r3, [pc, #384]	; (80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800604c:	61fb      	str	r3, [r7, #28]
				break;
 800604e:	e001      	b.n	8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
				break;
 8006050:	bf00      	nop
 8006052:	e0c0      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 8006054:	bf00      	nop
			break;
 8006056:	e0be      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
			srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006058:	4b5b      	ldr	r3, [pc, #364]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800605a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800605e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006062:	613b      	str	r3, [r7, #16]
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800606a:	d02c      	beq.n	80060c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006072:	d833      	bhi.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800607a:	d01a      	beq.n	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006082:	d82b      	bhi.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d004      	beq.n	8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006090:	d004      	beq.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
				break;
 8006092:	e023      	b.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
				frequency = HAL_RCC_GetPCLK1Freq();
 8006094:	f7ff fa44 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 8006098:	61f8      	str	r0, [r7, #28]
				break;
 800609a:	e026      	b.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
				if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) {
 800609c:	4b4a      	ldr	r3, [pc, #296]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800609e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060a2:	f003 0302 	and.w	r3, r3, #2
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d11a      	bne.n	80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
						frequency = LSI_VALUE;
 80060aa:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80060ae:	61fb      	str	r3, [r7, #28]
				break;
 80060b0:	e016      	b.n	80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
				if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) {
 80060b2:	4b45      	ldr	r3, [pc, #276]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060be:	d111      	bne.n	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>
					frequency = HSI_VALUE;
 80060c0:	4b42      	ldr	r3, [pc, #264]	; (80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80060c2:	61fb      	str	r3, [r7, #28]
				break;
 80060c4:	e00e      	b.n	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>
				if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) {
 80060c6:	4b40      	ldr	r3, [pc, #256]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80060c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060cc:	f003 0302 	and.w	r3, r3, #2
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d109      	bne.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
					frequency = LSE_VALUE;
 80060d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060d8:	61fb      	str	r3, [r7, #28]
				break;
 80060da:	e005      	b.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
				break;
 80060dc:	bf00      	nop
 80060de:	e07a      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 80060e0:	bf00      	nop
 80060e2:	e078      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 80060e4:	bf00      	nop
 80060e6:	e076      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 80060e8:	bf00      	nop
			break;
 80060ea:	e074      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
			srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80060ec:	4b36      	ldr	r3, [pc, #216]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80060ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80060f6:	613b      	str	r3, [r7, #16]
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060fe:	d02c      	beq.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x736>
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006106:	d833      	bhi.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800610e:	d01a      	beq.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006116:	d82b      	bhi.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d004      	beq.n	8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006124:	d004      	beq.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
				break;
 8006126:	e023      	b.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
				frequency = HAL_RCC_GetPCLK1Freq();
 8006128:	f7ff f9fa 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 800612c:	61f8      	str	r0, [r7, #28]
				break;
 800612e:	e026      	b.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
				if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) {
 8006130:	4b25      	ldr	r3, [pc, #148]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8006132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b02      	cmp	r3, #2
 800613c:	d11a      	bne.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
						frequency = LSI_VALUE;
 800613e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006142:	61fb      	str	r3, [r7, #28]
				break;
 8006144:	e016      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
				if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) {
 8006146:	4b20      	ldr	r3, [pc, #128]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800614e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006152:	d111      	bne.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
					frequency = HSI_VALUE;
 8006154:	4b1d      	ldr	r3, [pc, #116]	; (80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006156:	61fb      	str	r3, [r7, #28]
				break;
 8006158:	e00e      	b.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
				if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) {
 800615a:	4b1b      	ldr	r3, [pc, #108]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800615c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b02      	cmp	r3, #2
 8006166:	d109      	bne.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x758>
					frequency = LSE_VALUE;
 8006168:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800616c:	61fb      	str	r3, [r7, #28]
				break;
 800616e:	e005      	b.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x758>
				break;
 8006170:	bf00      	nop
 8006172:	e030      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 8006174:	bf00      	nop
 8006176:	e02e      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 8006178:	bf00      	nop
 800617a:	e02c      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 800617c:	bf00      	nop
			break;
 800617e:	e02a      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
			srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8006180:	4b11      	ldr	r3, [pc, #68]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8006182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006186:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800618a:	613b      	str	r3, [r7, #16]
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d004      	beq.n	800619c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006198:	d004      	beq.n	80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
				break;
 800619a:	e00d      	b.n	80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
				frequency = HAL_RCC_GetPCLK1Freq();
 800619c:	f7ff f9c0 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 80061a0:	61f8      	str	r0, [r7, #28]
				break;
 80061a2:	e009      	b.n	80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
				if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) {
 80061a4:	4b08      	ldr	r3, [pc, #32]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061b0:	d101      	bne.n	80061b6 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
					frequency = HSI_VALUE;
 80061b2:	4b06      	ldr	r3, [pc, #24]	; (80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80061b4:	61fb      	str	r3, [r7, #28]
				break;
 80061b6:	bf00      	nop
			break;
 80061b8:	e00d      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
			break;
 80061ba:	bf00      	nop
 80061bc:	e00b      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
			break;
 80061be:	bf00      	nop
 80061c0:	e009      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
			break;
 80061c2:	bf00      	nop
 80061c4:	e007      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 80061c6:	bf00      	nop
 80061c8:	40021000 	.word	0x40021000
 80061cc:	00f42400 	.word	0x00f42400
			break;
 80061d0:	bf00      	nop
 80061d2:	e000      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
			break;
 80061d4:	bf00      	nop
		}
	}

	return (frequency);
 80061d6:	69fb      	ldr	r3, [r7, #28]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3720      	adds	r7, #32
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_RCCEx_EnableMSIPLLMode>:
 * @brief  Enable the PLL-mode of the MSI.
 * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
 *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
 * @retval None
 */
void HAL_RCCEx_EnableMSIPLLMode(void) {
 80061e0:	b480      	push	{r7}
 80061e2:	af00      	add	r7, sp, #0
	SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80061e4:	4b05      	ldr	r3, [pc, #20]	; (80061fc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a04      	ldr	r2, [pc, #16]	; (80061fc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80061ea:	f043 0304 	orr.w	r3, r3, #4
 80061ee:	6013      	str	r3, [r2, #0]
}
 80061f0:	bf00      	nop
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	40021000 	.word	0x40021000

08006200 <RCCEx_PLLSAI1_Config>:
 *
 * @note   PLLSAI1 is temporary disable to apply new parameters
 *
 * @retval HAL status
 */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider) {
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
	uint32_t tickstart;
	HAL_StatusTypeDef status = HAL_OK;
 800620a:	2300      	movs	r3, #0
 800620c:	73fb      	strb	r3, [r7, #15]
	assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
	assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
	assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

	/* Check that PLLSAI1 clock source and divider M can be applied */
	if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE) {
 800620e:	4b74      	ldr	r3, [pc, #464]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	f003 0303 	and.w	r3, r3, #3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d018      	beq.n	800624c <RCCEx_PLLSAI1_Config+0x4c>
		/* PLL clock source and divider M already set, check that no request for change  */
		if ((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source) || (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800621a:	4b71      	ldr	r3, [pc, #452]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	f003 0203 	and.w	r2, r3, #3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	429a      	cmp	r2, r3
 8006228:	d10d      	bne.n	8006246 <RCCEx_PLLSAI1_Config+0x46>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d009      	beq.n	8006246 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
				|| (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006232:	4b6b      	ldr	r3, [pc, #428]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	091b      	lsrs	r3, r3, #4
 8006238:	f003 0307 	and.w	r3, r3, #7
 800623c:	1c5a      	adds	r2, r3, #1
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	429a      	cmp	r2, r3
 8006244:	d047      	beq.n	80062d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
				) {
			status = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	73fb      	strb	r3, [r7, #15]
 800624a:	e044      	b.n	80062d6 <RCCEx_PLLSAI1_Config+0xd6>
		}
	} else {
		/* Check PLLSAI1 clock source availability */
		switch (PllSai1->PLLSAI1Source) {
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b03      	cmp	r3, #3
 8006252:	d018      	beq.n	8006286 <RCCEx_PLLSAI1_Config+0x86>
 8006254:	2b03      	cmp	r3, #3
 8006256:	d825      	bhi.n	80062a4 <RCCEx_PLLSAI1_Config+0xa4>
 8006258:	2b01      	cmp	r3, #1
 800625a:	d002      	beq.n	8006262 <RCCEx_PLLSAI1_Config+0x62>
 800625c:	2b02      	cmp	r3, #2
 800625e:	d009      	beq.n	8006274 <RCCEx_PLLSAI1_Config+0x74>
 8006260:	e020      	b.n	80062a4 <RCCEx_PLLSAI1_Config+0xa4>
		case RCC_PLLSOURCE_MSI:
			if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY)) {
 8006262:	4b5f      	ldr	r3, [pc, #380]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d11d      	bne.n	80062aa <RCCEx_PLLSAI1_Config+0xaa>
				status = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8006272:	e01a      	b.n	80062aa <RCCEx_PLLSAI1_Config+0xaa>
		case RCC_PLLSOURCE_HSI:
			if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY)) {
 8006274:	4b5a      	ldr	r3, [pc, #360]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800627c:	2b00      	cmp	r3, #0
 800627e:	d116      	bne.n	80062ae <RCCEx_PLLSAI1_Config+0xae>
				status = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8006284:	e013      	b.n	80062ae <RCCEx_PLLSAI1_Config+0xae>
		case RCC_PLLSOURCE_HSE:
			if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY)) {
 8006286:	4b56      	ldr	r3, [pc, #344]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10f      	bne.n	80062b2 <RCCEx_PLLSAI1_Config+0xb2>
				if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP)) {
 8006292:	4b53      	ldr	r3, [pc, #332]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d109      	bne.n	80062b2 <RCCEx_PLLSAI1_Config+0xb2>
					status = HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	73fb      	strb	r3, [r7, #15]
				}
			}
			break;
 80062a2:	e006      	b.n	80062b2 <RCCEx_PLLSAI1_Config+0xb2>
		default:
			status = HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	73fb      	strb	r3, [r7, #15]
			break;
 80062a8:	e004      	b.n	80062b4 <RCCEx_PLLSAI1_Config+0xb4>
			break;
 80062aa:	bf00      	nop
 80062ac:	e002      	b.n	80062b4 <RCCEx_PLLSAI1_Config+0xb4>
			break;
 80062ae:	bf00      	nop
 80062b0:	e000      	b.n	80062b4 <RCCEx_PLLSAI1_Config+0xb4>
			break;
 80062b2:	bf00      	nop
		}

		if (status == HAL_OK) {
 80062b4:	7bfb      	ldrb	r3, [r7, #15]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10d      	bne.n	80062d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
			/* Set PLLSAI1 clock source and divider M */
			MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM,
 80062ba:	4b49      	ldr	r3, [pc, #292]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6819      	ldr	r1, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	3b01      	subs	r3, #1
 80062cc:	011b      	lsls	r3, r3, #4
 80062ce:	430b      	orrs	r3, r1
 80062d0:	4943      	ldr	r1, [pc, #268]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	60cb      	str	r3, [r1, #12]
					PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
		}
	}

	if (status == HAL_OK) {
 80062d6:	7bfb      	ldrb	r3, [r7, #15]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d17c      	bne.n	80063d6 <RCCEx_PLLSAI1_Config+0x1d6>
		/* Disable the PLLSAI1 */
		__HAL_RCC_PLLSAI1_DISABLE();
 80062dc:	4b40      	ldr	r3, [pc, #256]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a3f      	ldr	r2, [pc, #252]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80062e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80062e6:	6013      	str	r3, [r2, #0]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 80062e8:	f7fd fd32 	bl	8003d50 <HAL_GetTick>
 80062ec:	60b8      	str	r0, [r7, #8]

		/* Wait till PLLSAI1 is ready to be updated */
		while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U) {
 80062ee:	e009      	b.n	8006304 <RCCEx_PLLSAI1_Config+0x104>
			if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE) {
 80062f0:	f7fd fd2e 	bl	8003d50 <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d902      	bls.n	8006304 <RCCEx_PLLSAI1_Config+0x104>
				status = HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	73fb      	strb	r3, [r7, #15]
				break;
 8006302:	e005      	b.n	8006310 <RCCEx_PLLSAI1_Config+0x110>
		while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U) {
 8006304:	4b36      	ldr	r3, [pc, #216]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1ef      	bne.n	80062f0 <RCCEx_PLLSAI1_Config+0xf0>
			}
		}

		if (status == HAL_OK) {
 8006310:	7bfb      	ldrb	r3, [r7, #15]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d15f      	bne.n	80063d6 <RCCEx_PLLSAI1_Config+0x1d6>
			if (Divider == DIVIDER_P_UPDATE) {
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d110      	bne.n	800633e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
				/* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
				MODIFY_REG(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
 800631c:	4b30      	ldr	r3, [pc, #192]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006324:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	6892      	ldr	r2, [r2, #8]
 800632c:	0211      	lsls	r1, r2, #8
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	68d2      	ldr	r2, [r2, #12]
 8006332:	06d2      	lsls	r2, r2, #27
 8006334:	430a      	orrs	r2, r1
 8006336:	492a      	ldr	r1, [pc, #168]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006338:	4313      	orrs	r3, r2
 800633a:	610b      	str	r3, [r1, #16]
 800633c:	e027      	b.n	800638e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
			} else if (Divider == DIVIDER_Q_UPDATE) {
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d112      	bne.n	800636a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
				/* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
				MODIFY_REG(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1Q,
 8006344:	4b26      	ldr	r3, [pc, #152]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800634c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	6892      	ldr	r2, [r2, #8]
 8006354:	0211      	lsls	r1, r2, #8
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	6912      	ldr	r2, [r2, #16]
 800635a:	0852      	lsrs	r2, r2, #1
 800635c:	3a01      	subs	r2, #1
 800635e:	0552      	lsls	r2, r2, #21
 8006360:	430a      	orrs	r2, r1
 8006362:	491f      	ldr	r1, [pc, #124]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006364:	4313      	orrs	r3, r2
 8006366:	610b      	str	r3, [r1, #16]
 8006368:	e011      	b.n	800638e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
				/* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
				MODIFY_REG(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1R,
 800636a:	4b1d      	ldr	r3, [pc, #116]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006372:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	6892      	ldr	r2, [r2, #8]
 800637a:	0211      	lsls	r1, r2, #8
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	6952      	ldr	r2, [r2, #20]
 8006380:	0852      	lsrs	r2, r2, #1
 8006382:	3a01      	subs	r2, #1
 8006384:	0652      	lsls	r2, r2, #25
 8006386:	430a      	orrs	r2, r1
 8006388:	4915      	ldr	r1, [pc, #84]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800638a:	4313      	orrs	r3, r2
 800638c:	610b      	str	r3, [r1, #16]
						(PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) | (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
			}

			/* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
			__HAL_RCC_PLLSAI1_ENABLE();
 800638e:	4b14      	ldr	r3, [pc, #80]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a13      	ldr	r2, [pc, #76]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006394:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006398:	6013      	str	r3, [r2, #0]

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 800639a:	f7fd fcd9 	bl	8003d50 <HAL_GetTick>
 800639e:	60b8      	str	r0, [r7, #8]

			/* Wait till PLLSAI1 is ready */
			while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U) {
 80063a0:	e009      	b.n	80063b6 <RCCEx_PLLSAI1_Config+0x1b6>
				if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE) {
 80063a2:	f7fd fcd5 	bl	8003d50 <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d902      	bls.n	80063b6 <RCCEx_PLLSAI1_Config+0x1b6>
					status = HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	73fb      	strb	r3, [r7, #15]
					break;
 80063b4:	e005      	b.n	80063c2 <RCCEx_PLLSAI1_Config+0x1c2>
			while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U) {
 80063b6:	4b0a      	ldr	r3, [pc, #40]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d0ef      	beq.n	80063a2 <RCCEx_PLLSAI1_Config+0x1a2>
				}
			}

			if (status == HAL_OK) {
 80063c2:	7bfb      	ldrb	r3, [r7, #15]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d106      	bne.n	80063d6 <RCCEx_PLLSAI1_Config+0x1d6>
				/* Configure the PLLSAI1 Clock output(s) */
				__HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80063c8:	4b05      	ldr	r3, [pc, #20]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063ca:	691a      	ldr	r2, [r3, #16]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	4903      	ldr	r1, [pc, #12]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063d2:	4313      	orrs	r3, r2
 80063d4:	610b      	str	r3, [r1, #16]
			}
		}
	}

	return status;
 80063d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	40021000 	.word	0x40021000

080063e4 <RCCEx_GetSAIxPeriphCLKFreq>:

#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency) {
 80063e4:	b480      	push	{r7}
 80063e6:	b089      	sub	sp, #36	; 0x24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
	uint32_t frequency = 0U;
 80063ee:	2300      	movs	r3, #0
 80063f0:	61fb      	str	r3, [r7, #28]
	uint32_t srcclk = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	61bb      	str	r3, [r7, #24]
	uint32_t pllvco, plln; /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
	uint32_t pllp = 0U;
 80063f6:	2300      	movs	r3, #0
 80063f8:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

	/* Handle SAIs */
	if (PeriphClk == RCC_PERIPHCLK_SAI1) {
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006400:	d10b      	bne.n	800641a <RCCEx_GetSAIxPeriphCLKFreq+0x36>
		srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006402:	4b53      	ldr	r3, [pc, #332]	; (8006550 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8006404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006408:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800640c:	61bb      	str	r3, [r7, #24]
		if (srcclk == RCC_SAI1CLKSOURCE_PIN) {
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006414:	d101      	bne.n	800641a <RCCEx_GetSAIxPeriphCLKFreq+0x36>
			frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006416:	4b4f      	ldr	r3, [pc, #316]	; (8006554 <RCCEx_GetSAIxPeriphCLKFreq+0x170>)
 8006418:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

	if (frequency == 0U) {
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	2b00      	cmp	r3, #0
 800641e:	f040 8090 	bne.w	8006542 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
		pllvco = InputFrequency;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	613b      	str	r3, [r7, #16]
      }
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

#else
		if (srcclk == RCC_SAI1CLKSOURCE_PLL) {
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800642c:	d143      	bne.n	80064b6 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
			if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI2CLK) != 0U)) {
 800642e:	4b48      	ldr	r3, [pc, #288]	; (8006550 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006436:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800643a:	d132      	bne.n	80064a2 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
 800643c:	4b44      	ldr	r3, [pc, #272]	; (8006550 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d02c      	beq.n	80064a2 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
				/* f(PLL Source) / PLLM */
				pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006448:	4b41      	ldr	r3, [pc, #260]	; (8006550 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	091b      	lsrs	r3, r3, #4
 800644e:	f003 0307 	and.w	r3, r3, #7
 8006452:	3301      	adds	r3, #1
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	fbb2 f3f3 	udiv	r3, r2, r3
 800645a:	613b      	str	r3, [r7, #16]
				/* f(PLLSAI2CLK) = f(VCO input) * PLLN / PLLP */
				plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800645c:	4b3c      	ldr	r3, [pc, #240]	; (8006550 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	0a1b      	lsrs	r3, r3, #8
 8006462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006466:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
				pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006468:	4b39      	ldr	r3, [pc, #228]	; (8006550 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	0edb      	lsrs	r3, r3, #27
 800646e:	f003 031f 	and.w	r3, r3, #31
 8006472:	617b      	str	r3, [r7, #20]
#endif
				if (pllp == 0U) {
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10a      	bne.n	8006490 <RCCEx_GetSAIxPeriphCLKFreq+0xac>
					if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U) {
 800647a:	4b35      	ldr	r3, [pc, #212]	; (8006550 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d002      	beq.n	800648c <RCCEx_GetSAIxPeriphCLKFreq+0xa8>
						pllp = 17U;
 8006486:	2311      	movs	r3, #17
 8006488:	617b      	str	r3, [r7, #20]
 800648a:	e001      	b.n	8006490 <RCCEx_GetSAIxPeriphCLKFreq+0xac>
					} else {
						pllp = 7U;
 800648c:	2307      	movs	r3, #7
 800648e:	617b      	str	r3, [r7, #20]
					}
				}
				frequency = (pllvco * plln) / pllp;
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	fb03 f202 	mul.w	r2, r3, r2
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	fbb2 f3f3 	udiv	r3, r2, r3
 800649e:	61fb      	str	r3, [r7, #28]
 80064a0:	e04f      	b.n	8006542 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
			} else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) {
 80064a2:	4b2b      	ldr	r3, [pc, #172]	; (8006550 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064ae:	d148      	bne.n	8006542 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
				/* HSI automatically selected as clock source if PLLs not enabled */
				frequency = HSI_VALUE;
 80064b0:	4b29      	ldr	r3, [pc, #164]	; (8006558 <RCCEx_GetSAIxPeriphCLKFreq+0x174>)
 80064b2:	61fb      	str	r3, [r7, #28]
 80064b4:	e045      	b.n	8006542 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
			} else {
				/* No clock source, frequency default init at 0 */
			}
		} else if (srcclk == RCC_SAI1CLKSOURCE_PLLSAI1) {
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d142      	bne.n	8006542 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
			if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY)
 80064bc:	4b24      	ldr	r3, [pc, #144]	; (8006550 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064c8:	d132      	bne.n	8006530 <RCCEx_GetSAIxPeriphCLKFreq+0x14c>
					&& (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)) {
 80064ca:	4b21      	ldr	r3, [pc, #132]	; (8006550 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d02c      	beq.n	8006530 <RCCEx_GetSAIxPeriphCLKFreq+0x14c>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
				/* f(PLL Source) / PLLM */
				pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80064d6:	4b1e      	ldr	r3, [pc, #120]	; (8006550 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	091b      	lsrs	r3, r3, #4
 80064dc:	f003 0307 	and.w	r3, r3, #7
 80064e0:	3301      	adds	r3, #1
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e8:	613b      	str	r3, [r7, #16]
#endif
				/* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
				plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80064ea:	4b19      	ldr	r3, [pc, #100]	; (8006550 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	0a1b      	lsrs	r3, r3, #8
 80064f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064f4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
				pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80064f6:	4b16      	ldr	r3, [pc, #88]	; (8006550 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	0edb      	lsrs	r3, r3, #27
 80064fc:	f003 031f 	and.w	r3, r3, #31
 8006500:	617b      	str	r3, [r7, #20]
#endif
				if (pllp == 0U) {
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10a      	bne.n	800651e <RCCEx_GetSAIxPeriphCLKFreq+0x13a>
					if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U) {
 8006508:	4b11      	ldr	r3, [pc, #68]	; (8006550 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <RCCEx_GetSAIxPeriphCLKFreq+0x136>
						pllp = 17U;
 8006514:	2311      	movs	r3, #17
 8006516:	617b      	str	r3, [r7, #20]
 8006518:	e001      	b.n	800651e <RCCEx_GetSAIxPeriphCLKFreq+0x13a>
					} else {
						pllp = 7U;
 800651a:	2307      	movs	r3, #7
 800651c:	617b      	str	r3, [r7, #20]
					}
				}
				frequency = (pllvco * plln) / pllp;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	fb03 f202 	mul.w	r2, r3, r2
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	fbb2 f3f3 	udiv	r3, r2, r3
 800652c:	61fb      	str	r3, [r7, #28]
 800652e:	e008      	b.n	8006542 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
			} else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) {
 8006530:	4b07      	ldr	r3, [pc, #28]	; (8006550 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800653c:	d101      	bne.n	8006542 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
				/* HSI automatically selected as clock source if PLLs not enabled */
				frequency = HSI_VALUE;
 800653e:	4b06      	ldr	r3, [pc, #24]	; (8006558 <RCCEx_GetSAIxPeriphCLKFreq+0x174>)
 8006540:	61fb      	str	r3, [r7, #28]
		else {
			/* No clock source, frequency default init at 0 */
		}
	}

	return frequency;
 8006542:	69fb      	ldr	r3, [r7, #28]
}
 8006544:	4618      	mov	r0, r3
 8006546:	3724      	adds	r7, #36	; 0x24
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr
 8006550:	40021000 	.word	0x40021000
 8006554:	001fff68 	.word	0x001fff68
 8006558:	00f42400 	.word	0x00f42400

0800655c <HAL_SAI_InitProtocol>:
 * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
 *                   the configuration information for SAI module.
 * @param  nbslot Number of slot.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot) {
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
 8006568:	603b      	str	r3, [r7, #0]

	/* Check the parameters */
	assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
	assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

	switch (protocol) {
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	2b02      	cmp	r3, #2
 800656e:	d904      	bls.n	800657a <HAL_SAI_InitProtocol+0x1e>
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	3b03      	subs	r3, #3
 8006574:	2b01      	cmp	r3, #1
 8006576:	d812      	bhi.n	800659e <HAL_SAI_InitProtocol+0x42>
 8006578:	e008      	b.n	800658c <HAL_SAI_InitProtocol+0x30>
	case SAI_I2S_STANDARD:
	case SAI_I2S_MSBJUSTIFIED:
	case SAI_I2S_LSBJUSTIFIED:
		status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	68b9      	ldr	r1, [r7, #8]
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 fca5 	bl	8006ed0 <SAI_InitI2S>
 8006586:	4603      	mov	r3, r0
 8006588:	75fb      	strb	r3, [r7, #23]
		break;
 800658a:	e00b      	b.n	80065a4 <HAL_SAI_InitProtocol+0x48>
	case SAI_PCM_LONG:
	case SAI_PCM_SHORT:
		status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	68b9      	ldr	r1, [r7, #8]
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f000 fd4e 	bl	8007034 <SAI_InitPCM>
 8006598:	4603      	mov	r3, r0
 800659a:	75fb      	strb	r3, [r7, #23]
		break;
 800659c:	e002      	b.n	80065a4 <HAL_SAI_InitProtocol+0x48>
	default:
		status = HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	75fb      	strb	r3, [r7, #23]
		break;
 80065a2:	bf00      	nop
	}

	if (status == HAL_OK) {
 80065a4:	7dfb      	ldrb	r3, [r7, #23]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d104      	bne.n	80065b4 <HAL_SAI_InitProtocol+0x58>
		status = HAL_SAI_Init(hsai);
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 f808 	bl	80065c0 <HAL_SAI_Init>
 80065b0:	4603      	mov	r3, r0
 80065b2:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 80065b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3718      	adds	r7, #24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
	...

080065c0 <HAL_SAI_Init>:
 *         in the SAI_InitTypeDef structure and initialize the associated handle.
 * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
 *              the configuration information for SAI module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai) {
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
	uint32_t ckstr_bits;
	uint32_t syncen_bits;

	/* Check the SAI handle allocation */
	if (hsai == NULL) {
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d101      	bne.n	80065d2 <HAL_SAI_Init+0x12>
		return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e10c      	b.n	80067ec <HAL_SAI_Init+0x22c>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
	/* STM32L4P5xx || STM32L4Q5xx */

	if (hsai->State == HAL_SAI_STATE_RESET) {
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d106      	bne.n	80065ec <HAL_SAI_Init+0x2c>
		/* Allocate lock resource and initialize it */
		hsai->Lock = HAL_UNLOCKED;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
		HAL_SAI_MspInit(hsai);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7fb fe2e 	bl	8002248 <HAL_SAI_MspInit>
#endif
	}

	/* Disable the selected SAI peripheral */
	if (SAI_Disable(hsai) != HAL_OK) {
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 fddb 	bl	80071a8 <SAI_Disable>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d001      	beq.n	80065fc <HAL_SAI_Init+0x3c>
		return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e0f7      	b.n	80067ec <HAL_SAI_Init+0x22c>
	}

	hsai->State = HAL_SAI_STATE_BUSY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2202      	movs	r2, #2
 8006600:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
      tmpregisterGCR = 0;
      break;
  }
#endif /* SAI2 */

	switch (hsai->Init.Synchro) {
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d002      	beq.n	8006612 <HAL_SAI_Init+0x52>
 800660c:	2b01      	cmp	r3, #1
 800660e:	d003      	beq.n	8006618 <HAL_SAI_Init+0x58>
 8006610:	e006      	b.n	8006620 <HAL_SAI_Init+0x60>
	case SAI_ASYNCHRONOUS:
		syncen_bits = 0;
 8006612:	2300      	movs	r3, #0
 8006614:	613b      	str	r3, [r7, #16]
		break;
 8006616:	e006      	b.n	8006626 <HAL_SAI_Init+0x66>
	case SAI_SYNCHRONOUS:
		syncen_bits = SAI_xCR1_SYNCEN_0;
 8006618:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800661c:	613b      	str	r3, [r7, #16]
		break;
 800661e:	e002      	b.n	8006626 <HAL_SAI_Init+0x66>
      syncen_bits = SAI_xCR1_SYNCEN_1;
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
      break;
#endif /* SAI2 */
	default:
		syncen_bits = 0;
 8006620:	2300      	movs	r3, #0
 8006622:	613b      	str	r3, [r7, #16]
		break;
 8006624:	bf00      	nop
	else
	{
		SAI2->GCR = tmpregisterGCR;
	}
#else
	SAI1->GCR = 0;
 8006626:	4b73      	ldr	r3, [pc, #460]	; (80067f4 <HAL_SAI_Init+0x234>)
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]
#endif /* SAI2 */

	if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV) {
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	69db      	ldr	r3, [r3, #28]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d031      	beq.n	8006698 <HAL_SAI_Init+0xd8>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
    }

#else

		freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006634:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006638:	f7ff f9f4 	bl	8005a24 <HAL_RCCEx_GetPeriphCLKFreq>
 800663c:	60f8      	str	r0, [r7, #12]
		/* Configure Master Clock using the following formula :
		 MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
		 FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
		 MCKDIV[3:0] = SAI_CK_x / FS * 512 */
		/* (freq x 10) to keep Significant digits */
		tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	4613      	mov	r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4413      	add	r3, r2
 8006646:	005b      	lsls	r3, r3, #1
 8006648:	461a      	mov	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	025b      	lsls	r3, r3, #9
 8006650:	fbb2 f3f3 	udiv	r3, r2, r3
 8006654:	60bb      	str	r3, [r7, #8]
		hsai->Init.Mckdiv = tmpval / 10U;
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	4a67      	ldr	r2, [pc, #412]	; (80067f8 <HAL_SAI_Init+0x238>)
 800665a:	fba2 2303 	umull	r2, r3, r2, r3
 800665e:	08da      	lsrs	r2, r3, #3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	621a      	str	r2, [r3, #32]

		/* Round result to the nearest integer */
		if ((tmpval % 10U) > 8U) {
 8006664:	68b9      	ldr	r1, [r7, #8]
 8006666:	4b64      	ldr	r3, [pc, #400]	; (80067f8 <HAL_SAI_Init+0x238>)
 8006668:	fba3 2301 	umull	r2, r3, r3, r1
 800666c:	08da      	lsrs	r2, r3, #3
 800666e:	4613      	mov	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	005b      	lsls	r3, r3, #1
 8006676:	1aca      	subs	r2, r1, r3
 8006678:	2a08      	cmp	r2, #8
 800667a:	d904      	bls.n	8006686 <HAL_SAI_Init+0xc6>
			hsai->Init.Mckdiv += 1U;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	1c5a      	adds	r2, r3, #1
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	621a      	str	r2, [r3, #32]
		}
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
		/* STM32L4P5xx || STM32L4Q5xx */

		/* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
		if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL) {
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668a:	2b04      	cmp	r3, #4
 800668c:	d104      	bne.n	8006698 <HAL_SAI_Init+0xd8>
			hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	085a      	lsrs	r2, r3, #1
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	621a      	str	r2, [r3, #32]
	}
	/* Check the SAI Block master clock divider parameter */
	assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

	/* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
	if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX)) {
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d003      	beq.n	80066a8 <HAL_SAI_Init+0xe8>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d109      	bne.n	80066bc <HAL_SAI_Init+0xfc>
		/* Transmit */
		ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d101      	bne.n	80066b4 <HAL_SAI_Init+0xf4>
 80066b0:	2300      	movs	r3, #0
 80066b2:	e001      	b.n	80066b8 <HAL_SAI_Init+0xf8>
 80066b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066b8:	617b      	str	r3, [r7, #20]
 80066ba:	e008      	b.n	80066ce <HAL_SAI_Init+0x10e>
	} else {
		/* Receive */
		ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d102      	bne.n	80066ca <HAL_SAI_Init+0x10a>
 80066c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066c8:	e000      	b.n	80066cc <HAL_SAI_Init+0x10c>
 80066ca:	2300      	movs	r3, #0
 80066cc:	617b      	str	r3, [r7, #20]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
	hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG | SAI_xCR1_DS |
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6819      	ldr	r1, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	4b48      	ldr	r3, [pc, #288]	; (80067fc <HAL_SAI_Init+0x23c>)
 80066da:	400b      	ands	r3, r1
 80066dc:	6013      	str	r3, [r2, #0]
	SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |
	SAI_xCR1_MONO | SAI_xCR1_OUTDRIV | SAI_xCR1_DMAEN |
	SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

	hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol | hsai->Init.DataSize | hsai->Init.FirstBit
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6819      	ldr	r1, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685a      	ldr	r2, [r3, #4]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ec:	431a      	orrs	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f2:	431a      	orrs	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f8:	431a      	orrs	r2, r3
			| ckstr_bits | syncen_bits | hsai->Init.MonoStereoMode | hsai->Init.OutputDrive | hsai->Init.NoDivider
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	431a      	orrs	r2, r3
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	431a      	orrs	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006706:	431a      	orrs	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	431a      	orrs	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	431a      	orrs	r2, r3
			| (hsai->Init.Mckdiv << 20));
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a1b      	ldr	r3, [r3, #32]
 8006718:	051b      	lsls	r3, r3, #20
 800671a:	431a      	orrs	r2, r3
	hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol | hsai->Init.DataSize | hsai->Init.FirstBit
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	430a      	orrs	r2, r1
 8006722:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
	/* STM32L4P5xx || STM32L4Q5xx */

	/* SAI CR2 Configuration */
	hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	6812      	ldr	r2, [r2, #0]
 800672e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006732:	f023 030f 	bic.w	r3, r3, #15
 8006736:	6053      	str	r3, [r2, #4]
	hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6859      	ldr	r1, [r3, #4]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	699a      	ldr	r2, [r3, #24]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006746:	431a      	orrs	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674c:	431a      	orrs	r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	430a      	orrs	r2, r1
 8006754:	605a      	str	r2, [r3, #4]

	/* SAI Frame Configuration -----------------------------------------*/
	hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF |
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	6899      	ldr	r1, [r3, #8]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	4b27      	ldr	r3, [pc, #156]	; (8006800 <HAL_SAI_Init+0x240>)
 8006762:	400b      	ands	r3, r1
 8006764:	6093      	str	r3, [r2, #8]
	SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
	hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) | hsai->FrameInit.FSOffset
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6899      	ldr	r1, [r3, #8]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006770:	1e5a      	subs	r2, r3, #1
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006776:	431a      	orrs	r2, r3
			| hsai->FrameInit.FSDefinition | hsai->FrameInit.FSPolarity
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800677c:	431a      	orrs	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006782:	431a      	orrs	r2, r3
			| ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006788:	3b01      	subs	r3, #1
 800678a:	021b      	lsls	r3, r3, #8
 800678c:	431a      	orrs	r2, r3
	hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) | hsai->FrameInit.FSOffset
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	430a      	orrs	r2, r1
 8006794:	609a      	str	r2, [r3, #8]

	/* SAI Block_x SLOT Configuration ------------------------------------------*/
	/* This register has no meaning in AC 97 and SPDIF audio protocol */
	hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68d9      	ldr	r1, [r3, #12]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	f24f 0320 	movw	r3, #61472	; 0xf020
 80067a4:	400b      	ands	r3, r1
 80067a6:	60d3      	str	r3, [r2, #12]
	SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

	hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | (hsai->SlotInit.SlotActive << 16)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68d9      	ldr	r1, [r3, #12]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067b6:	431a      	orrs	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067bc:	041b      	lsls	r3, r3, #16
 80067be:	431a      	orrs	r2, r3
			| ((hsai->SlotInit.SlotNumber - 1U) << 8);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067c4:	3b01      	subs	r3, #1
 80067c6:	021b      	lsls	r3, r3, #8
 80067c8:	431a      	orrs	r2, r3
	hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | (hsai->SlotInit.SlotActive << 16)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	430a      	orrs	r2, r1
 80067d0:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
	/* STM32L4P5xx || STM32L4Q5xx */

	/* Initialize the error code */
	hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	/* Initialize the SAI state */
	hsai->State = HAL_SAI_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

	/* Release Lock */
	__HAL_UNLOCK(hsai);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

	return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3718      	adds	r7, #24
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	40015400 	.word	0x40015400
 80067f8:	cccccccd 	.word	0xcccccccd
 80067fc:	ff05c010 	.word	0xff05c010
 8006800:	fff88000 	.word	0xfff88000

08006804 <HAL_SAI_Abort>:
 * @brief Abort the current transfer and disable the SAI.
 * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
 *              the configuration information for SAI module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai) {
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 800680c:	2300      	movs	r3, #0
 800680e:	73fb      	strb	r3, [r7, #15]

	/* Process Locked */
	__HAL_LOCK(hsai);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006816:	2b01      	cmp	r3, #1
 8006818:	d101      	bne.n	800681e <HAL_SAI_Abort+0x1a>
 800681a:	2302      	movs	r3, #2
 800681c:	e053      	b.n	80068c6 <HAL_SAI_Abort+0xc2>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

	/* Check SAI DMA is enabled or not */
	if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN) {
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006830:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006834:	d125      	bne.n	8006882 <HAL_SAI_Abort+0x7e>
		/* Disable the SAI DMA request */
		hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006844:	601a      	str	r2, [r3, #0]

		/* Abort the SAI Tx DMA Stream */
		if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL)) {
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800684c:	b2db      	uxtb	r3, r3
 800684e:	2b12      	cmp	r3, #18
 8006850:	d108      	bne.n	8006864 <HAL_SAI_Abort+0x60>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006856:	2b00      	cmp	r3, #0
 8006858:	d004      	beq.n	8006864 <HAL_SAI_Abort+0x60>
			/* No need to check the returned value of HAL_DMA_Abort. */
			/* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
			(void) HAL_DMA_Abort(hsai->hdmatx);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800685e:	4618      	mov	r0, r3
 8006860:	f7fd fd2e 	bl	80042c0 <HAL_DMA_Abort>
		}

		/* Abort the SAI Rx DMA Stream */
		if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL)) {
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b22      	cmp	r3, #34	; 0x22
 800686e:	d108      	bne.n	8006882 <HAL_SAI_Abort+0x7e>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006874:	2b00      	cmp	r3, #0
 8006876:	d004      	beq.n	8006882 <HAL_SAI_Abort+0x7e>
			/* No need to check the returned value of HAL_DMA_Abort. */
			/* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
			(void) HAL_DMA_Abort(hsai->hdmarx);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800687c:	4618      	mov	r0, r3
 800687e:	f7fd fd1f 	bl	80042c0 <HAL_DMA_Abort>
		}
	}

	/* Disabled All interrupt and clear all the flag */
	hsai->Instance->IMR = 0;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2200      	movs	r2, #0
 8006888:	611a      	str	r2, [r3, #16]
	hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f04f 32ff 	mov.w	r2, #4294967295
 8006892:	619a      	str	r2, [r3, #24]

	/* Disable SAI peripheral */
	if (SAI_Disable(hsai) != HAL_OK) {
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fc87 	bl	80071a8 <SAI_Disable>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <HAL_SAI_Abort+0xa0>
		status = HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	73fb      	strb	r3, [r7, #15]
	}

	/* Flush the fifo */
	SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f042 0208 	orr.w	r2, r2, #8
 80068b2:	605a      	str	r2, [r3, #4]

	/* Set hsai state to ready */
	hsai->State = HAL_SAI_STATE_READY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

	/* Process Unlocked */
	__HAL_UNLOCK(hsai);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

	return status;
 80068c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
	...

080068d0 <HAL_SAI_Transmit_DMA>:
 *              the configuration information for SAI module.
 * @param  pData Pointer to data buffer
 * @param  Size Amount of data to be sent
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size) {
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	4613      	mov	r3, r2
 80068dc:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart = HAL_GetTick();
 80068de:	f7fd fa37 	bl	8003d50 <HAL_GetTick>
 80068e2:	6178      	str	r0, [r7, #20]

	if ((pData == NULL) || (Size == 0U)) {
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d002      	beq.n	80068f0 <HAL_SAI_Transmit_DMA+0x20>
 80068ea:	88fb      	ldrh	r3, [r7, #6]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <HAL_SAI_Transmit_DMA+0x24>
		return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e093      	b.n	8006a1c <HAL_SAI_Transmit_DMA+0x14c>
	}

	if (hsai->State == HAL_SAI_STATE_READY) {
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	f040 808c 	bne.w	8006a1a <HAL_SAI_Transmit_DMA+0x14a>
		/* Process Locked */
		__HAL_LOCK(hsai);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006908:	2b01      	cmp	r3, #1
 800690a:	d101      	bne.n	8006910 <HAL_SAI_Transmit_DMA+0x40>
 800690c:	2302      	movs	r3, #2
 800690e:	e085      	b.n	8006a1c <HAL_SAI_Transmit_DMA+0x14c>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

		hsai->pBuffPtr = pData;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	665a      	str	r2, [r3, #100]	; 0x64
		hsai->XferSize = Size;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	88fa      	ldrh	r2, [r7, #6]
 8006922:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
		hsai->XferCount = Size;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	88fa      	ldrh	r2, [r7, #6]
 800692a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		hsai->State = HAL_SAI_STATE_BUSY_TX;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2212      	movs	r2, #18
 800693a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

		/* Set the SAI Tx DMA Half transfer complete callback */
		hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006942:	4a38      	ldr	r2, [pc, #224]	; (8006a24 <HAL_SAI_Transmit_DMA+0x154>)
 8006944:	631a      	str	r2, [r3, #48]	; 0x30

		/* Set the SAI TxDMA transfer complete callback */
		hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800694a:	4a37      	ldr	r2, [pc, #220]	; (8006a28 <HAL_SAI_Transmit_DMA+0x158>)
 800694c:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Set the DMA error callback */
		hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006952:	4a36      	ldr	r2, [pc, #216]	; (8006a2c <HAL_SAI_Transmit_DMA+0x15c>)
 8006954:	635a      	str	r2, [r3, #52]	; 0x34

		/* Set the DMA Tx abort callback */
		hsai->hdmatx->XferAbortCallback = NULL;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800695a:	2200      	movs	r2, #0
 800695c:	639a      	str	r2, [r3, #56]	; 0x38

		/* Enable the Tx DMA Stream */
		if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t) hsai->pBuffPtr, (uint32_t) &hsai->Instance->DR, hsai->XferSize)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006966:	4619      	mov	r1, r3
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	331c      	adds	r3, #28
 800696e:	461a      	mov	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006976:	f7fd fc43 	bl	8004200 <HAL_DMA_Start_IT>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d005      	beq.n	800698c <HAL_SAI_Transmit_DMA+0xbc>
				!= HAL_OK) {
			__HAL_UNLOCK(hsai);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
			return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e047      	b.n	8006a1c <HAL_SAI_Transmit_DMA+0x14c>
		}

		/* Enable the interrupts for error handling */
		__HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800698c:	2100      	movs	r1, #0
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 fbd2 	bl	8007138 <SAI_InterruptFlag>
 8006994:	4601      	mov	r1, r0
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	691a      	ldr	r2, [r3, #16]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	430a      	orrs	r2, r1
 80069a2:	611a      	str	r2, [r3, #16]

		/* Enable SAI Tx DMA Request */
		hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80069b2:	601a      	str	r2, [r3, #0]

		/* Wait until FIFO is not empty */
		while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY) {
 80069b4:	e015      	b.n	80069e2 <HAL_SAI_Transmit_DMA+0x112>
			/* Check for the Timeout */
			if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT) {
 80069b6:	f7fd f9cb 	bl	8003d50 <HAL_GetTick>
 80069ba:	4602      	mov	r2, r0
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069c4:	d90d      	bls.n	80069e2 <HAL_SAI_Transmit_DMA+0x112>
				/* Update error code */
				hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

				/* Process Unlocked */
				__HAL_UNLOCK(hsai);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

				return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e01c      	b.n	8006a1c <HAL_SAI_Transmit_DMA+0x14c>
		while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY) {
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d0e2      	beq.n	80069b6 <HAL_SAI_Transmit_DMA+0xe6>
			}
		}

		/* Check if the SAI is already enabled */
		if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U) {
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d107      	bne.n	8006a0e <HAL_SAI_Transmit_DMA+0x13e>
			/* Enable SAI peripheral */
			__HAL_SAI_ENABLE(hsai);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006a0c:	601a      	str	r2, [r3, #0]
		}

		/* Process Unlocked */
		__HAL_UNLOCK(hsai);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

		return HAL_OK;
 8006a16:	2300      	movs	r3, #0
 8006a18:	e000      	b.n	8006a1c <HAL_SAI_Transmit_DMA+0x14c>
	} else {
		return HAL_BUSY;
 8006a1a:	2302      	movs	r3, #2
	}
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3718      	adds	r7, #24
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	0800727b 	.word	0x0800727b
 8006a28:	0800721d 	.word	0x0800721d
 8006a2c:	08007311 	.word	0x08007311

08006a30 <HAL_SAI_Receive_DMA>:
 *              the configuration information for SAI module.
 * @param  pData Pointer to data buffer
 * @param  Size Amount of data to be received
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size) {
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	80fb      	strh	r3, [r7, #6]

	if ((pData == NULL) || (Size == 0U)) {
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d002      	beq.n	8006a4a <HAL_SAI_Receive_DMA+0x1a>
 8006a44:	88fb      	ldrh	r3, [r7, #6]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <HAL_SAI_Receive_DMA+0x1e>
		return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e074      	b.n	8006b38 <HAL_SAI_Receive_DMA+0x108>
	}

	if (hsai->State == HAL_SAI_STATE_READY) {
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d16d      	bne.n	8006b36 <HAL_SAI_Receive_DMA+0x106>
		/* Process Locked */
		__HAL_LOCK(hsai);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d101      	bne.n	8006a68 <HAL_SAI_Receive_DMA+0x38>
 8006a64:	2302      	movs	r3, #2
 8006a66:	e067      	b.n	8006b38 <HAL_SAI_Receive_DMA+0x108>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

		hsai->pBuffPtr = pData;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	665a      	str	r2, [r3, #100]	; 0x64
		hsai->XferSize = Size;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	88fa      	ldrh	r2, [r7, #6]
 8006a7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
		hsai->XferCount = Size;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	88fa      	ldrh	r2, [r7, #6]
 8006a82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		hsai->State = HAL_SAI_STATE_BUSY_RX;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2222      	movs	r2, #34	; 0x22
 8006a92:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

		/* Set the SAI Rx DMA Half transfer complete callback */
		hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a9a:	4a29      	ldr	r2, [pc, #164]	; (8006b40 <HAL_SAI_Receive_DMA+0x110>)
 8006a9c:	631a      	str	r2, [r3, #48]	; 0x30

		/* Set the SAI Rx DMA transfer complete callback */
		hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa2:	4a28      	ldr	r2, [pc, #160]	; (8006b44 <HAL_SAI_Receive_DMA+0x114>)
 8006aa4:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Set the DMA error callback */
		hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aaa:	4a27      	ldr	r2, [pc, #156]	; (8006b48 <HAL_SAI_Receive_DMA+0x118>)
 8006aac:	635a      	str	r2, [r3, #52]	; 0x34

		/* Set the DMA Rx abort callback */
		hsai->hdmarx->XferAbortCallback = NULL;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	639a      	str	r2, [r3, #56]	; 0x38

		/* Enable the Rx DMA Stream */
		if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t) &hsai->Instance->DR, (uint32_t) hsai->pBuffPtr, hsai->XferSize)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	331c      	adds	r3, #28
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006ace:	f7fd fb97 	bl	8004200 <HAL_DMA_Start_IT>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d005      	beq.n	8006ae4 <HAL_SAI_Receive_DMA+0xb4>
				!= HAL_OK) {
			__HAL_UNLOCK(hsai);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
			return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e029      	b.n	8006b38 <HAL_SAI_Receive_DMA+0x108>
		}

		/* Enable the interrupts for error handling */
		__HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f000 fb26 	bl	8007138 <SAI_InterruptFlag>
 8006aec:	4601      	mov	r1, r0
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	691a      	ldr	r2, [r3, #16]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	430a      	orrs	r2, r1
 8006afa:	611a      	str	r2, [r3, #16]

		/* Enable SAI Rx DMA Request */
		hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006b0a:	601a      	str	r2, [r3, #0]

		/* Check if the SAI is already enabled */
		if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U) {
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d107      	bne.n	8006b2a <HAL_SAI_Receive_DMA+0xfa>
			/* Enable SAI peripheral */
			__HAL_SAI_ENABLE(hsai);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006b28:	601a      	str	r2, [r3, #0]
		}

		/* Process Unlocked */
		__HAL_UNLOCK(hsai);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

		return HAL_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	e000      	b.n	8006b38 <HAL_SAI_Receive_DMA+0x108>
	} else {
		return HAL_BUSY;
 8006b36:	2302      	movs	r3, #2
	}
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	080072f5 	.word	0x080072f5
 8006b44:	08007297 	.word	0x08007297
 8006b48:	08007311 	.word	0x08007311

08006b4c <HAL_SAI_IRQHandler>:
 * @brief  Handle SAI interrupt request.
 * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
 *              the configuration information for SAI module.
 * @retval None
 */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai) {
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
	if (hsai->State != HAL_SAI_STATE_RESET) {
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f000 8192 	beq.w	8006e86 <HAL_SAI_IRQHandler+0x33a>
		uint32_t itflags = hsai->Instance->SR;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	695b      	ldr	r3, [r3, #20]
 8006b68:	617b      	str	r3, [r7, #20]
		uint32_t itsources = hsai->Instance->IMR;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	613b      	str	r3, [r7, #16]
		uint32_t cr1config = hsai->Instance->CR1;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	60fb      	str	r3, [r7, #12]
		uint32_t tmperror;

		/* SAI Fifo request interrupt occurred -----------------------------------*/
		if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ)) {
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f003 0308 	and.w	r3, r3, #8
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d009      	beq.n	8006b98 <HAL_SAI_IRQHandler+0x4c>
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	f003 0308 	and.w	r3, r3, #8
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d004      	beq.n	8006b98 <HAL_SAI_IRQHandler+0x4c>
			hsai->InterruptServiceRoutine(hsai);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	4798      	blx	r3
 8006b96:	e176      	b.n	8006e86 <HAL_SAI_IRQHandler+0x33a>
		}
		/* SAI Overrun error interrupt occurred ----------------------------------*/
		else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR)) {
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d01e      	beq.n	8006be0 <HAL_SAI_IRQHandler+0x94>
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d019      	beq.n	8006be0 <HAL_SAI_IRQHandler+0x94>
			/* Clear the SAI Overrun flag */
			__HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	619a      	str	r2, [r3, #24]
			/* Get the SAI error code */
			tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	2b22      	cmp	r3, #34	; 0x22
 8006bbe:	d101      	bne.n	8006bc4 <HAL_SAI_IRQHandler+0x78>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e000      	b.n	8006bc6 <HAL_SAI_IRQHandler+0x7a>
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	60bb      	str	r3, [r7, #8]
			/* Change the SAI error code */
			hsai->ErrorCode |= tmperror;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	431a      	orrs	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			/* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
			HAL_SAI_ErrorCallback(hsai);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 f96f 	bl	8006ebc <HAL_SAI_ErrorCallback>
 8006bde:	e152      	b.n	8006e86 <HAL_SAI_IRQHandler+0x33a>
#endif
		}
		/* SAI mutedet interrupt occurred ----------------------------------*/
		else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET)
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d011      	beq.n	8006c0e <HAL_SAI_IRQHandler+0xc2>
				&& ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET)) {
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	f003 0302 	and.w	r3, r3, #2
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00c      	beq.n	8006c0e <HAL_SAI_IRQHandler+0xc2>
			/* Clear the SAI mutedet flag */
			__HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	619a      	str	r2, [r3, #24]
			/* call the call back function */
			if (hsai->mutecallback != NULL) {
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f000 8140 	beq.w	8006e86 <HAL_SAI_IRQHandler+0x33a>
				/* inform the user that an RX mute event has been detected */
				hsai->mutecallback();
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c0a:	4798      	blx	r3
			if (hsai->mutecallback != NULL) {
 8006c0c:	e13b      	b.n	8006e86 <HAL_SAI_IRQHandler+0x33a>
			}
		}
		/* SAI AFSDET interrupt occurred ----------------------------------*/
		else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET)) {
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f003 0320 	and.w	r3, r3, #32
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d055      	beq.n	8006cc4 <HAL_SAI_IRQHandler+0x178>
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	f003 0320 	and.w	r3, r3, #32
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d050      	beq.n	8006cc4 <HAL_SAI_IRQHandler+0x178>
			/* Clear the SAI AFSDET flag */
			__HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2220      	movs	r2, #32
 8006c28:	619a      	str	r2, [r3, #24]

			/* Change the SAI error code */
			hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c30:	f043 0204 	orr.w	r2, r3, #4
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

			/* Check SAI DMA is enabled or not */
			if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN) {
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d038      	beq.n	8006cb6 <HAL_SAI_IRQHandler+0x16a>
				/* Abort the SAI DMA Streams */
				if (hsai->hdmatx != NULL) {
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d016      	beq.n	8006c7a <HAL_SAI_IRQHandler+0x12e>
					/* Set the DMA Tx abort callback */
					hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c50:	4a8f      	ldr	r2, [pc, #572]	; (8006e90 <HAL_SAI_IRQHandler+0x344>)
 8006c52:	639a      	str	r2, [r3, #56]	; 0x38

					/* Abort DMA in IT mode */
					if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK) {
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7fd fb6f 	bl	800433c <HAL_DMA_Abort_IT>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00a      	beq.n	8006c7a <HAL_SAI_IRQHandler+0x12e>
						/* Update SAI error code */
						hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c6a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

						/* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
						HAL_SAI_ErrorCallback(hsai);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f921 	bl	8006ebc <HAL_SAI_ErrorCallback>
#endif
					}
				}
				if (hsai->hdmarx != NULL) {
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f000 80fc 	beq.w	8006e7c <HAL_SAI_IRQHandler+0x330>
					/* Set the DMA Rx abort callback */
					hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c88:	4a81      	ldr	r2, [pc, #516]	; (8006e90 <HAL_SAI_IRQHandler+0x344>)
 8006c8a:	639a      	str	r2, [r3, #56]	; 0x38

					/* Abort DMA in IT mode */
					if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK) {
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7fd fb53 	bl	800433c <HAL_DMA_Abort_IT>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 80ef 	beq.w	8006e7c <HAL_SAI_IRQHandler+0x330>
						/* Update SAI error code */
						hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ca4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

						/* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
						HAL_SAI_ErrorCallback(hsai);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f904 	bl	8006ebc <HAL_SAI_ErrorCallback>
			if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN) {
 8006cb4:	e0e2      	b.n	8006e7c <HAL_SAI_IRQHandler+0x330>
					}
				}
			} else {
				/* Abort SAI */
				/* No need to check return value because HAL_SAI_ErrorCallback will be called later */
				(void) HAL_SAI_Abort(hsai);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7ff fda4 	bl	8006804 <HAL_SAI_Abort>

				/* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
				HAL_SAI_ErrorCallback(hsai);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 f8fd 	bl	8006ebc <HAL_SAI_ErrorCallback>
			if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN) {
 8006cc2:	e0db      	b.n	8006e7c <HAL_SAI_IRQHandler+0x330>
#endif
			}
		}
		/* SAI LFSDET interrupt occurred ----------------------------------*/
		else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET)) {
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d055      	beq.n	8006d7a <HAL_SAI_IRQHandler+0x22e>
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d050      	beq.n	8006d7a <HAL_SAI_IRQHandler+0x22e>
			/* Clear the SAI LFSDET flag */
			__HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2240      	movs	r2, #64	; 0x40
 8006cde:	619a      	str	r2, [r3, #24]

			/* Change the SAI error code */
			hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ce6:	f043 0208 	orr.w	r2, r3, #8
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

			/* Check SAI DMA is enabled or not */
			if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN) {
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d038      	beq.n	8006d6c <HAL_SAI_IRQHandler+0x220>
				/* Abort the SAI DMA Streams */
				if (hsai->hdmatx != NULL) {
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d016      	beq.n	8006d30 <HAL_SAI_IRQHandler+0x1e4>
					/* Set the DMA Tx abort callback */
					hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d06:	4a62      	ldr	r2, [pc, #392]	; (8006e90 <HAL_SAI_IRQHandler+0x344>)
 8006d08:	639a      	str	r2, [r3, #56]	; 0x38

					/* Abort DMA in IT mode */
					if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK) {
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7fd fb14 	bl	800433c <HAL_DMA_Abort_IT>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00a      	beq.n	8006d30 <HAL_SAI_IRQHandler+0x1e4>
						/* Update SAI error code */
						hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

						/* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
						HAL_SAI_ErrorCallback(hsai);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f8c6 	bl	8006ebc <HAL_SAI_ErrorCallback>
#endif
					}
				}
				if (hsai->hdmarx != NULL) {
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f000 80a3 	beq.w	8006e80 <HAL_SAI_IRQHandler+0x334>
					/* Set the DMA Rx abort callback */
					hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d3e:	4a54      	ldr	r2, [pc, #336]	; (8006e90 <HAL_SAI_IRQHandler+0x344>)
 8006d40:	639a      	str	r2, [r3, #56]	; 0x38

					/* Abort DMA in IT mode */
					if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK) {
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fd faf8 	bl	800433c <HAL_DMA_Abort_IT>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f000 8096 	beq.w	8006e80 <HAL_SAI_IRQHandler+0x334>
						/* Update SAI error code */
						hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d5a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

						/* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
						HAL_SAI_ErrorCallback(hsai);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f8a9 	bl	8006ebc <HAL_SAI_ErrorCallback>
			if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN) {
 8006d6a:	e089      	b.n	8006e80 <HAL_SAI_IRQHandler+0x334>
					}
				}
			} else {
				/* Abort SAI */
				/* No need to check return value because HAL_SAI_ErrorCallback will be called later */
				(void) HAL_SAI_Abort(hsai);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7ff fd49 	bl	8006804 <HAL_SAI_Abort>

				/* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
				HAL_SAI_ErrorCallback(hsai);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f8a2 	bl	8006ebc <HAL_SAI_ErrorCallback>
			if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN) {
 8006d78:	e082      	b.n	8006e80 <HAL_SAI_IRQHandler+0x334>
#endif
			}
		}
		/* SAI WCKCFG interrupt occurred ----------------------------------*/
		else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG)) {
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	f003 0304 	and.w	r3, r3, #4
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d061      	beq.n	8006e48 <HAL_SAI_IRQHandler+0x2fc>
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	f003 0304 	and.w	r3, r3, #4
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d05c      	beq.n	8006e48 <HAL_SAI_IRQHandler+0x2fc>
			/* Clear the SAI WCKCFG flag */
			__HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2204      	movs	r2, #4
 8006d94:	619a      	str	r2, [r3, #24]

			/* Change the SAI error code */
			hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d9c:	f043 0220 	orr.w	r2, r3, #32
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

			/* Check SAI DMA is enabled or not */
			if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN) {
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d036      	beq.n	8006e1e <HAL_SAI_IRQHandler+0x2d2>
				/* Abort the SAI DMA Streams */
				if (hsai->hdmatx != NULL) {
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d016      	beq.n	8006de6 <HAL_SAI_IRQHandler+0x29a>
					/* Set the DMA Tx abort callback */
					hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dbc:	4a34      	ldr	r2, [pc, #208]	; (8006e90 <HAL_SAI_IRQHandler+0x344>)
 8006dbe:	639a      	str	r2, [r3, #56]	; 0x38

					/* Abort DMA in IT mode */
					if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK) {
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7fd fab9 	bl	800433c <HAL_DMA_Abort_IT>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00a      	beq.n	8006de6 <HAL_SAI_IRQHandler+0x29a>
						/* Update SAI error code */
						hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dd6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

						/* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
						HAL_SAI_ErrorCallback(hsai);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 f86b 	bl	8006ebc <HAL_SAI_ErrorCallback>
#endif
					}
				}
				if (hsai->hdmarx != NULL) {
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d04a      	beq.n	8006e84 <HAL_SAI_IRQHandler+0x338>
					/* Set the DMA Rx abort callback */
					hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df2:	4a27      	ldr	r2, [pc, #156]	; (8006e90 <HAL_SAI_IRQHandler+0x344>)
 8006df4:	639a      	str	r2, [r3, #56]	; 0x38

					/* Abort DMA in IT mode */
					if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK) {
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7fd fa9e 	bl	800433c <HAL_DMA_Abort_IT>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d03e      	beq.n	8006e84 <HAL_SAI_IRQHandler+0x338>
						/* Update SAI error code */
						hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e0c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

						/* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
						HAL_SAI_ErrorCallback(hsai);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f850 	bl	8006ebc <HAL_SAI_ErrorCallback>
			if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN) {
 8006e1c:	e032      	b.n	8006e84 <HAL_SAI_IRQHandler+0x338>
					}
				}
			} else {
				/* If WCKCFG occurs, SAI audio block is automatically disabled */
				/* Disable all interrupts and clear all flags */
				hsai->Instance->IMR = 0U;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2200      	movs	r2, #0
 8006e24:	611a      	str	r2, [r3, #16]
				hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e2e:	619a      	str	r2, [r3, #24]
				/* Set the SAI state to ready to be able to start again the process */
				hsai->State = HAL_SAI_STATE_READY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

				/* Initialize XferCount */
				hsai->XferCount = 0U;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

				/* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
				HAL_SAI_ErrorCallback(hsai);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 f83b 	bl	8006ebc <HAL_SAI_ErrorCallback>
			if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN) {
 8006e46:	e01d      	b.n	8006e84 <HAL_SAI_IRQHandler+0x338>
#endif
			}
		}
		/* SAI CNRDY interrupt occurred ----------------------------------*/
		else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY)) {
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	f003 0310 	and.w	r3, r3, #16
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d019      	beq.n	8006e86 <HAL_SAI_IRQHandler+0x33a>
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	f003 0310 	and.w	r3, r3, #16
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d014      	beq.n	8006e86 <HAL_SAI_IRQHandler+0x33a>
			/* Clear the SAI CNRDY flag */
			__HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2210      	movs	r2, #16
 8006e62:	619a      	str	r2, [r3, #24]
			/* Change the SAI error code */
			hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e6a:	f043 0210 	orr.w	r2, r3, #16
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			/* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
			HAL_SAI_ErrorCallback(hsai);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 f821 	bl	8006ebc <HAL_SAI_ErrorCallback>
#endif
		} else {
			/* Nothing to do */
		}
	}
}
 8006e7a:	e004      	b.n	8006e86 <HAL_SAI_IRQHandler+0x33a>
			if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN) {
 8006e7c:	bf00      	nop
 8006e7e:	e002      	b.n	8006e86 <HAL_SAI_IRQHandler+0x33a>
			if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN) {
 8006e80:	bf00      	nop
 8006e82:	e000      	b.n	8006e86 <HAL_SAI_IRQHandler+0x33a>
			if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN) {
 8006e84:	bf00      	nop
}
 8006e86:	bf00      	nop
 8006e88:	3718      	adds	r7, #24
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	08007363 	.word	0x08007363

08006e94 <HAL_SAI_TxCpltCallback>:
 * @brief Tx Transfer completed callback.
 * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
 *              the configuration information for SAI module.
 * @retval None
 */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
	UNUSED(hsai);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_SAI_TxCpltCallback could be implemented in the user file
	 */
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <HAL_SAI_TxHalfCpltCallback>:
 * @brief Tx Transfer Half completed callback.
 * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
 *              the configuration information for SAI module.
 * @retval None
 */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
	UNUSED(hsai);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
	 */
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <HAL_SAI_ErrorCallback>:
 * @brief SAI error callback.
 * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
 *              the configuration information for SAI module.
 * @retval None
 */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai) {
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
	UNUSED(hsai);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_SAI_ErrorCallback could be implemented in the user file
	 */
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <SAI_InitI2S>:
 * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize.
 * @param  nbslot number of slot minimum value is 2 and max is 16.
 *         the value must be a multiple of 2.
 * @retval HAL status
 */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot) {
 8006ed0:	b480      	push	{r7}
 8006ed2:	b087      	sub	sp, #28
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
 8006edc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	75fb      	strb	r3, [r7, #23]

	hsai->Init.Protocol = SAI_FREE_PROTOCOL;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	631a      	str	r2, [r3, #48]	; 0x30
	hsai->Init.FirstBit = SAI_FIRSTBIT_MSB;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	639a      	str	r2, [r3, #56]	; 0x38
	/* Compute ClockStrobing according AudioMode */
	if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX)) {
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <SAI_InitI2S+0x2e>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d103      	bne.n	8006f06 <SAI_InitI2S+0x36>
		/* Transmit */
		hsai->Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	63da      	str	r2, [r3, #60]	; 0x3c
 8006f04:	e002      	b.n	8006f0c <SAI_InitI2S+0x3c>
	} else {
		/* Receive */
		hsai->Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	hsai->FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006f12:	649a      	str	r2, [r3, #72]	; 0x48
	hsai->SlotInit.SlotActive = SAI_SLOTACTIVE_ALL;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f1a:	661a      	str	r2, [r3, #96]	; 0x60
	hsai->SlotInit.FirstBitOffset = 0;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	655a      	str	r2, [r3, #84]	; 0x54
	hsai->SlotInit.SlotNumber = nbslot;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	65da      	str	r2, [r3, #92]	; 0x5c

	/* in IS2 the number of slot must be even */
	if ((nbslot & 0x1U) != 0U) {
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d001      	beq.n	8006f36 <SAI_InitI2S+0x66>
		return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e077      	b.n	8007026 <SAI_InitI2S+0x156>
	}

	if (protocol == SAI_I2S_STANDARD) {
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d107      	bne.n	8006f4c <SAI_InitI2S+0x7c>
		hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	64da      	str	r2, [r3, #76]	; 0x4c
		hsai->FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006f48:	651a      	str	r2, [r3, #80]	; 0x50
 8006f4a:	e006      	b.n	8006f5a <SAI_InitI2S+0x8a>
	} else {
		/* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
		hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006f52:	64da      	str	r2, [r3, #76]	; 0x4c
		hsai->FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	651a      	str	r2, [r3, #80]	; 0x50
	}

	/* Frame definition */
	switch (datasize) {
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2b03      	cmp	r3, #3
 8006f5e:	d84f      	bhi.n	8007000 <SAI_InitI2S+0x130>
 8006f60:	a201      	add	r2, pc, #4	; (adr r2, 8006f68 <SAI_InitI2S+0x98>)
 8006f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f66:	bf00      	nop
 8006f68:	08006f79 	.word	0x08006f79
 8006f6c:	08006f9b 	.word	0x08006f9b
 8006f70:	08006fbd 	.word	0x08006fbd
 8006f74:	08006fdf 	.word	0x08006fdf
	case SAI_PROTOCOL_DATASIZE_16BIT:
		hsai->Init.DataSize = SAI_DATASIZE_16;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2280      	movs	r2, #128	; 0x80
 8006f7c:	635a      	str	r2, [r3, #52]	; 0x34
		hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	085b      	lsrs	r3, r3, #1
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	641a      	str	r2, [r3, #64]	; 0x40
		hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	085b      	lsrs	r3, r3, #1
 8006f8c:	011a      	lsls	r2, r3, #4
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	645a      	str	r2, [r3, #68]	; 0x44
		hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2240      	movs	r2, #64	; 0x40
 8006f96:	659a      	str	r2, [r3, #88]	; 0x58
		break;
 8006f98:	e035      	b.n	8007006 <SAI_InitI2S+0x136>
	case SAI_PROTOCOL_DATASIZE_16BITEXTENDED:
		hsai->Init.DataSize = SAI_DATASIZE_16;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2280      	movs	r2, #128	; 0x80
 8006f9e:	635a      	str	r2, [r3, #52]	; 0x34
		hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	085b      	lsrs	r3, r3, #1
 8006fa4:	019a      	lsls	r2, r3, #6
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	641a      	str	r2, [r3, #64]	; 0x40
		hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	085b      	lsrs	r3, r3, #1
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	645a      	str	r2, [r3, #68]	; 0x44
		hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2280      	movs	r2, #128	; 0x80
 8006fb8:	659a      	str	r2, [r3, #88]	; 0x58
		break;
 8006fba:	e024      	b.n	8007006 <SAI_InitI2S+0x136>
	case SAI_PROTOCOL_DATASIZE_24BIT:
		hsai->Init.DataSize = SAI_DATASIZE_24;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	22c0      	movs	r2, #192	; 0xc0
 8006fc0:	635a      	str	r2, [r3, #52]	; 0x34
		hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	085b      	lsrs	r3, r3, #1
 8006fc6:	019a      	lsls	r2, r3, #6
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	641a      	str	r2, [r3, #64]	; 0x40
		hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	085b      	lsrs	r3, r3, #1
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	645a      	str	r2, [r3, #68]	; 0x44
		hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2280      	movs	r2, #128	; 0x80
 8006fda:	659a      	str	r2, [r3, #88]	; 0x58
		break;
 8006fdc:	e013      	b.n	8007006 <SAI_InitI2S+0x136>
	case SAI_PROTOCOL_DATASIZE_32BIT:
		hsai->Init.DataSize = SAI_DATASIZE_32;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	22e0      	movs	r2, #224	; 0xe0
 8006fe2:	635a      	str	r2, [r3, #52]	; 0x34
		hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	085b      	lsrs	r3, r3, #1
 8006fe8:	019a      	lsls	r2, r3, #6
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	641a      	str	r2, [r3, #64]	; 0x40
		hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	085b      	lsrs	r3, r3, #1
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	645a      	str	r2, [r3, #68]	; 0x44
		hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2280      	movs	r2, #128	; 0x80
 8006ffc:	659a      	str	r2, [r3, #88]	; 0x58
		break;
 8006ffe:	e002      	b.n	8007006 <SAI_InitI2S+0x136>
	default:
		status = HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	75fb      	strb	r3, [r7, #23]
		break;
 8007004:	bf00      	nop
	}
	if (protocol == SAI_I2S_LSBJUSTIFIED) {
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	2b02      	cmp	r3, #2
 800700a:	d10b      	bne.n	8007024 <SAI_InitI2S+0x154>
		if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED) {
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d102      	bne.n	8007018 <SAI_InitI2S+0x148>
			hsai->SlotInit.FirstBitOffset = 16;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2210      	movs	r2, #16
 8007016:	655a      	str	r2, [r3, #84]	; 0x54
		}
		if (datasize == SAI_PROTOCOL_DATASIZE_24BIT) {
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2b02      	cmp	r3, #2
 800701c:	d102      	bne.n	8007024 <SAI_InitI2S+0x154>
			hsai->SlotInit.FirstBitOffset = 8;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2208      	movs	r2, #8
 8007022:	655a      	str	r2, [r3, #84]	; 0x54
		}
	}
	return status;
 8007024:	7dfb      	ldrb	r3, [r7, #23]
}
 8007026:	4618      	mov	r0, r3
 8007028:	371c      	adds	r7, #28
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop

08007034 <SAI_InitPCM>:
 * @param  protocol one of the supported protocol
 * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
 * @param  nbslot number of slot minimum value is 1 and the max is 16.
 * @retval HAL status
 */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot) {
 8007034:	b480      	push	{r7}
 8007036:	b087      	sub	sp, #28
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
 8007040:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8007042:	2300      	movs	r3, #0
 8007044:	75fb      	strb	r3, [r7, #23]

	hsai->Init.Protocol = SAI_FREE_PROTOCOL;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	631a      	str	r2, [r3, #48]	; 0x30
	hsai->Init.FirstBit = SAI_FIRSTBIT_MSB;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	639a      	str	r2, [r3, #56]	; 0x38
	/* Compute ClockStrobing according AudioMode */
	if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX)) {
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d003      	beq.n	8007062 <SAI_InitPCM+0x2e>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	2b02      	cmp	r3, #2
 8007060:	d103      	bne.n	800706a <SAI_InitPCM+0x36>
		/* Transmit */
		hsai->Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2201      	movs	r2, #1
 8007066:	63da      	str	r2, [r3, #60]	; 0x3c
 8007068:	e002      	b.n	8007070 <SAI_InitPCM+0x3c>
	} else {
		/* Receive */
		hsai->Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	hsai->FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	649a      	str	r2, [r3, #72]	; 0x48
	hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800707c:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai->FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007084:	651a      	str	r2, [r3, #80]	; 0x50
	hsai->SlotInit.FirstBitOffset = 0;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	655a      	str	r2, [r3, #84]	; 0x54
	hsai->SlotInit.SlotNumber = nbslot;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai->SlotInit.SlotActive = SAI_SLOTACTIVE_ALL;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007098:	661a      	str	r2, [r3, #96]	; 0x60

	if (protocol == SAI_PCM_SHORT) {
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	2b04      	cmp	r3, #4
 800709e:	d103      	bne.n	80070a8 <SAI_InitPCM+0x74>
		hsai->FrameInit.ActiveFrameLength = 1;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2201      	movs	r2, #1
 80070a4:	645a      	str	r2, [r3, #68]	; 0x44
 80070a6:	e002      	b.n	80070ae <SAI_InitPCM+0x7a>
	} else {
		/* SAI_PCM_LONG */
		hsai->FrameInit.ActiveFrameLength = 13;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	220d      	movs	r2, #13
 80070ac:	645a      	str	r2, [r3, #68]	; 0x44
	}

	switch (datasize) {
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2b03      	cmp	r3, #3
 80070b2:	d837      	bhi.n	8007124 <SAI_InitPCM+0xf0>
 80070b4:	a201      	add	r2, pc, #4	; (adr r2, 80070bc <SAI_InitPCM+0x88>)
 80070b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ba:	bf00      	nop
 80070bc:	080070cd 	.word	0x080070cd
 80070c0:	080070e3 	.word	0x080070e3
 80070c4:	080070f9 	.word	0x080070f9
 80070c8:	0800710f 	.word	0x0800710f
	case SAI_PROTOCOL_DATASIZE_16BIT:
		hsai->Init.DataSize = SAI_DATASIZE_16;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2280      	movs	r2, #128	; 0x80
 80070d0:	635a      	str	r2, [r3, #52]	; 0x34
		hsai->FrameInit.FrameLength = 16U * nbslot;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	011a      	lsls	r2, r3, #4
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	641a      	str	r2, [r3, #64]	; 0x40
		hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2240      	movs	r2, #64	; 0x40
 80070de:	659a      	str	r2, [r3, #88]	; 0x58
		break;
 80070e0:	e023      	b.n	800712a <SAI_InitPCM+0xf6>
	case SAI_PROTOCOL_DATASIZE_16BITEXTENDED:
		hsai->Init.DataSize = SAI_DATASIZE_16;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2280      	movs	r2, #128	; 0x80
 80070e6:	635a      	str	r2, [r3, #52]	; 0x34
		hsai->FrameInit.FrameLength = 32U * nbslot;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	015a      	lsls	r2, r3, #5
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	641a      	str	r2, [r3, #64]	; 0x40
		hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2280      	movs	r2, #128	; 0x80
 80070f4:	659a      	str	r2, [r3, #88]	; 0x58
		break;
 80070f6:	e018      	b.n	800712a <SAI_InitPCM+0xf6>
	case SAI_PROTOCOL_DATASIZE_24BIT:
		hsai->Init.DataSize = SAI_DATASIZE_24;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	22c0      	movs	r2, #192	; 0xc0
 80070fc:	635a      	str	r2, [r3, #52]	; 0x34
		hsai->FrameInit.FrameLength = 32U * nbslot;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	641a      	str	r2, [r3, #64]	; 0x40
		hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2280      	movs	r2, #128	; 0x80
 800710a:	659a      	str	r2, [r3, #88]	; 0x58
		break;
 800710c:	e00d      	b.n	800712a <SAI_InitPCM+0xf6>
	case SAI_PROTOCOL_DATASIZE_32BIT:
		hsai->Init.DataSize = SAI_DATASIZE_32;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	22e0      	movs	r2, #224	; 0xe0
 8007112:	635a      	str	r2, [r3, #52]	; 0x34
		hsai->FrameInit.FrameLength = 32U * nbslot;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	015a      	lsls	r2, r3, #5
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	641a      	str	r2, [r3, #64]	; 0x40
		hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2280      	movs	r2, #128	; 0x80
 8007120:	659a      	str	r2, [r3, #88]	; 0x58
		break;
 8007122:	e002      	b.n	800712a <SAI_InitPCM+0xf6>
	default:
		status = HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	75fb      	strb	r3, [r7, #23]
		break;
 8007128:	bf00      	nop
	}

	return status;
 800712a:	7dfb      	ldrb	r3, [r7, #23]
}
 800712c:	4618      	mov	r0, r3
 800712e:	371c      	adds	r7, #28
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <SAI_InterruptFlag>:
 * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
 *              the configuration information for SAI module.
 * @param  mode SAI_MODE_DMA or SAI_MODE_IT
 * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode) {
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	460b      	mov	r3, r1
 8007142:	70fb      	strb	r3, [r7, #3]
	uint32_t tmpIT = SAI_IT_OVRUDR;
 8007144:	2301      	movs	r3, #1
 8007146:	60fb      	str	r3, [r7, #12]

	if (mode == SAI_MODE_IT) {
 8007148:	78fb      	ldrb	r3, [r7, #3]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d103      	bne.n	8007156 <SAI_InterruptFlag+0x1e>
		tmpIT |= SAI_IT_FREQ;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f043 0308 	orr.w	r3, r3, #8
 8007154:	60fb      	str	r3, [r7, #12]
	}

	if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715a:	2b08      	cmp	r3, #8
 800715c:	d10b      	bne.n	8007176 <SAI_InterruptFlag+0x3e>
			&& ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX))) {
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	2b03      	cmp	r3, #3
 8007164:	d003      	beq.n	800716e <SAI_InterruptFlag+0x36>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	2b01      	cmp	r3, #1
 800716c:	d103      	bne.n	8007176 <SAI_InterruptFlag+0x3e>
		tmpIT |= SAI_IT_CNRDY;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f043 0310 	orr.w	r3, r3, #16
 8007174:	60fb      	str	r3, [r7, #12]
	}

	if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX)) {
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	2b03      	cmp	r3, #3
 800717c:	d003      	beq.n	8007186 <SAI_InterruptFlag+0x4e>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	2b02      	cmp	r3, #2
 8007184:	d104      	bne.n	8007190 <SAI_InterruptFlag+0x58>
		tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800718c:	60fb      	str	r3, [r7, #12]
 800718e:	e003      	b.n	8007198 <SAI_InterruptFlag+0x60>
	} else {
		/* hsai has been configured in master mode */
		tmpIT |= SAI_IT_WCKCFG;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f043 0304 	orr.w	r3, r3, #4
 8007196:	60fb      	str	r3, [r7, #12]
	}
	return tmpIT;
 8007198:	68fb      	ldr	r3, [r7, #12]
}
 800719a:	4618      	mov	r0, r3
 800719c:	3714      	adds	r7, #20
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
	...

080071a8 <SAI_Disable>:
 * @brief  Disable the SAI and wait for the disabling.
 * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
 *              the configuration information for SAI module.
 * @retval None
 */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai) {
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
	uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80071b0:	4b18      	ldr	r3, [pc, #96]	; (8007214 <SAI_Disable+0x6c>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a18      	ldr	r2, [pc, #96]	; (8007218 <SAI_Disable+0x70>)
 80071b6:	fba2 2303 	umull	r2, r3, r2, r3
 80071ba:	0b1b      	lsrs	r3, r3, #12
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef status = HAL_OK;
 80071c0:	2300      	movs	r3, #0
 80071c2:	72fb      	strb	r3, [r7, #11]

	/* Disable the SAI instance */
	__HAL_SAI_DISABLE(hsai);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80071d2:	601a      	str	r2, [r3, #0]

	do {
		/* Check for the Timeout */
		if (count == 0U) {
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10a      	bne.n	80071f0 <SAI_Disable+0x48>
			/* Update error code */
			hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			status = HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	72fb      	strb	r3, [r7, #11]
			break;
 80071ee:	e009      	b.n	8007204 <SAI_Disable+0x5c>
		}
		count--;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	3b01      	subs	r3, #1
 80071f4:	60fb      	str	r3, [r7, #12]
	} while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1e7      	bne.n	80071d4 <SAI_Disable+0x2c>

	return status;
 8007204:	7afb      	ldrb	r3, [r7, #11]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3714      	adds	r7, #20
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	20000028 	.word	0x20000028
 8007218:	95cbec1b 	.word	0x95cbec1b

0800721c <SAI_DMATxCplt>:
 * @brief  DMA SAI transmit process complete callback.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *              the configuration information for the specified DMA module.
 * @retval None
 */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma) {
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
	SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007228:	60fb      	str	r3, [r7, #12]

	if (hdma->Init.Mode != DMA_CIRCULAR) {
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	2b20      	cmp	r3, #32
 8007230:	d01c      	beq.n	800726c <SAI_DMATxCplt+0x50>
		hsai->XferCount = 0;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

		/* Disable SAI Tx DMA Request */
		hsai->Instance->CR1 &= (uint32_t) (~SAI_xCR1_DMAEN);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007248:	601a      	str	r2, [r3, #0]

		/* Stop the interrupts error handling */
		__HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800724a:	2100      	movs	r1, #0
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f7ff ff73 	bl	8007138 <SAI_InterruptFlag>
 8007252:	4603      	mov	r3, r0
 8007254:	43d9      	mvns	r1, r3
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	691a      	ldr	r2, [r3, #16]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	400a      	ands	r2, r1
 8007262:	611a      	str	r2, [r3, #16]

		hsai->State = HAL_SAI_STATE_READY;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
	}
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
	HAL_SAI_TxCpltCallback(hsai);
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f7ff fe11 	bl	8006e94 <HAL_SAI_TxCpltCallback>
#endif
}
 8007272:	bf00      	nop
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <SAI_DMATxHalfCplt>:
 * @brief  DMA SAI transmit process half complete callback.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *              the configuration information for the specified DMA module.
 * @retval None
 */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma) {
 800727a:	b580      	push	{r7, lr}
 800727c:	b084      	sub	sp, #16
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
	SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007286:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
	HAL_SAI_TxHalfCpltCallback(hsai);
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f7ff fe0d 	bl	8006ea8 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800728e:	bf00      	nop
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <SAI_DMARxCplt>:
 * @brief  DMA SAI receive process complete callback.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *              the configuration information for the specified DMA module.
 * @retval None
 */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma) {
 8007296:	b580      	push	{r7, lr}
 8007298:	b084      	sub	sp, #16
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
	SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a2:	60fb      	str	r3, [r7, #12]

	if (hdma->Init.Mode != DMA_CIRCULAR) {
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	69db      	ldr	r3, [r3, #28]
 80072a8:	2b20      	cmp	r3, #32
 80072aa:	d01c      	beq.n	80072e6 <SAI_DMARxCplt+0x50>
		/* Disable Rx DMA Request */
		hsai->Instance->CR1 &= (uint32_t) (~SAI_xCR1_DMAEN);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80072ba:	601a      	str	r2, [r3, #0]
		hsai->XferCount = 0;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

		/* Stop the interrupts error handling */
		__HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80072c4:	2100      	movs	r1, #0
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f7ff ff36 	bl	8007138 <SAI_InterruptFlag>
 80072cc:	4603      	mov	r3, r0
 80072ce:	43d9      	mvns	r1, r3
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	691a      	ldr	r2, [r3, #16]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	400a      	ands	r2, r1
 80072dc:	611a      	str	r2, [r3, #16]

		hsai->State = HAL_SAI_STATE_READY;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
	}
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
	HAL_SAI_RxCpltCallback(hsai);
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f7fa fdd4 	bl	8001e94 <HAL_SAI_RxCpltCallback>
#endif
}
 80072ec:	bf00      	nop
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <SAI_DMARxHalfCplt>:
 * @brief  DMA SAI receive process half complete callback
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *              the configuration information for the specified DMA module.
 * @retval None
 */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma) {
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
	SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007300:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
	HAL_SAI_RxHalfCpltCallback(hsai);
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f7fa fdd6 	bl	8001eb4 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8007308:	bf00      	nop
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <SAI_DMAError>:
 * @brief  DMA SAI communication error callback.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *              the configuration information for the specified DMA module.
 * @retval None
 */
static void SAI_DMAError(DMA_HandleTypeDef *hdma) {
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
	SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731c:	60fb      	str	r3, [r7, #12]

	/* Set SAI error code */
	hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007324:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	/* Disable the SAI DMA request */
	hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800733c:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral */
	/* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
	(void) SAI_Disable(hsai);
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f7ff ff32 	bl	80071a8 <SAI_Disable>

	/* Set the SAI state ready to be able to start again the process */
	hsai->State = HAL_SAI_STATE_READY;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

	/* Initialize XferCount */
	hsai->XferCount = 0U;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

	/* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
	HAL_SAI_ErrorCallback(hsai);
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f7ff fdb1 	bl	8006ebc <HAL_SAI_ErrorCallback>
#endif
}
 800735a:	bf00      	nop
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <SAI_DMAAbort>:
 * @brief  DMA SAI Abort callback.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *              the configuration information for the specified DMA module.
 * @retval None
 */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma) {
 8007362:	b580      	push	{r7, lr}
 8007364:	b084      	sub	sp, #16
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
	SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736e:	60fb      	str	r3, [r7, #12]

	/* Disable DMA request */
	hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800737e:	601a      	str	r2, [r3, #0]

	/* Disable all interrupts and clear all flags */
	hsai->Instance->IMR = 0U;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2200      	movs	r2, #0
 8007386:	611a      	str	r2, [r3, #16]
	hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f04f 32ff 	mov.w	r2, #4294967295
 8007390:	619a      	str	r2, [r3, #24]

	if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG) {
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007398:	2b20      	cmp	r3, #32
 800739a:	d00a      	beq.n	80073b2 <SAI_DMAAbort+0x50>
		/* Disable SAI peripheral */
		/* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
		(void) SAI_Disable(hsai);
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f7ff ff03 	bl	80071a8 <SAI_Disable>

		/* Flush the fifo */
		SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f042 0208 	orr.w	r2, r2, #8
 80073b0:	605a      	str	r2, [r3, #4]
	}
	/* Set the SAI state to ready to be able to start again the process */
	hsai->State = HAL_SAI_STATE_READY;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

	/* Initialize XferCount */
	hsai->XferCount = 0U;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

	/* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
	HAL_SAI_ErrorCallback(hsai);
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f7ff fd7a 	bl	8006ebc <HAL_SAI_ErrorCallback>
#endif
}
 80073c8:	bf00      	nop
 80073ca:	3710      	adds	r7, #16
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <HAL_SPI_Init>:
 *         in the SPI_InitTypeDef and initialize the associated handle.
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi) {
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
	uint32_t frxth;

	/* Check the SPI handle allocation */
	if (hspi == NULL) {
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d101      	bne.n	80073e2 <HAL_SPI_Init+0x12>
		return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e095      	b.n	800750e <HAL_SPI_Init+0x13e>
	assert_param(IS_SPI_NSS(hspi->Init.NSS));
	assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
	assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
	assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
	assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
	if (hspi->Init.TIMode == SPI_TIMODE_DISABLE) {
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d108      	bne.n	80073fc <HAL_SPI_Init+0x2c>
		assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
		assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

		if (hspi->Init.Mode == SPI_MODE_MASTER) {
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073f2:	d009      	beq.n	8007408 <HAL_SPI_Init+0x38>
			assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
		} else {
			/* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
			hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	61da      	str	r2, [r3, #28]
 80073fa:	e005      	b.n	8007408 <HAL_SPI_Init+0x38>
		}
	} else {
		assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

		/* Force polarity and phase to TI protocaol requirements */
		hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	611a      	str	r2, [r3, #16]
		hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

	if (hspi->State == HAL_SPI_STATE_RESET) {
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d106      	bne.n	8007428 <HAL_SPI_Init+0x58>
		/* Allocate lock resource and initialize it */
		hspi->Lock = HAL_UNLOCKED;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC... */
		HAL_SPI_MspInit(hspi);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7fa fe2e 	bl	8002084 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
	}

	hspi->State = HAL_SPI_STATE_BUSY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2202      	movs	r2, #2
 800742c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

	/* Disable the selected SPI peripheral */
	__HAL_SPI_DISABLE(hspi);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800743e:	601a      	str	r2, [r3, #0]

	/* Align by default the rs fifo threshold on the data size */
	if (hspi->Init.DataSize > SPI_DATASIZE_8BIT) {
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007448:	d902      	bls.n	8007450 <HAL_SPI_Init+0x80>
		frxth = SPI_RXFIFO_THRESHOLD_HF;
 800744a:	2300      	movs	r3, #0
 800744c:	60fb      	str	r3, [r7, #12]
 800744e:	e002      	b.n	8007456 <HAL_SPI_Init+0x86>
	} else {
		frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007454:	60fb      	str	r3, [r7, #12]
	}

	/* CRC calculation is valid only for 16Bit and 8 Bit */
	if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT)) {
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800745e:	d007      	beq.n	8007470 <HAL_SPI_Init+0xa0>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007468:	d002      	beq.n	8007470 <HAL_SPI_Init+0xa0>
		/* CRC must be disabled */
		hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
	/* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
	 Communication speed, First bit and CRC calculation state */
	WRITE_REG(hspi->Instance->CR1,
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007480:	431a      	orrs	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	f003 0302 	and.w	r3, r3, #2
 800748a:	431a      	orrs	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	695b      	ldr	r3, [r3, #20]
 8007490:	f003 0301 	and.w	r3, r3, #1
 8007494:	431a      	orrs	r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800749e:	431a      	orrs	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	69db      	ldr	r3, [r3, #28]
 80074a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074a8:	431a      	orrs	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a1b      	ldr	r3, [r3, #32]
 80074ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074b2:	ea42 0103 	orr.w	r1, r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	430a      	orrs	r2, r1
 80074c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

	/* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
	WRITE_REG(hspi->Instance->CR2,
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	0c1b      	lsrs	r3, r3, #16
 80074cc:	f003 0204 	and.w	r2, r3, #4
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d4:	f003 0310 	and.w	r3, r3, #16
 80074d8:	431a      	orrs	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074de:	f003 0308 	and.w	r3, r3, #8
 80074e2:	431a      	orrs	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80074ec:	ea42 0103 	orr.w	r1, r2, r3
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	430a      	orrs	r2, r1
 80074fc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	661a      	str	r2, [r3, #96]	; 0x60
	hspi->State = HAL_SPI_STATE_READY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

	return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <HAL_SPI_Transmit>:
 * @param  pData pointer to data buffer
 * @param  Size amount of data to be sent
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout) {
 8007516:	b580      	push	{r7, lr}
 8007518:	b088      	sub	sp, #32
 800751a:	af00      	add	r7, sp, #0
 800751c:	60f8      	str	r0, [r7, #12]
 800751e:	60b9      	str	r1, [r7, #8]
 8007520:	603b      	str	r3, [r7, #0]
 8007522:	4613      	mov	r3, r2
 8007524:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	HAL_StatusTypeDef errorcode = HAL_OK;
 8007526:	2300      	movs	r3, #0
 8007528:	77fb      	strb	r3, [r7, #31]

	/* Check Direction parameter */
	assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

	/* Process Locked */
	__HAL_LOCK(hspi);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007530:	2b01      	cmp	r3, #1
 8007532:	d101      	bne.n	8007538 <HAL_SPI_Transmit+0x22>
 8007534:	2302      	movs	r3, #2
 8007536:	e158      	b.n	80077ea <HAL_SPI_Transmit+0x2d4>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	/* Init tickstart for timeout management*/
	tickstart = HAL_GetTick();
 8007540:	f7fc fc06 	bl	8003d50 <HAL_GetTick>
 8007544:	61b8      	str	r0, [r7, #24]
	initial_TxXferCount = Size;
 8007546:	88fb      	ldrh	r3, [r7, #6]
 8007548:	82fb      	strh	r3, [r7, #22]

	if (hspi->State != HAL_SPI_STATE_READY) {
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007550:	b2db      	uxtb	r3, r3
 8007552:	2b01      	cmp	r3, #1
 8007554:	d002      	beq.n	800755c <HAL_SPI_Transmit+0x46>
		errorcode = HAL_BUSY;
 8007556:	2302      	movs	r3, #2
 8007558:	77fb      	strb	r3, [r7, #31]
		goto error;
 800755a:	e13d      	b.n	80077d8 <HAL_SPI_Transmit+0x2c2>
	}

	if ((pData == NULL) || (Size == 0U)) {
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d002      	beq.n	8007568 <HAL_SPI_Transmit+0x52>
 8007562:	88fb      	ldrh	r3, [r7, #6]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d102      	bne.n	800756e <HAL_SPI_Transmit+0x58>
		errorcode = HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	77fb      	strb	r3, [r7, #31]
		goto error;
 800756c:	e134      	b.n	80077d8 <HAL_SPI_Transmit+0x2c2>
	}

	/* Set the transaction information */
	hspi->State = HAL_SPI_STATE_BUSY_TX;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2203      	movs	r2, #3
 8007572:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	661a      	str	r2, [r3, #96]	; 0x60
	hspi->pTxBuffPtr = (uint8_t*) pData;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	68ba      	ldr	r2, [r7, #8]
 8007580:	639a      	str	r2, [r3, #56]	; 0x38
	hspi->TxXferSize = Size;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	88fa      	ldrh	r2, [r7, #6]
 8007586:	879a      	strh	r2, [r3, #60]	; 0x3c
	hspi->TxXferCount = Size;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	88fa      	ldrh	r2, [r7, #6]
 800758c:	87da      	strh	r2, [r3, #62]	; 0x3e

	/*Init field not used in handle to zero */
	hspi->pRxBuffPtr = (uint8_t*) NULL;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	641a      	str	r2, [r3, #64]	; 0x40
	hspi->RxXferSize = 0U;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	hspi->RxXferCount = 0U;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	hspi->TxISR = NULL;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	651a      	str	r2, [r3, #80]	; 0x50
	hspi->RxISR = NULL;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	64da      	str	r2, [r3, #76]	; 0x4c

	/* Configure communication direction : 1Line */
	if (hspi->Init.Direction == SPI_DIRECTION_1LINE) {
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075b8:	d10f      	bne.n	80075da <HAL_SPI_Transmit+0xc4>
		/* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
		__HAL_SPI_DISABLE(hspi);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075c8:	601a      	str	r2, [r3, #0]
		SPI_1LINE_TX(hspi);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

	/* Check if the SPI is already enabled */
	if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e4:	2b40      	cmp	r3, #64	; 0x40
 80075e6:	d007      	beq.n	80075f8 <HAL_SPI_Transmit+0xe2>
		/* Enable SPI peripheral */
		__HAL_SPI_ENABLE(hspi);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075f6:	601a      	str	r2, [r3, #0]
	}

	/* Transmit data in 16 Bit mode */
	if (hspi->Init.DataSize > SPI_DATASIZE_8BIT) {
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007600:	d94b      	bls.n	800769a <HAL_SPI_Transmit+0x184>
		if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U)) {
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d002      	beq.n	8007610 <HAL_SPI_Transmit+0xfa>
 800760a:	8afb      	ldrh	r3, [r7, #22]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d13e      	bne.n	800768e <HAL_SPI_Transmit+0x178>
			hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007614:	881a      	ldrh	r2, [r3, #0]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	60da      	str	r2, [r3, #12]
			hspi->pTxBuffPtr += sizeof(uint16_t);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007620:	1c9a      	adds	r2, r3, #2
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	639a      	str	r2, [r3, #56]	; 0x38
			hspi->TxXferCount--;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800762a:	b29b      	uxth	r3, r3
 800762c:	3b01      	subs	r3, #1
 800762e:	b29a      	uxth	r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	87da      	strh	r2, [r3, #62]	; 0x3e
		}
		/* Transmit data in 16 Bit mode */
		while (hspi->TxXferCount > 0U) {
 8007634:	e02b      	b.n	800768e <HAL_SPI_Transmit+0x178>
			/* Wait until TXE flag is set to send data */
			if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) {
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	f003 0302 	and.w	r3, r3, #2
 8007640:	2b02      	cmp	r3, #2
 8007642:	d112      	bne.n	800766a <HAL_SPI_Transmit+0x154>
				hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007648:	881a      	ldrh	r2, [r3, #0]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	60da      	str	r2, [r3, #12]
				hspi->pTxBuffPtr += sizeof(uint16_t);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007654:	1c9a      	adds	r2, r3, #2
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	639a      	str	r2, [r3, #56]	; 0x38
				hspi->TxXferCount--;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800765e:	b29b      	uxth	r3, r3
 8007660:	3b01      	subs	r3, #1
 8007662:	b29a      	uxth	r2, r3
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007668:	e011      	b.n	800768e <HAL_SPI_Transmit+0x178>
			} else {
				/* Timeout management */
				if ((((HAL_GetTick() - tickstart) >= Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U)) {
 800766a:	f7fc fb71 	bl	8003d50 <HAL_GetTick>
 800766e:	4602      	mov	r2, r0
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	683a      	ldr	r2, [r7, #0]
 8007676:	429a      	cmp	r2, r3
 8007678:	d803      	bhi.n	8007682 <HAL_SPI_Transmit+0x16c>
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007680:	d102      	bne.n	8007688 <HAL_SPI_Transmit+0x172>
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d102      	bne.n	800768e <HAL_SPI_Transmit+0x178>
					errorcode = HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	77fb      	strb	r3, [r7, #31]
					goto error;
 800768c:	e0a4      	b.n	80077d8 <HAL_SPI_Transmit+0x2c2>
		while (hspi->TxXferCount > 0U) {
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007692:	b29b      	uxth	r3, r3
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1ce      	bne.n	8007636 <HAL_SPI_Transmit+0x120>
 8007698:	e07c      	b.n	8007794 <HAL_SPI_Transmit+0x27e>
			}
		}
	}
	/* Transmit data in 8 Bit mode */
	else {
		if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U)) {
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d002      	beq.n	80076a8 <HAL_SPI_Transmit+0x192>
 80076a2:	8afb      	ldrh	r3, [r7, #22]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d170      	bne.n	800778a <HAL_SPI_Transmit+0x274>
			if (hspi->TxXferCount > 1U) {
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d912      	bls.n	80076d8 <HAL_SPI_Transmit+0x1c2>
				/* write on the data register in packing mode */
				hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b6:	881a      	ldrh	r2, [r3, #0]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	60da      	str	r2, [r3, #12]
				hspi->pTxBuffPtr += sizeof(uint16_t);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c2:	1c9a      	adds	r2, r3, #2
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	639a      	str	r2, [r3, #56]	; 0x38
				hspi->TxXferCount -= 2U;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	3b02      	subs	r3, #2
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076d6:	e058      	b.n	800778a <HAL_SPI_Transmit+0x274>
			} else {
				*((__IO uint8_t*) &hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	330c      	adds	r3, #12
 80076e2:	7812      	ldrb	r2, [r2, #0]
 80076e4:	701a      	strb	r2, [r3, #0]
				hspi->pTxBuffPtr++;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ea:	1c5a      	adds	r2, r3, #1
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	639a      	str	r2, [r3, #56]	; 0x38
				hspi->TxXferCount--;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	3b01      	subs	r3, #1
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	87da      	strh	r2, [r3, #62]	; 0x3e
			}
		}
		while (hspi->TxXferCount > 0U) {
 80076fe:	e044      	b.n	800778a <HAL_SPI_Transmit+0x274>
			/* Wait until TXE flag is set to send data */
			if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) {
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f003 0302 	and.w	r3, r3, #2
 800770a:	2b02      	cmp	r3, #2
 800770c:	d12b      	bne.n	8007766 <HAL_SPI_Transmit+0x250>
				if (hspi->TxXferCount > 1U) {
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007712:	b29b      	uxth	r3, r3
 8007714:	2b01      	cmp	r3, #1
 8007716:	d912      	bls.n	800773e <HAL_SPI_Transmit+0x228>
					/* write on the data register in packing mode */
					hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771c:	881a      	ldrh	r2, [r3, #0]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	60da      	str	r2, [r3, #12]
					hspi->pTxBuffPtr += sizeof(uint16_t);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007728:	1c9a      	adds	r2, r3, #2
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	639a      	str	r2, [r3, #56]	; 0x38
					hspi->TxXferCount -= 2U;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007732:	b29b      	uxth	r3, r3
 8007734:	3b02      	subs	r3, #2
 8007736:	b29a      	uxth	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800773c:	e025      	b.n	800778a <HAL_SPI_Transmit+0x274>
				} else {
					*((__IO uint8_t*) &hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	330c      	adds	r3, #12
 8007748:	7812      	ldrb	r2, [r2, #0]
 800774a:	701a      	strb	r2, [r3, #0]
					hspi->pTxBuffPtr++;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007750:	1c5a      	adds	r2, r3, #1
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	639a      	str	r2, [r3, #56]	; 0x38
					hspi->TxXferCount--;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800775a:	b29b      	uxth	r3, r3
 800775c:	3b01      	subs	r3, #1
 800775e:	b29a      	uxth	r2, r3
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007764:	e011      	b.n	800778a <HAL_SPI_Transmit+0x274>
				}
			} else {
				/* Timeout management */
				if ((((HAL_GetTick() - tickstart) >= Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U)) {
 8007766:	f7fc faf3 	bl	8003d50 <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	69bb      	ldr	r3, [r7, #24]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	683a      	ldr	r2, [r7, #0]
 8007772:	429a      	cmp	r2, r3
 8007774:	d803      	bhi.n	800777e <HAL_SPI_Transmit+0x268>
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777c:	d102      	bne.n	8007784 <HAL_SPI_Transmit+0x26e>
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d102      	bne.n	800778a <HAL_SPI_Transmit+0x274>
					errorcode = HAL_TIMEOUT;
 8007784:	2303      	movs	r3, #3
 8007786:	77fb      	strb	r3, [r7, #31]
					goto error;
 8007788:	e026      	b.n	80077d8 <HAL_SPI_Transmit+0x2c2>
		while (hspi->TxXferCount > 0U) {
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800778e:	b29b      	uxth	r3, r3
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1b5      	bne.n	8007700 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

	/* Check the end of the transaction */
	if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK) {
 8007794:	69ba      	ldr	r2, [r7, #24]
 8007796:	6839      	ldr	r1, [r7, #0]
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f000 ff77 	bl	800868c <SPI_EndRxTxTransaction>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d002      	beq.n	80077aa <HAL_SPI_Transmit+0x294>
		hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2220      	movs	r2, #32
 80077a8:	661a      	str	r2, [r3, #96]	; 0x60
	}

	/* Clear overrun flag in 2 Lines communication mode because received is not read */
	if (hspi->Init.Direction == SPI_DIRECTION_2LINES) {
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10a      	bne.n	80077c8 <HAL_SPI_Transmit+0x2b2>
		__HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077b2:	2300      	movs	r3, #0
 80077b4:	613b      	str	r3, [r7, #16]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	613b      	str	r3, [r7, #16]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	613b      	str	r3, [r7, #16]
 80077c6:	693b      	ldr	r3, [r7, #16]
	}

	if (hspi->ErrorCode != HAL_SPI_ERROR_NONE) {
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d002      	beq.n	80077d6 <HAL_SPI_Transmit+0x2c0>
		errorcode = HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	77fb      	strb	r3, [r7, #31]
 80077d4:	e000      	b.n	80077d8 <HAL_SPI_Transmit+0x2c2>
	}

	error: hspi->State = HAL_SPI_STATE_READY;
 80077d6:	bf00      	nop
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	/* Process Unlocked */
	__HAL_UNLOCK(hspi);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	return errorcode;
 80077e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3720      	adds	r7, #32
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <HAL_SPI_Receive>:
 * @param  pData pointer to data buffer
 * @param  Size amount of data to be received
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout) {
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b088      	sub	sp, #32
 80077f6:	af02      	add	r7, sp, #8
 80077f8:	60f8      	str	r0, [r7, #12]
 80077fa:	60b9      	str	r1, [r7, #8]
 80077fc:	603b      	str	r3, [r7, #0]
 80077fe:	4613      	mov	r3, r2
 8007800:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
	uint32_t tickstart;
	HAL_StatusTypeDef errorcode = HAL_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	75fb      	strb	r3, [r7, #23]

	if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES)) {
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800780e:	d112      	bne.n	8007836 <HAL_SPI_Receive+0x44>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d10e      	bne.n	8007836 <HAL_SPI_Receive+0x44>
		hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2204      	movs	r2, #4
 800781c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		/* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
		return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007820:	88fa      	ldrh	r2, [r7, #6]
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	4613      	mov	r3, r2
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	68b9      	ldr	r1, [r7, #8]
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f000 f910 	bl	8007a52 <HAL_SPI_TransmitReceive>
 8007832:	4603      	mov	r3, r0
 8007834:	e109      	b.n	8007a4a <HAL_SPI_Receive+0x258>
	}

	/* Process Locked */
	__HAL_LOCK(hspi);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800783c:	2b01      	cmp	r3, #1
 800783e:	d101      	bne.n	8007844 <HAL_SPI_Receive+0x52>
 8007840:	2302      	movs	r3, #2
 8007842:	e102      	b.n	8007a4a <HAL_SPI_Receive+0x258>
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	/* Init tickstart for timeout management*/
	tickstart = HAL_GetTick();
 800784c:	f7fc fa80 	bl	8003d50 <HAL_GetTick>
 8007850:	6138      	str	r0, [r7, #16]

	if (hspi->State != HAL_SPI_STATE_READY) {
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b01      	cmp	r3, #1
 800785c:	d002      	beq.n	8007864 <HAL_SPI_Receive+0x72>
		errorcode = HAL_BUSY;
 800785e:	2302      	movs	r3, #2
 8007860:	75fb      	strb	r3, [r7, #23]
		goto error;
 8007862:	e0e9      	b.n	8007a38 <HAL_SPI_Receive+0x246>
	}

	if ((pData == NULL) || (Size == 0U)) {
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d002      	beq.n	8007870 <HAL_SPI_Receive+0x7e>
 800786a:	88fb      	ldrh	r3, [r7, #6]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d102      	bne.n	8007876 <HAL_SPI_Receive+0x84>
		errorcode = HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	75fb      	strb	r3, [r7, #23]
		goto error;
 8007874:	e0e0      	b.n	8007a38 <HAL_SPI_Receive+0x246>
	}

	/* Set the transaction information */
	hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2204      	movs	r2, #4
 800787a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	661a      	str	r2, [r3, #96]	; 0x60
	hspi->pRxBuffPtr = (uint8_t*) pData;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	68ba      	ldr	r2, [r7, #8]
 8007888:	641a      	str	r2, [r3, #64]	; 0x40
	hspi->RxXferSize = Size;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	88fa      	ldrh	r2, [r7, #6]
 800788e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	hspi->RxXferCount = Size;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	88fa      	ldrh	r2, [r7, #6]
 8007896:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

	/*Init field not used in handle to zero */
	hspi->pTxBuffPtr = (uint8_t*) NULL;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	639a      	str	r2, [r3, #56]	; 0x38
	hspi->TxXferSize = 0U;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	879a      	strh	r2, [r3, #60]	; 0x3c
	hspi->TxXferCount = 0U;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2200      	movs	r2, #0
 80078aa:	87da      	strh	r2, [r3, #62]	; 0x3e
	hspi->RxISR = NULL;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi->TxISR = NULL;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

	/* Set the Rx Fifo threshold */
	if (hspi->Init.DataSize > SPI_DATASIZE_8BIT) {
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80078c0:	d908      	bls.n	80078d4 <HAL_SPI_Receive+0xe2>
		/* Set RX Fifo threshold according the reception data length: 16bit */
		CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	685a      	ldr	r2, [r3, #4]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80078d0:	605a      	str	r2, [r3, #4]
 80078d2:	e007      	b.n	80078e4 <HAL_SPI_Receive+0xf2>
	} else {
		/* Set RX Fifo threshold according the reception data length: 8bit */
		SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	685a      	ldr	r2, [r3, #4]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078e2:	605a      	str	r2, [r3, #4]
	}

	/* Configure communication direction: 1Line */
	if (hspi->Init.Direction == SPI_DIRECTION_1LINE) {
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078ec:	d10f      	bne.n	800790e <HAL_SPI_Receive+0x11c>
		/* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
		__HAL_SPI_DISABLE(hspi);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078fc:	601a      	str	r2, [r3, #0]
		SPI_1LINE_RX(hspi);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800790c:	601a      	str	r2, [r3, #0]
	}

	/* Check if the SPI is already enabled */
	if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007918:	2b40      	cmp	r3, #64	; 0x40
 800791a:	d007      	beq.n	800792c <HAL_SPI_Receive+0x13a>
		/* Enable SPI peripheral */
		__HAL_SPI_ENABLE(hspi);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800792a:	601a      	str	r2, [r3, #0]
	}

	/* Receive data in 8 Bit mode */
	if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT) {
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007934:	d867      	bhi.n	8007a06 <HAL_SPI_Receive+0x214>
		/* Transfer loop */
		while (hspi->RxXferCount > 0U) {
 8007936:	e030      	b.n	800799a <HAL_SPI_Receive+0x1a8>
			/* Check the RXNE flag */
			if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) {
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f003 0301 	and.w	r3, r3, #1
 8007942:	2b01      	cmp	r3, #1
 8007944:	d117      	bne.n	8007976 <HAL_SPI_Receive+0x184>
				/* read the received data */
				(*(uint8_t*) hspi->pRxBuffPtr) = *(__IO uint8_t*) &hspi->Instance->DR;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f103 020c 	add.w	r2, r3, #12
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007952:	7812      	ldrb	r2, [r2, #0]
 8007954:	b2d2      	uxtb	r2, r2
 8007956:	701a      	strb	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint8_t);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795c:	1c5a      	adds	r2, r3, #1
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	641a      	str	r2, [r3, #64]	; 0x40
				hspi->RxXferCount--;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007968:	b29b      	uxth	r3, r3
 800796a:	3b01      	subs	r3, #1
 800796c:	b29a      	uxth	r2, r3
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007974:	e011      	b.n	800799a <HAL_SPI_Receive+0x1a8>
			} else {
				/* Timeout management */
				if ((((HAL_GetTick() - tickstart) >= Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U)) {
 8007976:	f7fc f9eb 	bl	8003d50 <HAL_GetTick>
 800797a:	4602      	mov	r2, r0
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	1ad3      	subs	r3, r2, r3
 8007980:	683a      	ldr	r2, [r7, #0]
 8007982:	429a      	cmp	r2, r3
 8007984:	d803      	bhi.n	800798e <HAL_SPI_Receive+0x19c>
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800798c:	d102      	bne.n	8007994 <HAL_SPI_Receive+0x1a2>
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d102      	bne.n	800799a <HAL_SPI_Receive+0x1a8>
					errorcode = HAL_TIMEOUT;
 8007994:	2303      	movs	r3, #3
 8007996:	75fb      	strb	r3, [r7, #23]
					goto error;
 8007998:	e04e      	b.n	8007a38 <HAL_SPI_Receive+0x246>
		while (hspi->RxXferCount > 0U) {
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1c8      	bne.n	8007938 <HAL_SPI_Receive+0x146>
 80079a6:	e034      	b.n	8007a12 <HAL_SPI_Receive+0x220>
		}
	} else {
		/* Transfer loop */
		while (hspi->RxXferCount > 0U) {
			/* Check the RXNE flag */
			if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) {
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	f003 0301 	and.w	r3, r3, #1
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d115      	bne.n	80079e2 <HAL_SPI_Receive+0x1f0>
				*((uint16_t*) hspi->pRxBuffPtr) = (uint16_t) hspi->Instance->DR;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68da      	ldr	r2, [r3, #12]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c0:	b292      	uxth	r2, r2
 80079c2:	801a      	strh	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint16_t);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c8:	1c9a      	adds	r2, r3, #2
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	641a      	str	r2, [r3, #64]	; 0x40
				hspi->RxXferCount--;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	3b01      	subs	r3, #1
 80079d8:	b29a      	uxth	r2, r3
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80079e0:	e011      	b.n	8007a06 <HAL_SPI_Receive+0x214>
			} else {
				/* Timeout management */
				if ((((HAL_GetTick() - tickstart) >= Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U)) {
 80079e2:	f7fc f9b5 	bl	8003d50 <HAL_GetTick>
 80079e6:	4602      	mov	r2, r0
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	683a      	ldr	r2, [r7, #0]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d803      	bhi.n	80079fa <HAL_SPI_Receive+0x208>
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f8:	d102      	bne.n	8007a00 <HAL_SPI_Receive+0x20e>
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d102      	bne.n	8007a06 <HAL_SPI_Receive+0x214>
					errorcode = HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	75fb      	strb	r3, [r7, #23]
					goto error;
 8007a04:	e018      	b.n	8007a38 <HAL_SPI_Receive+0x246>
		while (hspi->RxXferCount > 0U) {
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1ca      	bne.n	80079a8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

	/* Check the end of the transaction */
	if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK) {
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f000 fde0 	bl	80085dc <SPI_EndRxTransaction>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d002      	beq.n	8007a28 <HAL_SPI_Receive+0x236>
		hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2220      	movs	r2, #32
 8007a26:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

	if (hspi->ErrorCode != HAL_SPI_ERROR_NONE) {
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d002      	beq.n	8007a36 <HAL_SPI_Receive+0x244>
		errorcode = HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	75fb      	strb	r3, [r7, #23]
 8007a34:	e000      	b.n	8007a38 <HAL_SPI_Receive+0x246>
	}

	error: hspi->State = HAL_SPI_STATE_READY;
 8007a36:	bf00      	nop
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	__HAL_UNLOCK(hspi);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	return errorcode;
 8007a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3718      	adds	r7, #24
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <HAL_SPI_TransmitReceive>:
 * @param  Size amount of data to be sent and received
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
		uint32_t Timeout) {
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b08a      	sub	sp, #40	; 0x28
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	60f8      	str	r0, [r7, #12]
 8007a5a:	60b9      	str	r1, [r7, #8]
 8007a5c:	607a      	str	r2, [r7, #4]
 8007a5e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

	/* Variable used to alternate Rx and Tx during transfer */
	uint32_t txallowed = 1U;
 8007a60:	2301      	movs	r3, #1
 8007a62:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_StatusTypeDef errorcode = HAL_OK;
 8007a64:	2300      	movs	r3, #0
 8007a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	/* Check Direction parameter */
	assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

	/* Process Locked */
	__HAL_LOCK(hspi);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d101      	bne.n	8007a78 <HAL_SPI_TransmitReceive+0x26>
 8007a74:	2302      	movs	r3, #2
 8007a76:	e1fb      	b.n	8007e70 <HAL_SPI_TransmitReceive+0x41e>
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	/* Init tickstart for timeout management*/
	tickstart = HAL_GetTick();
 8007a80:	f7fc f966 	bl	8003d50 <HAL_GetTick>
 8007a84:	61f8      	str	r0, [r7, #28]

	/* Init temporary variables */
	tmp_state = hspi->State;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007a8c:	76fb      	strb	r3, [r7, #27]
	tmp_mode = hspi->Init.Mode;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	617b      	str	r3, [r7, #20]
	initial_TxXferCount = Size;
 8007a94:	887b      	ldrh	r3, [r7, #2]
 8007a96:	827b      	strh	r3, [r7, #18]
	initial_RxXferCount = Size;
 8007a98:	887b      	ldrh	r3, [r7, #2]
 8007a9a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

	if (!((tmp_state == HAL_SPI_STATE_READY)
 8007a9c:	7efb      	ldrb	r3, [r7, #27]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d00e      	beq.n	8007ac0 <HAL_SPI_TransmitReceive+0x6e>
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007aa8:	d106      	bne.n	8007ab8 <HAL_SPI_TransmitReceive+0x66>
			|| ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d102      	bne.n	8007ab8 <HAL_SPI_TransmitReceive+0x66>
					&& (tmp_state == HAL_SPI_STATE_BUSY_RX)))) {
 8007ab2:	7efb      	ldrb	r3, [r7, #27]
 8007ab4:	2b04      	cmp	r3, #4
 8007ab6:	d003      	beq.n	8007ac0 <HAL_SPI_TransmitReceive+0x6e>
		errorcode = HAL_BUSY;
 8007ab8:	2302      	movs	r3, #2
 8007aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		goto error;
 8007abe:	e1cd      	b.n	8007e5c <HAL_SPI_TransmitReceive+0x40a>
	}

	if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U)) {
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d005      	beq.n	8007ad2 <HAL_SPI_TransmitReceive+0x80>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d002      	beq.n	8007ad2 <HAL_SPI_TransmitReceive+0x80>
 8007acc:	887b      	ldrh	r3, [r7, #2]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d103      	bne.n	8007ada <HAL_SPI_TransmitReceive+0x88>
		errorcode = HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		goto error;
 8007ad8:	e1c0      	b.n	8007e5c <HAL_SPI_TransmitReceive+0x40a>
	}

	/* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
	if (hspi->State != HAL_SPI_STATE_BUSY_RX) {
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	2b04      	cmp	r3, #4
 8007ae4:	d003      	beq.n	8007aee <HAL_SPI_TransmitReceive+0x9c>
		hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2205      	movs	r2, #5
 8007aea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	}

	/* Set the transaction information */
	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	661a      	str	r2, [r3, #96]	; 0x60
	hspi->pRxBuffPtr = (uint8_t*) pRxData;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	641a      	str	r2, [r3, #64]	; 0x40
	hspi->RxXferCount = Size;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	887a      	ldrh	r2, [r7, #2]
 8007afe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	hspi->RxXferSize = Size;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	887a      	ldrh	r2, [r7, #2]
 8007b06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	hspi->pTxBuffPtr = (uint8_t*) pTxData;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	68ba      	ldr	r2, [r7, #8]
 8007b0e:	639a      	str	r2, [r3, #56]	; 0x38
	hspi->TxXferCount = Size;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	887a      	ldrh	r2, [r7, #2]
 8007b14:	87da      	strh	r2, [r3, #62]	; 0x3e
	hspi->TxXferSize = Size;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	887a      	ldrh	r2, [r7, #2]
 8007b1a:	879a      	strh	r2, [r3, #60]	; 0x3c

	/*Init field not used in handle to zero */
	hspi->RxISR = NULL;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi->TxISR = NULL;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2200      	movs	r2, #0
 8007b26:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

	/* Set the Rx Fifo threshold */
	if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U)) {
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b30:	d802      	bhi.n	8007b38 <HAL_SPI_TransmitReceive+0xe6>
 8007b32:	8a3b      	ldrh	r3, [r7, #16]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d908      	bls.n	8007b4a <HAL_SPI_TransmitReceive+0xf8>
		/* Set fiforxthreshold according the reception data length: 16bit */
		CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	685a      	ldr	r2, [r3, #4]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b46:	605a      	str	r2, [r3, #4]
 8007b48:	e007      	b.n	8007b5a <HAL_SPI_TransmitReceive+0x108>
	} else {
		/* Set fiforxthreshold according the reception data length: 8bit */
		SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	685a      	ldr	r2, [r3, #4]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b58:	605a      	str	r2, [r3, #4]
	}

	/* Check if the SPI is already enabled */
	if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b64:	2b40      	cmp	r3, #64	; 0x40
 8007b66:	d007      	beq.n	8007b78 <HAL_SPI_TransmitReceive+0x126>
		/* Enable SPI peripheral */
		__HAL_SPI_ENABLE(hspi);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b76:	601a      	str	r2, [r3, #0]
	}

	/* Transmit and Receive data in 16 Bit mode */
	if (hspi->Init.DataSize > SPI_DATASIZE_8BIT) {
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b80:	d97c      	bls.n	8007c7c <HAL_SPI_TransmitReceive+0x22a>
		if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U)) {
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d002      	beq.n	8007b90 <HAL_SPI_TransmitReceive+0x13e>
 8007b8a:	8a7b      	ldrh	r3, [r7, #18]
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d169      	bne.n	8007c64 <HAL_SPI_TransmitReceive+0x212>
			hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b94:	881a      	ldrh	r2, [r3, #0]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	60da      	str	r2, [r3, #12]
			hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba0:	1c9a      	adds	r2, r3, #2
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	639a      	str	r2, [r3, #56]	; 0x38
			hspi->TxXferCount--;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	3b01      	subs	r3, #1
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	87da      	strh	r2, [r3, #62]	; 0x3e
		}
		while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8007bb4:	e056      	b.n	8007c64 <HAL_SPI_TransmitReceive+0x212>
			/* Check TXE flag */
			if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U)) {
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	f003 0302 	and.w	r3, r3, #2
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d11b      	bne.n	8007bfc <HAL_SPI_TransmitReceive+0x1aa>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d016      	beq.n	8007bfc <HAL_SPI_TransmitReceive+0x1aa>
 8007bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d113      	bne.n	8007bfc <HAL_SPI_TransmitReceive+0x1aa>
				hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd8:	881a      	ldrh	r2, [r3, #0]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	60da      	str	r2, [r3, #12]
				hspi->pTxBuffPtr += sizeof(uint16_t);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be4:	1c9a      	adds	r2, r3, #2
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	639a      	str	r2, [r3, #56]	; 0x38
				hspi->TxXferCount--;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	87da      	strh	r2, [r3, #62]	; 0x3e
				/* Next Data is a reception (Rx). Tx not allowed */
				txallowed = 0U;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
			}

			/* Check RXNE flag */
			if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U)) {
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d11c      	bne.n	8007c44 <HAL_SPI_TransmitReceive+0x1f2>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d016      	beq.n	8007c44 <HAL_SPI_TransmitReceive+0x1f2>
				*((uint16_t*) hspi->pRxBuffPtr) = (uint16_t) hspi->Instance->DR;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68da      	ldr	r2, [r3, #12]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c20:	b292      	uxth	r2, r2
 8007c22:	801a      	strh	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c28:	1c9a      	adds	r2, r3, #2
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	641a      	str	r2, [r3, #64]	; 0x40
				hspi->RxXferCount--;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	3b01      	subs	r3, #1
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				/* Next Data is a Transmission (Tx). Tx is allowed */
				txallowed = 1U;
 8007c40:	2301      	movs	r3, #1
 8007c42:	627b      	str	r3, [r7, #36]	; 0x24
			}
			if (((HAL_GetTick() - tickstart) >= Timeout) && (Timeout != HAL_MAX_DELAY)) {
 8007c44:	f7fc f884 	bl	8003d50 <HAL_GetTick>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d807      	bhi.n	8007c64 <HAL_SPI_TransmitReceive+0x212>
 8007c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c5a:	d003      	beq.n	8007c64 <HAL_SPI_TransmitReceive+0x212>
				errorcode = HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				goto error;
 8007c62:	e0fb      	b.n	8007e5c <HAL_SPI_TransmitReceive+0x40a>
		while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1a3      	bne.n	8007bb6 <HAL_SPI_TransmitReceive+0x164>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d19d      	bne.n	8007bb6 <HAL_SPI_TransmitReceive+0x164>
 8007c7a:	e0df      	b.n	8007e3c <HAL_SPI_TransmitReceive+0x3ea>
			}
		}
	}
	/* Transmit and Receive data in 8 Bit mode */
	else {
		if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U)) {
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d003      	beq.n	8007c8c <HAL_SPI_TransmitReceive+0x23a>
 8007c84:	8a7b      	ldrh	r3, [r7, #18]
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	f040 80cb 	bne.w	8007e22 <HAL_SPI_TransmitReceive+0x3d0>
			if (hspi->TxXferCount > 1U) {
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d912      	bls.n	8007cbc <HAL_SPI_TransmitReceive+0x26a>
				hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9a:	881a      	ldrh	r2, [r3, #0]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	60da      	str	r2, [r3, #12]
				hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca6:	1c9a      	adds	r2, r3, #2
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	639a      	str	r2, [r3, #56]	; 0x38
				hspi->TxXferCount -= 2U;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	3b02      	subs	r3, #2
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007cba:	e0b2      	b.n	8007e22 <HAL_SPI_TransmitReceive+0x3d0>
			} else {
				*(__IO uint8_t*) &hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	330c      	adds	r3, #12
 8007cc6:	7812      	ldrb	r2, [r2, #0]
 8007cc8:	701a      	strb	r2, [r3, #0]
				hspi->pTxBuffPtr++;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cce:	1c5a      	adds	r2, r3, #1
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	639a      	str	r2, [r3, #56]	; 0x38
				hspi->TxXferCount--;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
			}
		}
		while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8007ce2:	e09e      	b.n	8007e22 <HAL_SPI_TransmitReceive+0x3d0>
			/* Check TXE flag */
			if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U)) {
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	f003 0302 	and.w	r3, r3, #2
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d134      	bne.n	8007d5c <HAL_SPI_TransmitReceive+0x30a>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d02f      	beq.n	8007d5c <HAL_SPI_TransmitReceive+0x30a>
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d12c      	bne.n	8007d5c <HAL_SPI_TransmitReceive+0x30a>
				if (hspi->TxXferCount > 1U) {
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d912      	bls.n	8007d32 <HAL_SPI_TransmitReceive+0x2e0>
					hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d10:	881a      	ldrh	r2, [r3, #0]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	60da      	str	r2, [r3, #12]
					hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1c:	1c9a      	adds	r2, r3, #2
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	639a      	str	r2, [r3, #56]	; 0x38
					hspi->TxXferCount -= 2U;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	3b02      	subs	r3, #2
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007d30:	e012      	b.n	8007d58 <HAL_SPI_TransmitReceive+0x306>
				} else {
					*(__IO uint8_t*) &hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	330c      	adds	r3, #12
 8007d3c:	7812      	ldrb	r2, [r2, #0]
 8007d3e:	701a      	strb	r2, [r3, #0]
					hspi->pTxBuffPtr++;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d44:	1c5a      	adds	r2, r3, #1
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	639a      	str	r2, [r3, #56]	; 0x38
					hspi->TxXferCount--;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	3b01      	subs	r3, #1
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	87da      	strh	r2, [r3, #62]	; 0x3e
				}
				/* Next Data is a reception (Rx). Tx not allowed */
				txallowed = 0U;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
			}

			/* Wait until RXNE flag is reset */
			if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U)) {
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	f003 0301 	and.w	r3, r3, #1
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d148      	bne.n	8007dfc <HAL_SPI_TransmitReceive+0x3aa>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d042      	beq.n	8007dfc <HAL_SPI_TransmitReceive+0x3aa>
				if (hspi->RxXferCount > 1U) {
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d923      	bls.n	8007dca <HAL_SPI_TransmitReceive+0x378>
					*((uint16_t*) hspi->pRxBuffPtr) = (uint16_t) hspi->Instance->DR;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68da      	ldr	r2, [r3, #12]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8c:	b292      	uxth	r2, r2
 8007d8e:	801a      	strh	r2, [r3, #0]
					hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d94:	1c9a      	adds	r2, r3, #2
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	641a      	str	r2, [r3, #64]	; 0x40
					hspi->RxXferCount -= 2U;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	3b02      	subs	r3, #2
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
					if (hspi->RxXferCount <= 1U) {
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d81f      	bhi.n	8007df8 <HAL_SPI_TransmitReceive+0x3a6>
						/* Set RX Fifo threshold before to switch on 8 bit data size */
						SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	685a      	ldr	r2, [r3, #4]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007dc6:	605a      	str	r2, [r3, #4]
 8007dc8:	e016      	b.n	8007df8 <HAL_SPI_TransmitReceive+0x3a6>
					}
				} else {
					(*(uint8_t*) hspi->pRxBuffPtr) = *(__IO uint8_t*) &hspi->Instance->DR;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f103 020c 	add.w	r2, r3, #12
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd6:	7812      	ldrb	r2, [r2, #0]
 8007dd8:	b2d2      	uxtb	r2, r2
 8007dda:	701a      	strb	r2, [r3, #0]
					hspi->pRxBuffPtr++;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de0:	1c5a      	adds	r2, r3, #1
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	641a      	str	r2, [r3, #64]	; 0x40
					hspi->RxXferCount--;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	3b01      	subs	r3, #1
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				}
				/* Next Data is a Transmission (Tx). Tx is allowed */
				txallowed = 1U;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	627b      	str	r3, [r7, #36]	; 0x24
			}
			if ((((HAL_GetTick() - tickstart) >= Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U)) {
 8007dfc:	f7fb ffa8 	bl	8003d50 <HAL_GetTick>
 8007e00:	4602      	mov	r2, r0
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	1ad3      	subs	r3, r2, r3
 8007e06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d803      	bhi.n	8007e14 <HAL_SPI_TransmitReceive+0x3c2>
 8007e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e12:	d102      	bne.n	8007e1a <HAL_SPI_TransmitReceive+0x3c8>
 8007e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d103      	bne.n	8007e22 <HAL_SPI_TransmitReceive+0x3d0>
				errorcode = HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				goto error;
 8007e20:	e01c      	b.n	8007e5c <HAL_SPI_TransmitReceive+0x40a>
		while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f47f af5b 	bne.w	8007ce4 <HAL_SPI_TransmitReceive+0x292>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	f47f af54 	bne.w	8007ce4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

	/* Check the end of the transaction */
	if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK) {
 8007e3c:	69fa      	ldr	r2, [r7, #28]
 8007e3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f000 fc23 	bl	800868c <SPI_EndRxTxTransaction>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d006      	beq.n	8007e5a <HAL_SPI_TransmitReceive+0x408>
		errorcode = HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2220      	movs	r2, #32
 8007e56:	661a      	str	r2, [r3, #96]	; 0x60
 8007e58:	e000      	b.n	8007e5c <HAL_SPI_TransmitReceive+0x40a>
	}

	error: hspi->State = HAL_SPI_STATE_READY;
 8007e5a:	bf00      	nop
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	__HAL_UNLOCK(hspi);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	return errorcode;
 8007e6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3728      	adds	r7, #40	; 0x28
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <HAL_SPI_Transmit_DMA>:
 *               the configuration information for SPI module.
 * @param  pData pointer to data buffer
 * @param  Size amount of data to be sent
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size) {
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b086      	sub	sp, #24
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	4613      	mov	r3, r2
 8007e84:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef errorcode = HAL_OK;
 8007e86:	2300      	movs	r3, #0
 8007e88:	75fb      	strb	r3, [r7, #23]

	/* Check Direction parameter */
	assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

	/* Process Locked */
	__HAL_LOCK(hspi);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d101      	bne.n	8007e98 <HAL_SPI_Transmit_DMA+0x20>
 8007e94:	2302      	movs	r3, #2
 8007e96:	e0d8      	b.n	800804a <HAL_SPI_Transmit_DMA+0x1d2>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	if (hspi->State != HAL_SPI_STATE_READY) {
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d002      	beq.n	8007eb2 <HAL_SPI_Transmit_DMA+0x3a>
		errorcode = HAL_BUSY;
 8007eac:	2302      	movs	r3, #2
 8007eae:	75fb      	strb	r3, [r7, #23]
		goto error;
 8007eb0:	e0c6      	b.n	8008040 <HAL_SPI_Transmit_DMA+0x1c8>
	}

	if ((pData == NULL) || (Size == 0U)) {
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d002      	beq.n	8007ebe <HAL_SPI_Transmit_DMA+0x46>
 8007eb8:	88fb      	ldrh	r3, [r7, #6]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d102      	bne.n	8007ec4 <HAL_SPI_Transmit_DMA+0x4c>
		errorcode = HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	75fb      	strb	r3, [r7, #23]
		goto error;
 8007ec2:	e0bd      	b.n	8008040 <HAL_SPI_Transmit_DMA+0x1c8>
	}

	/* Set the transaction information */
	hspi->State = HAL_SPI_STATE_BUSY_TX;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2203      	movs	r2, #3
 8007ec8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	661a      	str	r2, [r3, #96]	; 0x60
	hspi->pTxBuffPtr = (uint8_t*) pData;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	68ba      	ldr	r2, [r7, #8]
 8007ed6:	639a      	str	r2, [r3, #56]	; 0x38
	hspi->TxXferSize = Size;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	88fa      	ldrh	r2, [r7, #6]
 8007edc:	879a      	strh	r2, [r3, #60]	; 0x3c
	hspi->TxXferCount = Size;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	88fa      	ldrh	r2, [r7, #6]
 8007ee2:	87da      	strh	r2, [r3, #62]	; 0x3e

	/* Init field not used in handle to zero */
	hspi->pRxBuffPtr = (uint8_t*) NULL;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	641a      	str	r2, [r3, #64]	; 0x40
	hspi->TxISR = NULL;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	651a      	str	r2, [r3, #80]	; 0x50
	hspi->RxISR = NULL;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi->RxXferSize = 0U;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	hspi->RxXferCount = 0U;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

	/* Configure communication direction : 1Line */
	if (hspi->Init.Direction == SPI_DIRECTION_1LINE) {
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f0e:	d10f      	bne.n	8007f30 <HAL_SPI_Transmit_DMA+0xb8>
		/* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
		__HAL_SPI_DISABLE(hspi);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f1e:	601a      	str	r2, [r3, #0]
		SPI_1LINE_TX(hspi);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f2e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

	/* Set the SPI TxDMA Half transfer complete callback */
	hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f34:	4a47      	ldr	r2, [pc, #284]	; (8008054 <HAL_SPI_Transmit_DMA+0x1dc>)
 8007f36:	631a      	str	r2, [r3, #48]	; 0x30

	/* Set the SPI TxDMA transfer complete callback */
	hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f3c:	4a46      	ldr	r2, [pc, #280]	; (8008058 <HAL_SPI_Transmit_DMA+0x1e0>)
 8007f3e:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Set the DMA error callback */
	hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f44:	4a45      	ldr	r2, [pc, #276]	; (800805c <HAL_SPI_Transmit_DMA+0x1e4>)
 8007f46:	635a      	str	r2, [r3, #52]	; 0x34

	/* Set the DMA AbortCpltCallback */
	hspi->hdmatx->XferAbortCallback = NULL;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	639a      	str	r2, [r3, #56]	; 0x38

	CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	685a      	ldr	r2, [r3, #4]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007f5e:	605a      	str	r2, [r3, #4]
	/* Packing mode is enabled only if the DMA setting is HALWORD */
	if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f68:	d82d      	bhi.n	8007fc6 <HAL_SPI_Transmit_DMA+0x14e>
			&& (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)) {
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f74:	d127      	bne.n	8007fc6 <HAL_SPI_Transmit_DMA+0x14e>
		/* Check the even/odd of the data size + crc if enabled */
		if ((hspi->TxXferCount & 0x1U) == 0U) {
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	f003 0301 	and.w	r3, r3, #1
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d10f      	bne.n	8007fa4 <HAL_SPI_Transmit_DMA+0x12c>
			CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	685a      	ldr	r2, [r3, #4]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007f92:	605a      	str	r2, [r3, #4]
			hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	085b      	lsrs	r3, r3, #1
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007fa2:	e010      	b.n	8007fc6 <HAL_SPI_Transmit_DMA+0x14e>
		} else {
			SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	685a      	ldr	r2, [r3, #4]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fb2:	605a      	str	r2, [r3, #4]
			hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	085b      	lsrs	r3, r3, #1
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	87da      	strh	r2, [r3, #62]	; 0x3e
		}
	}

	/* Enable the Tx DMA Stream/Channel */
	if (HAL_OK
			!= HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t) hspi->pTxBuffPtr, (uint32_t) &hspi->Instance->DR,
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fce:	4619      	mov	r1, r3
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	330c      	adds	r3, #12
 8007fd6:	461a      	mov	r2, r3
					hspi->TxXferCount)) {
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fdc:	b29b      	uxth	r3, r3
			!= HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t) hspi->pTxBuffPtr, (uint32_t) &hspi->Instance->DR,
 8007fde:	f7fc f90f 	bl	8004200 <HAL_DMA_Start_IT>
 8007fe2:	4603      	mov	r3, r0
	if (HAL_OK
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00c      	beq.n	8008002 <HAL_SPI_Transmit_DMA+0x18a>
		/* Update SPI error code */
		SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fec:	f043 0210 	orr.w	r2, r3, #16
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	661a      	str	r2, [r3, #96]	; 0x60
		errorcode = HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	75fb      	strb	r3, [r7, #23]

		hspi->State = HAL_SPI_STATE_READY;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		goto error;
 8008000:	e01e      	b.n	8008040 <HAL_SPI_Transmit_DMA+0x1c8>
	}

	/* Check if the SPI is already enabled */
	if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800800c:	2b40      	cmp	r3, #64	; 0x40
 800800e:	d007      	beq.n	8008020 <HAL_SPI_Transmit_DMA+0x1a8>
		/* Enable SPI peripheral */
		__HAL_SPI_ENABLE(hspi);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800801e:	601a      	str	r2, [r3, #0]
	}

	/* Enable the SPI Error Interrupt Bit */
	__HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	685a      	ldr	r2, [r3, #4]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f042 0220 	orr.w	r2, r2, #32
 800802e:	605a      	str	r2, [r3, #4]

	/* Enable Tx DMA Request */
	SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f042 0202 	orr.w	r2, r2, #2
 800803e:	605a      	str	r2, [r3, #4]

	error:
	/* Process Unlocked */
	__HAL_UNLOCK(hspi);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2200      	movs	r2, #0
 8008044:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	return errorcode;
 8008048:	7dfb      	ldrb	r3, [r7, #23]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3718      	adds	r7, #24
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	0800831b 	.word	0x0800831b
 8008058:	08008275 	.word	0x08008275
 800805c:	08008337 	.word	0x08008337

08008060 <HAL_SPI_IRQHandler>:
 * @brief  Handle SPI interrupt request.
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for the specified SPI module.
 * @retval None
 */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi) {
 8008060:	b580      	push	{r7, lr}
 8008062:	b088      	sub	sp, #32
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
	uint32_t itsource = hspi->Instance->CR2;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	61fb      	str	r3, [r7, #28]
	uint32_t itflag = hspi->Instance->SR;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	61bb      	str	r3, [r7, #24]

	/* SPI in mode Receiver ----------------------------------------------------*/
	if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) && (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET)
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	099b      	lsrs	r3, r3, #6
 800807c:	f003 0301 	and.w	r3, r3, #1
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10f      	bne.n	80080a4 <HAL_SPI_IRQHandler+0x44>
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	f003 0301 	and.w	r3, r3, #1
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00a      	beq.n	80080a4 <HAL_SPI_IRQHandler+0x44>
			&& (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET)) {
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	099b      	lsrs	r3, r3, #6
 8008092:	f003 0301 	and.w	r3, r3, #1
 8008096:	2b00      	cmp	r3, #0
 8008098:	d004      	beq.n	80080a4 <HAL_SPI_IRQHandler+0x44>
		hspi->RxISR(hspi);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	4798      	blx	r3
		return;
 80080a2:	e0d7      	b.n	8008254 <HAL_SPI_IRQHandler+0x1f4>
	}

	/* SPI in mode Transmitter -------------------------------------------------*/
	if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET)) {
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	085b      	lsrs	r3, r3, #1
 80080a8:	f003 0301 	and.w	r3, r3, #1
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00a      	beq.n	80080c6 <HAL_SPI_IRQHandler+0x66>
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	09db      	lsrs	r3, r3, #7
 80080b4:	f003 0301 	and.w	r3, r3, #1
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d004      	beq.n	80080c6 <HAL_SPI_IRQHandler+0x66>
		hspi->TxISR(hspi);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	4798      	blx	r3
		return;
 80080c4:	e0c6      	b.n	8008254 <HAL_SPI_IRQHandler+0x1f4>
	}

	/* SPI in Error Treatment --------------------------------------------------*/
	if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	095b      	lsrs	r3, r3, #5
 80080ca:	f003 0301 	and.w	r3, r3, #1
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10c      	bne.n	80080ec <HAL_SPI_IRQHandler+0x8c>
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	099b      	lsrs	r3, r3, #6
 80080d6:	f003 0301 	and.w	r3, r3, #1
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d106      	bne.n	80080ec <HAL_SPI_IRQHandler+0x8c>
			|| (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET))
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	0a1b      	lsrs	r3, r3, #8
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	f000 80b4 	beq.w	8008254 <HAL_SPI_IRQHandler+0x1f4>
			&& (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET)) {
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	095b      	lsrs	r3, r3, #5
 80080f0:	f003 0301 	and.w	r3, r3, #1
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f000 80ad 	beq.w	8008254 <HAL_SPI_IRQHandler+0x1f4>
		/* SPI Overrun error interrupt occurred ----------------------------------*/
		if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) {
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	099b      	lsrs	r3, r3, #6
 80080fe:	f003 0301 	and.w	r3, r3, #1
 8008102:	2b00      	cmp	r3, #0
 8008104:	d023      	beq.n	800814e <HAL_SPI_IRQHandler+0xee>
			if (hspi->State != HAL_SPI_STATE_BUSY_TX) {
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b03      	cmp	r3, #3
 8008110:	d011      	beq.n	8008136 <HAL_SPI_IRQHandler+0xd6>
				SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008116:	f043 0204 	orr.w	r2, r3, #4
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	661a      	str	r2, [r3, #96]	; 0x60
				__HAL_SPI_CLEAR_OVRFLAG(hspi);
 800811e:	2300      	movs	r3, #0
 8008120:	617b      	str	r3, [r7, #20]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	617b      	str	r3, [r7, #20]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	617b      	str	r3, [r7, #20]
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	e00b      	b.n	800814e <HAL_SPI_IRQHandler+0xee>
			} else {
				__HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008136:	2300      	movs	r3, #0
 8008138:	613b      	str	r3, [r7, #16]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	613b      	str	r3, [r7, #16]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	613b      	str	r3, [r7, #16]
 800814a:	693b      	ldr	r3, [r7, #16]
				return;
 800814c:	e082      	b.n	8008254 <HAL_SPI_IRQHandler+0x1f4>
			}
		}

		/* SPI Mode Fault error interrupt occurred -------------------------------*/
		if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) {
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	095b      	lsrs	r3, r3, #5
 8008152:	f003 0301 	and.w	r3, r3, #1
 8008156:	2b00      	cmp	r3, #0
 8008158:	d014      	beq.n	8008184 <HAL_SPI_IRQHandler+0x124>
			SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800815e:	f043 0201 	orr.w	r2, r3, #1
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	661a      	str	r2, [r3, #96]	; 0x60
			__HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008166:	2300      	movs	r3, #0
 8008168:	60fb      	str	r3, [r7, #12]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	60fb      	str	r3, [r7, #12]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008180:	601a      	str	r2, [r3, #0]
 8008182:	68fb      	ldr	r3, [r7, #12]
		}

		/* SPI Frame error interrupt occurred ------------------------------------*/
		if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET) {
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	0a1b      	lsrs	r3, r3, #8
 8008188:	f003 0301 	and.w	r3, r3, #1
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00c      	beq.n	80081aa <HAL_SPI_IRQHandler+0x14a>
			SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008194:	f043 0208 	orr.w	r2, r3, #8
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	661a      	str	r2, [r3, #96]	; 0x60
			__HAL_SPI_CLEAR_FREFLAG(hspi);
 800819c:	2300      	movs	r3, #0
 800819e:	60bb      	str	r3, [r7, #8]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	60bb      	str	r3, [r7, #8]
 80081a8:	68bb      	ldr	r3, [r7, #8]
		}

		if (hspi->ErrorCode != HAL_SPI_ERROR_NONE) {
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d04f      	beq.n	8008252 <HAL_SPI_IRQHandler+0x1f2>
			/* Disable all interrupts */
			__HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	685a      	ldr	r2, [r3, #4]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80081c0:	605a      	str	r2, [r3, #4]

			hspi->State = HAL_SPI_STATE_READY;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			/* Disable the SPI DMA requests if enabled */
			if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN))) {
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	f003 0302 	and.w	r3, r3, #2
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d104      	bne.n	80081de <HAL_SPI_IRQHandler+0x17e>
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	f003 0301 	and.w	r3, r3, #1
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d034      	beq.n	8008248 <HAL_SPI_IRQHandler+0x1e8>
				CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	685a      	ldr	r2, [r3, #4]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f022 0203 	bic.w	r2, r2, #3
 80081ec:	605a      	str	r2, [r3, #4]

				/* Abort the SPI DMA Rx channel */
				if (hspi->hdmarx != NULL) {
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d011      	beq.n	800821a <HAL_SPI_IRQHandler+0x1ba>
					/* Set the SPI DMA Abort callback :
					 will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
					hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081fa:	4a18      	ldr	r2, [pc, #96]	; (800825c <HAL_SPI_IRQHandler+0x1fc>)
 80081fc:	639a      	str	r2, [r3, #56]	; 0x38
					if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx)) {
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008202:	4618      	mov	r0, r3
 8008204:	f7fc f89a 	bl	800433c <HAL_DMA_Abort_IT>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d005      	beq.n	800821a <HAL_SPI_IRQHandler+0x1ba>
						SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008212:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	661a      	str	r2, [r3, #96]	; 0x60
					}
				}
				/* Abort the SPI DMA Tx channel */
				if (hspi->hdmatx != NULL) {
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800821e:	2b00      	cmp	r3, #0
 8008220:	d016      	beq.n	8008250 <HAL_SPI_IRQHandler+0x1f0>
					/* Set the SPI DMA Abort callback :
					 will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
					hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008226:	4a0d      	ldr	r2, [pc, #52]	; (800825c <HAL_SPI_IRQHandler+0x1fc>)
 8008228:	639a      	str	r2, [r3, #56]	; 0x38
					if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx)) {
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800822e:	4618      	mov	r0, r3
 8008230:	f7fc f884 	bl	800433c <HAL_DMA_Abort_IT>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00a      	beq.n	8008250 <HAL_SPI_IRQHandler+0x1f0>
						SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800823e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	661a      	str	r2, [r3, #96]	; 0x60
				if (hspi->hdmatx != NULL) {
 8008246:	e003      	b.n	8008250 <HAL_SPI_IRQHandler+0x1f0>
			} else {
				/* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
				HAL_SPI_ErrorCallback(hspi);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f7fa fcfb 	bl	8002c44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
			}
		}
		return;
 800824e:	e000      	b.n	8008252 <HAL_SPI_IRQHandler+0x1f2>
				if (hspi->hdmatx != NULL) {
 8008250:	bf00      	nop
		return;
 8008252:	bf00      	nop
	}
}
 8008254:	3720      	adds	r7, #32
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	08008377 	.word	0x08008377

08008260 <HAL_SPI_TxHalfCpltCallback>:
 * @brief  Tx Half Transfer completed callback.
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval None
 */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) {
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
	UNUSED(hspi);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
	 */
}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <SPI_DMATransmitCplt>:
 * @brief  DMA SPI transmit process complete callback.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA module.
 * @retval None
 */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma) {
 8008274:	b580      	push	{r7, lr}
 8008276:	b086      	sub	sp, #24
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
	SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef*) (((DMA_HandleTypeDef*) hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008280:	617b      	str	r3, [r7, #20]
	uint32_t tickstart;

	/* Init tickstart for timeout management*/
	tickstart = HAL_GetTick();
 8008282:	f7fb fd65 	bl	8003d50 <HAL_GetTick>
 8008286:	6138      	str	r0, [r7, #16]

	/* DMA Normal Mode */
	if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC) {
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f003 0320 	and.w	r3, r3, #32
 8008292:	2b20      	cmp	r3, #32
 8008294:	d03b      	beq.n	800830e <SPI_DMATransmitCplt+0x9a>
		/* Disable ERR interrupt */
		__HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	685a      	ldr	r2, [r3, #4]
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f022 0220 	bic.w	r2, r2, #32
 80082a4:	605a      	str	r2, [r3, #4]

		/* Disable Tx DMA Request */
		CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	685a      	ldr	r2, [r3, #4]
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f022 0202 	bic.w	r2, r2, #2
 80082b4:	605a      	str	r2, [r3, #4]

		/* Check the end of the transaction */
		if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK) {
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	2164      	movs	r1, #100	; 0x64
 80082ba:	6978      	ldr	r0, [r7, #20]
 80082bc:	f000 f9e6 	bl	800868c <SPI_EndRxTxTransaction>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d005      	beq.n	80082d2 <SPI_DMATransmitCplt+0x5e>
			SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082ca:	f043 0220 	orr.w	r2, r3, #32
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	661a      	str	r2, [r3, #96]	; 0x60
		}

		/* Clear overrun flag in 2 Lines communication mode because received data is not read */
		if (hspi->Init.Direction == SPI_DIRECTION_2LINES) {
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10a      	bne.n	80082f0 <SPI_DMATransmitCplt+0x7c>
			__HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082da:	2300      	movs	r3, #0
 80082dc:	60fb      	str	r3, [r7, #12]
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	60fb      	str	r3, [r7, #12]
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	60fb      	str	r3, [r7, #12]
 80082ee:	68fb      	ldr	r3, [r7, #12]
		}

		hspi->TxXferCount = 0U;
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	2200      	movs	r2, #0
 80082f4:	87da      	strh	r2, [r3, #62]	; 0x3e
		hspi->State = HAL_SPI_STATE_READY;
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

		if (hspi->ErrorCode != HAL_SPI_ERROR_NONE) {
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008302:	2b00      	cmp	r3, #0
 8008304:	d003      	beq.n	800830e <SPI_DMATransmitCplt+0x9a>
			/* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
			HAL_SPI_ErrorCallback(hspi);
 8008306:	6978      	ldr	r0, [r7, #20]
 8008308:	f7fa fc9c 	bl	8002c44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
			return;
 800830c:	e002      	b.n	8008314 <SPI_DMATransmitCplt+0xa0>
	}
	/* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
	HAL_SPI_TxCpltCallback(hspi);
 800830e:	6978      	ldr	r0, [r7, #20]
 8008310:	f7fa fcae 	bl	8002c70 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008314:	3718      	adds	r7, #24
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <SPI_DMAHalfTransmitCplt>:
 * @brief  DMA SPI half transmit process complete callback.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA module.
 * @retval None
 */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) {
 800831a:	b580      	push	{r7, lr}
 800831c:	b084      	sub	sp, #16
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
	SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef*) (((DMA_HandleTypeDef*) hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008326:	60fb      	str	r3, [r7, #12]

	/* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
	HAL_SPI_TxHalfCpltCallback(hspi);
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f7ff ff99 	bl	8008260 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800832e:	bf00      	nop
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <SPI_DMAError>:
 * @brief  DMA SPI communication error callback.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA module.
 * @retval None
 */
static void SPI_DMAError(DMA_HandleTypeDef *hdma) {
 8008336:	b580      	push	{r7, lr}
 8008338:	b084      	sub	sp, #16
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
	SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef*) (((DMA_HandleTypeDef*) hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008342:	60fb      	str	r3, [r7, #12]

	/* Stop the disable DMA transfer on SPI side */
	CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	685a      	ldr	r2, [r3, #4]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f022 0203 	bic.w	r2, r2, #3
 8008352:	605a      	str	r2, [r3, #4]

	SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008358:	f043 0210 	orr.w	r2, r3, #16
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	661a      	str	r2, [r3, #96]	; 0x60
	hspi->State = HAL_SPI_STATE_READY;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	/* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
	HAL_SPI_ErrorCallback(hspi);
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f7fa fc6b 	bl	8002c44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800836e:	bf00      	nop
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <SPI_DMAAbortOnError>:
 * @brief  DMA SPI communication abort callback, when initiated by HAL services on Error
 *         (To be called at end of DMA Abort procedure following error occurrence).
 * @param  hdma DMA handle.
 * @retval None
 */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma) {
 8008376:	b580      	push	{r7, lr}
 8008378:	b084      	sub	sp, #16
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
	SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef*) (((DMA_HandleTypeDef*) hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008382:	60fb      	str	r3, [r7, #12]
	hspi->RxXferCount = 0U;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2200      	movs	r2, #0
 8008388:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	hspi->TxXferCount = 0U;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	87da      	strh	r2, [r3, #62]	; 0x3e

	/* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
	HAL_SPI_ErrorCallback(hspi);
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f7fa fc56 	bl	8002c44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008398:	bf00      	nop
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <SPI_WaitFlagStateUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
		uint32_t Timeout, uint32_t Tickstart) {
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b088      	sub	sp, #32
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	603b      	str	r3, [r7, #0]
 80083ac:	4613      	mov	r3, r2
 80083ae:	71fb      	strb	r3, [r7, #7]
	__IO uint32_t count;
	uint32_t tmp_timeout;
	uint32_t tmp_tickstart;

	/* Adjust Timeout value  in case of end of transfer */
	tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80083b0:	f7fb fcce 	bl	8003d50 <HAL_GetTick>
 80083b4:	4602      	mov	r2, r0
 80083b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b8:	1a9b      	subs	r3, r3, r2
 80083ba:	683a      	ldr	r2, [r7, #0]
 80083bc:	4413      	add	r3, r2
 80083be:	61fb      	str	r3, [r7, #28]
	tmp_tickstart = HAL_GetTick();
 80083c0:	f7fb fcc6 	bl	8003d50 <HAL_GetTick>
 80083c4:	61b8      	str	r0, [r7, #24]

	/* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
	count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80083c6:	4b39      	ldr	r3, [pc, #228]	; (80084ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	015b      	lsls	r3, r3, #5
 80083cc:	0d1b      	lsrs	r3, r3, #20
 80083ce:	69fa      	ldr	r2, [r7, #28]
 80083d0:	fb02 f303 	mul.w	r3, r2, r3
 80083d4:	617b      	str	r3, [r7, #20]

	while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State) {
 80083d6:	e054      	b.n	8008482 <SPI_WaitFlagStateUntilTimeout+0xe2>
		if (Timeout != HAL_MAX_DELAY) {
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083de:	d050      	beq.n	8008482 <SPI_WaitFlagStateUntilTimeout+0xe2>
			if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U)) {
 80083e0:	f7fb fcb6 	bl	8003d50 <HAL_GetTick>
 80083e4:	4602      	mov	r2, r0
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	69fa      	ldr	r2, [r7, #28]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d902      	bls.n	80083f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d13d      	bne.n	8008472 <SPI_WaitFlagStateUntilTimeout+0xd2>
				/* Disable the SPI and reset the CRC: the CRC value should be cleared
				 on both master and slave sides in order to resynchronize the master
				 and slave for their respective CRC calculation */

				/* Disable TXE, RXNE and ERR interrupts for the interrupt process */
				__HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008404:	605a      	str	r2, [r3, #4]

				if ((hspi->Init.Mode == SPI_MODE_MASTER)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800840e:	d111      	bne.n	8008434 <SPI_WaitFlagStateUntilTimeout+0x94>
						&& ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008418:	d004      	beq.n	8008424 <SPI_WaitFlagStateUntilTimeout+0x84>
								|| (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))) {
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008422:	d107      	bne.n	8008434 <SPI_WaitFlagStateUntilTimeout+0x94>
					/* Disable SPI peripheral */
					__HAL_SPI_DISABLE(hspi);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008432:	601a      	str	r2, [r3, #0]
				}

				/* Reset CRC Calculation */
				if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) {
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800843c:	d10f      	bne.n	800845e <SPI_WaitFlagStateUntilTimeout+0xbe>
					SPI_RESET_CRC(hspi);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800844c:	601a      	str	r2, [r3, #0]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800845c:	601a      	str	r2, [r3, #0]
				}

				hspi->State = HAL_SPI_STATE_READY;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2201      	movs	r2, #1
 8008462:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

				/* Process Unlocked */
				__HAL_UNLOCK(hspi);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2200      	movs	r2, #0
 800846a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

				return HAL_TIMEOUT;
 800846e:	2303      	movs	r3, #3
 8008470:	e017      	b.n	80084a2 <SPI_WaitFlagStateUntilTimeout+0x102>
			}
			/* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
			if (count == 0U) {
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d101      	bne.n	800847c <SPI_WaitFlagStateUntilTimeout+0xdc>
				tmp_timeout = 0U;
 8008478:	2300      	movs	r3, #0
 800847a:	61fb      	str	r3, [r7, #28]
			}
			count--;
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	3b01      	subs	r3, #1
 8008480:	617b      	str	r3, [r7, #20]
	while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State) {
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	689a      	ldr	r2, [r3, #8]
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	4013      	ands	r3, r2
 800848c:	68ba      	ldr	r2, [r7, #8]
 800848e:	429a      	cmp	r2, r3
 8008490:	bf0c      	ite	eq
 8008492:	2301      	moveq	r3, #1
 8008494:	2300      	movne	r3, #0
 8008496:	b2db      	uxtb	r3, r3
 8008498:	461a      	mov	r2, r3
 800849a:	79fb      	ldrb	r3, [r7, #7]
 800849c:	429a      	cmp	r2, r3
 800849e:	d19b      	bne.n	80083d8 <SPI_WaitFlagStateUntilTimeout+0x38>
		}
	}

	return HAL_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3720      	adds	r7, #32
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	20000028 	.word	0x20000028

080084b0 <SPI_WaitFifoStateUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
		uint32_t Timeout, uint32_t Tickstart) {
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b08a      	sub	sp, #40	; 0x28
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	607a      	str	r2, [r7, #4]
 80084bc:	603b      	str	r3, [r7, #0]
	__IO uint32_t count;
	uint32_t tmp_timeout;
	uint32_t tmp_tickstart;
	__IO uint8_t *ptmpreg8;
	__IO uint8_t tmpreg8 = 0;
 80084be:	2300      	movs	r3, #0
 80084c0:	75fb      	strb	r3, [r7, #23]

	/* Adjust Timeout value  in case of end of transfer */
	tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80084c2:	f7fb fc45 	bl	8003d50 <HAL_GetTick>
 80084c6:	4602      	mov	r2, r0
 80084c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ca:	1a9b      	subs	r3, r3, r2
 80084cc:	683a      	ldr	r2, [r7, #0]
 80084ce:	4413      	add	r3, r2
 80084d0:	627b      	str	r3, [r7, #36]	; 0x24
	tmp_tickstart = HAL_GetTick();
 80084d2:	f7fb fc3d 	bl	8003d50 <HAL_GetTick>
 80084d6:	6238      	str	r0, [r7, #32]

	/* Initialize the 8bit temporary pointer */
	ptmpreg8 = (__IO uint8_t*) &hspi->Instance->DR;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	330c      	adds	r3, #12
 80084de:	61fb      	str	r3, [r7, #28]

	/* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
	count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80084e0:	4b3d      	ldr	r3, [pc, #244]	; (80085d8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	4613      	mov	r3, r2
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	4413      	add	r3, r2
 80084ea:	00da      	lsls	r2, r3, #3
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	0d1b      	lsrs	r3, r3, #20
 80084f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084f2:	fb02 f303 	mul.w	r3, r2, r3
 80084f6:	61bb      	str	r3, [r7, #24]

	while ((hspi->Instance->SR & Fifo) != State) {
 80084f8:	e060      	b.n	80085bc <SPI_WaitFifoStateUntilTimeout+0x10c>
		if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY)) {
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008500:	d107      	bne.n	8008512 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d104      	bne.n	8008512 <SPI_WaitFifoStateUntilTimeout+0x62>
			/* Flush Data Register by a blank read */
			tmpreg8 = *ptmpreg8;
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	b2db      	uxtb	r3, r3
 800850e:	75fb      	strb	r3, [r7, #23]
			/* To avoid GCC warning */
			UNUSED(tmpreg8);
 8008510:	7dfb      	ldrb	r3, [r7, #23]
		}

		if (Timeout != HAL_MAX_DELAY) {
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008518:	d050      	beq.n	80085bc <SPI_WaitFifoStateUntilTimeout+0x10c>
			if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U)) {
 800851a:	f7fb fc19 	bl	8003d50 <HAL_GetTick>
 800851e:	4602      	mov	r2, r0
 8008520:	6a3b      	ldr	r3, [r7, #32]
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008526:	429a      	cmp	r2, r3
 8008528:	d902      	bls.n	8008530 <SPI_WaitFifoStateUntilTimeout+0x80>
 800852a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852c:	2b00      	cmp	r3, #0
 800852e:	d13d      	bne.n	80085ac <SPI_WaitFifoStateUntilTimeout+0xfc>
				/* Disable the SPI and reset the CRC: the CRC value should be cleared
				 on both master and slave sides in order to resynchronize the master
				 and slave for their respective CRC calculation */

				/* Disable TXE, RXNE and ERR interrupts for the interrupt process */
				__HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	685a      	ldr	r2, [r3, #4]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800853e:	605a      	str	r2, [r3, #4]

				if ((hspi->Init.Mode == SPI_MODE_MASTER)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008548:	d111      	bne.n	800856e <SPI_WaitFifoStateUntilTimeout+0xbe>
						&& ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008552:	d004      	beq.n	800855e <SPI_WaitFifoStateUntilTimeout+0xae>
								|| (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))) {
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800855c:	d107      	bne.n	800856e <SPI_WaitFifoStateUntilTimeout+0xbe>
					/* Disable SPI peripheral */
					__HAL_SPI_DISABLE(hspi);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800856c:	601a      	str	r2, [r3, #0]
				}

				/* Reset CRC Calculation */
				if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) {
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008576:	d10f      	bne.n	8008598 <SPI_WaitFifoStateUntilTimeout+0xe8>
					SPI_RESET_CRC(hspi);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008586:	601a      	str	r2, [r3, #0]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008596:	601a      	str	r2, [r3, #0]
				}

				hspi->State = HAL_SPI_STATE_READY;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

				/* Process Unlocked */
				__HAL_UNLOCK(hspi);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

				return HAL_TIMEOUT;
 80085a8:	2303      	movs	r3, #3
 80085aa:	e010      	b.n	80085ce <SPI_WaitFifoStateUntilTimeout+0x11e>
			}
			/* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
			if (count == 0U) {
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d101      	bne.n	80085b6 <SPI_WaitFifoStateUntilTimeout+0x106>
				tmp_timeout = 0U;
 80085b2:	2300      	movs	r3, #0
 80085b4:	627b      	str	r3, [r7, #36]	; 0x24
			}
			count--;
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	3b01      	subs	r3, #1
 80085ba:	61bb      	str	r3, [r7, #24]
	while ((hspi->Instance->SR & Fifo) != State) {
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	689a      	ldr	r2, [r3, #8]
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	4013      	ands	r3, r2
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d196      	bne.n	80084fa <SPI_WaitFifoStateUntilTimeout+0x4a>
		}
	}

	return HAL_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3728      	adds	r7, #40	; 0x28
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	20000028 	.word	0x20000028

080085dc <SPI_EndRxTransaction>:
 *               the configuration information for SPI module.
 * @param  Timeout Timeout duration
 * @param  Tickstart tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart) {
 80085dc:	b580      	push	{r7, lr}
 80085de:	b086      	sub	sp, #24
 80085e0:	af02      	add	r7, sp, #8
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]
	if ((hspi->Init.Mode == SPI_MODE_MASTER)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085f0:	d111      	bne.n	8008616 <SPI_EndRxTransaction+0x3a>
			&& ((hspi->Init.Direction == SPI_DIRECTION_1LINE) || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))) {
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085fa:	d004      	beq.n	8008606 <SPI_EndRxTransaction+0x2a>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008604:	d107      	bne.n	8008616 <SPI_EndRxTransaction+0x3a>
		/* Disable SPI peripheral */
		__HAL_SPI_DISABLE(hspi);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008614:	601a      	str	r2, [r3, #0]
	}

	/* Control the BSY flag */
	if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK) {
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	2200      	movs	r2, #0
 800861e:	2180      	movs	r1, #128	; 0x80
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f7ff febd 	bl	80083a0 <SPI_WaitFlagStateUntilTimeout>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d007      	beq.n	800863c <SPI_EndRxTransaction+0x60>
		SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008630:	f043 0220 	orr.w	r2, r3, #32
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	661a      	str	r2, [r3, #96]	; 0x60
		return HAL_TIMEOUT;
 8008638:	2303      	movs	r3, #3
 800863a:	e023      	b.n	8008684 <SPI_EndRxTransaction+0xa8>
	}

	if ((hspi->Init.Mode == SPI_MODE_MASTER)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008644:	d11d      	bne.n	8008682 <SPI_EndRxTransaction+0xa6>
			&& ((hspi->Init.Direction == SPI_DIRECTION_1LINE) || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))) {
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800864e:	d004      	beq.n	800865a <SPI_EndRxTransaction+0x7e>
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008658:	d113      	bne.n	8008682 <SPI_EndRxTransaction+0xa6>
		/* Empty the FRLVL fifo */
		if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK) {
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	2200      	movs	r2, #0
 8008662:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f7ff ff22 	bl	80084b0 <SPI_WaitFifoStateUntilTimeout>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d007      	beq.n	8008682 <SPI_EndRxTransaction+0xa6>
			SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008676:	f043 0220 	orr.w	r2, r3, #32
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	661a      	str	r2, [r3, #96]	; 0x60
			return HAL_TIMEOUT;
 800867e:	2303      	movs	r3, #3
 8008680:	e000      	b.n	8008684 <SPI_EndRxTransaction+0xa8>
		}
	}
	return HAL_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <SPI_EndRxTxTransaction>:
 * @param  hspi SPI handle
 * @param  Timeout Timeout duration
 * @param  Tickstart tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart) {
 800868c:	b580      	push	{r7, lr}
 800868e:	b086      	sub	sp, #24
 8008690:	af02      	add	r7, sp, #8
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	607a      	str	r2, [r7, #4]
	/* Control if the TX fifo is empty */
	if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK) {
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	9300      	str	r3, [sp, #0]
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	2200      	movs	r2, #0
 80086a0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f7ff ff03 	bl	80084b0 <SPI_WaitFifoStateUntilTimeout>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d007      	beq.n	80086c0 <SPI_EndRxTxTransaction+0x34>
		SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086b4:	f043 0220 	orr.w	r2, r3, #32
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	661a      	str	r2, [r3, #96]	; 0x60
		return HAL_TIMEOUT;
 80086bc:	2303      	movs	r3, #3
 80086be:	e027      	b.n	8008710 <SPI_EndRxTxTransaction+0x84>
	}

	/* Control the BSY flag */
	if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK) {
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	9300      	str	r3, [sp, #0]
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	2200      	movs	r2, #0
 80086c8:	2180      	movs	r1, #128	; 0x80
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f7ff fe68 	bl	80083a0 <SPI_WaitFlagStateUntilTimeout>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d007      	beq.n	80086e6 <SPI_EndRxTxTransaction+0x5a>
		SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086da:	f043 0220 	orr.w	r2, r3, #32
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	661a      	str	r2, [r3, #96]	; 0x60
		return HAL_TIMEOUT;
 80086e2:	2303      	movs	r3, #3
 80086e4:	e014      	b.n	8008710 <SPI_EndRxTxTransaction+0x84>
	}

	/* Control if the RX fifo is empty */
	if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK) {
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f7ff fedc 	bl	80084b0 <SPI_WaitFifoStateUntilTimeout>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d007      	beq.n	800870e <SPI_EndRxTxTransaction+0x82>
		SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008702:	f043 0220 	orr.w	r2, r3, #32
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	661a      	str	r2, [r3, #96]	; 0x60
		return HAL_TIMEOUT;
 800870a:	2303      	movs	r3, #3
 800870c:	e000      	b.n	8008710 <SPI_EndRxTxTransaction+0x84>
	}

	return HAL_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <HAL_UART_Init>:
 * @brief Initialize the UART mode according to the specified
 *        parameters in the UART_InitTypeDef and initialize the associated handle.
 * @param huart UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart) {
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
	/* Check the UART handle allocation */
	if (huart == NULL) {
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d101      	bne.n	800872a <HAL_UART_Init+0x12>
		return HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	e040      	b.n	80087ac <HAL_UART_Init+0x94>
	} else {
		/* Check the parameters */
		assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
	}

	if (huart->gState == HAL_UART_STATE_RESET) {
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800872e:	2b00      	cmp	r3, #0
 8008730:	d106      	bne.n	8008740 <HAL_UART_Init+0x28>
		/* Allocate lock resource and initialize it */
		huart->Lock = HAL_UNLOCKED;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
		/* Init the low level hardware : GPIO, CLOCK */
		HAL_UART_MspInit(huart);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f7f9 fd1a 	bl	8002174 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
	}

	huart->gState = HAL_UART_STATE_BUSY;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2224      	movs	r2, #36	; 0x24
 8008744:	679a      	str	r2, [r3, #120]	; 0x78

	__HAL_UART_DISABLE(huart);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f022 0201 	bic.w	r2, r2, #1
 8008754:	601a      	str	r2, [r3, #0]

	/* Set the UART Communication parameters */
	if (UART_SetConfig(huart) == HAL_ERROR) {
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f82c 	bl	80087b4 <UART_SetConfig>
 800875c:	4603      	mov	r3, r0
 800875e:	2b01      	cmp	r3, #1
 8008760:	d101      	bne.n	8008766 <HAL_UART_Init+0x4e>
		return HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	e022      	b.n	80087ac <HAL_UART_Init+0x94>
	}

	if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT) {
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876a:	2b00      	cmp	r3, #0
 800876c:	d002      	beq.n	8008774 <HAL_UART_Init+0x5c>
		UART_AdvFeatureConfig(huart);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 fa4c 	bl	8008c0c <UART_AdvFeatureConfig>
	}

	/* In asynchronous mode, the following bits must be kept cleared:
	 - LINEN and CLKEN bits in the USART_CR2 register,
	 - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
	CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	685a      	ldr	r2, [r3, #4]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008782:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	689a      	ldr	r2, [r3, #8]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008792:	609a      	str	r2, [r3, #8]

	__HAL_UART_ENABLE(huart);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f042 0201 	orr.w	r2, r2, #1
 80087a2:	601a      	str	r2, [r3, #0]

	/* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
	return (UART_CheckIdleState(huart));
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 fad3 	bl	8008d50 <UART_CheckIdleState>
 80087aa:	4603      	mov	r3, r0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <UART_SetConfig>:
/**
 * @brief Configure the UART peripheral.
 * @param huart UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart) {
 80087b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087b8:	b08a      	sub	sp, #40	; 0x28
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	60f8      	str	r0, [r7, #12]
	uint32_t tmpreg;
	uint16_t brrtemp;
	UART_ClockSourceTypeDef clocksource;
	uint32_t usartdiv;
	HAL_StatusTypeDef ret = HAL_OK;
 80087be:	2300      	movs	r3, #0
 80087c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	 *  the UART Word Length, Parity, Mode and oversampling:
	 *  set the M bits according to huart->Init.WordLength value
	 *  set PCE and PS bits according to huart->Init.Parity value
	 *  set TE and RE bits according to huart->Init.Mode value
	 *  set OVER8 bit according to huart->Init.OverSampling value */
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	689a      	ldr	r2, [r3, #8]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	431a      	orrs	r2, r3
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	695b      	ldr	r3, [r3, #20]
 80087d2:	431a      	orrs	r2, r3
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	69db      	ldr	r3, [r3, #28]
 80087d8:	4313      	orrs	r3, r2
 80087da:	627b      	str	r3, [r7, #36]	; 0x24
	MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	4bb4      	ldr	r3, [pc, #720]	; (8008ab4 <UART_SetConfig+0x300>)
 80087e4:	4013      	ands	r3, r2
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	6812      	ldr	r2, [r2, #0]
 80087ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087ec:	430b      	orrs	r3, r1
 80087ee:	6013      	str	r3, [r2, #0]

	/*-------------------------- USART CR2 Configuration -----------------------*/
	/* Configure the UART Stop Bits: Set STOP[13:12] bits according
	 * to huart->Init.StopBits value */
	MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	68da      	ldr	r2, [r3, #12]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	430a      	orrs	r2, r1
 8008804:	605a      	str	r2, [r3, #4]
	/* Configure
	 * - UART HardWare Flow Control: set CTSE and RTSE bits according
	 *   to huart->Init.HwFlowCtl value
	 * - one-bit sampling method versus three samples' majority rule according
	 *   to huart->Init.OneBitSampling (not applicable to LPUART) */
	tmpreg = (uint32_t) huart->Init.HwFlowCtl;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	699b      	ldr	r3, [r3, #24]
 800880a:	627b      	str	r3, [r7, #36]	; 0x24

	if (!(UART_INSTANCE_LOWPOWER(huart))) {
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4aa9      	ldr	r2, [pc, #676]	; (8008ab8 <UART_SetConfig+0x304>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d004      	beq.n	8008820 <UART_SetConfig+0x6c>
		tmpreg |= huart->Init.OneBitSampling;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800881c:	4313      	orrs	r3, r2
 800881e:	627b      	str	r3, [r7, #36]	; 0x24
	}
	MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008830:	430a      	orrs	r2, r1
 8008832:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

	/*-------------------------- USART BRR Configuration -----------------------*/
	UART_GETCLOCKSOURCE(huart, clocksource);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4aa0      	ldr	r2, [pc, #640]	; (8008abc <UART_SetConfig+0x308>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d126      	bne.n	800888c <UART_SetConfig+0xd8>
 800883e:	4ba0      	ldr	r3, [pc, #640]	; (8008ac0 <UART_SetConfig+0x30c>)
 8008840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008844:	f003 0303 	and.w	r3, r3, #3
 8008848:	2b03      	cmp	r3, #3
 800884a:	d81b      	bhi.n	8008884 <UART_SetConfig+0xd0>
 800884c:	a201      	add	r2, pc, #4	; (adr r2, 8008854 <UART_SetConfig+0xa0>)
 800884e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008852:	bf00      	nop
 8008854:	08008865 	.word	0x08008865
 8008858:	08008875 	.word	0x08008875
 800885c:	0800886d 	.word	0x0800886d
 8008860:	0800887d 	.word	0x0800887d
 8008864:	2301      	movs	r3, #1
 8008866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800886a:	e080      	b.n	800896e <UART_SetConfig+0x1ba>
 800886c:	2302      	movs	r3, #2
 800886e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008872:	e07c      	b.n	800896e <UART_SetConfig+0x1ba>
 8008874:	2304      	movs	r3, #4
 8008876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800887a:	e078      	b.n	800896e <UART_SetConfig+0x1ba>
 800887c:	2308      	movs	r3, #8
 800887e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008882:	e074      	b.n	800896e <UART_SetConfig+0x1ba>
 8008884:	2310      	movs	r3, #16
 8008886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800888a:	e070      	b.n	800896e <UART_SetConfig+0x1ba>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a8c      	ldr	r2, [pc, #560]	; (8008ac4 <UART_SetConfig+0x310>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d138      	bne.n	8008908 <UART_SetConfig+0x154>
 8008896:	4b8a      	ldr	r3, [pc, #552]	; (8008ac0 <UART_SetConfig+0x30c>)
 8008898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800889c:	f003 030c 	and.w	r3, r3, #12
 80088a0:	2b0c      	cmp	r3, #12
 80088a2:	d82d      	bhi.n	8008900 <UART_SetConfig+0x14c>
 80088a4:	a201      	add	r2, pc, #4	; (adr r2, 80088ac <UART_SetConfig+0xf8>)
 80088a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088aa:	bf00      	nop
 80088ac:	080088e1 	.word	0x080088e1
 80088b0:	08008901 	.word	0x08008901
 80088b4:	08008901 	.word	0x08008901
 80088b8:	08008901 	.word	0x08008901
 80088bc:	080088f1 	.word	0x080088f1
 80088c0:	08008901 	.word	0x08008901
 80088c4:	08008901 	.word	0x08008901
 80088c8:	08008901 	.word	0x08008901
 80088cc:	080088e9 	.word	0x080088e9
 80088d0:	08008901 	.word	0x08008901
 80088d4:	08008901 	.word	0x08008901
 80088d8:	08008901 	.word	0x08008901
 80088dc:	080088f9 	.word	0x080088f9
 80088e0:	2300      	movs	r3, #0
 80088e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088e6:	e042      	b.n	800896e <UART_SetConfig+0x1ba>
 80088e8:	2302      	movs	r3, #2
 80088ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088ee:	e03e      	b.n	800896e <UART_SetConfig+0x1ba>
 80088f0:	2304      	movs	r3, #4
 80088f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088f6:	e03a      	b.n	800896e <UART_SetConfig+0x1ba>
 80088f8:	2308      	movs	r3, #8
 80088fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088fe:	e036      	b.n	800896e <UART_SetConfig+0x1ba>
 8008900:	2310      	movs	r3, #16
 8008902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008906:	e032      	b.n	800896e <UART_SetConfig+0x1ba>
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a6a      	ldr	r2, [pc, #424]	; (8008ab8 <UART_SetConfig+0x304>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d12a      	bne.n	8008968 <UART_SetConfig+0x1b4>
 8008912:	4b6b      	ldr	r3, [pc, #428]	; (8008ac0 <UART_SetConfig+0x30c>)
 8008914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008918:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800891c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008920:	d01a      	beq.n	8008958 <UART_SetConfig+0x1a4>
 8008922:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008926:	d81b      	bhi.n	8008960 <UART_SetConfig+0x1ac>
 8008928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800892c:	d00c      	beq.n	8008948 <UART_SetConfig+0x194>
 800892e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008932:	d815      	bhi.n	8008960 <UART_SetConfig+0x1ac>
 8008934:	2b00      	cmp	r3, #0
 8008936:	d003      	beq.n	8008940 <UART_SetConfig+0x18c>
 8008938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800893c:	d008      	beq.n	8008950 <UART_SetConfig+0x19c>
 800893e:	e00f      	b.n	8008960 <UART_SetConfig+0x1ac>
 8008940:	2300      	movs	r3, #0
 8008942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008946:	e012      	b.n	800896e <UART_SetConfig+0x1ba>
 8008948:	2302      	movs	r3, #2
 800894a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800894e:	e00e      	b.n	800896e <UART_SetConfig+0x1ba>
 8008950:	2304      	movs	r3, #4
 8008952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008956:	e00a      	b.n	800896e <UART_SetConfig+0x1ba>
 8008958:	2308      	movs	r3, #8
 800895a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800895e:	e006      	b.n	800896e <UART_SetConfig+0x1ba>
 8008960:	2310      	movs	r3, #16
 8008962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008966:	e002      	b.n	800896e <UART_SetConfig+0x1ba>
 8008968:	2310      	movs	r3, #16
 800896a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	/* Check LPUART instance */
	if (UART_INSTANCE_LOWPOWER(huart)) {
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a51      	ldr	r2, [pc, #324]	; (8008ab8 <UART_SetConfig+0x304>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d17a      	bne.n	8008a6e <UART_SetConfig+0x2ba>
		/* Retrieve frequency clock */
		switch (clocksource) {
 8008978:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800897c:	2b08      	cmp	r3, #8
 800897e:	d824      	bhi.n	80089ca <UART_SetConfig+0x216>
 8008980:	a201      	add	r2, pc, #4	; (adr r2, 8008988 <UART_SetConfig+0x1d4>)
 8008982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008986:	bf00      	nop
 8008988:	080089ad 	.word	0x080089ad
 800898c:	080089cb 	.word	0x080089cb
 8008990:	080089b5 	.word	0x080089b5
 8008994:	080089cb 	.word	0x080089cb
 8008998:	080089bb 	.word	0x080089bb
 800899c:	080089cb 	.word	0x080089cb
 80089a0:	080089cb 	.word	0x080089cb
 80089a4:	080089cb 	.word	0x080089cb
 80089a8:	080089c3 	.word	0x080089c3
		case UART_CLOCKSOURCE_PCLK1:
			pclk = HAL_RCC_GetPCLK1Freq();
 80089ac:	f7fc fdb8 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 80089b0:	61f8      	str	r0, [r7, #28]
			break;
 80089b2:	e010      	b.n	80089d6 <UART_SetConfig+0x222>
		case UART_CLOCKSOURCE_HSI:
			pclk = (uint32_t) HSI_VALUE;
 80089b4:	4b44      	ldr	r3, [pc, #272]	; (8008ac8 <UART_SetConfig+0x314>)
 80089b6:	61fb      	str	r3, [r7, #28]
			break;
 80089b8:	e00d      	b.n	80089d6 <UART_SetConfig+0x222>
		case UART_CLOCKSOURCE_SYSCLK:
			pclk = HAL_RCC_GetSysClockFreq();
 80089ba:	f7fc fd19 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 80089be:	61f8      	str	r0, [r7, #28]
			break;
 80089c0:	e009      	b.n	80089d6 <UART_SetConfig+0x222>
		case UART_CLOCKSOURCE_LSE:
			pclk = (uint32_t) LSE_VALUE;
 80089c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089c6:	61fb      	str	r3, [r7, #28]
			break;
 80089c8:	e005      	b.n	80089d6 <UART_SetConfig+0x222>
		default:
			pclk = 0U;
 80089ca:	2300      	movs	r3, #0
 80089cc:	61fb      	str	r3, [r7, #28]
			ret = HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			break;
 80089d4:	bf00      	nop
		}

		/* If proper clock source reported */
		if (pclk != 0U) {
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f000 8107 	beq.w	8008bec <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
			/* No Prescaler applicable */
			/* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
			if ((pclk < (3U * huart->Init.BaudRate)) || (pclk > (4096U * huart->Init.BaudRate))) {
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	685a      	ldr	r2, [r3, #4]
 80089e2:	4613      	mov	r3, r2
 80089e4:	005b      	lsls	r3, r3, #1
 80089e6:	4413      	add	r3, r2
 80089e8:	69fa      	ldr	r2, [r7, #28]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d305      	bcc.n	80089fa <UART_SetConfig+0x246>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	031b      	lsls	r3, r3, #12
 80089f4:	69fa      	ldr	r2, [r7, #28]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d903      	bls.n	8008a02 <UART_SetConfig+0x24e>
				ret = HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008a00:	e0f4      	b.n	8008bec <UART_SetConfig+0x438>
			} else {
				usartdiv = (uint32_t) (UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	2200      	movs	r2, #0
 8008a06:	461c      	mov	r4, r3
 8008a08:	4615      	mov	r5, r2
 8008a0a:	f04f 0200 	mov.w	r2, #0
 8008a0e:	f04f 0300 	mov.w	r3, #0
 8008a12:	022b      	lsls	r3, r5, #8
 8008a14:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008a18:	0222      	lsls	r2, r4, #8
 8008a1a:	68f9      	ldr	r1, [r7, #12]
 8008a1c:	6849      	ldr	r1, [r1, #4]
 8008a1e:	0849      	lsrs	r1, r1, #1
 8008a20:	2000      	movs	r0, #0
 8008a22:	4688      	mov	r8, r1
 8008a24:	4681      	mov	r9, r0
 8008a26:	eb12 0a08 	adds.w	sl, r2, r8
 8008a2a:	eb43 0b09 	adc.w	fp, r3, r9
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	603b      	str	r3, [r7, #0]
 8008a36:	607a      	str	r2, [r7, #4]
 8008a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a3c:	4650      	mov	r0, sl
 8008a3e:	4659      	mov	r1, fp
 8008a40:	f7f8 f902 	bl	8000c48 <__aeabi_uldivmod>
 8008a44:	4602      	mov	r2, r0
 8008a46:	460b      	mov	r3, r1
 8008a48:	4613      	mov	r3, r2
 8008a4a:	61bb      	str	r3, [r7, #24]
				if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX)) {
 8008a4c:	69bb      	ldr	r3, [r7, #24]
 8008a4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a52:	d308      	bcc.n	8008a66 <UART_SetConfig+0x2b2>
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a5a:	d204      	bcs.n	8008a66 <UART_SetConfig+0x2b2>
					huart->Instance->BRR = usartdiv;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	69ba      	ldr	r2, [r7, #24]
 8008a62:	60da      	str	r2, [r3, #12]
 8008a64:	e0c2      	b.n	8008bec <UART_SetConfig+0x438>
				} else {
					ret = HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008a6c:	e0be      	b.n	8008bec <UART_SetConfig+0x438>
			} /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
		} /* if (pclk != 0) */
	}
	/* Check UART Over Sampling to set Baud Rate Register */
	else if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	69db      	ldr	r3, [r3, #28]
 8008a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a76:	d16a      	bne.n	8008b4e <UART_SetConfig+0x39a>
		switch (clocksource) {
 8008a78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a7c:	2b08      	cmp	r3, #8
 8008a7e:	d834      	bhi.n	8008aea <UART_SetConfig+0x336>
 8008a80:	a201      	add	r2, pc, #4	; (adr r2, 8008a88 <UART_SetConfig+0x2d4>)
 8008a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a86:	bf00      	nop
 8008a88:	08008aad 	.word	0x08008aad
 8008a8c:	08008acd 	.word	0x08008acd
 8008a90:	08008ad5 	.word	0x08008ad5
 8008a94:	08008aeb 	.word	0x08008aeb
 8008a98:	08008adb 	.word	0x08008adb
 8008a9c:	08008aeb 	.word	0x08008aeb
 8008aa0:	08008aeb 	.word	0x08008aeb
 8008aa4:	08008aeb 	.word	0x08008aeb
 8008aa8:	08008ae3 	.word	0x08008ae3
		case UART_CLOCKSOURCE_PCLK1:
			pclk = HAL_RCC_GetPCLK1Freq();
 8008aac:	f7fc fd38 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 8008ab0:	61f8      	str	r0, [r7, #28]
			break;
 8008ab2:	e020      	b.n	8008af6 <UART_SetConfig+0x342>
 8008ab4:	efff69f3 	.word	0xefff69f3
 8008ab8:	40008000 	.word	0x40008000
 8008abc:	40013800 	.word	0x40013800
 8008ac0:	40021000 	.word	0x40021000
 8008ac4:	40004400 	.word	0x40004400
 8008ac8:	00f42400 	.word	0x00f42400
		case UART_CLOCKSOURCE_PCLK2:
			pclk = HAL_RCC_GetPCLK2Freq();
 8008acc:	f7fc fd3e 	bl	800554c <HAL_RCC_GetPCLK2Freq>
 8008ad0:	61f8      	str	r0, [r7, #28]
			break;
 8008ad2:	e010      	b.n	8008af6 <UART_SetConfig+0x342>
		case UART_CLOCKSOURCE_HSI:
			pclk = (uint32_t) HSI_VALUE;
 8008ad4:	4b4c      	ldr	r3, [pc, #304]	; (8008c08 <UART_SetConfig+0x454>)
 8008ad6:	61fb      	str	r3, [r7, #28]
			break;
 8008ad8:	e00d      	b.n	8008af6 <UART_SetConfig+0x342>
		case UART_CLOCKSOURCE_SYSCLK:
			pclk = HAL_RCC_GetSysClockFreq();
 8008ada:	f7fc fc89 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8008ade:	61f8      	str	r0, [r7, #28]
			break;
 8008ae0:	e009      	b.n	8008af6 <UART_SetConfig+0x342>
		case UART_CLOCKSOURCE_LSE:
			pclk = (uint32_t) LSE_VALUE;
 8008ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ae6:	61fb      	str	r3, [r7, #28]
			break;
 8008ae8:	e005      	b.n	8008af6 <UART_SetConfig+0x342>
		default:
			pclk = 0U;
 8008aea:	2300      	movs	r3, #0
 8008aec:	61fb      	str	r3, [r7, #28]
			ret = HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			break;
 8008af4:	bf00      	nop
		}

		/* USARTDIV must be greater than or equal to 0d16 */
		if (pclk != 0U) {
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d077      	beq.n	8008bec <UART_SetConfig+0x438>
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
			usartdiv = (uint32_t) (UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	005a      	lsls	r2, r3, #1
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	085b      	lsrs	r3, r3, #1
 8008b06:	441a      	add	r2, r3
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b10:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 8008b12:	69bb      	ldr	r3, [r7, #24]
 8008b14:	2b0f      	cmp	r3, #15
 8008b16:	d916      	bls.n	8008b46 <UART_SetConfig+0x392>
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b1e:	d212      	bcs.n	8008b46 <UART_SetConfig+0x392>
				brrtemp = (uint16_t) (usartdiv & 0xFFF0U);
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	f023 030f 	bic.w	r3, r3, #15
 8008b28:	82fb      	strh	r3, [r7, #22]
				brrtemp |= (uint16_t) ((usartdiv & (uint16_t) 0x000FU) >> 1U);
 8008b2a:	69bb      	ldr	r3, [r7, #24]
 8008b2c:	085b      	lsrs	r3, r3, #1
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	f003 0307 	and.w	r3, r3, #7
 8008b34:	b29a      	uxth	r2, r3
 8008b36:	8afb      	ldrh	r3, [r7, #22]
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	82fb      	strh	r3, [r7, #22]
				huart->Instance->BRR = brrtemp;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	8afa      	ldrh	r2, [r7, #22]
 8008b42:	60da      	str	r2, [r3, #12]
 8008b44:	e052      	b.n	8008bec <UART_SetConfig+0x438>
			} else {
				ret = HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008b4c:	e04e      	b.n	8008bec <UART_SetConfig+0x438>
			}
		}
	} else {
		switch (clocksource) {
 8008b4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b52:	2b08      	cmp	r3, #8
 8008b54:	d827      	bhi.n	8008ba6 <UART_SetConfig+0x3f2>
 8008b56:	a201      	add	r2, pc, #4	; (adr r2, 8008b5c <UART_SetConfig+0x3a8>)
 8008b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b5c:	08008b81 	.word	0x08008b81
 8008b60:	08008b89 	.word	0x08008b89
 8008b64:	08008b91 	.word	0x08008b91
 8008b68:	08008ba7 	.word	0x08008ba7
 8008b6c:	08008b97 	.word	0x08008b97
 8008b70:	08008ba7 	.word	0x08008ba7
 8008b74:	08008ba7 	.word	0x08008ba7
 8008b78:	08008ba7 	.word	0x08008ba7
 8008b7c:	08008b9f 	.word	0x08008b9f
		case UART_CLOCKSOURCE_PCLK1:
			pclk = HAL_RCC_GetPCLK1Freq();
 8008b80:	f7fc fcce 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 8008b84:	61f8      	str	r0, [r7, #28]
			break;
 8008b86:	e014      	b.n	8008bb2 <UART_SetConfig+0x3fe>
		case UART_CLOCKSOURCE_PCLK2:
			pclk = HAL_RCC_GetPCLK2Freq();
 8008b88:	f7fc fce0 	bl	800554c <HAL_RCC_GetPCLK2Freq>
 8008b8c:	61f8      	str	r0, [r7, #28]
			break;
 8008b8e:	e010      	b.n	8008bb2 <UART_SetConfig+0x3fe>
		case UART_CLOCKSOURCE_HSI:
			pclk = (uint32_t) HSI_VALUE;
 8008b90:	4b1d      	ldr	r3, [pc, #116]	; (8008c08 <UART_SetConfig+0x454>)
 8008b92:	61fb      	str	r3, [r7, #28]
			break;
 8008b94:	e00d      	b.n	8008bb2 <UART_SetConfig+0x3fe>
		case UART_CLOCKSOURCE_SYSCLK:
			pclk = HAL_RCC_GetSysClockFreq();
 8008b96:	f7fc fc2b 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8008b9a:	61f8      	str	r0, [r7, #28]
			break;
 8008b9c:	e009      	b.n	8008bb2 <UART_SetConfig+0x3fe>
		case UART_CLOCKSOURCE_LSE:
			pclk = (uint32_t) LSE_VALUE;
 8008b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ba2:	61fb      	str	r3, [r7, #28]
			break;
 8008ba4:	e005      	b.n	8008bb2 <UART_SetConfig+0x3fe>
		default:
			pclk = 0U;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	61fb      	str	r3, [r7, #28]
			ret = HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			break;
 8008bb0:	bf00      	nop
		}

		if (pclk != 0U) {
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d019      	beq.n	8008bec <UART_SetConfig+0x438>
			/* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
			usartdiv = (uint32_t) (UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	085a      	lsrs	r2, r3, #1
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	441a      	add	r2, r3
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	2b0f      	cmp	r3, #15
 8008bd0:	d909      	bls.n	8008be6 <UART_SetConfig+0x432>
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bd8:	d205      	bcs.n	8008be6 <UART_SetConfig+0x432>
				huart->Instance->BRR = (uint16_t) usartdiv;
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	b29a      	uxth	r2, r3
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	60da      	str	r2, [r3, #12]
 8008be4:	e002      	b.n	8008bec <UART_SetConfig+0x438>
			} else {
				ret = HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

	/* Clear ISR function pointers */
	huart->RxISR = NULL;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	665a      	str	r2, [r3, #100]	; 0x64
	huart->TxISR = NULL;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	669a      	str	r2, [r3, #104]	; 0x68

	return ret;
 8008bf8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3728      	adds	r7, #40	; 0x28
 8008c00:	46bd      	mov	sp, r7
 8008c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c06:	bf00      	nop
 8008c08:	00f42400 	.word	0x00f42400

08008c0c <UART_AdvFeatureConfig>:
/**
 * @brief Configure the UART peripheral advanced features.
 * @param huart UART handle.
 * @retval None
 */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart) {
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
	/* Check whether the set of advanced features to configure is properly set */
	assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

	/* if required, configure TX pin active level inversion */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT)) {
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c18:	f003 0301 	and.w	r3, r3, #1
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00a      	beq.n	8008c36 <UART_AdvFeatureConfig+0x2a>
		assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	430a      	orrs	r2, r1
 8008c34:	605a      	str	r2, [r3, #4]
	}

	/* if required, configure RX pin active level inversion */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT)) {
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3a:	f003 0302 	and.w	r3, r3, #2
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00a      	beq.n	8008c58 <UART_AdvFeatureConfig+0x4c>
		assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	430a      	orrs	r2, r1
 8008c56:	605a      	str	r2, [r3, #4]
	}

	/* if required, configure data inversion */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT)) {
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5c:	f003 0304 	and.w	r3, r3, #4
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d00a      	beq.n	8008c7a <UART_AdvFeatureConfig+0x6e>
		assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	430a      	orrs	r2, r1
 8008c78:	605a      	str	r2, [r3, #4]
	}

	/* if required, configure RX/TX pins swap */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT)) {
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7e:	f003 0308 	and.w	r3, r3, #8
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00a      	beq.n	8008c9c <UART_AdvFeatureConfig+0x90>
		assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	430a      	orrs	r2, r1
 8008c9a:	605a      	str	r2, [r3, #4]
	}

	/* if required, configure RX overrun detection disabling */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT)) {
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca0:	f003 0310 	and.w	r3, r3, #16
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00a      	beq.n	8008cbe <UART_AdvFeatureConfig+0xb2>
		assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
		MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	430a      	orrs	r2, r1
 8008cbc:	609a      	str	r2, [r3, #8]
	}

	/* if required, configure DMA disabling on reception error */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT)) {
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc2:	f003 0320 	and.w	r3, r3, #32
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00a      	beq.n	8008ce0 <UART_AdvFeatureConfig+0xd4>
		assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
		MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	430a      	orrs	r2, r1
 8008cde:	609a      	str	r2, [r3, #8]
	}

	/* if required, configure auto Baud rate detection scheme */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT)) {
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d01a      	beq.n	8008d22 <UART_AdvFeatureConfig+0x116>
		assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
		assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	430a      	orrs	r2, r1
 8008d00:	605a      	str	r2, [r3, #4]
		/* set auto Baudrate detection parameters if detection is enabled */
		if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE) {
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d0a:	d10a      	bne.n	8008d22 <UART_AdvFeatureConfig+0x116>
			assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
			MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	430a      	orrs	r2, r1
 8008d20:	605a      	str	r2, [r3, #4]
		}
	}

	/* if required, configure MSB first on communication line */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT)) {
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00a      	beq.n	8008d44 <UART_AdvFeatureConfig+0x138>
		assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	430a      	orrs	r2, r1
 8008d42:	605a      	str	r2, [r3, #4]
	}
}
 8008d44:	bf00      	nop
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <UART_CheckIdleState>:
/**
 * @brief Check the UART Idle State.
 * @param huart UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart) {
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b086      	sub	sp, #24
 8008d54:	af02      	add	r7, sp, #8
 8008d56:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;

	/* Initialize the UART ErrorCode */
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	/* Init tickstart for timeout management */
	tickstart = HAL_GetTick();
 8008d60:	f7fa fff6 	bl	8003d50 <HAL_GetTick>
 8008d64:	60f8      	str	r0, [r7, #12]

	/* Check if the Transmitter is enabled */
	if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE) {
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f003 0308 	and.w	r3, r3, #8
 8008d70:	2b08      	cmp	r3, #8
 8008d72:	d10e      	bne.n	8008d92 <UART_CheckIdleState+0x42>
		/* Wait until TEACK flag is set */
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK) {
 8008d74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d78:	9300      	str	r3, [sp, #0]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 f82d 	bl	8008de2 <UART_WaitOnFlagUntilTimeout>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d001      	beq.n	8008d92 <UART_CheckIdleState+0x42>
			/* Timeout occurred */
			return HAL_TIMEOUT;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	e023      	b.n	8008dda <UART_CheckIdleState+0x8a>
		}
	}

	/* Check if the Receiver is enabled */
	if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE) {
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 0304 	and.w	r3, r3, #4
 8008d9c:	2b04      	cmp	r3, #4
 8008d9e:	d10e      	bne.n	8008dbe <UART_CheckIdleState+0x6e>
		/* Wait until REACK flag is set */
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK) {
 8008da0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008da4:	9300      	str	r3, [sp, #0]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f817 	bl	8008de2 <UART_WaitOnFlagUntilTimeout>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d001      	beq.n	8008dbe <UART_CheckIdleState+0x6e>
			/* Timeout occurred */
			return HAL_TIMEOUT;
 8008dba:	2303      	movs	r3, #3
 8008dbc:	e00d      	b.n	8008dda <UART_CheckIdleState+0x8a>
		}
	}

	/* Initialize the UART State */
	huart->gState = HAL_UART_STATE_READY;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2220      	movs	r2, #32
 8008dc2:	679a      	str	r2, [r3, #120]	; 0x78
	huart->RxState = HAL_UART_STATE_READY;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2220      	movs	r2, #32
 8008dc8:	67da      	str	r2, [r3, #124]	; 0x7c
	huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	661a      	str	r2, [r3, #96]	; 0x60

	__HAL_UNLOCK(huart);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

	return HAL_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <UART_WaitOnFlagUntilTimeout>:
 * @param Tickstart Tick start value
 * @param Timeout   Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
		uint32_t Tickstart, uint32_t Timeout) {
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b09c      	sub	sp, #112	; 0x70
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	60f8      	str	r0, [r7, #12]
 8008dea:	60b9      	str	r1, [r7, #8]
 8008dec:	603b      	str	r3, [r7, #0]
 8008dee:	4613      	mov	r3, r2
 8008df0:	71fb      	strb	r3, [r7, #7]
	/* Wait until flag is set */
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 8008df2:	e0a5      	b.n	8008f40 <UART_WaitOnFlagUntilTimeout+0x15e>
		/* Check for the Timeout */
		if (Timeout != HAL_MAX_DELAY) {
 8008df4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dfa:	f000 80a1 	beq.w	8008f40 <UART_WaitOnFlagUntilTimeout+0x15e>
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8008dfe:	f7fa ffa7 	bl	8003d50 <HAL_GetTick>
 8008e02:	4602      	mov	r2, r0
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	1ad3      	subs	r3, r2, r3
 8008e08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d302      	bcc.n	8008e14 <UART_WaitOnFlagUntilTimeout+0x32>
 8008e0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d13e      	bne.n	8008e92 <UART_WaitOnFlagUntilTimeout+0xb0>
				 interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
				ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	653b      	str	r3, [r7, #80]	; 0x50
 \return        value of type uint32_t at (*ptr)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr) {
	uint32_t result;

	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e1c:	e853 3f00 	ldrex	r3, [r3]
 8008e20:	64fb      	str	r3, [r7, #76]	; 0x4c
	return (result);
 8008e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e28:	667b      	str	r3, [r7, #100]	; 0x64
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	461a      	mov	r2, r3
 8008e30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e34:	65ba      	str	r2, [r7, #88]	; 0x58
 \return          1  Function failed
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr) {
	uint32_t result;

	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008e38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e3a:	e841 2300 	strex	r3, r2, [r1]
 8008e3e:	657b      	str	r3, [r7, #84]	; 0x54
	return (result);
 8008e40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1e6      	bne.n	8008e14 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
				ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	3308      	adds	r3, #8
 8008e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e50:	e853 3f00 	ldrex	r3, [r3]
 8008e54:	63bb      	str	r3, [r7, #56]	; 0x38
	return (result);
 8008e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e58:	f023 0301 	bic.w	r3, r3, #1
 8008e5c:	663b      	str	r3, [r7, #96]	; 0x60
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	3308      	adds	r3, #8
 8008e64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008e66:	64ba      	str	r2, [r7, #72]	; 0x48
 8008e68:	647b      	str	r3, [r7, #68]	; 0x44
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e6e:	e841 2300 	strex	r3, r2, [r1]
 8008e72:	643b      	str	r3, [r7, #64]	; 0x40
	return (result);
 8008e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d1e5      	bne.n	8008e46 <UART_WaitOnFlagUntilTimeout+0x64>

				huart->gState = HAL_UART_STATE_READY;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2220      	movs	r2, #32
 8008e7e:	679a      	str	r2, [r3, #120]	; 0x78
				huart->RxState = HAL_UART_STATE_READY;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2220      	movs	r2, #32
 8008e84:	67da      	str	r2, [r3, #124]	; 0x7c

				__HAL_UNLOCK(huart);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

				return HAL_TIMEOUT;
 8008e8e:	2303      	movs	r3, #3
 8008e90:	e067      	b.n	8008f62 <UART_WaitOnFlagUntilTimeout+0x180>
			}

			if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) {
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 0304 	and.w	r3, r3, #4
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d04f      	beq.n	8008f40 <UART_WaitOnFlagUntilTimeout+0x15e>
				if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET) {
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	69db      	ldr	r3, [r3, #28]
 8008ea6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008eaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008eae:	d147      	bne.n	8008f40 <UART_WaitOnFlagUntilTimeout+0x15e>
					/* Clear Receiver Timeout flag*/
					__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008eb8:	621a      	str	r2, [r3, #32]
					 interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
					ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	62bb      	str	r3, [r7, #40]	; 0x28
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec2:	e853 3f00 	ldrex	r3, [r3]
 8008ec6:	627b      	str	r3, [r7, #36]	; 0x24
	return (result);
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ece:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ed8:	637b      	str	r3, [r7, #52]	; 0x34
 8008eda:	633a      	str	r2, [r7, #48]	; 0x30
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008edc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ede:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ee0:	e841 2300 	strex	r3, r2, [r1]
 8008ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
	return (result);
 8008ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d1e6      	bne.n	8008eba <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	3308      	adds	r3, #8
 8008ef2:	617b      	str	r3, [r7, #20]
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	e853 3f00 	ldrex	r3, [r3]
 8008efa:	613b      	str	r3, [r7, #16]
	return (result);
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	f023 0301 	bic.w	r3, r3, #1
 8008f02:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	3308      	adds	r3, #8
 8008f0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008f0c:	623a      	str	r2, [r7, #32]
 8008f0e:	61fb      	str	r3, [r7, #28]
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f10:	69f9      	ldr	r1, [r7, #28]
 8008f12:	6a3a      	ldr	r2, [r7, #32]
 8008f14:	e841 2300 	strex	r3, r2, [r1]
 8008f18:	61bb      	str	r3, [r7, #24]
	return (result);
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d1e5      	bne.n	8008eec <UART_WaitOnFlagUntilTimeout+0x10a>

					huart->gState = HAL_UART_STATE_READY;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2220      	movs	r2, #32
 8008f24:	679a      	str	r2, [r3, #120]	; 0x78
					huart->RxState = HAL_UART_STATE_READY;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2220      	movs	r2, #32
 8008f2a:	67da      	str	r2, [r3, #124]	; 0x7c
					huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2220      	movs	r2, #32
 8008f30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

					/* Process Unlocked */
					__HAL_UNLOCK(huart);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

					return HAL_TIMEOUT;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	e010      	b.n	8008f62 <UART_WaitOnFlagUntilTimeout+0x180>
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	69da      	ldr	r2, [r3, #28]
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	4013      	ands	r3, r2
 8008f4a:	68ba      	ldr	r2, [r7, #8]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	bf0c      	ite	eq
 8008f50:	2301      	moveq	r3, #1
 8008f52:	2300      	movne	r3, #0
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	461a      	mov	r2, r3
 8008f58:	79fb      	ldrb	r3, [r7, #7]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	f43f af4a 	beq.w	8008df4 <UART_WaitOnFlagUntilTimeout+0x12>
				}
			}
		}
	}
	return HAL_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3770      	adds	r7, #112	; 0x70
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
	...

08008f6c <arm_q15_to_float>:
 8008f6c:	b470      	push	{r4, r5, r6}
 8008f6e:	0896      	lsrs	r6, r2, #2
 8008f70:	d038      	beq.n	8008fe4 <arm_q15_to_float+0x78>
 8008f72:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8009038 <arm_q15_to_float+0xcc>
 8008f76:	f100 0408 	add.w	r4, r0, #8
 8008f7a:	f101 0310 	add.w	r3, r1, #16
 8008f7e:	4635      	mov	r5, r6
 8008f80:	f934 cc08 	ldrsh.w	ip, [r4, #-8]
 8008f84:	ee07 ca90 	vmov	s15, ip
 8008f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f8c:	3d01      	subs	r5, #1
 8008f8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f92:	f104 0408 	add.w	r4, r4, #8
 8008f96:	ed43 7a04 	vstr	s15, [r3, #-16]
 8008f9a:	f934 cc0e 	ldrsh.w	ip, [r4, #-14]
 8008f9e:	ee07 ca90 	vmov	s15, ip
 8008fa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fa6:	f103 0310 	add.w	r3, r3, #16
 8008faa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008fae:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 8008fb2:	f934 cc0c 	ldrsh.w	ip, [r4, #-12]
 8008fb6:	ee07 ca90 	vmov	s15, ip
 8008fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008fc2:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8008fc6:	f934 cc0a 	ldrsh.w	ip, [r4, #-10]
 8008fca:	ee07 ca90 	vmov	s15, ip
 8008fce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008fd6:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8008fda:	d1d1      	bne.n	8008f80 <arm_q15_to_float+0x14>
 8008fdc:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 8008fe0:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8008fe4:	f012 0203 	ands.w	r2, r2, #3
 8008fe8:	d023      	beq.n	8009032 <arm_q15_to_float+0xc6>
 8008fea:	f9b0 3000 	ldrsh.w	r3, [r0]
 8008fee:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8009038 <arm_q15_to_float+0xcc>
 8008ff2:	ee07 3a90 	vmov	s15, r3
 8008ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ffa:	3a01      	subs	r2, #1
 8008ffc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009000:	edc1 7a00 	vstr	s15, [r1]
 8009004:	d015      	beq.n	8009032 <arm_q15_to_float+0xc6>
 8009006:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800900a:	ee07 3a90 	vmov	s15, r3
 800900e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009012:	2a01      	cmp	r2, #1
 8009014:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009018:	edc1 7a01 	vstr	s15, [r1, #4]
 800901c:	d009      	beq.n	8009032 <arm_q15_to_float+0xc6>
 800901e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8009022:	ee07 3a90 	vmov	s15, r3
 8009026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800902a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800902e:	edc1 7a02 	vstr	s15, [r1, #8]
 8009032:	bc70      	pop	{r4, r5, r6}
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop
 8009038:	38000000 	.word	0x38000000

0800903c <arm_copy_q15>:
 800903c:	ea5f 0c92 	movs.w	ip, r2, lsr #2
 8009040:	d046      	beq.n	80090d0 <arm_copy_q15+0x94>
 8009042:	f101 0308 	add.w	r3, r1, #8
 8009046:	b4f0      	push	{r4, r5, r6, r7}
 8009048:	f100 0608 	add.w	r6, r0, #8
 800904c:	461c      	mov	r4, r3
 800904e:	42b1      	cmp	r1, r6
 8009050:	bf38      	it	cc
 8009052:	42a0      	cmpcc	r0, r4
 8009054:	ea41 0500 	orr.w	r5, r1, r0
 8009058:	4633      	mov	r3, r6
 800905a:	bf2c      	ite	cs
 800905c:	2301      	movcs	r3, #1
 800905e:	2300      	movcc	r3, #0
 8009060:	f015 0f07 	tst.w	r5, #7
 8009064:	bf18      	it	ne
 8009066:	2300      	movne	r3, #0
 8009068:	b323      	cbz	r3, 80090b4 <arm_copy_q15+0x78>
 800906a:	f10c 33ff 	add.w	r3, ip, #4294967295
 800906e:	2b04      	cmp	r3, #4
 8009070:	d920      	bls.n	80090b4 <arm_copy_q15+0x78>
 8009072:	f1a0 0508 	sub.w	r5, r0, #8
 8009076:	460c      	mov	r4, r1
 8009078:	2300      	movs	r3, #0
 800907a:	e9f5 6702 	ldrd	r6, r7, [r5, #8]!
 800907e:	3301      	adds	r3, #1
 8009080:	459c      	cmp	ip, r3
 8009082:	e8e4 6702 	strd	r6, r7, [r4], #8
 8009086:	d1f8      	bne.n	800907a <arm_copy_q15+0x3e>
 8009088:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800908c:	f012 0203 	ands.w	r2, r2, #3
 8009090:	4460      	add	r0, ip
 8009092:	4461      	add	r1, ip
 8009094:	d00c      	beq.n	80090b0 <arm_copy_q15+0x74>
 8009096:	f9b0 3000 	ldrsh.w	r3, [r0]
 800909a:	800b      	strh	r3, [r1, #0]
 800909c:	3a01      	subs	r2, #1
 800909e:	d007      	beq.n	80090b0 <arm_copy_q15+0x74>
 80090a0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80090a4:	804b      	strh	r3, [r1, #2]
 80090a6:	2a01      	cmp	r2, #1
 80090a8:	bf1c      	itt	ne
 80090aa:	f9b0 3004 	ldrshne.w	r3, [r0, #4]
 80090ae:	808b      	strhne	r3, [r1, #4]
 80090b0:	bcf0      	pop	{r4, r5, r6, r7}
 80090b2:	4770      	bx	lr
 80090b4:	460c      	mov	r4, r1
 80090b6:	4603      	mov	r3, r0
 80090b8:	4665      	mov	r5, ip
 80090ba:	681e      	ldr	r6, [r3, #0]
 80090bc:	6026      	str	r6, [r4, #0]
 80090be:	685e      	ldr	r6, [r3, #4]
 80090c0:	6066      	str	r6, [r4, #4]
 80090c2:	3d01      	subs	r5, #1
 80090c4:	f103 0308 	add.w	r3, r3, #8
 80090c8:	f104 0408 	add.w	r4, r4, #8
 80090cc:	d1f5      	bne.n	80090ba <arm_copy_q15+0x7e>
 80090ce:	e7db      	b.n	8009088 <arm_copy_q15+0x4c>
 80090d0:	f012 0203 	ands.w	r2, r2, #3
 80090d4:	d00d      	beq.n	80090f2 <arm_copy_q15+0xb6>
 80090d6:	f9b0 3000 	ldrsh.w	r3, [r0]
 80090da:	800b      	strh	r3, [r1, #0]
 80090dc:	3a01      	subs	r2, #1
 80090de:	d008      	beq.n	80090f2 <arm_copy_q15+0xb6>
 80090e0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80090e4:	804b      	strh	r3, [r1, #2]
 80090e6:	2a01      	cmp	r2, #1
 80090e8:	d003      	beq.n	80090f2 <arm_copy_q15+0xb6>
 80090ea:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80090ee:	808b      	strh	r3, [r1, #4]
 80090f0:	4770      	bx	lr
 80090f2:	4770      	bx	lr

080090f4 <arm_rfft_32_fast_init_f32>:
 80090f4:	b178      	cbz	r0, 8009116 <arm_rfft_32_fast_init_f32+0x22>
 80090f6:	b430      	push	{r4, r5}
 80090f8:	4908      	ldr	r1, [pc, #32]	; (800911c <arm_rfft_32_fast_init_f32+0x28>)
 80090fa:	4a09      	ldr	r2, [pc, #36]	; (8009120 <arm_rfft_32_fast_init_f32+0x2c>)
 80090fc:	2310      	movs	r3, #16
 80090fe:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009102:	8003      	strh	r3, [r0, #0]
 8009104:	2520      	movs	r5, #32
 8009106:	2414      	movs	r4, #20
 8009108:	4b06      	ldr	r3, [pc, #24]	; (8009124 <arm_rfft_32_fast_init_f32+0x30>)
 800910a:	8205      	strh	r5, [r0, #16]
 800910c:	8184      	strh	r4, [r0, #12]
 800910e:	6143      	str	r3, [r0, #20]
 8009110:	bc30      	pop	{r4, r5}
 8009112:	2000      	movs	r0, #0
 8009114:	4770      	bx	lr
 8009116:	f04f 30ff 	mov.w	r0, #4294967295
 800911a:	4770      	bx	lr
 800911c:	08014bb8 	.word	0x08014bb8
 8009120:	080194f0 	.word	0x080194f0
 8009124:	08022270 	.word	0x08022270

08009128 <arm_rfft_64_fast_init_f32>:
 8009128:	b178      	cbz	r0, 800914a <arm_rfft_64_fast_init_f32+0x22>
 800912a:	b430      	push	{r4, r5}
 800912c:	4908      	ldr	r1, [pc, #32]	; (8009150 <arm_rfft_64_fast_init_f32+0x28>)
 800912e:	4a09      	ldr	r2, [pc, #36]	; (8009154 <arm_rfft_64_fast_init_f32+0x2c>)
 8009130:	2320      	movs	r3, #32
 8009132:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009136:	8003      	strh	r3, [r0, #0]
 8009138:	2540      	movs	r5, #64	; 0x40
 800913a:	2430      	movs	r4, #48	; 0x30
 800913c:	4b06      	ldr	r3, [pc, #24]	; (8009158 <arm_rfft_64_fast_init_f32+0x30>)
 800913e:	8205      	strh	r5, [r0, #16]
 8009140:	8184      	strh	r4, [r0, #12]
 8009142:	6143      	str	r3, [r0, #20]
 8009144:	bc30      	pop	{r4, r5}
 8009146:	2000      	movs	r0, #0
 8009148:	4770      	bx	lr
 800914a:	f04f 30ff 	mov.w	r0, #4294967295
 800914e:	4770      	bx	lr
 8009150:	08016d10 	.word	0x08016d10
 8009154:	0801dd70 	.word	0x0801dd70
 8009158:	08026af0 	.word	0x08026af0

0800915c <arm_rfft_256_fast_init_f32>:
 800915c:	b180      	cbz	r0, 8009180 <arm_rfft_256_fast_init_f32+0x24>
 800915e:	b430      	push	{r4, r5}
 8009160:	4909      	ldr	r1, [pc, #36]	; (8009188 <arm_rfft_256_fast_init_f32+0x2c>)
 8009162:	4a0a      	ldr	r2, [pc, #40]	; (800918c <arm_rfft_256_fast_init_f32+0x30>)
 8009164:	2380      	movs	r3, #128	; 0x80
 8009166:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800916a:	8003      	strh	r3, [r0, #0]
 800916c:	f44f 7580 	mov.w	r5, #256	; 0x100
 8009170:	24d0      	movs	r4, #208	; 0xd0
 8009172:	4b07      	ldr	r3, [pc, #28]	; (8009190 <arm_rfft_256_fast_init_f32+0x34>)
 8009174:	8205      	strh	r5, [r0, #16]
 8009176:	8184      	strh	r4, [r0, #12]
 8009178:	6143      	str	r3, [r0, #20]
 800917a:	bc30      	pop	{r4, r5}
 800917c:	2000      	movs	r0, #0
 800917e:	4770      	bx	lr
 8009180:	f04f 30ff 	mov.w	r0, #4294967295
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop
 8009188:	08014a18 	.word	0x08014a18
 800918c:	080190f0 	.word	0x080190f0
 8009190:	08021e70 	.word	0x08021e70

08009194 <arm_rfft_512_fast_init_f32>:
 8009194:	b190      	cbz	r0, 80091bc <arm_rfft_512_fast_init_f32+0x28>
 8009196:	b430      	push	{r4, r5}
 8009198:	490a      	ldr	r1, [pc, #40]	; (80091c4 <arm_rfft_512_fast_init_f32+0x30>)
 800919a:	4a0b      	ldr	r2, [pc, #44]	; (80091c8 <arm_rfft_512_fast_init_f32+0x34>)
 800919c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091a0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80091a4:	8003      	strh	r3, [r0, #0]
 80091a6:	f44f 7500 	mov.w	r5, #512	; 0x200
 80091aa:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 80091ae:	4b07      	ldr	r3, [pc, #28]	; (80091cc <arm_rfft_512_fast_init_f32+0x38>)
 80091b0:	8205      	strh	r5, [r0, #16]
 80091b2:	8184      	strh	r4, [r0, #12]
 80091b4:	6143      	str	r3, [r0, #20]
 80091b6:	bc30      	pop	{r4, r5}
 80091b8:	2000      	movs	r0, #0
 80091ba:	4770      	bx	lr
 80091bc:	f04f 30ff 	mov.w	r0, #4294967295
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	080169a0 	.word	0x080169a0
 80091c8:	0801d570 	.word	0x0801d570
 80091cc:	080262f0 	.word	0x080262f0

080091d0 <arm_rfft_1024_fast_init_f32>:
 80091d0:	b190      	cbz	r0, 80091f8 <arm_rfft_1024_fast_init_f32+0x28>
 80091d2:	b430      	push	{r4, r5}
 80091d4:	490a      	ldr	r1, [pc, #40]	; (8009200 <arm_rfft_1024_fast_init_f32+0x30>)
 80091d6:	4a0b      	ldr	r2, [pc, #44]	; (8009204 <arm_rfft_1024_fast_init_f32+0x34>)
 80091d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091dc:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80091e0:	8003      	strh	r3, [r0, #0]
 80091e2:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80091e6:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 80091ea:	4b07      	ldr	r3, [pc, #28]	; (8009208 <arm_rfft_1024_fast_init_f32+0x38>)
 80091ec:	8205      	strh	r5, [r0, #16]
 80091ee:	8184      	strh	r4, [r0, #12]
 80091f0:	6143      	str	r3, [r0, #20]
 80091f2:	bc30      	pop	{r4, r5}
 80091f4:	2000      	movs	r0, #0
 80091f6:	4770      	bx	lr
 80091f8:	f04f 30ff 	mov.w	r0, #4294967295
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop
 8009200:	08016d70 	.word	0x08016d70
 8009204:	0801de70 	.word	0x0801de70
 8009208:	0801ee70 	.word	0x0801ee70

0800920c <arm_rfft_2048_fast_init_f32>:
 800920c:	b190      	cbz	r0, 8009234 <arm_rfft_2048_fast_init_f32+0x28>
 800920e:	b430      	push	{r4, r5}
 8009210:	490a      	ldr	r1, [pc, #40]	; (800923c <arm_rfft_2048_fast_init_f32+0x30>)
 8009212:	4a0b      	ldr	r2, [pc, #44]	; (8009240 <arm_rfft_2048_fast_init_f32+0x34>)
 8009214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009218:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800921c:	8003      	strh	r3, [r0, #0]
 800921e:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8009222:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8009226:	4b07      	ldr	r3, [pc, #28]	; (8009244 <arm_rfft_2048_fast_init_f32+0x38>)
 8009228:	8205      	strh	r5, [r0, #16]
 800922a:	8184      	strh	r4, [r0, #12]
 800922c:	6143      	str	r3, [r0, #20]
 800922e:	bc30      	pop	{r4, r5}
 8009230:	2000      	movs	r0, #0
 8009232:	4770      	bx	lr
 8009234:	f04f 30ff 	mov.w	r0, #4294967295
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	08013c08 	.word	0x08013c08
 8009240:	080170f0 	.word	0x080170f0
 8009244:	0801fe70 	.word	0x0801fe70

08009248 <arm_rfft_4096_fast_init_f32>:
 8009248:	b190      	cbz	r0, 8009270 <arm_rfft_4096_fast_init_f32+0x28>
 800924a:	b430      	push	{r4, r5}
 800924c:	490a      	ldr	r1, [pc, #40]	; (8009278 <arm_rfft_4096_fast_init_f32+0x30>)
 800924e:	4a0b      	ldr	r2, [pc, #44]	; (800927c <arm_rfft_4096_fast_init_f32+0x34>)
 8009250:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009254:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009258:	8003      	strh	r3, [r0, #0]
 800925a:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800925e:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8009262:	4b07      	ldr	r3, [pc, #28]	; (8009280 <arm_rfft_4096_fast_init_f32+0x38>)
 8009264:	8205      	strh	r5, [r0, #16]
 8009266:	8184      	strh	r4, [r0, #12]
 8009268:	6143      	str	r3, [r0, #20]
 800926a:	bc30      	pop	{r4, r5}
 800926c:	2000      	movs	r0, #0
 800926e:	4770      	bx	lr
 8009270:	f04f 30ff 	mov.w	r0, #4294967295
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	08014be0 	.word	0x08014be0
 800927c:	08019570 	.word	0x08019570
 8009280:	080222f0 	.word	0x080222f0

08009284 <arm_rfft_fast_init_f32>:
 8009284:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009288:	d01f      	beq.n	80092ca <arm_rfft_fast_init_f32+0x46>
 800928a:	d90b      	bls.n	80092a4 <arm_rfft_fast_init_f32+0x20>
 800928c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8009290:	d019      	beq.n	80092c6 <arm_rfft_fast_init_f32+0x42>
 8009292:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8009296:	d012      	beq.n	80092be <arm_rfft_fast_init_f32+0x3a>
 8009298:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800929c:	d00d      	beq.n	80092ba <arm_rfft_fast_init_f32+0x36>
 800929e:	f04f 30ff 	mov.w	r0, #4294967295
 80092a2:	4770      	bx	lr
 80092a4:	2940      	cmp	r1, #64	; 0x40
 80092a6:	d00c      	beq.n	80092c2 <arm_rfft_fast_init_f32+0x3e>
 80092a8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80092ac:	d003      	beq.n	80092b6 <arm_rfft_fast_init_f32+0x32>
 80092ae:	2920      	cmp	r1, #32
 80092b0:	d1f5      	bne.n	800929e <arm_rfft_fast_init_f32+0x1a>
 80092b2:	4b07      	ldr	r3, [pc, #28]	; (80092d0 <arm_rfft_fast_init_f32+0x4c>)
 80092b4:	4718      	bx	r3
 80092b6:	4b07      	ldr	r3, [pc, #28]	; (80092d4 <arm_rfft_fast_init_f32+0x50>)
 80092b8:	4718      	bx	r3
 80092ba:	4b07      	ldr	r3, [pc, #28]	; (80092d8 <arm_rfft_fast_init_f32+0x54>)
 80092bc:	4718      	bx	r3
 80092be:	4b07      	ldr	r3, [pc, #28]	; (80092dc <arm_rfft_fast_init_f32+0x58>)
 80092c0:	4718      	bx	r3
 80092c2:	4b07      	ldr	r3, [pc, #28]	; (80092e0 <arm_rfft_fast_init_f32+0x5c>)
 80092c4:	e7f6      	b.n	80092b4 <arm_rfft_fast_init_f32+0x30>
 80092c6:	4b07      	ldr	r3, [pc, #28]	; (80092e4 <arm_rfft_fast_init_f32+0x60>)
 80092c8:	e7f4      	b.n	80092b4 <arm_rfft_fast_init_f32+0x30>
 80092ca:	4b07      	ldr	r3, [pc, #28]	; (80092e8 <arm_rfft_fast_init_f32+0x64>)
 80092cc:	e7f2      	b.n	80092b4 <arm_rfft_fast_init_f32+0x30>
 80092ce:	bf00      	nop
 80092d0:	080090f5 	.word	0x080090f5
 80092d4:	0800915d 	.word	0x0800915d
 80092d8:	080091d1 	.word	0x080091d1
 80092dc:	08009249 	.word	0x08009249
 80092e0:	08009129 	.word	0x08009129
 80092e4:	0800920d 	.word	0x0800920d
 80092e8:	08009195 	.word	0x08009195

080092ec <stage_rfft_f32>:
 80092ec:	b410      	push	{r4}
 80092ee:	edd1 7a00 	vldr	s15, [r1]
 80092f2:	ed91 7a01 	vldr	s14, [r1, #4]
 80092f6:	8804      	ldrh	r4, [r0, #0]
 80092f8:	6940      	ldr	r0, [r0, #20]
 80092fa:	ee37 7a07 	vadd.f32	s14, s14, s14
 80092fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009302:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8009306:	ee77 6a87 	vadd.f32	s13, s15, s14
 800930a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800930e:	3c01      	subs	r4, #1
 8009310:	ee26 7a84 	vmul.f32	s14, s13, s8
 8009314:	ee67 7a84 	vmul.f32	s15, s15, s8
 8009318:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800931c:	ed82 7a00 	vstr	s14, [r2]
 8009320:	edc2 7a01 	vstr	s15, [r2, #4]
 8009324:	3010      	adds	r0, #16
 8009326:	3210      	adds	r2, #16
 8009328:	3b08      	subs	r3, #8
 800932a:	3110      	adds	r1, #16
 800932c:	ed11 5a02 	vldr	s10, [r1, #-8]
 8009330:	ed93 7a02 	vldr	s14, [r3, #8]
 8009334:	ed50 6a02 	vldr	s13, [r0, #-8]
 8009338:	edd3 4a03 	vldr	s9, [r3, #12]
 800933c:	ed51 7a01 	vldr	s15, [r1, #-4]
 8009340:	ed10 6a01 	vldr	s12, [r0, #-4]
 8009344:	ee77 5a45 	vsub.f32	s11, s14, s10
 8009348:	ee37 7a05 	vadd.f32	s14, s14, s10
 800934c:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8009350:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8009354:	ee66 5a25 	vmul.f32	s11, s12, s11
 8009358:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800935c:	ee37 7a23 	vadd.f32	s14, s14, s7
 8009360:	ee66 6a85 	vmul.f32	s13, s13, s10
 8009364:	ee26 6a05 	vmul.f32	s12, s12, s10
 8009368:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800936c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009370:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009374:	ee27 7a04 	vmul.f32	s14, s14, s8
 8009378:	ee67 7a84 	vmul.f32	s15, s15, s8
 800937c:	3c01      	subs	r4, #1
 800937e:	ed02 7a02 	vstr	s14, [r2, #-8]
 8009382:	ed42 7a01 	vstr	s15, [r2, #-4]
 8009386:	f1a3 0308 	sub.w	r3, r3, #8
 800938a:	f101 0108 	add.w	r1, r1, #8
 800938e:	f100 0008 	add.w	r0, r0, #8
 8009392:	f102 0208 	add.w	r2, r2, #8
 8009396:	d1c9      	bne.n	800932c <stage_rfft_f32+0x40>
 8009398:	f85d 4b04 	ldr.w	r4, [sp], #4
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop

080093a0 <merge_rfft_f32>:
 80093a0:	b410      	push	{r4}
 80093a2:	edd1 7a00 	vldr	s15, [r1]
 80093a6:	edd1 6a01 	vldr	s13, [r1, #4]
 80093aa:	8804      	ldrh	r4, [r0, #0]
 80093ac:	6940      	ldr	r0, [r0, #20]
 80093ae:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80093b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80093b6:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 80093ba:	ee27 7a04 	vmul.f32	s14, s14, s8
 80093be:	ee67 7a84 	vmul.f32	s15, s15, s8
 80093c2:	3c01      	subs	r4, #1
 80093c4:	ed82 7a00 	vstr	s14, [r2]
 80093c8:	edc2 7a01 	vstr	s15, [r2, #4]
 80093cc:	b3dc      	cbz	r4, 8009446 <merge_rfft_f32+0xa6>
 80093ce:	00e3      	lsls	r3, r4, #3
 80093d0:	3b08      	subs	r3, #8
 80093d2:	440b      	add	r3, r1
 80093d4:	3010      	adds	r0, #16
 80093d6:	3210      	adds	r2, #16
 80093d8:	3110      	adds	r1, #16
 80093da:	ed11 5a02 	vldr	s10, [r1, #-8]
 80093de:	ed93 7a02 	vldr	s14, [r3, #8]
 80093e2:	ed50 6a02 	vldr	s13, [r0, #-8]
 80093e6:	edd3 4a03 	vldr	s9, [r3, #12]
 80093ea:	ed51 7a01 	vldr	s15, [r1, #-4]
 80093ee:	ed10 6a01 	vldr	s12, [r0, #-4]
 80093f2:	ee75 5a47 	vsub.f32	s11, s10, s14
 80093f6:	ee37 7a05 	vadd.f32	s14, s14, s10
 80093fa:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80093fe:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8009402:	ee66 5a25 	vmul.f32	s11, s12, s11
 8009406:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800940a:	ee37 7a63 	vsub.f32	s14, s14, s7
 800940e:	ee66 6a85 	vmul.f32	s13, s13, s10
 8009412:	ee26 6a05 	vmul.f32	s12, s12, s10
 8009416:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800941a:	ee37 7a46 	vsub.f32	s14, s14, s12
 800941e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009422:	ee27 7a04 	vmul.f32	s14, s14, s8
 8009426:	ee67 7a84 	vmul.f32	s15, s15, s8
 800942a:	3c01      	subs	r4, #1
 800942c:	ed02 7a02 	vstr	s14, [r2, #-8]
 8009430:	ed42 7a01 	vstr	s15, [r2, #-4]
 8009434:	f1a3 0308 	sub.w	r3, r3, #8
 8009438:	f101 0108 	add.w	r1, r1, #8
 800943c:	f100 0008 	add.w	r0, r0, #8
 8009440:	f102 0208 	add.w	r2, r2, #8
 8009444:	d1c9      	bne.n	80093da <merge_rfft_f32+0x3a>
 8009446:	f85d 4b04 	ldr.w	r4, [sp], #4
 800944a:	4770      	bx	lr

0800944c <arm_rfft_fast_f32>:
 800944c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009450:	8a05      	ldrh	r5, [r0, #16]
 8009452:	086d      	lsrs	r5, r5, #1
 8009454:	8005      	strh	r5, [r0, #0]
 8009456:	4604      	mov	r4, r0
 8009458:	4616      	mov	r6, r2
 800945a:	461d      	mov	r5, r3
 800945c:	b14b      	cbz	r3, 8009472 <arm_rfft_fast_f32+0x26>
 800945e:	f7ff ff9f 	bl	80093a0 <merge_rfft_f32>
 8009462:	462a      	mov	r2, r5
 8009464:	4631      	mov	r1, r6
 8009466:	4620      	mov	r0, r4
 8009468:	2301      	movs	r3, #1
 800946a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800946e:	f000 bb33 	b.w	8009ad8 <arm_cfft_f32>
 8009472:	460f      	mov	r7, r1
 8009474:	461a      	mov	r2, r3
 8009476:	2301      	movs	r3, #1
 8009478:	f000 fb2e 	bl	8009ad8 <arm_cfft_f32>
 800947c:	4632      	mov	r2, r6
 800947e:	4639      	mov	r1, r7
 8009480:	4620      	mov	r0, r4
 8009482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009486:	f7ff bf31 	b.w	80092ec <stage_rfft_f32>
 800948a:	bf00      	nop

0800948c <arm_cfft_radix8by2_f32>:
 800948c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009490:	ed2d 8b08 	vpush	{d8-d11}
 8009494:	4607      	mov	r7, r0
 8009496:	4608      	mov	r0, r1
 8009498:	f8b7 c000 	ldrh.w	ip, [r7]
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	ea4f 015c 	mov.w	r1, ip, lsr #1
 80094a2:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 80094a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80094aa:	f000 80b0 	beq.w	800960e <arm_cfft_radix8by2_f32+0x182>
 80094ae:	008c      	lsls	r4, r1, #2
 80094b0:	3410      	adds	r4, #16
 80094b2:	f100 0310 	add.w	r3, r0, #16
 80094b6:	1906      	adds	r6, r0, r4
 80094b8:	3210      	adds	r2, #16
 80094ba:	4444      	add	r4, r8
 80094bc:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 80094c0:	f108 0510 	add.w	r5, r8, #16
 80094c4:	ed15 2a04 	vldr	s4, [r5, #-16]
 80094c8:	ed55 2a03 	vldr	s5, [r5, #-12]
 80094cc:	ed54 4a04 	vldr	s9, [r4, #-16]
 80094d0:	ed14 4a03 	vldr	s8, [r4, #-12]
 80094d4:	ed14 6a02 	vldr	s12, [r4, #-8]
 80094d8:	ed54 5a01 	vldr	s11, [r4, #-4]
 80094dc:	ed53 3a04 	vldr	s7, [r3, #-16]
 80094e0:	ed15 0a02 	vldr	s0, [r5, #-8]
 80094e4:	ed55 0a01 	vldr	s1, [r5, #-4]
 80094e8:	ed56 6a04 	vldr	s13, [r6, #-16]
 80094ec:	ed16 3a03 	vldr	s6, [r6, #-12]
 80094f0:	ed13 7a03 	vldr	s14, [r3, #-12]
 80094f4:	ed13 5a02 	vldr	s10, [r3, #-8]
 80094f8:	ed53 7a01 	vldr	s15, [r3, #-4]
 80094fc:	ed16 1a02 	vldr	s2, [r6, #-8]
 8009500:	ed56 1a01 	vldr	s3, [r6, #-4]
 8009504:	ee73 ba82 	vadd.f32	s23, s7, s4
 8009508:	ee37 ba22 	vadd.f32	s22, s14, s5
 800950c:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8009510:	ee33 9a04 	vadd.f32	s18, s6, s8
 8009514:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8009518:	ee75 aa00 	vadd.f32	s21, s10, s0
 800951c:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8009520:	ee71 8a06 	vadd.f32	s17, s2, s12
 8009524:	ed43 ba04 	vstr	s23, [r3, #-16]
 8009528:	ed03 ba03 	vstr	s22, [r3, #-12]
 800952c:	ed43 aa02 	vstr	s21, [r3, #-8]
 8009530:	ed03 aa01 	vstr	s20, [r3, #-4]
 8009534:	ed06 8a01 	vstr	s16, [r6, #-4]
 8009538:	ed46 9a04 	vstr	s19, [r6, #-16]
 800953c:	ed06 9a03 	vstr	s18, [r6, #-12]
 8009540:	ed46 8a02 	vstr	s17, [r6, #-8]
 8009544:	ee37 7a62 	vsub.f32	s14, s14, s5
 8009548:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800954c:	ee34 4a43 	vsub.f32	s8, s8, s6
 8009550:	ed52 6a03 	vldr	s13, [r2, #-12]
 8009554:	ed12 3a04 	vldr	s6, [r2, #-16]
 8009558:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800955c:	ee27 8a26 	vmul.f32	s16, s14, s13
 8009560:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8009564:	ee23 2a83 	vmul.f32	s4, s7, s6
 8009568:	ee64 4a83 	vmul.f32	s9, s9, s6
 800956c:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8009570:	ee27 7a03 	vmul.f32	s14, s14, s6
 8009574:	ee64 6a26 	vmul.f32	s13, s8, s13
 8009578:	ee24 4a03 	vmul.f32	s8, s8, s6
 800957c:	ee37 7a63 	vsub.f32	s14, s14, s7
 8009580:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009584:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8009588:	ee32 3a08 	vadd.f32	s6, s4, s16
 800958c:	ed05 7a03 	vstr	s14, [r5, #-12]
 8009590:	ed05 3a04 	vstr	s6, [r5, #-16]
 8009594:	ed04 4a04 	vstr	s8, [r4, #-16]
 8009598:	ed44 6a03 	vstr	s13, [r4, #-12]
 800959c:	ed12 7a01 	vldr	s14, [r2, #-4]
 80095a0:	ee76 6a41 	vsub.f32	s13, s12, s2
 80095a4:	ee35 5a40 	vsub.f32	s10, s10, s0
 80095a8:	ee35 6ae1 	vsub.f32	s12, s11, s3
 80095ac:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80095b0:	ed52 5a02 	vldr	s11, [r2, #-8]
 80095b4:	ee67 3a87 	vmul.f32	s7, s15, s14
 80095b8:	ee66 4a87 	vmul.f32	s9, s13, s14
 80095bc:	ee25 4a25 	vmul.f32	s8, s10, s11
 80095c0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80095c4:	ee25 5a07 	vmul.f32	s10, s10, s14
 80095c8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80095cc:	ee26 7a07 	vmul.f32	s14, s12, s14
 80095d0:	ee26 6a25 	vmul.f32	s12, s12, s11
 80095d4:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80095d8:	ee74 5a23 	vadd.f32	s11, s8, s7
 80095dc:	ee34 6ac6 	vsub.f32	s12, s9, s12
 80095e0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80095e4:	3310      	adds	r3, #16
 80095e6:	4563      	cmp	r3, ip
 80095e8:	ed45 5a02 	vstr	s11, [r5, #-8]
 80095ec:	f106 0610 	add.w	r6, r6, #16
 80095f0:	ed45 7a01 	vstr	s15, [r5, #-4]
 80095f4:	f102 0210 	add.w	r2, r2, #16
 80095f8:	ed04 6a02 	vstr	s12, [r4, #-8]
 80095fc:	ed04 7a01 	vstr	s14, [r4, #-4]
 8009600:	f105 0510 	add.w	r5, r5, #16
 8009604:	f104 0410 	add.w	r4, r4, #16
 8009608:	f47f af5c 	bne.w	80094c4 <arm_cfft_radix8by2_f32+0x38>
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	b28c      	uxth	r4, r1
 8009610:	4621      	mov	r1, r4
 8009612:	2302      	movs	r3, #2
 8009614:	f000 fd1c 	bl	800a050 <arm_radix8_butterfly_f32>
 8009618:	ecbd 8b08 	vpop	{d8-d11}
 800961c:	4621      	mov	r1, r4
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	4640      	mov	r0, r8
 8009622:	2302      	movs	r3, #2
 8009624:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009628:	f000 bd12 	b.w	800a050 <arm_radix8_butterfly_f32>

0800962c <arm_cfft_radix8by4_f32>:
 800962c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009630:	ed2d 8b0a 	vpush	{d8-d12}
 8009634:	b08d      	sub	sp, #52	; 0x34
 8009636:	460d      	mov	r5, r1
 8009638:	910b      	str	r1, [sp, #44]	; 0x2c
 800963a:	8801      	ldrh	r1, [r0, #0]
 800963c:	6842      	ldr	r2, [r0, #4]
 800963e:	900a      	str	r0, [sp, #40]	; 0x28
 8009640:	0849      	lsrs	r1, r1, #1
 8009642:	008b      	lsls	r3, r1, #2
 8009644:	18ee      	adds	r6, r5, r3
 8009646:	18f0      	adds	r0, r6, r3
 8009648:	edd0 5a00 	vldr	s11, [r0]
 800964c:	edd5 7a00 	vldr	s15, [r5]
 8009650:	ed96 7a00 	vldr	s14, [r6]
 8009654:	edd0 3a01 	vldr	s7, [r0, #4]
 8009658:	ed96 4a01 	vldr	s8, [r6, #4]
 800965c:	ed95 5a01 	vldr	s10, [r5, #4]
 8009660:	9008      	str	r0, [sp, #32]
 8009662:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8009666:	18c7      	adds	r7, r0, r3
 8009668:	edd7 4a00 	vldr	s9, [r7]
 800966c:	ed97 3a01 	vldr	s6, [r7, #4]
 8009670:	9701      	str	r7, [sp, #4]
 8009672:	ee77 6a06 	vadd.f32	s13, s14, s12
 8009676:	462c      	mov	r4, r5
 8009678:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800967c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009680:	ee16 ca90 	vmov	ip, s13
 8009684:	f844 cb08 	str.w	ip, [r4], #8
 8009688:	ee75 6a23 	vadd.f32	s13, s10, s7
 800968c:	edd6 5a01 	vldr	s11, [r6, #4]
 8009690:	edd7 2a01 	vldr	s5, [r7, #4]
 8009694:	9404      	str	r4, [sp, #16]
 8009696:	ee35 5a63 	vsub.f32	s10, s10, s7
 800969a:	ee74 3a27 	vadd.f32	s7, s8, s15
 800969e:	ee36 6a47 	vsub.f32	s12, s12, s14
 80096a2:	ee76 5aa5 	vadd.f32	s11, s13, s11
 80096a6:	ee73 3ac3 	vsub.f32	s7, s7, s6
 80096aa:	0849      	lsrs	r1, r1, #1
 80096ac:	f102 0e08 	add.w	lr, r2, #8
 80096b0:	ee76 6ac4 	vsub.f32	s13, s13, s8
 80096b4:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80096b8:	9109      	str	r1, [sp, #36]	; 0x24
 80096ba:	ee35 4a47 	vsub.f32	s8, s10, s14
 80096be:	f1a1 0902 	sub.w	r9, r1, #2
 80096c2:	f8cd e00c 	str.w	lr, [sp, #12]
 80096c6:	4631      	mov	r1, r6
 80096c8:	ee13 ea90 	vmov	lr, s7
 80096cc:	ee36 6a64 	vsub.f32	s12, s12, s9
 80096d0:	ee75 5aa2 	vadd.f32	s11, s11, s5
 80096d4:	4604      	mov	r4, r0
 80096d6:	edc5 5a01 	vstr	s11, [r5, #4]
 80096da:	ee37 7a05 	vadd.f32	s14, s14, s10
 80096de:	f841 eb08 	str.w	lr, [r1], #8
 80096e2:	ee34 5a24 	vadd.f32	s10, s8, s9
 80096e6:	ee16 ea10 	vmov	lr, s12
 80096ea:	ed86 5a01 	vstr	s10, [r6, #4]
 80096ee:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80096f2:	f844 eb08 	str.w	lr, [r4], #8
 80096f6:	ee77 7a83 	vadd.f32	s15, s15, s6
 80096fa:	edc0 6a01 	vstr	s13, [r0, #4]
 80096fe:	9405      	str	r4, [sp, #20]
 8009700:	4604      	mov	r4, r0
 8009702:	ee17 0a90 	vmov	r0, s15
 8009706:	9106      	str	r1, [sp, #24]
 8009708:	ee37 7a64 	vsub.f32	s14, s14, s9
 800970c:	f102 0110 	add.w	r1, r2, #16
 8009710:	46bc      	mov	ip, r7
 8009712:	9100      	str	r1, [sp, #0]
 8009714:	f847 0b08 	str.w	r0, [r7], #8
 8009718:	f102 0118 	add.w	r1, r2, #24
 800971c:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8009720:	9102      	str	r1, [sp, #8]
 8009722:	ed8c 7a01 	vstr	s14, [ip, #4]
 8009726:	9007      	str	r0, [sp, #28]
 8009728:	f000 8134 	beq.w	8009994 <arm_cfft_radix8by4_f32+0x368>
 800972c:	f102 0920 	add.w	r9, r2, #32
 8009730:	f102 0830 	add.w	r8, r2, #48	; 0x30
 8009734:	9a01      	ldr	r2, [sp, #4]
 8009736:	f8dd a000 	ldr.w	sl, [sp]
 800973a:	3b0c      	subs	r3, #12
 800973c:	4683      	mov	fp, r0
 800973e:	4463      	add	r3, ip
 8009740:	f105 0e10 	add.w	lr, r5, #16
 8009744:	f1a4 010c 	sub.w	r1, r4, #12
 8009748:	f104 0510 	add.w	r5, r4, #16
 800974c:	f1a6 0c0c 	sub.w	ip, r6, #12
 8009750:	f1a2 040c 	sub.w	r4, r2, #12
 8009754:	f106 0010 	add.w	r0, r6, #16
 8009758:	3210      	adds	r2, #16
 800975a:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800975e:	ed55 5a02 	vldr	s11, [r5, #-8]
 8009762:	ed50 7a02 	vldr	s15, [r0, #-8]
 8009766:	ed52 1a02 	vldr	s3, [r2, #-8]
 800976a:	ed55 6a01 	vldr	s13, [r5, #-4]
 800976e:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8009772:	ed12 1a01 	vldr	s2, [r2, #-4]
 8009776:	ed10 8a01 	vldr	s16, [r0, #-4]
 800977a:	ee35 4a25 	vadd.f32	s8, s10, s11
 800977e:	ee30 6a26 	vadd.f32	s12, s0, s13
 8009782:	ee37 7a84 	vadd.f32	s14, s15, s8
 8009786:	ee30 0a66 	vsub.f32	s0, s0, s13
 800978a:	ee37 7a21 	vadd.f32	s14, s14, s3
 800978e:	ee75 5a65 	vsub.f32	s11, s10, s11
 8009792:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8009796:	ed10 7a01 	vldr	s14, [r0, #-4]
 800979a:	ed52 6a01 	vldr	s13, [r2, #-4]
 800979e:	ee36 7a07 	vadd.f32	s14, s12, s14
 80097a2:	ee78 aa25 	vadd.f32	s21, s16, s11
 80097a6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80097aa:	ee70 3a67 	vsub.f32	s7, s0, s15
 80097ae:	ed0e 7a01 	vstr	s14, [lr, #-4]
 80097b2:	ed94 7a02 	vldr	s14, [r4, #8]
 80097b6:	ed9c 2a02 	vldr	s4, [ip, #8]
 80097ba:	ed91 ba02 	vldr	s22, [r1, #8]
 80097be:	edd3 9a02 	vldr	s19, [r3, #8]
 80097c2:	edd4 2a01 	vldr	s5, [r4, #4]
 80097c6:	ed9c 9a01 	vldr	s18, [ip, #4]
 80097ca:	ed93 5a01 	vldr	s10, [r3, #4]
 80097ce:	edd1 0a01 	vldr	s1, [r1, #4]
 80097d2:	ee72 6a07 	vadd.f32	s13, s4, s14
 80097d6:	ee32 2a47 	vsub.f32	s4, s4, s14
 80097da:	ee7b 8a26 	vadd.f32	s17, s22, s13
 80097de:	ee79 4a22 	vadd.f32	s9, s18, s5
 80097e2:	ee38 7aa9 	vadd.f32	s14, s17, s19
 80097e6:	ee79 2a62 	vsub.f32	s5, s18, s5
 80097ea:	ed8c 7a02 	vstr	s14, [ip, #8]
 80097ee:	ed91 7a01 	vldr	s14, [r1, #4]
 80097f2:	edd3 8a01 	vldr	s17, [r3, #4]
 80097f6:	ee34 7a87 	vadd.f32	s14, s9, s14
 80097fa:	ee3b 3a69 	vsub.f32	s6, s22, s19
 80097fe:	ee37 7a28 	vadd.f32	s14, s14, s17
 8009802:	ee32 9a60 	vsub.f32	s18, s4, s1
 8009806:	ed8c 7a01 	vstr	s14, [ip, #4]
 800980a:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800980e:	ed1a aa02 	vldr	s20, [sl, #-8]
 8009812:	ee73 8a22 	vadd.f32	s17, s6, s5
 8009816:	ee39 9a05 	vadd.f32	s18, s18, s10
 800981a:	ee7a aac1 	vsub.f32	s21, s21, s2
 800981e:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8009822:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8009826:	ee69 ba07 	vmul.f32	s23, s18, s14
 800982a:	ee6a aa87 	vmul.f32	s21, s21, s14
 800982e:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8009832:	ee63 ca87 	vmul.f32	s25, s7, s14
 8009836:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800983a:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800983e:	ee68 8a87 	vmul.f32	s17, s17, s14
 8009842:	ee73 3aea 	vsub.f32	s7, s7, s21
 8009846:	ee78 8a89 	vadd.f32	s17, s17, s18
 800984a:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800984e:	ee3b aaca 	vsub.f32	s20, s23, s20
 8009852:	ee34 4a67 	vsub.f32	s8, s8, s15
 8009856:	ee76 6acb 	vsub.f32	s13, s13, s22
 800985a:	ee36 6a48 	vsub.f32	s12, s12, s16
 800985e:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8009862:	ed00 7a02 	vstr	s14, [r0, #-8]
 8009866:	ed40 3a01 	vstr	s7, [r0, #-4]
 800986a:	edc1 8a01 	vstr	s17, [r1, #4]
 800986e:	ed81 aa02 	vstr	s20, [r1, #8]
 8009872:	ed59 3a04 	vldr	s7, [r9, #-16]
 8009876:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800987a:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800987e:	ed59 6a03 	vldr	s13, [r9, #-12]
 8009882:	ee34 4a61 	vsub.f32	s8, s8, s3
 8009886:	ee36 6a41 	vsub.f32	s12, s12, s2
 800988a:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800988e:	ee66 9a26 	vmul.f32	s19, s12, s13
 8009892:	ee24 9a23 	vmul.f32	s18, s8, s7
 8009896:	ee26 6a23 	vmul.f32	s12, s12, s7
 800989a:	ee24 4a26 	vmul.f32	s8, s8, s13
 800989e:	ee27 7a26 	vmul.f32	s14, s14, s13
 80098a2:	ee64 6aa6 	vmul.f32	s13, s9, s13
 80098a6:	ee64 4aa3 	vmul.f32	s9, s9, s7
 80098aa:	ee36 6a44 	vsub.f32	s12, s12, s8
 80098ae:	ee37 7a64 	vsub.f32	s14, s14, s9
 80098b2:	ee38 4ae6 	vsub.f32	s8, s17, s13
 80098b6:	ee79 3a29 	vadd.f32	s7, s18, s19
 80098ba:	ee75 6a60 	vsub.f32	s13, s10, s1
 80098be:	ee75 5ac8 	vsub.f32	s11, s11, s16
 80098c2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80098c6:	ed45 3a02 	vstr	s7, [r5, #-8]
 80098ca:	ed05 6a01 	vstr	s12, [r5, #-4]
 80098ce:	ed84 7a01 	vstr	s14, [r4, #4]
 80098d2:	ed84 4a02 	vstr	s8, [r4, #8]
 80098d6:	ee35 6a81 	vadd.f32	s12, s11, s2
 80098da:	ee36 7ac2 	vsub.f32	s14, s13, s4
 80098de:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 80098e2:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 80098e6:	ee33 3a62 	vsub.f32	s6, s6, s5
 80098ea:	ee77 7ae1 	vsub.f32	s15, s15, s3
 80098ee:	ee67 2a26 	vmul.f32	s5, s14, s13
 80098f2:	ee67 4aa6 	vmul.f32	s9, s15, s13
 80098f6:	ee26 5a25 	vmul.f32	s10, s12, s11
 80098fa:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80098fe:	ee26 6a26 	vmul.f32	s12, s12, s13
 8009902:	ee27 7a25 	vmul.f32	s14, s14, s11
 8009906:	ee63 6a26 	vmul.f32	s13, s6, s13
 800990a:	ee23 3a25 	vmul.f32	s6, s6, s11
 800990e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8009912:	ee75 5a24 	vadd.f32	s11, s10, s9
 8009916:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800991a:	ee36 7a87 	vadd.f32	s14, s13, s14
 800991e:	f1bb 0b01 	subs.w	fp, fp, #1
 8009922:	ed42 5a02 	vstr	s11, [r2, #-8]
 8009926:	ed42 7a01 	vstr	s15, [r2, #-4]
 800992a:	f10e 0e08 	add.w	lr, lr, #8
 800992e:	ed83 3a02 	vstr	s6, [r3, #8]
 8009932:	ed83 7a01 	vstr	s14, [r3, #4]
 8009936:	f1ac 0c08 	sub.w	ip, ip, #8
 800993a:	f10a 0a08 	add.w	sl, sl, #8
 800993e:	f100 0008 	add.w	r0, r0, #8
 8009942:	f1a1 0108 	sub.w	r1, r1, #8
 8009946:	f109 0910 	add.w	r9, r9, #16
 800994a:	f105 0508 	add.w	r5, r5, #8
 800994e:	f1a4 0408 	sub.w	r4, r4, #8
 8009952:	f108 0818 	add.w	r8, r8, #24
 8009956:	f102 0208 	add.w	r2, r2, #8
 800995a:	f1a3 0308 	sub.w	r3, r3, #8
 800995e:	f47f aefc 	bne.w	800975a <arm_cfft_radix8by4_f32+0x12e>
 8009962:	9907      	ldr	r1, [sp, #28]
 8009964:	9800      	ldr	r0, [sp, #0]
 8009966:	00cb      	lsls	r3, r1, #3
 8009968:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800996c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009970:	9100      	str	r1, [sp, #0]
 8009972:	9904      	ldr	r1, [sp, #16]
 8009974:	4419      	add	r1, r3
 8009976:	9104      	str	r1, [sp, #16]
 8009978:	9903      	ldr	r1, [sp, #12]
 800997a:	4419      	add	r1, r3
 800997c:	9103      	str	r1, [sp, #12]
 800997e:	9906      	ldr	r1, [sp, #24]
 8009980:	4419      	add	r1, r3
 8009982:	9106      	str	r1, [sp, #24]
 8009984:	9905      	ldr	r1, [sp, #20]
 8009986:	441f      	add	r7, r3
 8009988:	4419      	add	r1, r3
 800998a:	9b02      	ldr	r3, [sp, #8]
 800998c:	9105      	str	r1, [sp, #20]
 800998e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009992:	9302      	str	r3, [sp, #8]
 8009994:	9904      	ldr	r1, [sp, #16]
 8009996:	9805      	ldr	r0, [sp, #20]
 8009998:	ed91 4a00 	vldr	s8, [r1]
 800999c:	edd0 6a00 	vldr	s13, [r0]
 80099a0:	9b06      	ldr	r3, [sp, #24]
 80099a2:	ed97 3a00 	vldr	s6, [r7]
 80099a6:	edd3 7a00 	vldr	s15, [r3]
 80099aa:	edd0 4a01 	vldr	s9, [r0, #4]
 80099ae:	edd1 3a01 	vldr	s7, [r1, #4]
 80099b2:	ed97 2a01 	vldr	s4, [r7, #4]
 80099b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80099ba:	9a03      	ldr	r2, [sp, #12]
 80099bc:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80099c0:	ee34 6a26 	vadd.f32	s12, s8, s13
 80099c4:	ee73 5aa4 	vadd.f32	s11, s7, s9
 80099c8:	ee37 5a86 	vadd.f32	s10, s15, s12
 80099cc:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80099d0:	ee35 5a03 	vadd.f32	s10, s10, s6
 80099d4:	ee74 6a66 	vsub.f32	s13, s8, s13
 80099d8:	ed81 5a00 	vstr	s10, [r1]
 80099dc:	ed93 5a01 	vldr	s10, [r3, #4]
 80099e0:	edd7 4a01 	vldr	s9, [r7, #4]
 80099e4:	ee35 5a85 	vadd.f32	s10, s11, s10
 80099e8:	ee37 4a26 	vadd.f32	s8, s14, s13
 80099ec:	ee35 5a24 	vadd.f32	s10, s10, s9
 80099f0:	ee73 4ae7 	vsub.f32	s9, s7, s15
 80099f4:	ed81 5a01 	vstr	s10, [r1, #4]
 80099f8:	edd2 1a00 	vldr	s3, [r2]
 80099fc:	edd2 2a01 	vldr	s5, [r2, #4]
 8009a00:	ee34 5a83 	vadd.f32	s10, s9, s6
 8009a04:	ee34 4a42 	vsub.f32	s8, s8, s4
 8009a08:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009a0c:	ee64 4a21 	vmul.f32	s9, s8, s3
 8009a10:	ee24 4a22 	vmul.f32	s8, s8, s5
 8009a14:	ee65 2a22 	vmul.f32	s5, s10, s5
 8009a18:	ee25 5a21 	vmul.f32	s10, s10, s3
 8009a1c:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8009a20:	ee35 5a44 	vsub.f32	s10, s10, s8
 8009a24:	edc3 2a00 	vstr	s5, [r3]
 8009a28:	ed83 5a01 	vstr	s10, [r3, #4]
 8009a2c:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8009a30:	9b00      	ldr	r3, [sp, #0]
 8009a32:	ee36 6a43 	vsub.f32	s12, s12, s6
 8009a36:	ed93 4a01 	vldr	s8, [r3, #4]
 8009a3a:	ed93 5a00 	vldr	s10, [r3]
 8009a3e:	9b02      	ldr	r3, [sp, #8]
 8009a40:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8009a44:	ee66 4a05 	vmul.f32	s9, s12, s10
 8009a48:	ee25 5a85 	vmul.f32	s10, s11, s10
 8009a4c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8009a50:	ee65 5a84 	vmul.f32	s11, s11, s8
 8009a54:	ee35 6a46 	vsub.f32	s12, s10, s12
 8009a58:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8009a5c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8009a60:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009a64:	ed80 6a01 	vstr	s12, [r0, #4]
 8009a68:	edc0 5a00 	vstr	s11, [r0]
 8009a6c:	edd3 5a01 	vldr	s11, [r3, #4]
 8009a70:	edd3 6a00 	vldr	s13, [r3]
 8009a74:	ee37 7a02 	vadd.f32	s14, s14, s4
 8009a78:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8009a7c:	ee27 6a26 	vmul.f32	s12, s14, s13
 8009a80:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8009a84:	ee27 7a25 	vmul.f32	s14, s14, s11
 8009a88:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009a8c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009a90:	ee76 7a27 	vadd.f32	s15, s12, s15
 8009a94:	ed87 7a01 	vstr	s14, [r7, #4]
 8009a98:	edc7 7a00 	vstr	s15, [r7]
 8009a9c:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 8009aa0:	4621      	mov	r1, r4
 8009aa2:	686a      	ldr	r2, [r5, #4]
 8009aa4:	2304      	movs	r3, #4
 8009aa6:	f000 fad3 	bl	800a050 <arm_radix8_butterfly_f32>
 8009aaa:	4630      	mov	r0, r6
 8009aac:	4621      	mov	r1, r4
 8009aae:	686a      	ldr	r2, [r5, #4]
 8009ab0:	2304      	movs	r3, #4
 8009ab2:	f000 facd 	bl	800a050 <arm_radix8_butterfly_f32>
 8009ab6:	9808      	ldr	r0, [sp, #32]
 8009ab8:	686a      	ldr	r2, [r5, #4]
 8009aba:	4621      	mov	r1, r4
 8009abc:	2304      	movs	r3, #4
 8009abe:	f000 fac7 	bl	800a050 <arm_radix8_butterfly_f32>
 8009ac2:	686a      	ldr	r2, [r5, #4]
 8009ac4:	9801      	ldr	r0, [sp, #4]
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	2304      	movs	r3, #4
 8009aca:	b00d      	add	sp, #52	; 0x34
 8009acc:	ecbd 8b0a 	vpop	{d8-d12}
 8009ad0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad4:	f000 babc 	b.w	800a050 <arm_radix8_butterfly_f32>

08009ad8 <arm_cfft_f32>:
 8009ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009adc:	2a01      	cmp	r2, #1
 8009ade:	4606      	mov	r6, r0
 8009ae0:	4617      	mov	r7, r2
 8009ae2:	460c      	mov	r4, r1
 8009ae4:	4698      	mov	r8, r3
 8009ae6:	8805      	ldrh	r5, [r0, #0]
 8009ae8:	d056      	beq.n	8009b98 <arm_cfft_f32+0xc0>
 8009aea:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8009aee:	d063      	beq.n	8009bb8 <arm_cfft_f32+0xe0>
 8009af0:	d916      	bls.n	8009b20 <arm_cfft_f32+0x48>
 8009af2:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8009af6:	d01a      	beq.n	8009b2e <arm_cfft_f32+0x56>
 8009af8:	d947      	bls.n	8009b8a <arm_cfft_f32+0xb2>
 8009afa:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8009afe:	d05b      	beq.n	8009bb8 <arm_cfft_f32+0xe0>
 8009b00:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8009b04:	d105      	bne.n	8009b12 <arm_cfft_f32+0x3a>
 8009b06:	2301      	movs	r3, #1
 8009b08:	6872      	ldr	r2, [r6, #4]
 8009b0a:	4629      	mov	r1, r5
 8009b0c:	4620      	mov	r0, r4
 8009b0e:	f000 fa9f 	bl	800a050 <arm_radix8_butterfly_f32>
 8009b12:	f1b8 0f00 	cmp.w	r8, #0
 8009b16:	d111      	bne.n	8009b3c <arm_cfft_f32+0x64>
 8009b18:	2f01      	cmp	r7, #1
 8009b1a:	d016      	beq.n	8009b4a <arm_cfft_f32+0x72>
 8009b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b20:	2d20      	cmp	r5, #32
 8009b22:	d049      	beq.n	8009bb8 <arm_cfft_f32+0xe0>
 8009b24:	d935      	bls.n	8009b92 <arm_cfft_f32+0xba>
 8009b26:	2d40      	cmp	r5, #64	; 0x40
 8009b28:	d0ed      	beq.n	8009b06 <arm_cfft_f32+0x2e>
 8009b2a:	2d80      	cmp	r5, #128	; 0x80
 8009b2c:	d1f1      	bne.n	8009b12 <arm_cfft_f32+0x3a>
 8009b2e:	4621      	mov	r1, r4
 8009b30:	4630      	mov	r0, r6
 8009b32:	f7ff fcab 	bl	800948c <arm_cfft_radix8by2_f32>
 8009b36:	f1b8 0f00 	cmp.w	r8, #0
 8009b3a:	d0ed      	beq.n	8009b18 <arm_cfft_f32+0x40>
 8009b3c:	68b2      	ldr	r2, [r6, #8]
 8009b3e:	89b1      	ldrh	r1, [r6, #12]
 8009b40:	4620      	mov	r0, r4
 8009b42:	f000 f841 	bl	8009bc8 <arm_bitreversal_32>
 8009b46:	2f01      	cmp	r7, #1
 8009b48:	d1e8      	bne.n	8009b1c <arm_cfft_f32+0x44>
 8009b4a:	ee07 5a90 	vmov	s15, r5
 8009b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b56:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009b5a:	2d00      	cmp	r5, #0
 8009b5c:	d0de      	beq.n	8009b1c <arm_cfft_f32+0x44>
 8009b5e:	f104 0108 	add.w	r1, r4, #8
 8009b62:	2300      	movs	r3, #0
 8009b64:	3301      	adds	r3, #1
 8009b66:	429d      	cmp	r5, r3
 8009b68:	f101 0108 	add.w	r1, r1, #8
 8009b6c:	ed11 7a04 	vldr	s14, [r1, #-16]
 8009b70:	ed51 7a03 	vldr	s15, [r1, #-12]
 8009b74:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009b78:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009b7c:	ed01 7a04 	vstr	s14, [r1, #-16]
 8009b80:	ed41 7a03 	vstr	s15, [r1, #-12]
 8009b84:	d1ee      	bne.n	8009b64 <arm_cfft_f32+0x8c>
 8009b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b8a:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8009b8e:	d0ba      	beq.n	8009b06 <arm_cfft_f32+0x2e>
 8009b90:	e7bf      	b.n	8009b12 <arm_cfft_f32+0x3a>
 8009b92:	2d10      	cmp	r5, #16
 8009b94:	d0cb      	beq.n	8009b2e <arm_cfft_f32+0x56>
 8009b96:	e7bc      	b.n	8009b12 <arm_cfft_f32+0x3a>
 8009b98:	b19d      	cbz	r5, 8009bc2 <arm_cfft_f32+0xea>
 8009b9a:	f101 030c 	add.w	r3, r1, #12
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	ed53 7a02 	vldr	s15, [r3, #-8]
 8009ba4:	3201      	adds	r2, #1
 8009ba6:	eef1 7a67 	vneg.f32	s15, s15
 8009baa:	4295      	cmp	r5, r2
 8009bac:	ed43 7a02 	vstr	s15, [r3, #-8]
 8009bb0:	f103 0308 	add.w	r3, r3, #8
 8009bb4:	d1f4      	bne.n	8009ba0 <arm_cfft_f32+0xc8>
 8009bb6:	e798      	b.n	8009aea <arm_cfft_f32+0x12>
 8009bb8:	4621      	mov	r1, r4
 8009bba:	4630      	mov	r0, r6
 8009bbc:	f7ff fd36 	bl	800962c <arm_cfft_radix8by4_f32>
 8009bc0:	e7a7      	b.n	8009b12 <arm_cfft_f32+0x3a>
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d0aa      	beq.n	8009b1c <arm_cfft_f32+0x44>
 8009bc6:	e7b9      	b.n	8009b3c <arm_cfft_f32+0x64>

08009bc8 <arm_bitreversal_32>:
 8009bc8:	b1e9      	cbz	r1, 8009c06 <arm_bitreversal_32+0x3e>
 8009bca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bcc:	2500      	movs	r5, #0
 8009bce:	f102 0e02 	add.w	lr, r2, #2
 8009bd2:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8009bd6:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8009bda:	08a4      	lsrs	r4, r4, #2
 8009bdc:	089b      	lsrs	r3, r3, #2
 8009bde:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8009be2:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8009be6:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8009bea:	00a6      	lsls	r6, r4, #2
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8009bf2:	3304      	adds	r3, #4
 8009bf4:	1d34      	adds	r4, r6, #4
 8009bf6:	3502      	adds	r5, #2
 8009bf8:	58c6      	ldr	r6, [r0, r3]
 8009bfa:	5907      	ldr	r7, [r0, r4]
 8009bfc:	50c7      	str	r7, [r0, r3]
 8009bfe:	428d      	cmp	r5, r1
 8009c00:	5106      	str	r6, [r0, r4]
 8009c02:	d3e6      	bcc.n	8009bd2 <arm_bitreversal_32+0xa>
 8009c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c06:	4770      	bx	lr

08009c08 <arm_cmplx_mag_f32>:
 8009c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c0c:	ed2d 8b02 	vpush	{d8}
 8009c10:	0897      	lsrs	r7, r2, #2
 8009c12:	b084      	sub	sp, #16
 8009c14:	d077      	beq.n	8009d06 <arm_cmplx_mag_f32+0xfe>
 8009c16:	f04f 0800 	mov.w	r8, #0
 8009c1a:	f100 0420 	add.w	r4, r0, #32
 8009c1e:	f101 0510 	add.w	r5, r1, #16
 8009c22:	463e      	mov	r6, r7
 8009c24:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8009c28:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 8009c2c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009c30:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009c34:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009c38:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c40:	f2c0 80c5 	blt.w	8009dce <arm_cmplx_mag_f32+0x1c6>
 8009c44:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c4c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009c50:	f100 80cb 	bmi.w	8009dea <arm_cmplx_mag_f32+0x1e2>
 8009c54:	ed05 8a04 	vstr	s16, [r5, #-16]
 8009c58:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 8009c5c:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8009c60:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009c64:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009c68:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009c6c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c74:	f2c0 80a8 	blt.w	8009dc8 <arm_cmplx_mag_f32+0x1c0>
 8009c78:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c80:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009c84:	f100 80a8 	bmi.w	8009dd8 <arm_cmplx_mag_f32+0x1d0>
 8009c88:	ed05 8a03 	vstr	s16, [r5, #-12]
 8009c8c:	ed14 0a04 	vldr	s0, [r4, #-16]
 8009c90:	ed54 7a03 	vldr	s15, [r4, #-12]
 8009c94:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009c98:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009c9c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009ca0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ca8:	f2c0 808b 	blt.w	8009dc2 <arm_cmplx_mag_f32+0x1ba>
 8009cac:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cb4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009cb8:	f100 80a9 	bmi.w	8009e0e <arm_cmplx_mag_f32+0x206>
 8009cbc:	ed05 8a02 	vstr	s16, [r5, #-8]
 8009cc0:	ed14 0a02 	vldr	s0, [r4, #-8]
 8009cc4:	ed54 7a01 	vldr	s15, [r4, #-4]
 8009cc8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009ccc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009cd0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009cd4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cdc:	db6e      	blt.n	8009dbc <arm_cmplx_mag_f32+0x1b4>
 8009cde:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ce6:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009cea:	f100 8087 	bmi.w	8009dfc <arm_cmplx_mag_f32+0x1f4>
 8009cee:	ed05 8a01 	vstr	s16, [r5, #-4]
 8009cf2:	3e01      	subs	r6, #1
 8009cf4:	f104 0420 	add.w	r4, r4, #32
 8009cf8:	f105 0510 	add.w	r5, r5, #16
 8009cfc:	d192      	bne.n	8009c24 <arm_cmplx_mag_f32+0x1c>
 8009cfe:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8009d02:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8009d06:	f012 0203 	ands.w	r2, r2, #3
 8009d0a:	d052      	beq.n	8009db2 <arm_cmplx_mag_f32+0x1aa>
 8009d0c:	ed90 0a00 	vldr	s0, [r0]
 8009d10:	edd0 7a01 	vldr	s15, [r0, #4]
 8009d14:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009d18:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009d22:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d2a:	bfb8      	it	lt
 8009d2c:	600b      	strlt	r3, [r1, #0]
 8009d2e:	db08      	blt.n	8009d42 <arm_cmplx_mag_f32+0x13a>
 8009d30:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d38:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009d3c:	d479      	bmi.n	8009e32 <arm_cmplx_mag_f32+0x22a>
 8009d3e:	ed81 8a00 	vstr	s16, [r1]
 8009d42:	3a01      	subs	r2, #1
 8009d44:	d035      	beq.n	8009db2 <arm_cmplx_mag_f32+0x1aa>
 8009d46:	ed90 0a02 	vldr	s0, [r0, #8]
 8009d4a:	edd0 7a03 	vldr	s15, [r0, #12]
 8009d4e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009d52:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009d56:	2300      	movs	r3, #0
 8009d58:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009d5c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d64:	bfb8      	it	lt
 8009d66:	604b      	strlt	r3, [r1, #4]
 8009d68:	db08      	blt.n	8009d7c <arm_cmplx_mag_f32+0x174>
 8009d6a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d72:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009d76:	d453      	bmi.n	8009e20 <arm_cmplx_mag_f32+0x218>
 8009d78:	ed81 8a01 	vstr	s16, [r1, #4]
 8009d7c:	2a01      	cmp	r2, #1
 8009d7e:	d018      	beq.n	8009db2 <arm_cmplx_mag_f32+0x1aa>
 8009d80:	ed90 0a04 	vldr	s0, [r0, #16]
 8009d84:	edd0 7a05 	vldr	s15, [r0, #20]
 8009d88:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009d8c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009d90:	2300      	movs	r3, #0
 8009d92:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009d96:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d9e:	db19      	blt.n	8009dd4 <arm_cmplx_mag_f32+0x1cc>
 8009da0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009da8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009dac:	d44a      	bmi.n	8009e44 <arm_cmplx_mag_f32+0x23c>
 8009dae:	ed81 8a02 	vstr	s16, [r1, #8]
 8009db2:	b004      	add	sp, #16
 8009db4:	ecbd 8b02 	vpop	{d8}
 8009db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dbc:	f845 8c04 	str.w	r8, [r5, #-4]
 8009dc0:	e797      	b.n	8009cf2 <arm_cmplx_mag_f32+0xea>
 8009dc2:	f845 8c08 	str.w	r8, [r5, #-8]
 8009dc6:	e77b      	b.n	8009cc0 <arm_cmplx_mag_f32+0xb8>
 8009dc8:	f845 8c0c 	str.w	r8, [r5, #-12]
 8009dcc:	e75e      	b.n	8009c8c <arm_cmplx_mag_f32+0x84>
 8009dce:	f845 8c10 	str.w	r8, [r5, #-16]
 8009dd2:	e741      	b.n	8009c58 <arm_cmplx_mag_f32+0x50>
 8009dd4:	608b      	str	r3, [r1, #8]
 8009dd6:	e7ec      	b.n	8009db2 <arm_cmplx_mag_f32+0x1aa>
 8009dd8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009ddc:	9001      	str	r0, [sp, #4]
 8009dde:	f003 fa29 	bl	800d234 <sqrtf>
 8009de2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009de6:	9801      	ldr	r0, [sp, #4]
 8009de8:	e74e      	b.n	8009c88 <arm_cmplx_mag_f32+0x80>
 8009dea:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009dee:	9001      	str	r0, [sp, #4]
 8009df0:	f003 fa20 	bl	800d234 <sqrtf>
 8009df4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009df8:	9801      	ldr	r0, [sp, #4]
 8009dfa:	e72b      	b.n	8009c54 <arm_cmplx_mag_f32+0x4c>
 8009dfc:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009e00:	9001      	str	r0, [sp, #4]
 8009e02:	f003 fa17 	bl	800d234 <sqrtf>
 8009e06:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009e0a:	9801      	ldr	r0, [sp, #4]
 8009e0c:	e76f      	b.n	8009cee <arm_cmplx_mag_f32+0xe6>
 8009e0e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009e12:	9001      	str	r0, [sp, #4]
 8009e14:	f003 fa0e 	bl	800d234 <sqrtf>
 8009e18:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009e1c:	9801      	ldr	r0, [sp, #4]
 8009e1e:	e74d      	b.n	8009cbc <arm_cmplx_mag_f32+0xb4>
 8009e20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e24:	9201      	str	r2, [sp, #4]
 8009e26:	f003 fa05 	bl	800d234 <sqrtf>
 8009e2a:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8009e2e:	9903      	ldr	r1, [sp, #12]
 8009e30:	e7a2      	b.n	8009d78 <arm_cmplx_mag_f32+0x170>
 8009e32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e36:	9201      	str	r2, [sp, #4]
 8009e38:	f003 f9fc 	bl	800d234 <sqrtf>
 8009e3c:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8009e40:	9903      	ldr	r1, [sp, #12]
 8009e42:	e77c      	b.n	8009d3e <arm_cmplx_mag_f32+0x136>
 8009e44:	9101      	str	r1, [sp, #4]
 8009e46:	f003 f9f5 	bl	800d234 <sqrtf>
 8009e4a:	9901      	ldr	r1, [sp, #4]
 8009e4c:	e7af      	b.n	8009dae <arm_cmplx_mag_f32+0x1a6>
 8009e4e:	bf00      	nop

08009e50 <arm_sqrt_q15>:
 8009e50:	2800      	cmp	r0, #0
 8009e52:	dd5c      	ble.n	8009f0e <arm_sqrt_q15+0xbe>
 8009e54:	fab0 f280 	clz	r2, r0
 8009e58:	3a11      	subs	r2, #17
 8009e5a:	b292      	uxth	r2, r2
 8009e5c:	b470      	push	{r4, r5, r6}
 8009e5e:	f012 0401 	ands.w	r4, r2, #1
 8009e62:	bf1a      	itte	ne
 8009e64:	f102 33ff 	addne.w	r3, r2, #4294967295
 8009e68:	4098      	lslne	r0, r3
 8009e6a:	4090      	lsleq	r0, r2
 8009e6c:	b200      	sxth	r0, r0
 8009e6e:	ee07 0a90 	vmov	s15, r0
 8009e72:	eefa 7ae8 	vcvt.f32.s32	s15, s15, #15
 8009e76:	4b28      	ldr	r3, [pc, #160]	; (8009f18 <arm_sqrt_q15+0xc8>)
 8009e78:	ee17 5a90 	vmov	r5, s15
 8009e7c:	eba3 0365 	sub.w	r3, r3, r5, asr #1
 8009e80:	ee07 3a90 	vmov	s15, r3
 8009e84:	eefe 7ac9 	vcvt.s32.f32	s15, s15, #14
 8009e88:	1046      	asrs	r6, r0, #1
 8009e8a:	ee17 3a90 	vmov	r3, s15
 8009e8e:	b21b      	sxth	r3, r3
 8009e90:	fb03 f503 	mul.w	r5, r3, r3
 8009e94:	13ed      	asrs	r5, r5, #15
 8009e96:	fb15 f506 	smulbb	r5, r5, r6
 8009e9a:	13ed      	asrs	r5, r5, #15
 8009e9c:	f5c5 5540 	rsb	r5, r5, #12288	; 0x3000
 8009ea0:	fb03 f305 	mul.w	r3, r3, r5
 8009ea4:	f343 334f 	sbfx	r3, r3, #13, #16
 8009ea8:	f023 0303 	bic.w	r3, r3, #3
 8009eac:	fb03 f503 	mul.w	r5, r3, r3
 8009eb0:	13ed      	asrs	r5, r5, #15
 8009eb2:	fb15 f506 	smulbb	r5, r5, r6
 8009eb6:	13ed      	asrs	r5, r5, #15
 8009eb8:	f5c5 5540 	rsb	r5, r5, #12288	; 0x3000
 8009ebc:	fb03 f305 	mul.w	r3, r3, r5
 8009ec0:	f343 334f 	sbfx	r3, r3, #13, #16
 8009ec4:	f023 0303 	bic.w	r3, r3, #3
 8009ec8:	fb03 f503 	mul.w	r5, r3, r3
 8009ecc:	13ed      	asrs	r5, r5, #15
 8009ece:	fb15 f506 	smulbb	r5, r5, r6
 8009ed2:	13ed      	asrs	r5, r5, #15
 8009ed4:	f5c5 5540 	rsb	r5, r5, #12288	; 0x3000
 8009ed8:	fb03 f305 	mul.w	r3, r3, r5
 8009edc:	13db      	asrs	r3, r3, #15
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	fb13 f300 	smulbb	r3, r3, r0
 8009ee4:	f343 338f 	sbfx	r3, r3, #14, #16
 8009ee8:	f023 0301 	bic.w	r3, r3, #1
 8009eec:	b13c      	cbz	r4, 8009efe <arm_sqrt_q15+0xae>
 8009eee:	3a01      	subs	r2, #1
 8009ef0:	1052      	asrs	r2, r2, #1
 8009ef2:	4113      	asrs	r3, r2
 8009ef4:	b21b      	sxth	r3, r3
 8009ef6:	2000      	movs	r0, #0
 8009ef8:	800b      	strh	r3, [r1, #0]
 8009efa:	bc70      	pop	{r4, r5, r6}
 8009efc:	4770      	bx	lr
 8009efe:	f342 024e 	sbfx	r2, r2, #1, #15
 8009f02:	4113      	asrs	r3, r2
 8009f04:	b21b      	sxth	r3, r3
 8009f06:	2000      	movs	r0, #0
 8009f08:	800b      	strh	r3, [r1, #0]
 8009f0a:	bc70      	pop	{r4, r5, r6}
 8009f0c:	4770      	bx	lr
 8009f0e:	2300      	movs	r3, #0
 8009f10:	800b      	strh	r3, [r1, #0]
 8009f12:	f04f 30ff 	mov.w	r0, #4294967295
 8009f16:	4770      	bx	lr
 8009f18:	5f3759df 	.word	0x5f3759df

08009f1c <arm_mult_f32>:
 8009f1c:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8009f20:	b4f0      	push	{r4, r5, r6, r7}
 8009f22:	d033      	beq.n	8009f8c <arm_mult_f32+0x70>
 8009f24:	f100 0610 	add.w	r6, r0, #16
 8009f28:	f101 0510 	add.w	r5, r1, #16
 8009f2c:	f102 0410 	add.w	r4, r2, #16
 8009f30:	4667      	mov	r7, ip
 8009f32:	ed15 7a04 	vldr	s14, [r5, #-16]
 8009f36:	ed56 7a04 	vldr	s15, [r6, #-16]
 8009f3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f3e:	3f01      	subs	r7, #1
 8009f40:	ed44 7a04 	vstr	s15, [r4, #-16]
 8009f44:	ed15 7a03 	vldr	s14, [r5, #-12]
 8009f48:	ed56 7a03 	vldr	s15, [r6, #-12]
 8009f4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f50:	f106 0610 	add.w	r6, r6, #16
 8009f54:	ed44 7a03 	vstr	s15, [r4, #-12]
 8009f58:	ed15 7a02 	vldr	s14, [r5, #-8]
 8009f5c:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8009f60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f64:	f105 0510 	add.w	r5, r5, #16
 8009f68:	ed44 7a02 	vstr	s15, [r4, #-8]
 8009f6c:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8009f70:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8009f74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f78:	f104 0410 	add.w	r4, r4, #16
 8009f7c:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8009f80:	d1d7      	bne.n	8009f32 <arm_mult_f32+0x16>
 8009f82:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8009f86:	4420      	add	r0, r4
 8009f88:	4421      	add	r1, r4
 8009f8a:	4422      	add	r2, r4
 8009f8c:	f013 0303 	ands.w	r3, r3, #3
 8009f90:	d01b      	beq.n	8009fca <arm_mult_f32+0xae>
 8009f92:	edd1 7a00 	vldr	s15, [r1]
 8009f96:	ed90 7a00 	vldr	s14, [r0]
 8009f9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f9e:	3b01      	subs	r3, #1
 8009fa0:	edc2 7a00 	vstr	s15, [r2]
 8009fa4:	d011      	beq.n	8009fca <arm_mult_f32+0xae>
 8009fa6:	edd0 7a01 	vldr	s15, [r0, #4]
 8009faa:	ed91 7a01 	vldr	s14, [r1, #4]
 8009fae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	edc2 7a01 	vstr	s15, [r2, #4]
 8009fb8:	d007      	beq.n	8009fca <arm_mult_f32+0xae>
 8009fba:	edd0 7a02 	vldr	s15, [r0, #8]
 8009fbe:	ed91 7a02 	vldr	s14, [r1, #8]
 8009fc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009fc6:	edc2 7a02 	vstr	s15, [r2, #8]
 8009fca:	bcf0      	pop	{r4, r5, r6, r7}
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop

08009fd0 <arm_dot_prod_q15>:
 8009fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd4:	ea5f 0992 	movs.w	r9, r2, lsr #2
 8009fd8:	d036      	beq.n	800a048 <arm_dot_prod_q15+0x78>
 8009fda:	468e      	mov	lr, r1
 8009fdc:	4684      	mov	ip, r0
 8009fde:	46c8      	mov	r8, r9
 8009fe0:	2600      	movs	r6, #0
 8009fe2:	2700      	movs	r7, #0
 8009fe4:	f8dc a000 	ldr.w	sl, [ip]
 8009fe8:	f8de b000 	ldr.w	fp, [lr]
 8009fec:	4635      	mov	r5, r6
 8009fee:	463c      	mov	r4, r7
 8009ff0:	fbca 54cb 	smlald	r5, r4, sl, fp
 8009ff4:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8009ff8:	f8de 7004 	ldr.w	r7, [lr, #4]
 8009ffc:	f10c 0c08 	add.w	ip, ip, #8
 800a000:	f10e 0e08 	add.w	lr, lr, #8
 800a004:	fbc6 54c7 	smlald	r5, r4, r6, r7
 800a008:	f1b8 0801 	subs.w	r8, r8, #1
 800a00c:	462e      	mov	r6, r5
 800a00e:	4627      	mov	r7, r4
 800a010:	d1e8      	bne.n	8009fe4 <arm_dot_prod_q15+0x14>
 800a012:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800a016:	4449      	add	r1, r9
 800a018:	4448      	add	r0, r9
 800a01a:	f012 0203 	ands.w	r2, r2, #3
 800a01e:	d00f      	beq.n	800a040 <arm_dot_prod_q15+0x70>
 800a020:	880d      	ldrh	r5, [r1, #0]
 800a022:	8804      	ldrh	r4, [r0, #0]
 800a024:	3a01      	subs	r2, #1
 800a026:	fbc5 6784 	smlalbb	r6, r7, r5, r4
 800a02a:	d009      	beq.n	800a040 <arm_dot_prod_q15+0x70>
 800a02c:	8845      	ldrh	r5, [r0, #2]
 800a02e:	884c      	ldrh	r4, [r1, #2]
 800a030:	2a01      	cmp	r2, #1
 800a032:	fbc5 6784 	smlalbb	r6, r7, r5, r4
 800a036:	d003      	beq.n	800a040 <arm_dot_prod_q15+0x70>
 800a038:	8880      	ldrh	r0, [r0, #4]
 800a03a:	888a      	ldrh	r2, [r1, #4]
 800a03c:	fbc0 6782 	smlalbb	r6, r7, r0, r2
 800a040:	e9c3 6700 	strd	r6, r7, [r3]
 800a044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a048:	2600      	movs	r6, #0
 800a04a:	2700      	movs	r7, #0
 800a04c:	e7e5      	b.n	800a01a <arm_dot_prod_q15+0x4a>
 800a04e:	bf00      	nop

0800a050 <arm_radix8_butterfly_f32>:
 800a050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a054:	ed2d 8b10 	vpush	{d8-d15}
 800a058:	b095      	sub	sp, #84	; 0x54
 800a05a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800a05e:	4603      	mov	r3, r0
 800a060:	3304      	adds	r3, #4
 800a062:	ed9f bab9 	vldr	s22, [pc, #740]	; 800a348 <arm_radix8_butterfly_f32+0x2f8>
 800a066:	9012      	str	r0, [sp, #72]	; 0x48
 800a068:	468b      	mov	fp, r1
 800a06a:	9313      	str	r3, [sp, #76]	; 0x4c
 800a06c:	4689      	mov	r9, r1
 800a06e:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800a072:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a074:	960f      	str	r6, [sp, #60]	; 0x3c
 800a076:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800a07a:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800a07e:	eb03 0508 	add.w	r5, r3, r8
 800a082:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800a086:	eb05 040e 	add.w	r4, r5, lr
 800a08a:	0137      	lsls	r7, r6, #4
 800a08c:	eba6 030a 	sub.w	r3, r6, sl
 800a090:	eb04 000e 	add.w	r0, r4, lr
 800a094:	44b2      	add	sl, r6
 800a096:	1d3a      	adds	r2, r7, #4
 800a098:	9702      	str	r7, [sp, #8]
 800a09a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800a09e:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800a0a2:	ebae 0c06 	sub.w	ip, lr, r6
 800a0a6:	9703      	str	r7, [sp, #12]
 800a0a8:	eb03 0708 	add.w	r7, r3, r8
 800a0ac:	9701      	str	r7, [sp, #4]
 800a0ae:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800a0b2:	9706      	str	r7, [sp, #24]
 800a0b4:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800a0b6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800a0ba:	f10e 0104 	add.w	r1, lr, #4
 800a0be:	4439      	add	r1, r7
 800a0c0:	443a      	add	r2, r7
 800a0c2:	0137      	lsls	r7, r6, #4
 800a0c4:	00f6      	lsls	r6, r6, #3
 800a0c6:	9704      	str	r7, [sp, #16]
 800a0c8:	9605      	str	r6, [sp, #20]
 800a0ca:	9f01      	ldr	r7, [sp, #4]
 800a0cc:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800a0ce:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800a0d2:	f04f 0c00 	mov.w	ip, #0
 800a0d6:	edd4 6a00 	vldr	s13, [r4]
 800a0da:	edd7 1a00 	vldr	s3, [r7]
 800a0de:	ed16 aa01 	vldr	s20, [r6, #-4]
 800a0e2:	edd5 5a00 	vldr	s11, [r5]
 800a0e6:	ed52 9a01 	vldr	s19, [r2, #-4]
 800a0ea:	ed90 6a00 	vldr	s12, [r0]
 800a0ee:	ed51 7a01 	vldr	s15, [r1, #-4]
 800a0f2:	ed93 3a00 	vldr	s6, [r3]
 800a0f6:	ee39 0a86 	vadd.f32	s0, s19, s12
 800a0fa:	ee33 2a21 	vadd.f32	s4, s6, s3
 800a0fe:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800a102:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800a106:	ee35 7a02 	vadd.f32	s14, s10, s4
 800a10a:	ee34 4a80 	vadd.f32	s8, s9, s0
 800a10e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a112:	ee74 6a07 	vadd.f32	s13, s8, s14
 800a116:	ee34 4a47 	vsub.f32	s8, s8, s14
 800a11a:	ed46 6a01 	vstr	s13, [r6, #-4]
 800a11e:	ed85 4a00 	vstr	s8, [r5]
 800a122:	edd1 6a00 	vldr	s13, [r1]
 800a126:	ed94 9a01 	vldr	s18, [r4, #4]
 800a12a:	edd3 2a01 	vldr	s5, [r3, #4]
 800a12e:	edd7 8a01 	vldr	s17, [r7, #4]
 800a132:	edd6 0a00 	vldr	s1, [r6]
 800a136:	edd5 3a01 	vldr	s7, [r5, #4]
 800a13a:	ed90 8a01 	vldr	s16, [r0, #4]
 800a13e:	ed92 7a00 	vldr	s14, [r2]
 800a142:	ee33 3a61 	vsub.f32	s6, s6, s3
 800a146:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800a14a:	ee72 aae8 	vsub.f32	s21, s5, s17
 800a14e:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800a152:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800a156:	ee77 7a83 	vadd.f32	s15, s15, s6
 800a15a:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800a15e:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800a162:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800a166:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800a16a:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800a16e:	ee77 0a08 	vadd.f32	s1, s14, s16
 800a172:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800a176:	ee37 7a48 	vsub.f32	s14, s14, s16
 800a17a:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800a17e:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800a182:	ee76 6a89 	vadd.f32	s13, s13, s18
 800a186:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800a18a:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800a18e:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800a192:	ee35 5a42 	vsub.f32	s10, s10, s4
 800a196:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800a19a:	ee33 2a20 	vadd.f32	s4, s6, s1
 800a19e:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800a1a2:	ee33 3a60 	vsub.f32	s6, s6, s1
 800a1a6:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800a1aa:	ee77 0a01 	vadd.f32	s1, s14, s2
 800a1ae:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800a1b2:	ee37 7a41 	vsub.f32	s14, s14, s2
 800a1b6:	ee73 1a84 	vadd.f32	s3, s7, s8
 800a1ba:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800a1be:	ee76 3a27 	vadd.f32	s7, s12, s15
 800a1c2:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a1c6:	ee32 8a00 	vadd.f32	s16, s4, s0
 800a1ca:	ee33 1a45 	vsub.f32	s2, s6, s10
 800a1ce:	ee32 2a40 	vsub.f32	s4, s4, s0
 800a1d2:	ee35 5a03 	vadd.f32	s10, s10, s6
 800a1d6:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800a1da:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800a1de:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800a1e2:	ee34 6a67 	vsub.f32	s12, s8, s15
 800a1e6:	ee75 4a87 	vadd.f32	s9, s11, s14
 800a1ea:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800a1ee:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800a1f2:	ee77 7a84 	vadd.f32	s15, s15, s8
 800a1f6:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800a1fa:	44dc      	add	ip, fp
 800a1fc:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800a200:	45e1      	cmp	r9, ip
 800a202:	ed86 8a00 	vstr	s16, [r6]
 800a206:	ed85 2a01 	vstr	s4, [r5, #4]
 800a20a:	4456      	add	r6, sl
 800a20c:	ed02 0a01 	vstr	s0, [r2, #-4]
 800a210:	4455      	add	r5, sl
 800a212:	edc0 6a00 	vstr	s13, [r0]
 800a216:	ed82 1a00 	vstr	s2, [r2]
 800a21a:	ed80 5a01 	vstr	s10, [r0, #4]
 800a21e:	4452      	add	r2, sl
 800a220:	ed01 3a01 	vstr	s6, [r1, #-4]
 800a224:	4450      	add	r0, sl
 800a226:	edc7 2a00 	vstr	s5, [r7]
 800a22a:	edc4 4a00 	vstr	s9, [r4]
 800a22e:	ed83 7a00 	vstr	s14, [r3]
 800a232:	edc1 5a00 	vstr	s11, [r1]
 800a236:	edc7 3a01 	vstr	s7, [r7, #4]
 800a23a:	4451      	add	r1, sl
 800a23c:	ed84 6a01 	vstr	s12, [r4, #4]
 800a240:	4457      	add	r7, sl
 800a242:	edc3 7a01 	vstr	s15, [r3, #4]
 800a246:	4454      	add	r4, sl
 800a248:	4453      	add	r3, sl
 800a24a:	f63f af44 	bhi.w	800a0d6 <arm_radix8_butterfly_f32+0x86>
 800a24e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a250:	2b07      	cmp	r3, #7
 800a252:	f240 81b7 	bls.w	800a5c4 <arm_radix8_butterfly_f32+0x574>
 800a256:	9b06      	ldr	r3, [sp, #24]
 800a258:	9903      	ldr	r1, [sp, #12]
 800a25a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a25c:	9e05      	ldr	r6, [sp, #20]
 800a25e:	9a04      	ldr	r2, [sp, #16]
 800a260:	f103 0c08 	add.w	ip, r3, #8
 800a264:	9b02      	ldr	r3, [sp, #8]
 800a266:	3108      	adds	r1, #8
 800a268:	f108 0808 	add.w	r8, r8, #8
 800a26c:	1841      	adds	r1, r0, r1
 800a26e:	3608      	adds	r6, #8
 800a270:	330c      	adds	r3, #12
 800a272:	4604      	mov	r4, r0
 800a274:	4444      	add	r4, r8
 800a276:	18c3      	adds	r3, r0, r3
 800a278:	9109      	str	r1, [sp, #36]	; 0x24
 800a27a:	1981      	adds	r1, r0, r6
 800a27c:	f10e 0e08 	add.w	lr, lr, #8
 800a280:	3208      	adds	r2, #8
 800a282:	940b      	str	r4, [sp, #44]	; 0x2c
 800a284:	9107      	str	r1, [sp, #28]
 800a286:	4604      	mov	r4, r0
 800a288:	4601      	mov	r1, r0
 800a28a:	9304      	str	r3, [sp, #16]
 800a28c:	f100 030c 	add.w	r3, r0, #12
 800a290:	4474      	add	r4, lr
 800a292:	f04f 0801 	mov.w	r8, #1
 800a296:	1882      	adds	r2, r0, r2
 800a298:	4461      	add	r1, ip
 800a29a:	9305      	str	r3, [sp, #20]
 800a29c:	464b      	mov	r3, r9
 800a29e:	940a      	str	r4, [sp, #40]	; 0x28
 800a2a0:	46c1      	mov	r9, r8
 800a2a2:	9208      	str	r2, [sp, #32]
 800a2a4:	46d8      	mov	r8, fp
 800a2a6:	9106      	str	r1, [sp, #24]
 800a2a8:	f04f 0e00 	mov.w	lr, #0
 800a2ac:	469b      	mov	fp, r3
 800a2ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a2b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a2b2:	449e      	add	lr, r3
 800a2b4:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800a2b8:	441a      	add	r2, r3
 800a2ba:	920e      	str	r2, [sp, #56]	; 0x38
 800a2bc:	441a      	add	r2, r3
 800a2be:	18d4      	adds	r4, r2, r3
 800a2c0:	18e5      	adds	r5, r4, r3
 800a2c2:	18ee      	adds	r6, r5, r3
 800a2c4:	18f7      	adds	r7, r6, r3
 800a2c6:	eb07 0c03 	add.w	ip, r7, r3
 800a2ca:	920d      	str	r2, [sp, #52]	; 0x34
 800a2cc:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800a2d0:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800a2d4:	910c      	str	r1, [sp, #48]	; 0x30
 800a2d6:	4419      	add	r1, r3
 800a2d8:	9103      	str	r1, [sp, #12]
 800a2da:	4419      	add	r1, r3
 800a2dc:	18ca      	adds	r2, r1, r3
 800a2de:	9202      	str	r2, [sp, #8]
 800a2e0:	441a      	add	r2, r3
 800a2e2:	18d0      	adds	r0, r2, r3
 800a2e4:	ed92 ea01 	vldr	s28, [r2, #4]
 800a2e8:	9a02      	ldr	r2, [sp, #8]
 800a2ea:	edd4 7a00 	vldr	s15, [r4]
 800a2ee:	edd2 da01 	vldr	s27, [r2, #4]
 800a2f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2f4:	ed91 da01 	vldr	s26, [r1, #4]
 800a2f8:	ed92 ca01 	vldr	s24, [r2, #4]
 800a2fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2fe:	9903      	ldr	r1, [sp, #12]
 800a300:	edcd 7a03 	vstr	s15, [sp, #12]
 800a304:	edd2 7a00 	vldr	s15, [r2]
 800a308:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a30a:	edcd 7a02 	vstr	s15, [sp, #8]
 800a30e:	edd2 7a00 	vldr	s15, [r2]
 800a312:	edd0 ea01 	vldr	s29, [r0, #4]
 800a316:	edd1 ca01 	vldr	s25, [r1, #4]
 800a31a:	eddc ba00 	vldr	s23, [ip]
 800a31e:	edd7 aa00 	vldr	s21, [r7]
 800a322:	ed96 aa00 	vldr	s20, [r6]
 800a326:	edd5 9a00 	vldr	s19, [r5]
 800a32a:	edcd 7a01 	vstr	s15, [sp, #4]
 800a32e:	4403      	add	r3, r0
 800a330:	ed93 fa01 	vldr	s30, [r3, #4]
 800a334:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800a338:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800a33c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a340:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a344:	46cc      	mov	ip, r9
 800a346:	e001      	b.n	800a34c <arm_radix8_butterfly_f32+0x2fc>
 800a348:	3f3504f3 	.word	0x3f3504f3
 800a34c:	ed91 6a00 	vldr	s12, [r1]
 800a350:	ed93 5a00 	vldr	s10, [r3]
 800a354:	edd0 fa00 	vldr	s31, [r0]
 800a358:	edd4 7a00 	vldr	s15, [r4]
 800a35c:	ed95 7a00 	vldr	s14, [r5]
 800a360:	ed56 3a01 	vldr	s7, [r6, #-4]
 800a364:	ed17 3a01 	vldr	s6, [r7, #-4]
 800a368:	ed92 2a00 	vldr	s4, [r2]
 800a36c:	ed96 0a00 	vldr	s0, [r6]
 800a370:	ee33 8a85 	vadd.f32	s16, s7, s10
 800a374:	ee32 1a06 	vadd.f32	s2, s4, s12
 800a378:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800a37c:	ee77 4a87 	vadd.f32	s9, s15, s14
 800a380:	ee78 1a04 	vadd.f32	s3, s16, s8
 800a384:	ee71 6a24 	vadd.f32	s13, s2, s9
 800a388:	ee32 2a46 	vsub.f32	s4, s4, s12
 800a38c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800a390:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a394:	ed06 6a01 	vstr	s12, [r6, #-4]
 800a398:	edd4 8a01 	vldr	s17, [r4, #4]
 800a39c:	ed92 9a01 	vldr	s18, [r2, #4]
 800a3a0:	edd7 0a00 	vldr	s1, [r7]
 800a3a4:	edd1 2a01 	vldr	s5, [r1, #4]
 800a3a8:	ed95 7a01 	vldr	s14, [r5, #4]
 800a3ac:	ed93 6a01 	vldr	s12, [r3, #4]
 800a3b0:	edd0 5a01 	vldr	s11, [r0, #4]
 800a3b4:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800a3b8:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800a3bc:	ee39 5a62 	vsub.f32	s10, s18, s5
 800a3c0:	ee78 fac7 	vsub.f32	s31, s17, s14
 800a3c4:	ee38 4a44 	vsub.f32	s8, s16, s8
 800a3c8:	ee38 7a87 	vadd.f32	s14, s17, s14
 800a3cc:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800a3d0:	ee79 2a22 	vadd.f32	s5, s18, s5
 800a3d4:	ee32 9a27 	vadd.f32	s18, s4, s15
 800a3d8:	ee72 7a67 	vsub.f32	s15, s4, s15
 800a3dc:	ee30 2a06 	vadd.f32	s4, s0, s12
 800a3e0:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800a3e4:	ee71 4a64 	vsub.f32	s9, s2, s9
 800a3e8:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800a3ec:	ee32 1a08 	vadd.f32	s2, s4, s16
 800a3f0:	ee72 fa87 	vadd.f32	s31, s5, s14
 800a3f4:	ee32 2a48 	vsub.f32	s4, s4, s16
 800a3f8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800a3fc:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800a400:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800a404:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800a408:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800a40c:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800a410:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800a414:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800a418:	ee30 6a46 	vsub.f32	s12, s0, s12
 800a41c:	ee74 0a22 	vadd.f32	s1, s8, s5
 800a420:	ee36 0a28 	vadd.f32	s0, s12, s17
 800a424:	ee74 2a62 	vsub.f32	s5, s8, s5
 800a428:	ee36 6a68 	vsub.f32	s12, s12, s17
 800a42c:	ee32 4a64 	vsub.f32	s8, s4, s9
 800a430:	ee73 8a09 	vadd.f32	s17, s6, s18
 800a434:	ee74 4a82 	vadd.f32	s9, s9, s4
 800a438:	ee33 9a49 	vsub.f32	s18, s6, s18
 800a43c:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800a440:	ee35 3a85 	vadd.f32	s6, s11, s10
 800a444:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800a448:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800a44c:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800a450:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800a454:	ee30 7a68 	vsub.f32	s14, s0, s17
 800a458:	ee35 8a03 	vadd.f32	s16, s10, s6
 800a45c:	ee38 0a80 	vadd.f32	s0, s17, s0
 800a460:	ee73 3a82 	vadd.f32	s7, s7, s4
 800a464:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800a468:	ed9d 2a01 	vldr	s4, [sp, #4]
 800a46c:	eddd 1a02 	vldr	s3, [sp, #8]
 800a470:	ee35 5a43 	vsub.f32	s10, s10, s6
 800a474:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800a478:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800a47c:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800a480:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a484:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800a488:	ee76 5a49 	vsub.f32	s11, s12, s18
 800a48c:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800a490:	ee39 6a06 	vadd.f32	s12, s18, s12
 800a494:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800a498:	ee21 4a84 	vmul.f32	s8, s3, s8
 800a49c:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800a4a0:	ee22 7a07 	vmul.f32	s14, s4, s14
 800a4a4:	ee22 2a08 	vmul.f32	s4, s4, s16
 800a4a8:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800a4ac:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800a4b0:	ee31 1a09 	vadd.f32	s2, s2, s18
 800a4b4:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800a4b8:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800a4bc:	ee74 0a60 	vsub.f32	s1, s8, s1
 800a4c0:	ee37 7a48 	vsub.f32	s14, s14, s16
 800a4c4:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800a4c8:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800a4cc:	ee72 1a21 	vadd.f32	s3, s4, s3
 800a4d0:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800a4d4:	ee38 2a89 	vadd.f32	s4, s17, s18
 800a4d8:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800a4dc:	ee38 8a04 	vadd.f32	s16, s16, s8
 800a4e0:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800a4e4:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800a4e8:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800a4ec:	eddd 5a03 	vldr	s11, [sp, #12]
 800a4f0:	edc6 fa00 	vstr	s31, [r6]
 800a4f4:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800a4f8:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800a4fc:	ee30 0a45 	vsub.f32	s0, s0, s10
 800a500:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800a504:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800a508:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800a50c:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800a510:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800a514:	ee25 6a86 	vmul.f32	s12, s11, s12
 800a518:	ee74 4a89 	vadd.f32	s9, s9, s18
 800a51c:	ee34 3a43 	vsub.f32	s6, s8, s6
 800a520:	ee78 8a85 	vadd.f32	s17, s17, s10
 800a524:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a528:	44c4      	add	ip, r8
 800a52a:	45e3      	cmp	fp, ip
 800a52c:	edc3 3a00 	vstr	s7, [r3]
 800a530:	edc3 6a01 	vstr	s13, [r3, #4]
 800a534:	4456      	add	r6, sl
 800a536:	ed07 1a01 	vstr	s2, [r7, #-4]
 800a53a:	edc7 0a00 	vstr	s1, [r7]
 800a53e:	4453      	add	r3, sl
 800a540:	ed80 2a00 	vstr	s4, [r0]
 800a544:	edc0 2a01 	vstr	s5, [r0, #4]
 800a548:	4457      	add	r7, sl
 800a54a:	edc2 1a00 	vstr	s3, [r2]
 800a54e:	ed82 7a01 	vstr	s14, [r2, #4]
 800a552:	4450      	add	r0, sl
 800a554:	ed85 8a00 	vstr	s16, [r5]
 800a558:	ed85 0a01 	vstr	s0, [r5, #4]
 800a55c:	4452      	add	r2, sl
 800a55e:	edc1 4a00 	vstr	s9, [r1]
 800a562:	4455      	add	r5, sl
 800a564:	ed81 3a01 	vstr	s6, [r1, #4]
 800a568:	edc4 8a00 	vstr	s17, [r4]
 800a56c:	ed84 6a01 	vstr	s12, [r4, #4]
 800a570:	4451      	add	r1, sl
 800a572:	4454      	add	r4, sl
 800a574:	f63f aeea 	bhi.w	800a34c <arm_radix8_butterfly_f32+0x2fc>
 800a578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a57a:	3308      	adds	r3, #8
 800a57c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a57e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a580:	3308      	adds	r3, #8
 800a582:	930a      	str	r3, [sp, #40]	; 0x28
 800a584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a586:	3308      	adds	r3, #8
 800a588:	9309      	str	r3, [sp, #36]	; 0x24
 800a58a:	9b08      	ldr	r3, [sp, #32]
 800a58c:	3308      	adds	r3, #8
 800a58e:	9308      	str	r3, [sp, #32]
 800a590:	9b07      	ldr	r3, [sp, #28]
 800a592:	3308      	adds	r3, #8
 800a594:	9307      	str	r3, [sp, #28]
 800a596:	9b06      	ldr	r3, [sp, #24]
 800a598:	3308      	adds	r3, #8
 800a59a:	9306      	str	r3, [sp, #24]
 800a59c:	9b05      	ldr	r3, [sp, #20]
 800a59e:	3308      	adds	r3, #8
 800a5a0:	9305      	str	r3, [sp, #20]
 800a5a2:	9b04      	ldr	r3, [sp, #16]
 800a5a4:	3308      	adds	r3, #8
 800a5a6:	9304      	str	r3, [sp, #16]
 800a5a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a5aa:	f109 0901 	add.w	r9, r9, #1
 800a5ae:	454b      	cmp	r3, r9
 800a5b0:	f47f ae7d 	bne.w	800a2ae <arm_radix8_butterfly_f32+0x25e>
 800a5b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a5b6:	00db      	lsls	r3, r3, #3
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	46d9      	mov	r9, fp
 800a5bc:	9310      	str	r3, [sp, #64]	; 0x40
 800a5be:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800a5c2:	e554      	b.n	800a06e <arm_radix8_butterfly_f32+0x1e>
 800a5c4:	b015      	add	sp, #84	; 0x54
 800a5c6:	ecbd 8b10 	vpop	{d8-d15}
 800a5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ce:	bf00      	nop

0800a5d0 <__errno>:
 800a5d0:	4b01      	ldr	r3, [pc, #4]	; (800a5d8 <__errno+0x8>)
 800a5d2:	6818      	ldr	r0, [r3, #0]
 800a5d4:	4770      	bx	lr
 800a5d6:	bf00      	nop
 800a5d8:	20000040 	.word	0x20000040

0800a5dc <__libc_init_array>:
 800a5dc:	b570      	push	{r4, r5, r6, lr}
 800a5de:	4d0d      	ldr	r5, [pc, #52]	; (800a614 <__libc_init_array+0x38>)
 800a5e0:	4c0d      	ldr	r4, [pc, #52]	; (800a618 <__libc_init_array+0x3c>)
 800a5e2:	1b64      	subs	r4, r4, r5
 800a5e4:	10a4      	asrs	r4, r4, #2
 800a5e6:	2600      	movs	r6, #0
 800a5e8:	42a6      	cmp	r6, r4
 800a5ea:	d109      	bne.n	800a600 <__libc_init_array+0x24>
 800a5ec:	4d0b      	ldr	r5, [pc, #44]	; (800a61c <__libc_init_array+0x40>)
 800a5ee:	4c0c      	ldr	r4, [pc, #48]	; (800a620 <__libc_init_array+0x44>)
 800a5f0:	f003 fff8 	bl	800e5e4 <_init>
 800a5f4:	1b64      	subs	r4, r4, r5
 800a5f6:	10a4      	asrs	r4, r4, #2
 800a5f8:	2600      	movs	r6, #0
 800a5fa:	42a6      	cmp	r6, r4
 800a5fc:	d105      	bne.n	800a60a <__libc_init_array+0x2e>
 800a5fe:	bd70      	pop	{r4, r5, r6, pc}
 800a600:	f855 3b04 	ldr.w	r3, [r5], #4
 800a604:	4798      	blx	r3
 800a606:	3601      	adds	r6, #1
 800a608:	e7ee      	b.n	800a5e8 <__libc_init_array+0xc>
 800a60a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a60e:	4798      	blx	r3
 800a610:	3601      	adds	r6, #1
 800a612:	e7f2      	b.n	800a5fa <__libc_init_array+0x1e>
 800a614:	080271b0 	.word	0x080271b0
 800a618:	080271b0 	.word	0x080271b0
 800a61c:	080271b0 	.word	0x080271b0
 800a620:	080271b4 	.word	0x080271b4

0800a624 <memset>:
 800a624:	4402      	add	r2, r0
 800a626:	4603      	mov	r3, r0
 800a628:	4293      	cmp	r3, r2
 800a62a:	d100      	bne.n	800a62e <memset+0xa>
 800a62c:	4770      	bx	lr
 800a62e:	f803 1b01 	strb.w	r1, [r3], #1
 800a632:	e7f9      	b.n	800a628 <memset+0x4>

0800a634 <__cvt>:
 800a634:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a638:	ec55 4b10 	vmov	r4, r5, d0
 800a63c:	2d00      	cmp	r5, #0
 800a63e:	460e      	mov	r6, r1
 800a640:	4619      	mov	r1, r3
 800a642:	462b      	mov	r3, r5
 800a644:	bfbb      	ittet	lt
 800a646:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a64a:	461d      	movlt	r5, r3
 800a64c:	2300      	movge	r3, #0
 800a64e:	232d      	movlt	r3, #45	; 0x2d
 800a650:	700b      	strb	r3, [r1, #0]
 800a652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a654:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a658:	4691      	mov	r9, r2
 800a65a:	f023 0820 	bic.w	r8, r3, #32
 800a65e:	bfbc      	itt	lt
 800a660:	4622      	movlt	r2, r4
 800a662:	4614      	movlt	r4, r2
 800a664:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a668:	d005      	beq.n	800a676 <__cvt+0x42>
 800a66a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a66e:	d100      	bne.n	800a672 <__cvt+0x3e>
 800a670:	3601      	adds	r6, #1
 800a672:	2102      	movs	r1, #2
 800a674:	e000      	b.n	800a678 <__cvt+0x44>
 800a676:	2103      	movs	r1, #3
 800a678:	ab03      	add	r3, sp, #12
 800a67a:	9301      	str	r3, [sp, #4]
 800a67c:	ab02      	add	r3, sp, #8
 800a67e:	9300      	str	r3, [sp, #0]
 800a680:	ec45 4b10 	vmov	d0, r4, r5
 800a684:	4653      	mov	r3, sl
 800a686:	4632      	mov	r2, r6
 800a688:	f000 fcea 	bl	800b060 <_dtoa_r>
 800a68c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a690:	4607      	mov	r7, r0
 800a692:	d102      	bne.n	800a69a <__cvt+0x66>
 800a694:	f019 0f01 	tst.w	r9, #1
 800a698:	d022      	beq.n	800a6e0 <__cvt+0xac>
 800a69a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a69e:	eb07 0906 	add.w	r9, r7, r6
 800a6a2:	d110      	bne.n	800a6c6 <__cvt+0x92>
 800a6a4:	783b      	ldrb	r3, [r7, #0]
 800a6a6:	2b30      	cmp	r3, #48	; 0x30
 800a6a8:	d10a      	bne.n	800a6c0 <__cvt+0x8c>
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	4629      	mov	r1, r5
 800a6b2:	f7f6 fa09 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6b6:	b918      	cbnz	r0, 800a6c0 <__cvt+0x8c>
 800a6b8:	f1c6 0601 	rsb	r6, r6, #1
 800a6bc:	f8ca 6000 	str.w	r6, [sl]
 800a6c0:	f8da 3000 	ldr.w	r3, [sl]
 800a6c4:	4499      	add	r9, r3
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	4629      	mov	r1, r5
 800a6ce:	f7f6 f9fb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6d2:	b108      	cbz	r0, 800a6d8 <__cvt+0xa4>
 800a6d4:	f8cd 900c 	str.w	r9, [sp, #12]
 800a6d8:	2230      	movs	r2, #48	; 0x30
 800a6da:	9b03      	ldr	r3, [sp, #12]
 800a6dc:	454b      	cmp	r3, r9
 800a6de:	d307      	bcc.n	800a6f0 <__cvt+0xbc>
 800a6e0:	9b03      	ldr	r3, [sp, #12]
 800a6e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6e4:	1bdb      	subs	r3, r3, r7
 800a6e6:	4638      	mov	r0, r7
 800a6e8:	6013      	str	r3, [r2, #0]
 800a6ea:	b004      	add	sp, #16
 800a6ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6f0:	1c59      	adds	r1, r3, #1
 800a6f2:	9103      	str	r1, [sp, #12]
 800a6f4:	701a      	strb	r2, [r3, #0]
 800a6f6:	e7f0      	b.n	800a6da <__cvt+0xa6>

0800a6f8 <__exponent>:
 800a6f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2900      	cmp	r1, #0
 800a6fe:	bfb8      	it	lt
 800a700:	4249      	neglt	r1, r1
 800a702:	f803 2b02 	strb.w	r2, [r3], #2
 800a706:	bfb4      	ite	lt
 800a708:	222d      	movlt	r2, #45	; 0x2d
 800a70a:	222b      	movge	r2, #43	; 0x2b
 800a70c:	2909      	cmp	r1, #9
 800a70e:	7042      	strb	r2, [r0, #1]
 800a710:	dd2a      	ble.n	800a768 <__exponent+0x70>
 800a712:	f10d 0407 	add.w	r4, sp, #7
 800a716:	46a4      	mov	ip, r4
 800a718:	270a      	movs	r7, #10
 800a71a:	46a6      	mov	lr, r4
 800a71c:	460a      	mov	r2, r1
 800a71e:	fb91 f6f7 	sdiv	r6, r1, r7
 800a722:	fb07 1516 	mls	r5, r7, r6, r1
 800a726:	3530      	adds	r5, #48	; 0x30
 800a728:	2a63      	cmp	r2, #99	; 0x63
 800a72a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a72e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a732:	4631      	mov	r1, r6
 800a734:	dcf1      	bgt.n	800a71a <__exponent+0x22>
 800a736:	3130      	adds	r1, #48	; 0x30
 800a738:	f1ae 0502 	sub.w	r5, lr, #2
 800a73c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a740:	1c44      	adds	r4, r0, #1
 800a742:	4629      	mov	r1, r5
 800a744:	4561      	cmp	r1, ip
 800a746:	d30a      	bcc.n	800a75e <__exponent+0x66>
 800a748:	f10d 0209 	add.w	r2, sp, #9
 800a74c:	eba2 020e 	sub.w	r2, r2, lr
 800a750:	4565      	cmp	r5, ip
 800a752:	bf88      	it	hi
 800a754:	2200      	movhi	r2, #0
 800a756:	4413      	add	r3, r2
 800a758:	1a18      	subs	r0, r3, r0
 800a75a:	b003      	add	sp, #12
 800a75c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a75e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a762:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a766:	e7ed      	b.n	800a744 <__exponent+0x4c>
 800a768:	2330      	movs	r3, #48	; 0x30
 800a76a:	3130      	adds	r1, #48	; 0x30
 800a76c:	7083      	strb	r3, [r0, #2]
 800a76e:	70c1      	strb	r1, [r0, #3]
 800a770:	1d03      	adds	r3, r0, #4
 800a772:	e7f1      	b.n	800a758 <__exponent+0x60>

0800a774 <_printf_float>:
 800a774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a778:	ed2d 8b02 	vpush	{d8}
 800a77c:	b08d      	sub	sp, #52	; 0x34
 800a77e:	460c      	mov	r4, r1
 800a780:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a784:	4616      	mov	r6, r2
 800a786:	461f      	mov	r7, r3
 800a788:	4605      	mov	r5, r0
 800a78a:	f001 fa69 	bl	800bc60 <_localeconv_r>
 800a78e:	f8d0 a000 	ldr.w	sl, [r0]
 800a792:	4650      	mov	r0, sl
 800a794:	f7f5 fd1c 	bl	80001d0 <strlen>
 800a798:	2300      	movs	r3, #0
 800a79a:	930a      	str	r3, [sp, #40]	; 0x28
 800a79c:	6823      	ldr	r3, [r4, #0]
 800a79e:	9305      	str	r3, [sp, #20]
 800a7a0:	f8d8 3000 	ldr.w	r3, [r8]
 800a7a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a7a8:	3307      	adds	r3, #7
 800a7aa:	f023 0307 	bic.w	r3, r3, #7
 800a7ae:	f103 0208 	add.w	r2, r3, #8
 800a7b2:	f8c8 2000 	str.w	r2, [r8]
 800a7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a7be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a7c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a7c6:	9307      	str	r3, [sp, #28]
 800a7c8:	f8cd 8018 	str.w	r8, [sp, #24]
 800a7cc:	ee08 0a10 	vmov	s16, r0
 800a7d0:	4b9f      	ldr	r3, [pc, #636]	; (800aa50 <_printf_float+0x2dc>)
 800a7d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7da:	f7f6 f9a7 	bl	8000b2c <__aeabi_dcmpun>
 800a7de:	bb88      	cbnz	r0, 800a844 <_printf_float+0xd0>
 800a7e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7e4:	4b9a      	ldr	r3, [pc, #616]	; (800aa50 <_printf_float+0x2dc>)
 800a7e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ea:	f7f6 f981 	bl	8000af0 <__aeabi_dcmple>
 800a7ee:	bb48      	cbnz	r0, 800a844 <_printf_float+0xd0>
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	4640      	mov	r0, r8
 800a7f6:	4649      	mov	r1, r9
 800a7f8:	f7f6 f970 	bl	8000adc <__aeabi_dcmplt>
 800a7fc:	b110      	cbz	r0, 800a804 <_printf_float+0x90>
 800a7fe:	232d      	movs	r3, #45	; 0x2d
 800a800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a804:	4b93      	ldr	r3, [pc, #588]	; (800aa54 <_printf_float+0x2e0>)
 800a806:	4894      	ldr	r0, [pc, #592]	; (800aa58 <_printf_float+0x2e4>)
 800a808:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a80c:	bf94      	ite	ls
 800a80e:	4698      	movls	r8, r3
 800a810:	4680      	movhi	r8, r0
 800a812:	2303      	movs	r3, #3
 800a814:	6123      	str	r3, [r4, #16]
 800a816:	9b05      	ldr	r3, [sp, #20]
 800a818:	f023 0204 	bic.w	r2, r3, #4
 800a81c:	6022      	str	r2, [r4, #0]
 800a81e:	f04f 0900 	mov.w	r9, #0
 800a822:	9700      	str	r7, [sp, #0]
 800a824:	4633      	mov	r3, r6
 800a826:	aa0b      	add	r2, sp, #44	; 0x2c
 800a828:	4621      	mov	r1, r4
 800a82a:	4628      	mov	r0, r5
 800a82c:	f000 f9d8 	bl	800abe0 <_printf_common>
 800a830:	3001      	adds	r0, #1
 800a832:	f040 8090 	bne.w	800a956 <_printf_float+0x1e2>
 800a836:	f04f 30ff 	mov.w	r0, #4294967295
 800a83a:	b00d      	add	sp, #52	; 0x34
 800a83c:	ecbd 8b02 	vpop	{d8}
 800a840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a844:	4642      	mov	r2, r8
 800a846:	464b      	mov	r3, r9
 800a848:	4640      	mov	r0, r8
 800a84a:	4649      	mov	r1, r9
 800a84c:	f7f6 f96e 	bl	8000b2c <__aeabi_dcmpun>
 800a850:	b140      	cbz	r0, 800a864 <_printf_float+0xf0>
 800a852:	464b      	mov	r3, r9
 800a854:	2b00      	cmp	r3, #0
 800a856:	bfbc      	itt	lt
 800a858:	232d      	movlt	r3, #45	; 0x2d
 800a85a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a85e:	487f      	ldr	r0, [pc, #508]	; (800aa5c <_printf_float+0x2e8>)
 800a860:	4b7f      	ldr	r3, [pc, #508]	; (800aa60 <_printf_float+0x2ec>)
 800a862:	e7d1      	b.n	800a808 <_printf_float+0x94>
 800a864:	6863      	ldr	r3, [r4, #4]
 800a866:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a86a:	9206      	str	r2, [sp, #24]
 800a86c:	1c5a      	adds	r2, r3, #1
 800a86e:	d13f      	bne.n	800a8f0 <_printf_float+0x17c>
 800a870:	2306      	movs	r3, #6
 800a872:	6063      	str	r3, [r4, #4]
 800a874:	9b05      	ldr	r3, [sp, #20]
 800a876:	6861      	ldr	r1, [r4, #4]
 800a878:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a87c:	2300      	movs	r3, #0
 800a87e:	9303      	str	r3, [sp, #12]
 800a880:	ab0a      	add	r3, sp, #40	; 0x28
 800a882:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a886:	ab09      	add	r3, sp, #36	; 0x24
 800a888:	ec49 8b10 	vmov	d0, r8, r9
 800a88c:	9300      	str	r3, [sp, #0]
 800a88e:	6022      	str	r2, [r4, #0]
 800a890:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a894:	4628      	mov	r0, r5
 800a896:	f7ff fecd 	bl	800a634 <__cvt>
 800a89a:	9b06      	ldr	r3, [sp, #24]
 800a89c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a89e:	2b47      	cmp	r3, #71	; 0x47
 800a8a0:	4680      	mov	r8, r0
 800a8a2:	d108      	bne.n	800a8b6 <_printf_float+0x142>
 800a8a4:	1cc8      	adds	r0, r1, #3
 800a8a6:	db02      	blt.n	800a8ae <_printf_float+0x13a>
 800a8a8:	6863      	ldr	r3, [r4, #4]
 800a8aa:	4299      	cmp	r1, r3
 800a8ac:	dd41      	ble.n	800a932 <_printf_float+0x1be>
 800a8ae:	f1ab 0b02 	sub.w	fp, fp, #2
 800a8b2:	fa5f fb8b 	uxtb.w	fp, fp
 800a8b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a8ba:	d820      	bhi.n	800a8fe <_printf_float+0x18a>
 800a8bc:	3901      	subs	r1, #1
 800a8be:	465a      	mov	r2, fp
 800a8c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a8c4:	9109      	str	r1, [sp, #36]	; 0x24
 800a8c6:	f7ff ff17 	bl	800a6f8 <__exponent>
 800a8ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8cc:	1813      	adds	r3, r2, r0
 800a8ce:	2a01      	cmp	r2, #1
 800a8d0:	4681      	mov	r9, r0
 800a8d2:	6123      	str	r3, [r4, #16]
 800a8d4:	dc02      	bgt.n	800a8dc <_printf_float+0x168>
 800a8d6:	6822      	ldr	r2, [r4, #0]
 800a8d8:	07d2      	lsls	r2, r2, #31
 800a8da:	d501      	bpl.n	800a8e0 <_printf_float+0x16c>
 800a8dc:	3301      	adds	r3, #1
 800a8de:	6123      	str	r3, [r4, #16]
 800a8e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d09c      	beq.n	800a822 <_printf_float+0xae>
 800a8e8:	232d      	movs	r3, #45	; 0x2d
 800a8ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8ee:	e798      	b.n	800a822 <_printf_float+0xae>
 800a8f0:	9a06      	ldr	r2, [sp, #24]
 800a8f2:	2a47      	cmp	r2, #71	; 0x47
 800a8f4:	d1be      	bne.n	800a874 <_printf_float+0x100>
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d1bc      	bne.n	800a874 <_printf_float+0x100>
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e7b9      	b.n	800a872 <_printf_float+0xfe>
 800a8fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a902:	d118      	bne.n	800a936 <_printf_float+0x1c2>
 800a904:	2900      	cmp	r1, #0
 800a906:	6863      	ldr	r3, [r4, #4]
 800a908:	dd0b      	ble.n	800a922 <_printf_float+0x1ae>
 800a90a:	6121      	str	r1, [r4, #16]
 800a90c:	b913      	cbnz	r3, 800a914 <_printf_float+0x1a0>
 800a90e:	6822      	ldr	r2, [r4, #0]
 800a910:	07d0      	lsls	r0, r2, #31
 800a912:	d502      	bpl.n	800a91a <_printf_float+0x1a6>
 800a914:	3301      	adds	r3, #1
 800a916:	440b      	add	r3, r1
 800a918:	6123      	str	r3, [r4, #16]
 800a91a:	65a1      	str	r1, [r4, #88]	; 0x58
 800a91c:	f04f 0900 	mov.w	r9, #0
 800a920:	e7de      	b.n	800a8e0 <_printf_float+0x16c>
 800a922:	b913      	cbnz	r3, 800a92a <_printf_float+0x1b6>
 800a924:	6822      	ldr	r2, [r4, #0]
 800a926:	07d2      	lsls	r2, r2, #31
 800a928:	d501      	bpl.n	800a92e <_printf_float+0x1ba>
 800a92a:	3302      	adds	r3, #2
 800a92c:	e7f4      	b.n	800a918 <_printf_float+0x1a4>
 800a92e:	2301      	movs	r3, #1
 800a930:	e7f2      	b.n	800a918 <_printf_float+0x1a4>
 800a932:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a938:	4299      	cmp	r1, r3
 800a93a:	db05      	blt.n	800a948 <_printf_float+0x1d4>
 800a93c:	6823      	ldr	r3, [r4, #0]
 800a93e:	6121      	str	r1, [r4, #16]
 800a940:	07d8      	lsls	r0, r3, #31
 800a942:	d5ea      	bpl.n	800a91a <_printf_float+0x1a6>
 800a944:	1c4b      	adds	r3, r1, #1
 800a946:	e7e7      	b.n	800a918 <_printf_float+0x1a4>
 800a948:	2900      	cmp	r1, #0
 800a94a:	bfd4      	ite	le
 800a94c:	f1c1 0202 	rsble	r2, r1, #2
 800a950:	2201      	movgt	r2, #1
 800a952:	4413      	add	r3, r2
 800a954:	e7e0      	b.n	800a918 <_printf_float+0x1a4>
 800a956:	6823      	ldr	r3, [r4, #0]
 800a958:	055a      	lsls	r2, r3, #21
 800a95a:	d407      	bmi.n	800a96c <_printf_float+0x1f8>
 800a95c:	6923      	ldr	r3, [r4, #16]
 800a95e:	4642      	mov	r2, r8
 800a960:	4631      	mov	r1, r6
 800a962:	4628      	mov	r0, r5
 800a964:	47b8      	blx	r7
 800a966:	3001      	adds	r0, #1
 800a968:	d12c      	bne.n	800a9c4 <_printf_float+0x250>
 800a96a:	e764      	b.n	800a836 <_printf_float+0xc2>
 800a96c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a970:	f240 80e0 	bls.w	800ab34 <_printf_float+0x3c0>
 800a974:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a978:	2200      	movs	r2, #0
 800a97a:	2300      	movs	r3, #0
 800a97c:	f7f6 f8a4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a980:	2800      	cmp	r0, #0
 800a982:	d034      	beq.n	800a9ee <_printf_float+0x27a>
 800a984:	4a37      	ldr	r2, [pc, #220]	; (800aa64 <_printf_float+0x2f0>)
 800a986:	2301      	movs	r3, #1
 800a988:	4631      	mov	r1, r6
 800a98a:	4628      	mov	r0, r5
 800a98c:	47b8      	blx	r7
 800a98e:	3001      	adds	r0, #1
 800a990:	f43f af51 	beq.w	800a836 <_printf_float+0xc2>
 800a994:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a998:	429a      	cmp	r2, r3
 800a99a:	db02      	blt.n	800a9a2 <_printf_float+0x22e>
 800a99c:	6823      	ldr	r3, [r4, #0]
 800a99e:	07d8      	lsls	r0, r3, #31
 800a9a0:	d510      	bpl.n	800a9c4 <_printf_float+0x250>
 800a9a2:	ee18 3a10 	vmov	r3, s16
 800a9a6:	4652      	mov	r2, sl
 800a9a8:	4631      	mov	r1, r6
 800a9aa:	4628      	mov	r0, r5
 800a9ac:	47b8      	blx	r7
 800a9ae:	3001      	adds	r0, #1
 800a9b0:	f43f af41 	beq.w	800a836 <_printf_float+0xc2>
 800a9b4:	f04f 0800 	mov.w	r8, #0
 800a9b8:	f104 091a 	add.w	r9, r4, #26
 800a9bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	4543      	cmp	r3, r8
 800a9c2:	dc09      	bgt.n	800a9d8 <_printf_float+0x264>
 800a9c4:	6823      	ldr	r3, [r4, #0]
 800a9c6:	079b      	lsls	r3, r3, #30
 800a9c8:	f100 8105 	bmi.w	800abd6 <_printf_float+0x462>
 800a9cc:	68e0      	ldr	r0, [r4, #12]
 800a9ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9d0:	4298      	cmp	r0, r3
 800a9d2:	bfb8      	it	lt
 800a9d4:	4618      	movlt	r0, r3
 800a9d6:	e730      	b.n	800a83a <_printf_float+0xc6>
 800a9d8:	2301      	movs	r3, #1
 800a9da:	464a      	mov	r2, r9
 800a9dc:	4631      	mov	r1, r6
 800a9de:	4628      	mov	r0, r5
 800a9e0:	47b8      	blx	r7
 800a9e2:	3001      	adds	r0, #1
 800a9e4:	f43f af27 	beq.w	800a836 <_printf_float+0xc2>
 800a9e8:	f108 0801 	add.w	r8, r8, #1
 800a9ec:	e7e6      	b.n	800a9bc <_printf_float+0x248>
 800a9ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	dc39      	bgt.n	800aa68 <_printf_float+0x2f4>
 800a9f4:	4a1b      	ldr	r2, [pc, #108]	; (800aa64 <_printf_float+0x2f0>)
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	4631      	mov	r1, r6
 800a9fa:	4628      	mov	r0, r5
 800a9fc:	47b8      	blx	r7
 800a9fe:	3001      	adds	r0, #1
 800aa00:	f43f af19 	beq.w	800a836 <_printf_float+0xc2>
 800aa04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	d102      	bne.n	800aa12 <_printf_float+0x29e>
 800aa0c:	6823      	ldr	r3, [r4, #0]
 800aa0e:	07d9      	lsls	r1, r3, #31
 800aa10:	d5d8      	bpl.n	800a9c4 <_printf_float+0x250>
 800aa12:	ee18 3a10 	vmov	r3, s16
 800aa16:	4652      	mov	r2, sl
 800aa18:	4631      	mov	r1, r6
 800aa1a:	4628      	mov	r0, r5
 800aa1c:	47b8      	blx	r7
 800aa1e:	3001      	adds	r0, #1
 800aa20:	f43f af09 	beq.w	800a836 <_printf_float+0xc2>
 800aa24:	f04f 0900 	mov.w	r9, #0
 800aa28:	f104 0a1a 	add.w	sl, r4, #26
 800aa2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa2e:	425b      	negs	r3, r3
 800aa30:	454b      	cmp	r3, r9
 800aa32:	dc01      	bgt.n	800aa38 <_printf_float+0x2c4>
 800aa34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa36:	e792      	b.n	800a95e <_printf_float+0x1ea>
 800aa38:	2301      	movs	r3, #1
 800aa3a:	4652      	mov	r2, sl
 800aa3c:	4631      	mov	r1, r6
 800aa3e:	4628      	mov	r0, r5
 800aa40:	47b8      	blx	r7
 800aa42:	3001      	adds	r0, #1
 800aa44:	f43f aef7 	beq.w	800a836 <_printf_float+0xc2>
 800aa48:	f109 0901 	add.w	r9, r9, #1
 800aa4c:	e7ee      	b.n	800aa2c <_printf_float+0x2b8>
 800aa4e:	bf00      	nop
 800aa50:	7fefffff 	.word	0x7fefffff
 800aa54:	08026bf4 	.word	0x08026bf4
 800aa58:	08026bf8 	.word	0x08026bf8
 800aa5c:	08026c00 	.word	0x08026c00
 800aa60:	08026bfc 	.word	0x08026bfc
 800aa64:	08026c04 	.word	0x08026c04
 800aa68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	bfa8      	it	ge
 800aa70:	461a      	movge	r2, r3
 800aa72:	2a00      	cmp	r2, #0
 800aa74:	4691      	mov	r9, r2
 800aa76:	dc37      	bgt.n	800aae8 <_printf_float+0x374>
 800aa78:	f04f 0b00 	mov.w	fp, #0
 800aa7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa80:	f104 021a 	add.w	r2, r4, #26
 800aa84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa86:	9305      	str	r3, [sp, #20]
 800aa88:	eba3 0309 	sub.w	r3, r3, r9
 800aa8c:	455b      	cmp	r3, fp
 800aa8e:	dc33      	bgt.n	800aaf8 <_printf_float+0x384>
 800aa90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa94:	429a      	cmp	r2, r3
 800aa96:	db3b      	blt.n	800ab10 <_printf_float+0x39c>
 800aa98:	6823      	ldr	r3, [r4, #0]
 800aa9a:	07da      	lsls	r2, r3, #31
 800aa9c:	d438      	bmi.n	800ab10 <_printf_float+0x39c>
 800aa9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaa0:	9a05      	ldr	r2, [sp, #20]
 800aaa2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aaa4:	1a9a      	subs	r2, r3, r2
 800aaa6:	eba3 0901 	sub.w	r9, r3, r1
 800aaaa:	4591      	cmp	r9, r2
 800aaac:	bfa8      	it	ge
 800aaae:	4691      	movge	r9, r2
 800aab0:	f1b9 0f00 	cmp.w	r9, #0
 800aab4:	dc35      	bgt.n	800ab22 <_printf_float+0x3ae>
 800aab6:	f04f 0800 	mov.w	r8, #0
 800aaba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aabe:	f104 0a1a 	add.w	sl, r4, #26
 800aac2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aac6:	1a9b      	subs	r3, r3, r2
 800aac8:	eba3 0309 	sub.w	r3, r3, r9
 800aacc:	4543      	cmp	r3, r8
 800aace:	f77f af79 	ble.w	800a9c4 <_printf_float+0x250>
 800aad2:	2301      	movs	r3, #1
 800aad4:	4652      	mov	r2, sl
 800aad6:	4631      	mov	r1, r6
 800aad8:	4628      	mov	r0, r5
 800aada:	47b8      	blx	r7
 800aadc:	3001      	adds	r0, #1
 800aade:	f43f aeaa 	beq.w	800a836 <_printf_float+0xc2>
 800aae2:	f108 0801 	add.w	r8, r8, #1
 800aae6:	e7ec      	b.n	800aac2 <_printf_float+0x34e>
 800aae8:	4613      	mov	r3, r2
 800aaea:	4631      	mov	r1, r6
 800aaec:	4642      	mov	r2, r8
 800aaee:	4628      	mov	r0, r5
 800aaf0:	47b8      	blx	r7
 800aaf2:	3001      	adds	r0, #1
 800aaf4:	d1c0      	bne.n	800aa78 <_printf_float+0x304>
 800aaf6:	e69e      	b.n	800a836 <_printf_float+0xc2>
 800aaf8:	2301      	movs	r3, #1
 800aafa:	4631      	mov	r1, r6
 800aafc:	4628      	mov	r0, r5
 800aafe:	9205      	str	r2, [sp, #20]
 800ab00:	47b8      	blx	r7
 800ab02:	3001      	adds	r0, #1
 800ab04:	f43f ae97 	beq.w	800a836 <_printf_float+0xc2>
 800ab08:	9a05      	ldr	r2, [sp, #20]
 800ab0a:	f10b 0b01 	add.w	fp, fp, #1
 800ab0e:	e7b9      	b.n	800aa84 <_printf_float+0x310>
 800ab10:	ee18 3a10 	vmov	r3, s16
 800ab14:	4652      	mov	r2, sl
 800ab16:	4631      	mov	r1, r6
 800ab18:	4628      	mov	r0, r5
 800ab1a:	47b8      	blx	r7
 800ab1c:	3001      	adds	r0, #1
 800ab1e:	d1be      	bne.n	800aa9e <_printf_float+0x32a>
 800ab20:	e689      	b.n	800a836 <_printf_float+0xc2>
 800ab22:	9a05      	ldr	r2, [sp, #20]
 800ab24:	464b      	mov	r3, r9
 800ab26:	4442      	add	r2, r8
 800ab28:	4631      	mov	r1, r6
 800ab2a:	4628      	mov	r0, r5
 800ab2c:	47b8      	blx	r7
 800ab2e:	3001      	adds	r0, #1
 800ab30:	d1c1      	bne.n	800aab6 <_printf_float+0x342>
 800ab32:	e680      	b.n	800a836 <_printf_float+0xc2>
 800ab34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab36:	2a01      	cmp	r2, #1
 800ab38:	dc01      	bgt.n	800ab3e <_printf_float+0x3ca>
 800ab3a:	07db      	lsls	r3, r3, #31
 800ab3c:	d538      	bpl.n	800abb0 <_printf_float+0x43c>
 800ab3e:	2301      	movs	r3, #1
 800ab40:	4642      	mov	r2, r8
 800ab42:	4631      	mov	r1, r6
 800ab44:	4628      	mov	r0, r5
 800ab46:	47b8      	blx	r7
 800ab48:	3001      	adds	r0, #1
 800ab4a:	f43f ae74 	beq.w	800a836 <_printf_float+0xc2>
 800ab4e:	ee18 3a10 	vmov	r3, s16
 800ab52:	4652      	mov	r2, sl
 800ab54:	4631      	mov	r1, r6
 800ab56:	4628      	mov	r0, r5
 800ab58:	47b8      	blx	r7
 800ab5a:	3001      	adds	r0, #1
 800ab5c:	f43f ae6b 	beq.w	800a836 <_printf_float+0xc2>
 800ab60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ab64:	2200      	movs	r2, #0
 800ab66:	2300      	movs	r3, #0
 800ab68:	f7f5 ffae 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab6c:	b9d8      	cbnz	r0, 800aba6 <_printf_float+0x432>
 800ab6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab70:	f108 0201 	add.w	r2, r8, #1
 800ab74:	3b01      	subs	r3, #1
 800ab76:	4631      	mov	r1, r6
 800ab78:	4628      	mov	r0, r5
 800ab7a:	47b8      	blx	r7
 800ab7c:	3001      	adds	r0, #1
 800ab7e:	d10e      	bne.n	800ab9e <_printf_float+0x42a>
 800ab80:	e659      	b.n	800a836 <_printf_float+0xc2>
 800ab82:	2301      	movs	r3, #1
 800ab84:	4652      	mov	r2, sl
 800ab86:	4631      	mov	r1, r6
 800ab88:	4628      	mov	r0, r5
 800ab8a:	47b8      	blx	r7
 800ab8c:	3001      	adds	r0, #1
 800ab8e:	f43f ae52 	beq.w	800a836 <_printf_float+0xc2>
 800ab92:	f108 0801 	add.w	r8, r8, #1
 800ab96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab98:	3b01      	subs	r3, #1
 800ab9a:	4543      	cmp	r3, r8
 800ab9c:	dcf1      	bgt.n	800ab82 <_printf_float+0x40e>
 800ab9e:	464b      	mov	r3, r9
 800aba0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aba4:	e6dc      	b.n	800a960 <_printf_float+0x1ec>
 800aba6:	f04f 0800 	mov.w	r8, #0
 800abaa:	f104 0a1a 	add.w	sl, r4, #26
 800abae:	e7f2      	b.n	800ab96 <_printf_float+0x422>
 800abb0:	2301      	movs	r3, #1
 800abb2:	4642      	mov	r2, r8
 800abb4:	e7df      	b.n	800ab76 <_printf_float+0x402>
 800abb6:	2301      	movs	r3, #1
 800abb8:	464a      	mov	r2, r9
 800abba:	4631      	mov	r1, r6
 800abbc:	4628      	mov	r0, r5
 800abbe:	47b8      	blx	r7
 800abc0:	3001      	adds	r0, #1
 800abc2:	f43f ae38 	beq.w	800a836 <_printf_float+0xc2>
 800abc6:	f108 0801 	add.w	r8, r8, #1
 800abca:	68e3      	ldr	r3, [r4, #12]
 800abcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800abce:	1a5b      	subs	r3, r3, r1
 800abd0:	4543      	cmp	r3, r8
 800abd2:	dcf0      	bgt.n	800abb6 <_printf_float+0x442>
 800abd4:	e6fa      	b.n	800a9cc <_printf_float+0x258>
 800abd6:	f04f 0800 	mov.w	r8, #0
 800abda:	f104 0919 	add.w	r9, r4, #25
 800abde:	e7f4      	b.n	800abca <_printf_float+0x456>

0800abe0 <_printf_common>:
 800abe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abe4:	4616      	mov	r6, r2
 800abe6:	4699      	mov	r9, r3
 800abe8:	688a      	ldr	r2, [r1, #8]
 800abea:	690b      	ldr	r3, [r1, #16]
 800abec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800abf0:	4293      	cmp	r3, r2
 800abf2:	bfb8      	it	lt
 800abf4:	4613      	movlt	r3, r2
 800abf6:	6033      	str	r3, [r6, #0]
 800abf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800abfc:	4607      	mov	r7, r0
 800abfe:	460c      	mov	r4, r1
 800ac00:	b10a      	cbz	r2, 800ac06 <_printf_common+0x26>
 800ac02:	3301      	adds	r3, #1
 800ac04:	6033      	str	r3, [r6, #0]
 800ac06:	6823      	ldr	r3, [r4, #0]
 800ac08:	0699      	lsls	r1, r3, #26
 800ac0a:	bf42      	ittt	mi
 800ac0c:	6833      	ldrmi	r3, [r6, #0]
 800ac0e:	3302      	addmi	r3, #2
 800ac10:	6033      	strmi	r3, [r6, #0]
 800ac12:	6825      	ldr	r5, [r4, #0]
 800ac14:	f015 0506 	ands.w	r5, r5, #6
 800ac18:	d106      	bne.n	800ac28 <_printf_common+0x48>
 800ac1a:	f104 0a19 	add.w	sl, r4, #25
 800ac1e:	68e3      	ldr	r3, [r4, #12]
 800ac20:	6832      	ldr	r2, [r6, #0]
 800ac22:	1a9b      	subs	r3, r3, r2
 800ac24:	42ab      	cmp	r3, r5
 800ac26:	dc26      	bgt.n	800ac76 <_printf_common+0x96>
 800ac28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac2c:	1e13      	subs	r3, r2, #0
 800ac2e:	6822      	ldr	r2, [r4, #0]
 800ac30:	bf18      	it	ne
 800ac32:	2301      	movne	r3, #1
 800ac34:	0692      	lsls	r2, r2, #26
 800ac36:	d42b      	bmi.n	800ac90 <_printf_common+0xb0>
 800ac38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac3c:	4649      	mov	r1, r9
 800ac3e:	4638      	mov	r0, r7
 800ac40:	47c0      	blx	r8
 800ac42:	3001      	adds	r0, #1
 800ac44:	d01e      	beq.n	800ac84 <_printf_common+0xa4>
 800ac46:	6823      	ldr	r3, [r4, #0]
 800ac48:	68e5      	ldr	r5, [r4, #12]
 800ac4a:	6832      	ldr	r2, [r6, #0]
 800ac4c:	f003 0306 	and.w	r3, r3, #6
 800ac50:	2b04      	cmp	r3, #4
 800ac52:	bf08      	it	eq
 800ac54:	1aad      	subeq	r5, r5, r2
 800ac56:	68a3      	ldr	r3, [r4, #8]
 800ac58:	6922      	ldr	r2, [r4, #16]
 800ac5a:	bf0c      	ite	eq
 800ac5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac60:	2500      	movne	r5, #0
 800ac62:	4293      	cmp	r3, r2
 800ac64:	bfc4      	itt	gt
 800ac66:	1a9b      	subgt	r3, r3, r2
 800ac68:	18ed      	addgt	r5, r5, r3
 800ac6a:	2600      	movs	r6, #0
 800ac6c:	341a      	adds	r4, #26
 800ac6e:	42b5      	cmp	r5, r6
 800ac70:	d11a      	bne.n	800aca8 <_printf_common+0xc8>
 800ac72:	2000      	movs	r0, #0
 800ac74:	e008      	b.n	800ac88 <_printf_common+0xa8>
 800ac76:	2301      	movs	r3, #1
 800ac78:	4652      	mov	r2, sl
 800ac7a:	4649      	mov	r1, r9
 800ac7c:	4638      	mov	r0, r7
 800ac7e:	47c0      	blx	r8
 800ac80:	3001      	adds	r0, #1
 800ac82:	d103      	bne.n	800ac8c <_printf_common+0xac>
 800ac84:	f04f 30ff 	mov.w	r0, #4294967295
 800ac88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac8c:	3501      	adds	r5, #1
 800ac8e:	e7c6      	b.n	800ac1e <_printf_common+0x3e>
 800ac90:	18e1      	adds	r1, r4, r3
 800ac92:	1c5a      	adds	r2, r3, #1
 800ac94:	2030      	movs	r0, #48	; 0x30
 800ac96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac9a:	4422      	add	r2, r4
 800ac9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aca0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aca4:	3302      	adds	r3, #2
 800aca6:	e7c7      	b.n	800ac38 <_printf_common+0x58>
 800aca8:	2301      	movs	r3, #1
 800acaa:	4622      	mov	r2, r4
 800acac:	4649      	mov	r1, r9
 800acae:	4638      	mov	r0, r7
 800acb0:	47c0      	blx	r8
 800acb2:	3001      	adds	r0, #1
 800acb4:	d0e6      	beq.n	800ac84 <_printf_common+0xa4>
 800acb6:	3601      	adds	r6, #1
 800acb8:	e7d9      	b.n	800ac6e <_printf_common+0x8e>
	...

0800acbc <_printf_i>:
 800acbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acc0:	7e0f      	ldrb	r7, [r1, #24]
 800acc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800acc4:	2f78      	cmp	r7, #120	; 0x78
 800acc6:	4691      	mov	r9, r2
 800acc8:	4680      	mov	r8, r0
 800acca:	460c      	mov	r4, r1
 800accc:	469a      	mov	sl, r3
 800acce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800acd2:	d807      	bhi.n	800ace4 <_printf_i+0x28>
 800acd4:	2f62      	cmp	r7, #98	; 0x62
 800acd6:	d80a      	bhi.n	800acee <_printf_i+0x32>
 800acd8:	2f00      	cmp	r7, #0
 800acda:	f000 80d8 	beq.w	800ae8e <_printf_i+0x1d2>
 800acde:	2f58      	cmp	r7, #88	; 0x58
 800ace0:	f000 80a3 	beq.w	800ae2a <_printf_i+0x16e>
 800ace4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ace8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800acec:	e03a      	b.n	800ad64 <_printf_i+0xa8>
 800acee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800acf2:	2b15      	cmp	r3, #21
 800acf4:	d8f6      	bhi.n	800ace4 <_printf_i+0x28>
 800acf6:	a101      	add	r1, pc, #4	; (adr r1, 800acfc <_printf_i+0x40>)
 800acf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800acfc:	0800ad55 	.word	0x0800ad55
 800ad00:	0800ad69 	.word	0x0800ad69
 800ad04:	0800ace5 	.word	0x0800ace5
 800ad08:	0800ace5 	.word	0x0800ace5
 800ad0c:	0800ace5 	.word	0x0800ace5
 800ad10:	0800ace5 	.word	0x0800ace5
 800ad14:	0800ad69 	.word	0x0800ad69
 800ad18:	0800ace5 	.word	0x0800ace5
 800ad1c:	0800ace5 	.word	0x0800ace5
 800ad20:	0800ace5 	.word	0x0800ace5
 800ad24:	0800ace5 	.word	0x0800ace5
 800ad28:	0800ae75 	.word	0x0800ae75
 800ad2c:	0800ad99 	.word	0x0800ad99
 800ad30:	0800ae57 	.word	0x0800ae57
 800ad34:	0800ace5 	.word	0x0800ace5
 800ad38:	0800ace5 	.word	0x0800ace5
 800ad3c:	0800ae97 	.word	0x0800ae97
 800ad40:	0800ace5 	.word	0x0800ace5
 800ad44:	0800ad99 	.word	0x0800ad99
 800ad48:	0800ace5 	.word	0x0800ace5
 800ad4c:	0800ace5 	.word	0x0800ace5
 800ad50:	0800ae5f 	.word	0x0800ae5f
 800ad54:	682b      	ldr	r3, [r5, #0]
 800ad56:	1d1a      	adds	r2, r3, #4
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	602a      	str	r2, [r5, #0]
 800ad5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad64:	2301      	movs	r3, #1
 800ad66:	e0a3      	b.n	800aeb0 <_printf_i+0x1f4>
 800ad68:	6820      	ldr	r0, [r4, #0]
 800ad6a:	6829      	ldr	r1, [r5, #0]
 800ad6c:	0606      	lsls	r6, r0, #24
 800ad6e:	f101 0304 	add.w	r3, r1, #4
 800ad72:	d50a      	bpl.n	800ad8a <_printf_i+0xce>
 800ad74:	680e      	ldr	r6, [r1, #0]
 800ad76:	602b      	str	r3, [r5, #0]
 800ad78:	2e00      	cmp	r6, #0
 800ad7a:	da03      	bge.n	800ad84 <_printf_i+0xc8>
 800ad7c:	232d      	movs	r3, #45	; 0x2d
 800ad7e:	4276      	negs	r6, r6
 800ad80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad84:	485e      	ldr	r0, [pc, #376]	; (800af00 <_printf_i+0x244>)
 800ad86:	230a      	movs	r3, #10
 800ad88:	e019      	b.n	800adbe <_printf_i+0x102>
 800ad8a:	680e      	ldr	r6, [r1, #0]
 800ad8c:	602b      	str	r3, [r5, #0]
 800ad8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ad92:	bf18      	it	ne
 800ad94:	b236      	sxthne	r6, r6
 800ad96:	e7ef      	b.n	800ad78 <_printf_i+0xbc>
 800ad98:	682b      	ldr	r3, [r5, #0]
 800ad9a:	6820      	ldr	r0, [r4, #0]
 800ad9c:	1d19      	adds	r1, r3, #4
 800ad9e:	6029      	str	r1, [r5, #0]
 800ada0:	0601      	lsls	r1, r0, #24
 800ada2:	d501      	bpl.n	800ada8 <_printf_i+0xec>
 800ada4:	681e      	ldr	r6, [r3, #0]
 800ada6:	e002      	b.n	800adae <_printf_i+0xf2>
 800ada8:	0646      	lsls	r6, r0, #25
 800adaa:	d5fb      	bpl.n	800ada4 <_printf_i+0xe8>
 800adac:	881e      	ldrh	r6, [r3, #0]
 800adae:	4854      	ldr	r0, [pc, #336]	; (800af00 <_printf_i+0x244>)
 800adb0:	2f6f      	cmp	r7, #111	; 0x6f
 800adb2:	bf0c      	ite	eq
 800adb4:	2308      	moveq	r3, #8
 800adb6:	230a      	movne	r3, #10
 800adb8:	2100      	movs	r1, #0
 800adba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800adbe:	6865      	ldr	r5, [r4, #4]
 800adc0:	60a5      	str	r5, [r4, #8]
 800adc2:	2d00      	cmp	r5, #0
 800adc4:	bfa2      	ittt	ge
 800adc6:	6821      	ldrge	r1, [r4, #0]
 800adc8:	f021 0104 	bicge.w	r1, r1, #4
 800adcc:	6021      	strge	r1, [r4, #0]
 800adce:	b90e      	cbnz	r6, 800add4 <_printf_i+0x118>
 800add0:	2d00      	cmp	r5, #0
 800add2:	d04d      	beq.n	800ae70 <_printf_i+0x1b4>
 800add4:	4615      	mov	r5, r2
 800add6:	fbb6 f1f3 	udiv	r1, r6, r3
 800adda:	fb03 6711 	mls	r7, r3, r1, r6
 800adde:	5dc7      	ldrb	r7, [r0, r7]
 800ade0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ade4:	4637      	mov	r7, r6
 800ade6:	42bb      	cmp	r3, r7
 800ade8:	460e      	mov	r6, r1
 800adea:	d9f4      	bls.n	800add6 <_printf_i+0x11a>
 800adec:	2b08      	cmp	r3, #8
 800adee:	d10b      	bne.n	800ae08 <_printf_i+0x14c>
 800adf0:	6823      	ldr	r3, [r4, #0]
 800adf2:	07de      	lsls	r6, r3, #31
 800adf4:	d508      	bpl.n	800ae08 <_printf_i+0x14c>
 800adf6:	6923      	ldr	r3, [r4, #16]
 800adf8:	6861      	ldr	r1, [r4, #4]
 800adfa:	4299      	cmp	r1, r3
 800adfc:	bfde      	ittt	le
 800adfe:	2330      	movle	r3, #48	; 0x30
 800ae00:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae04:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ae08:	1b52      	subs	r2, r2, r5
 800ae0a:	6122      	str	r2, [r4, #16]
 800ae0c:	f8cd a000 	str.w	sl, [sp]
 800ae10:	464b      	mov	r3, r9
 800ae12:	aa03      	add	r2, sp, #12
 800ae14:	4621      	mov	r1, r4
 800ae16:	4640      	mov	r0, r8
 800ae18:	f7ff fee2 	bl	800abe0 <_printf_common>
 800ae1c:	3001      	adds	r0, #1
 800ae1e:	d14c      	bne.n	800aeba <_printf_i+0x1fe>
 800ae20:	f04f 30ff 	mov.w	r0, #4294967295
 800ae24:	b004      	add	sp, #16
 800ae26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae2a:	4835      	ldr	r0, [pc, #212]	; (800af00 <_printf_i+0x244>)
 800ae2c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ae30:	6829      	ldr	r1, [r5, #0]
 800ae32:	6823      	ldr	r3, [r4, #0]
 800ae34:	f851 6b04 	ldr.w	r6, [r1], #4
 800ae38:	6029      	str	r1, [r5, #0]
 800ae3a:	061d      	lsls	r5, r3, #24
 800ae3c:	d514      	bpl.n	800ae68 <_printf_i+0x1ac>
 800ae3e:	07df      	lsls	r7, r3, #31
 800ae40:	bf44      	itt	mi
 800ae42:	f043 0320 	orrmi.w	r3, r3, #32
 800ae46:	6023      	strmi	r3, [r4, #0]
 800ae48:	b91e      	cbnz	r6, 800ae52 <_printf_i+0x196>
 800ae4a:	6823      	ldr	r3, [r4, #0]
 800ae4c:	f023 0320 	bic.w	r3, r3, #32
 800ae50:	6023      	str	r3, [r4, #0]
 800ae52:	2310      	movs	r3, #16
 800ae54:	e7b0      	b.n	800adb8 <_printf_i+0xfc>
 800ae56:	6823      	ldr	r3, [r4, #0]
 800ae58:	f043 0320 	orr.w	r3, r3, #32
 800ae5c:	6023      	str	r3, [r4, #0]
 800ae5e:	2378      	movs	r3, #120	; 0x78
 800ae60:	4828      	ldr	r0, [pc, #160]	; (800af04 <_printf_i+0x248>)
 800ae62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ae66:	e7e3      	b.n	800ae30 <_printf_i+0x174>
 800ae68:	0659      	lsls	r1, r3, #25
 800ae6a:	bf48      	it	mi
 800ae6c:	b2b6      	uxthmi	r6, r6
 800ae6e:	e7e6      	b.n	800ae3e <_printf_i+0x182>
 800ae70:	4615      	mov	r5, r2
 800ae72:	e7bb      	b.n	800adec <_printf_i+0x130>
 800ae74:	682b      	ldr	r3, [r5, #0]
 800ae76:	6826      	ldr	r6, [r4, #0]
 800ae78:	6961      	ldr	r1, [r4, #20]
 800ae7a:	1d18      	adds	r0, r3, #4
 800ae7c:	6028      	str	r0, [r5, #0]
 800ae7e:	0635      	lsls	r5, r6, #24
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	d501      	bpl.n	800ae88 <_printf_i+0x1cc>
 800ae84:	6019      	str	r1, [r3, #0]
 800ae86:	e002      	b.n	800ae8e <_printf_i+0x1d2>
 800ae88:	0670      	lsls	r0, r6, #25
 800ae8a:	d5fb      	bpl.n	800ae84 <_printf_i+0x1c8>
 800ae8c:	8019      	strh	r1, [r3, #0]
 800ae8e:	2300      	movs	r3, #0
 800ae90:	6123      	str	r3, [r4, #16]
 800ae92:	4615      	mov	r5, r2
 800ae94:	e7ba      	b.n	800ae0c <_printf_i+0x150>
 800ae96:	682b      	ldr	r3, [r5, #0]
 800ae98:	1d1a      	adds	r2, r3, #4
 800ae9a:	602a      	str	r2, [r5, #0]
 800ae9c:	681d      	ldr	r5, [r3, #0]
 800ae9e:	6862      	ldr	r2, [r4, #4]
 800aea0:	2100      	movs	r1, #0
 800aea2:	4628      	mov	r0, r5
 800aea4:	f7f5 f99c 	bl	80001e0 <memchr>
 800aea8:	b108      	cbz	r0, 800aeae <_printf_i+0x1f2>
 800aeaa:	1b40      	subs	r0, r0, r5
 800aeac:	6060      	str	r0, [r4, #4]
 800aeae:	6863      	ldr	r3, [r4, #4]
 800aeb0:	6123      	str	r3, [r4, #16]
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aeb8:	e7a8      	b.n	800ae0c <_printf_i+0x150>
 800aeba:	6923      	ldr	r3, [r4, #16]
 800aebc:	462a      	mov	r2, r5
 800aebe:	4649      	mov	r1, r9
 800aec0:	4640      	mov	r0, r8
 800aec2:	47d0      	blx	sl
 800aec4:	3001      	adds	r0, #1
 800aec6:	d0ab      	beq.n	800ae20 <_printf_i+0x164>
 800aec8:	6823      	ldr	r3, [r4, #0]
 800aeca:	079b      	lsls	r3, r3, #30
 800aecc:	d413      	bmi.n	800aef6 <_printf_i+0x23a>
 800aece:	68e0      	ldr	r0, [r4, #12]
 800aed0:	9b03      	ldr	r3, [sp, #12]
 800aed2:	4298      	cmp	r0, r3
 800aed4:	bfb8      	it	lt
 800aed6:	4618      	movlt	r0, r3
 800aed8:	e7a4      	b.n	800ae24 <_printf_i+0x168>
 800aeda:	2301      	movs	r3, #1
 800aedc:	4632      	mov	r2, r6
 800aede:	4649      	mov	r1, r9
 800aee0:	4640      	mov	r0, r8
 800aee2:	47d0      	blx	sl
 800aee4:	3001      	adds	r0, #1
 800aee6:	d09b      	beq.n	800ae20 <_printf_i+0x164>
 800aee8:	3501      	adds	r5, #1
 800aeea:	68e3      	ldr	r3, [r4, #12]
 800aeec:	9903      	ldr	r1, [sp, #12]
 800aeee:	1a5b      	subs	r3, r3, r1
 800aef0:	42ab      	cmp	r3, r5
 800aef2:	dcf2      	bgt.n	800aeda <_printf_i+0x21e>
 800aef4:	e7eb      	b.n	800aece <_printf_i+0x212>
 800aef6:	2500      	movs	r5, #0
 800aef8:	f104 0619 	add.w	r6, r4, #25
 800aefc:	e7f5      	b.n	800aeea <_printf_i+0x22e>
 800aefe:	bf00      	nop
 800af00:	08026c06 	.word	0x08026c06
 800af04:	08026c17 	.word	0x08026c17

0800af08 <__assert_func>:
 800af08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af0a:	4614      	mov	r4, r2
 800af0c:	461a      	mov	r2, r3
 800af0e:	4b09      	ldr	r3, [pc, #36]	; (800af34 <__assert_func+0x2c>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	4605      	mov	r5, r0
 800af14:	68d8      	ldr	r0, [r3, #12]
 800af16:	b14c      	cbz	r4, 800af2c <__assert_func+0x24>
 800af18:	4b07      	ldr	r3, [pc, #28]	; (800af38 <__assert_func+0x30>)
 800af1a:	9100      	str	r1, [sp, #0]
 800af1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af20:	4906      	ldr	r1, [pc, #24]	; (800af3c <__assert_func+0x34>)
 800af22:	462b      	mov	r3, r5
 800af24:	f000 fe8a 	bl	800bc3c <fiprintf>
 800af28:	f001 fd58 	bl	800c9dc <abort>
 800af2c:	4b04      	ldr	r3, [pc, #16]	; (800af40 <__assert_func+0x38>)
 800af2e:	461c      	mov	r4, r3
 800af30:	e7f3      	b.n	800af1a <__assert_func+0x12>
 800af32:	bf00      	nop
 800af34:	20000040 	.word	0x20000040
 800af38:	08026c28 	.word	0x08026c28
 800af3c:	08026c35 	.word	0x08026c35
 800af40:	08026c63 	.word	0x08026c63

0800af44 <quorem>:
 800af44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af48:	6903      	ldr	r3, [r0, #16]
 800af4a:	690c      	ldr	r4, [r1, #16]
 800af4c:	42a3      	cmp	r3, r4
 800af4e:	4607      	mov	r7, r0
 800af50:	f2c0 8081 	blt.w	800b056 <quorem+0x112>
 800af54:	3c01      	subs	r4, #1
 800af56:	f101 0814 	add.w	r8, r1, #20
 800af5a:	f100 0514 	add.w	r5, r0, #20
 800af5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af62:	9301      	str	r3, [sp, #4]
 800af64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800af68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af6c:	3301      	adds	r3, #1
 800af6e:	429a      	cmp	r2, r3
 800af70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800af74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af78:	fbb2 f6f3 	udiv	r6, r2, r3
 800af7c:	d331      	bcc.n	800afe2 <quorem+0x9e>
 800af7e:	f04f 0e00 	mov.w	lr, #0
 800af82:	4640      	mov	r0, r8
 800af84:	46ac      	mov	ip, r5
 800af86:	46f2      	mov	sl, lr
 800af88:	f850 2b04 	ldr.w	r2, [r0], #4
 800af8c:	b293      	uxth	r3, r2
 800af8e:	fb06 e303 	mla	r3, r6, r3, lr
 800af92:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800af96:	b29b      	uxth	r3, r3
 800af98:	ebaa 0303 	sub.w	r3, sl, r3
 800af9c:	f8dc a000 	ldr.w	sl, [ip]
 800afa0:	0c12      	lsrs	r2, r2, #16
 800afa2:	fa13 f38a 	uxtah	r3, r3, sl
 800afa6:	fb06 e202 	mla	r2, r6, r2, lr
 800afaa:	9300      	str	r3, [sp, #0]
 800afac:	9b00      	ldr	r3, [sp, #0]
 800afae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800afb2:	b292      	uxth	r2, r2
 800afb4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800afb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800afbc:	f8bd 3000 	ldrh.w	r3, [sp]
 800afc0:	4581      	cmp	r9, r0
 800afc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afc6:	f84c 3b04 	str.w	r3, [ip], #4
 800afca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800afce:	d2db      	bcs.n	800af88 <quorem+0x44>
 800afd0:	f855 300b 	ldr.w	r3, [r5, fp]
 800afd4:	b92b      	cbnz	r3, 800afe2 <quorem+0x9e>
 800afd6:	9b01      	ldr	r3, [sp, #4]
 800afd8:	3b04      	subs	r3, #4
 800afda:	429d      	cmp	r5, r3
 800afdc:	461a      	mov	r2, r3
 800afde:	d32e      	bcc.n	800b03e <quorem+0xfa>
 800afe0:	613c      	str	r4, [r7, #16]
 800afe2:	4638      	mov	r0, r7
 800afe4:	f001 f8d8 	bl	800c198 <__mcmp>
 800afe8:	2800      	cmp	r0, #0
 800afea:	db24      	blt.n	800b036 <quorem+0xf2>
 800afec:	3601      	adds	r6, #1
 800afee:	4628      	mov	r0, r5
 800aff0:	f04f 0c00 	mov.w	ip, #0
 800aff4:	f858 2b04 	ldr.w	r2, [r8], #4
 800aff8:	f8d0 e000 	ldr.w	lr, [r0]
 800affc:	b293      	uxth	r3, r2
 800affe:	ebac 0303 	sub.w	r3, ip, r3
 800b002:	0c12      	lsrs	r2, r2, #16
 800b004:	fa13 f38e 	uxtah	r3, r3, lr
 800b008:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b00c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b010:	b29b      	uxth	r3, r3
 800b012:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b016:	45c1      	cmp	r9, r8
 800b018:	f840 3b04 	str.w	r3, [r0], #4
 800b01c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b020:	d2e8      	bcs.n	800aff4 <quorem+0xb0>
 800b022:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b026:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b02a:	b922      	cbnz	r2, 800b036 <quorem+0xf2>
 800b02c:	3b04      	subs	r3, #4
 800b02e:	429d      	cmp	r5, r3
 800b030:	461a      	mov	r2, r3
 800b032:	d30a      	bcc.n	800b04a <quorem+0x106>
 800b034:	613c      	str	r4, [r7, #16]
 800b036:	4630      	mov	r0, r6
 800b038:	b003      	add	sp, #12
 800b03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b03e:	6812      	ldr	r2, [r2, #0]
 800b040:	3b04      	subs	r3, #4
 800b042:	2a00      	cmp	r2, #0
 800b044:	d1cc      	bne.n	800afe0 <quorem+0x9c>
 800b046:	3c01      	subs	r4, #1
 800b048:	e7c7      	b.n	800afda <quorem+0x96>
 800b04a:	6812      	ldr	r2, [r2, #0]
 800b04c:	3b04      	subs	r3, #4
 800b04e:	2a00      	cmp	r2, #0
 800b050:	d1f0      	bne.n	800b034 <quorem+0xf0>
 800b052:	3c01      	subs	r4, #1
 800b054:	e7eb      	b.n	800b02e <quorem+0xea>
 800b056:	2000      	movs	r0, #0
 800b058:	e7ee      	b.n	800b038 <quorem+0xf4>
 800b05a:	0000      	movs	r0, r0
 800b05c:	0000      	movs	r0, r0
	...

0800b060 <_dtoa_r>:
 800b060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b064:	ed2d 8b04 	vpush	{d8-d9}
 800b068:	ec57 6b10 	vmov	r6, r7, d0
 800b06c:	b093      	sub	sp, #76	; 0x4c
 800b06e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b070:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b074:	9106      	str	r1, [sp, #24]
 800b076:	ee10 aa10 	vmov	sl, s0
 800b07a:	4604      	mov	r4, r0
 800b07c:	9209      	str	r2, [sp, #36]	; 0x24
 800b07e:	930c      	str	r3, [sp, #48]	; 0x30
 800b080:	46bb      	mov	fp, r7
 800b082:	b975      	cbnz	r5, 800b0a2 <_dtoa_r+0x42>
 800b084:	2010      	movs	r0, #16
 800b086:	f000 fdef 	bl	800bc68 <malloc>
 800b08a:	4602      	mov	r2, r0
 800b08c:	6260      	str	r0, [r4, #36]	; 0x24
 800b08e:	b920      	cbnz	r0, 800b09a <_dtoa_r+0x3a>
 800b090:	4ba7      	ldr	r3, [pc, #668]	; (800b330 <_dtoa_r+0x2d0>)
 800b092:	21ea      	movs	r1, #234	; 0xea
 800b094:	48a7      	ldr	r0, [pc, #668]	; (800b334 <_dtoa_r+0x2d4>)
 800b096:	f7ff ff37 	bl	800af08 <__assert_func>
 800b09a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b09e:	6005      	str	r5, [r0, #0]
 800b0a0:	60c5      	str	r5, [r0, #12]
 800b0a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0a4:	6819      	ldr	r1, [r3, #0]
 800b0a6:	b151      	cbz	r1, 800b0be <_dtoa_r+0x5e>
 800b0a8:	685a      	ldr	r2, [r3, #4]
 800b0aa:	604a      	str	r2, [r1, #4]
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	4093      	lsls	r3, r2
 800b0b0:	608b      	str	r3, [r1, #8]
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	f000 fe2e 	bl	800bd14 <_Bfree>
 800b0b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	601a      	str	r2, [r3, #0]
 800b0be:	1e3b      	subs	r3, r7, #0
 800b0c0:	bfaa      	itet	ge
 800b0c2:	2300      	movge	r3, #0
 800b0c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b0c8:	f8c8 3000 	strge.w	r3, [r8]
 800b0cc:	4b9a      	ldr	r3, [pc, #616]	; (800b338 <_dtoa_r+0x2d8>)
 800b0ce:	bfbc      	itt	lt
 800b0d0:	2201      	movlt	r2, #1
 800b0d2:	f8c8 2000 	strlt.w	r2, [r8]
 800b0d6:	ea33 030b 	bics.w	r3, r3, fp
 800b0da:	d11b      	bne.n	800b114 <_dtoa_r+0xb4>
 800b0dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0de:	f242 730f 	movw	r3, #9999	; 0x270f
 800b0e2:	6013      	str	r3, [r2, #0]
 800b0e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b0e8:	4333      	orrs	r3, r6
 800b0ea:	f000 8592 	beq.w	800bc12 <_dtoa_r+0xbb2>
 800b0ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0f0:	b963      	cbnz	r3, 800b10c <_dtoa_r+0xac>
 800b0f2:	4b92      	ldr	r3, [pc, #584]	; (800b33c <_dtoa_r+0x2dc>)
 800b0f4:	e022      	b.n	800b13c <_dtoa_r+0xdc>
 800b0f6:	4b92      	ldr	r3, [pc, #584]	; (800b340 <_dtoa_r+0x2e0>)
 800b0f8:	9301      	str	r3, [sp, #4]
 800b0fa:	3308      	adds	r3, #8
 800b0fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b0fe:	6013      	str	r3, [r2, #0]
 800b100:	9801      	ldr	r0, [sp, #4]
 800b102:	b013      	add	sp, #76	; 0x4c
 800b104:	ecbd 8b04 	vpop	{d8-d9}
 800b108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b10c:	4b8b      	ldr	r3, [pc, #556]	; (800b33c <_dtoa_r+0x2dc>)
 800b10e:	9301      	str	r3, [sp, #4]
 800b110:	3303      	adds	r3, #3
 800b112:	e7f3      	b.n	800b0fc <_dtoa_r+0x9c>
 800b114:	2200      	movs	r2, #0
 800b116:	2300      	movs	r3, #0
 800b118:	4650      	mov	r0, sl
 800b11a:	4659      	mov	r1, fp
 800b11c:	f7f5 fcd4 	bl	8000ac8 <__aeabi_dcmpeq>
 800b120:	ec4b ab19 	vmov	d9, sl, fp
 800b124:	4680      	mov	r8, r0
 800b126:	b158      	cbz	r0, 800b140 <_dtoa_r+0xe0>
 800b128:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b12a:	2301      	movs	r3, #1
 800b12c:	6013      	str	r3, [r2, #0]
 800b12e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b130:	2b00      	cmp	r3, #0
 800b132:	f000 856b 	beq.w	800bc0c <_dtoa_r+0xbac>
 800b136:	4883      	ldr	r0, [pc, #524]	; (800b344 <_dtoa_r+0x2e4>)
 800b138:	6018      	str	r0, [r3, #0]
 800b13a:	1e43      	subs	r3, r0, #1
 800b13c:	9301      	str	r3, [sp, #4]
 800b13e:	e7df      	b.n	800b100 <_dtoa_r+0xa0>
 800b140:	ec4b ab10 	vmov	d0, sl, fp
 800b144:	aa10      	add	r2, sp, #64	; 0x40
 800b146:	a911      	add	r1, sp, #68	; 0x44
 800b148:	4620      	mov	r0, r4
 800b14a:	f001 f8cb 	bl	800c2e4 <__d2b>
 800b14e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b152:	ee08 0a10 	vmov	s16, r0
 800b156:	2d00      	cmp	r5, #0
 800b158:	f000 8084 	beq.w	800b264 <_dtoa_r+0x204>
 800b15c:	ee19 3a90 	vmov	r3, s19
 800b160:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b164:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b168:	4656      	mov	r6, sl
 800b16a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b16e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b172:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b176:	4b74      	ldr	r3, [pc, #464]	; (800b348 <_dtoa_r+0x2e8>)
 800b178:	2200      	movs	r2, #0
 800b17a:	4630      	mov	r0, r6
 800b17c:	4639      	mov	r1, r7
 800b17e:	f7f5 f883 	bl	8000288 <__aeabi_dsub>
 800b182:	a365      	add	r3, pc, #404	; (adr r3, 800b318 <_dtoa_r+0x2b8>)
 800b184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b188:	f7f5 fa36 	bl	80005f8 <__aeabi_dmul>
 800b18c:	a364      	add	r3, pc, #400	; (adr r3, 800b320 <_dtoa_r+0x2c0>)
 800b18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b192:	f7f5 f87b 	bl	800028c <__adddf3>
 800b196:	4606      	mov	r6, r0
 800b198:	4628      	mov	r0, r5
 800b19a:	460f      	mov	r7, r1
 800b19c:	f7f5 f9c2 	bl	8000524 <__aeabi_i2d>
 800b1a0:	a361      	add	r3, pc, #388	; (adr r3, 800b328 <_dtoa_r+0x2c8>)
 800b1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a6:	f7f5 fa27 	bl	80005f8 <__aeabi_dmul>
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	4630      	mov	r0, r6
 800b1b0:	4639      	mov	r1, r7
 800b1b2:	f7f5 f86b 	bl	800028c <__adddf3>
 800b1b6:	4606      	mov	r6, r0
 800b1b8:	460f      	mov	r7, r1
 800b1ba:	f7f5 fccd 	bl	8000b58 <__aeabi_d2iz>
 800b1be:	2200      	movs	r2, #0
 800b1c0:	9000      	str	r0, [sp, #0]
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	4630      	mov	r0, r6
 800b1c6:	4639      	mov	r1, r7
 800b1c8:	f7f5 fc88 	bl	8000adc <__aeabi_dcmplt>
 800b1cc:	b150      	cbz	r0, 800b1e4 <_dtoa_r+0x184>
 800b1ce:	9800      	ldr	r0, [sp, #0]
 800b1d0:	f7f5 f9a8 	bl	8000524 <__aeabi_i2d>
 800b1d4:	4632      	mov	r2, r6
 800b1d6:	463b      	mov	r3, r7
 800b1d8:	f7f5 fc76 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1dc:	b910      	cbnz	r0, 800b1e4 <_dtoa_r+0x184>
 800b1de:	9b00      	ldr	r3, [sp, #0]
 800b1e0:	3b01      	subs	r3, #1
 800b1e2:	9300      	str	r3, [sp, #0]
 800b1e4:	9b00      	ldr	r3, [sp, #0]
 800b1e6:	2b16      	cmp	r3, #22
 800b1e8:	d85a      	bhi.n	800b2a0 <_dtoa_r+0x240>
 800b1ea:	9a00      	ldr	r2, [sp, #0]
 800b1ec:	4b57      	ldr	r3, [pc, #348]	; (800b34c <_dtoa_r+0x2ec>)
 800b1ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f6:	ec51 0b19 	vmov	r0, r1, d9
 800b1fa:	f7f5 fc6f 	bl	8000adc <__aeabi_dcmplt>
 800b1fe:	2800      	cmp	r0, #0
 800b200:	d050      	beq.n	800b2a4 <_dtoa_r+0x244>
 800b202:	9b00      	ldr	r3, [sp, #0]
 800b204:	3b01      	subs	r3, #1
 800b206:	9300      	str	r3, [sp, #0]
 800b208:	2300      	movs	r3, #0
 800b20a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b20c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b20e:	1b5d      	subs	r5, r3, r5
 800b210:	1e6b      	subs	r3, r5, #1
 800b212:	9305      	str	r3, [sp, #20]
 800b214:	bf45      	ittet	mi
 800b216:	f1c5 0301 	rsbmi	r3, r5, #1
 800b21a:	9304      	strmi	r3, [sp, #16]
 800b21c:	2300      	movpl	r3, #0
 800b21e:	2300      	movmi	r3, #0
 800b220:	bf4c      	ite	mi
 800b222:	9305      	strmi	r3, [sp, #20]
 800b224:	9304      	strpl	r3, [sp, #16]
 800b226:	9b00      	ldr	r3, [sp, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	db3d      	blt.n	800b2a8 <_dtoa_r+0x248>
 800b22c:	9b05      	ldr	r3, [sp, #20]
 800b22e:	9a00      	ldr	r2, [sp, #0]
 800b230:	920a      	str	r2, [sp, #40]	; 0x28
 800b232:	4413      	add	r3, r2
 800b234:	9305      	str	r3, [sp, #20]
 800b236:	2300      	movs	r3, #0
 800b238:	9307      	str	r3, [sp, #28]
 800b23a:	9b06      	ldr	r3, [sp, #24]
 800b23c:	2b09      	cmp	r3, #9
 800b23e:	f200 8089 	bhi.w	800b354 <_dtoa_r+0x2f4>
 800b242:	2b05      	cmp	r3, #5
 800b244:	bfc4      	itt	gt
 800b246:	3b04      	subgt	r3, #4
 800b248:	9306      	strgt	r3, [sp, #24]
 800b24a:	9b06      	ldr	r3, [sp, #24]
 800b24c:	f1a3 0302 	sub.w	r3, r3, #2
 800b250:	bfcc      	ite	gt
 800b252:	2500      	movgt	r5, #0
 800b254:	2501      	movle	r5, #1
 800b256:	2b03      	cmp	r3, #3
 800b258:	f200 8087 	bhi.w	800b36a <_dtoa_r+0x30a>
 800b25c:	e8df f003 	tbb	[pc, r3]
 800b260:	59383a2d 	.word	0x59383a2d
 800b264:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b268:	441d      	add	r5, r3
 800b26a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b26e:	2b20      	cmp	r3, #32
 800b270:	bfc1      	itttt	gt
 800b272:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b276:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b27a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b27e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b282:	bfda      	itte	le
 800b284:	f1c3 0320 	rsble	r3, r3, #32
 800b288:	fa06 f003 	lslle.w	r0, r6, r3
 800b28c:	4318      	orrgt	r0, r3
 800b28e:	f7f5 f939 	bl	8000504 <__aeabi_ui2d>
 800b292:	2301      	movs	r3, #1
 800b294:	4606      	mov	r6, r0
 800b296:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b29a:	3d01      	subs	r5, #1
 800b29c:	930e      	str	r3, [sp, #56]	; 0x38
 800b29e:	e76a      	b.n	800b176 <_dtoa_r+0x116>
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	e7b2      	b.n	800b20a <_dtoa_r+0x1aa>
 800b2a4:	900b      	str	r0, [sp, #44]	; 0x2c
 800b2a6:	e7b1      	b.n	800b20c <_dtoa_r+0x1ac>
 800b2a8:	9b04      	ldr	r3, [sp, #16]
 800b2aa:	9a00      	ldr	r2, [sp, #0]
 800b2ac:	1a9b      	subs	r3, r3, r2
 800b2ae:	9304      	str	r3, [sp, #16]
 800b2b0:	4253      	negs	r3, r2
 800b2b2:	9307      	str	r3, [sp, #28]
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	930a      	str	r3, [sp, #40]	; 0x28
 800b2b8:	e7bf      	b.n	800b23a <_dtoa_r+0x1da>
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	9308      	str	r3, [sp, #32]
 800b2be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	dc55      	bgt.n	800b370 <_dtoa_r+0x310>
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	9209      	str	r2, [sp, #36]	; 0x24
 800b2ce:	e00c      	b.n	800b2ea <_dtoa_r+0x28a>
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	e7f3      	b.n	800b2bc <_dtoa_r+0x25c>
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2d8:	9308      	str	r3, [sp, #32]
 800b2da:	9b00      	ldr	r3, [sp, #0]
 800b2dc:	4413      	add	r3, r2
 800b2de:	9302      	str	r3, [sp, #8]
 800b2e0:	3301      	adds	r3, #1
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	9303      	str	r3, [sp, #12]
 800b2e6:	bfb8      	it	lt
 800b2e8:	2301      	movlt	r3, #1
 800b2ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	6042      	str	r2, [r0, #4]
 800b2f0:	2204      	movs	r2, #4
 800b2f2:	f102 0614 	add.w	r6, r2, #20
 800b2f6:	429e      	cmp	r6, r3
 800b2f8:	6841      	ldr	r1, [r0, #4]
 800b2fa:	d93d      	bls.n	800b378 <_dtoa_r+0x318>
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	f000 fcc9 	bl	800bc94 <_Balloc>
 800b302:	9001      	str	r0, [sp, #4]
 800b304:	2800      	cmp	r0, #0
 800b306:	d13b      	bne.n	800b380 <_dtoa_r+0x320>
 800b308:	4b11      	ldr	r3, [pc, #68]	; (800b350 <_dtoa_r+0x2f0>)
 800b30a:	4602      	mov	r2, r0
 800b30c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b310:	e6c0      	b.n	800b094 <_dtoa_r+0x34>
 800b312:	2301      	movs	r3, #1
 800b314:	e7df      	b.n	800b2d6 <_dtoa_r+0x276>
 800b316:	bf00      	nop
 800b318:	636f4361 	.word	0x636f4361
 800b31c:	3fd287a7 	.word	0x3fd287a7
 800b320:	8b60c8b3 	.word	0x8b60c8b3
 800b324:	3fc68a28 	.word	0x3fc68a28
 800b328:	509f79fb 	.word	0x509f79fb
 800b32c:	3fd34413 	.word	0x3fd34413
 800b330:	08026c71 	.word	0x08026c71
 800b334:	08026c88 	.word	0x08026c88
 800b338:	7ff00000 	.word	0x7ff00000
 800b33c:	08026c6d 	.word	0x08026c6d
 800b340:	08026c64 	.word	0x08026c64
 800b344:	08026c05 	.word	0x08026c05
 800b348:	3ff80000 	.word	0x3ff80000
 800b34c:	08026d78 	.word	0x08026d78
 800b350:	08026ce3 	.word	0x08026ce3
 800b354:	2501      	movs	r5, #1
 800b356:	2300      	movs	r3, #0
 800b358:	9306      	str	r3, [sp, #24]
 800b35a:	9508      	str	r5, [sp, #32]
 800b35c:	f04f 33ff 	mov.w	r3, #4294967295
 800b360:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b364:	2200      	movs	r2, #0
 800b366:	2312      	movs	r3, #18
 800b368:	e7b0      	b.n	800b2cc <_dtoa_r+0x26c>
 800b36a:	2301      	movs	r3, #1
 800b36c:	9308      	str	r3, [sp, #32]
 800b36e:	e7f5      	b.n	800b35c <_dtoa_r+0x2fc>
 800b370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b372:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b376:	e7b8      	b.n	800b2ea <_dtoa_r+0x28a>
 800b378:	3101      	adds	r1, #1
 800b37a:	6041      	str	r1, [r0, #4]
 800b37c:	0052      	lsls	r2, r2, #1
 800b37e:	e7b8      	b.n	800b2f2 <_dtoa_r+0x292>
 800b380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b382:	9a01      	ldr	r2, [sp, #4]
 800b384:	601a      	str	r2, [r3, #0]
 800b386:	9b03      	ldr	r3, [sp, #12]
 800b388:	2b0e      	cmp	r3, #14
 800b38a:	f200 809d 	bhi.w	800b4c8 <_dtoa_r+0x468>
 800b38e:	2d00      	cmp	r5, #0
 800b390:	f000 809a 	beq.w	800b4c8 <_dtoa_r+0x468>
 800b394:	9b00      	ldr	r3, [sp, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	dd32      	ble.n	800b400 <_dtoa_r+0x3a0>
 800b39a:	4ab7      	ldr	r2, [pc, #732]	; (800b678 <_dtoa_r+0x618>)
 800b39c:	f003 030f 	and.w	r3, r3, #15
 800b3a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b3a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b3a8:	9b00      	ldr	r3, [sp, #0]
 800b3aa:	05d8      	lsls	r0, r3, #23
 800b3ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b3b0:	d516      	bpl.n	800b3e0 <_dtoa_r+0x380>
 800b3b2:	4bb2      	ldr	r3, [pc, #712]	; (800b67c <_dtoa_r+0x61c>)
 800b3b4:	ec51 0b19 	vmov	r0, r1, d9
 800b3b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b3bc:	f7f5 fa46 	bl	800084c <__aeabi_ddiv>
 800b3c0:	f007 070f 	and.w	r7, r7, #15
 800b3c4:	4682      	mov	sl, r0
 800b3c6:	468b      	mov	fp, r1
 800b3c8:	2503      	movs	r5, #3
 800b3ca:	4eac      	ldr	r6, [pc, #688]	; (800b67c <_dtoa_r+0x61c>)
 800b3cc:	b957      	cbnz	r7, 800b3e4 <_dtoa_r+0x384>
 800b3ce:	4642      	mov	r2, r8
 800b3d0:	464b      	mov	r3, r9
 800b3d2:	4650      	mov	r0, sl
 800b3d4:	4659      	mov	r1, fp
 800b3d6:	f7f5 fa39 	bl	800084c <__aeabi_ddiv>
 800b3da:	4682      	mov	sl, r0
 800b3dc:	468b      	mov	fp, r1
 800b3de:	e028      	b.n	800b432 <_dtoa_r+0x3d2>
 800b3e0:	2502      	movs	r5, #2
 800b3e2:	e7f2      	b.n	800b3ca <_dtoa_r+0x36a>
 800b3e4:	07f9      	lsls	r1, r7, #31
 800b3e6:	d508      	bpl.n	800b3fa <_dtoa_r+0x39a>
 800b3e8:	4640      	mov	r0, r8
 800b3ea:	4649      	mov	r1, r9
 800b3ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b3f0:	f7f5 f902 	bl	80005f8 <__aeabi_dmul>
 800b3f4:	3501      	adds	r5, #1
 800b3f6:	4680      	mov	r8, r0
 800b3f8:	4689      	mov	r9, r1
 800b3fa:	107f      	asrs	r7, r7, #1
 800b3fc:	3608      	adds	r6, #8
 800b3fe:	e7e5      	b.n	800b3cc <_dtoa_r+0x36c>
 800b400:	f000 809b 	beq.w	800b53a <_dtoa_r+0x4da>
 800b404:	9b00      	ldr	r3, [sp, #0]
 800b406:	4f9d      	ldr	r7, [pc, #628]	; (800b67c <_dtoa_r+0x61c>)
 800b408:	425e      	negs	r6, r3
 800b40a:	4b9b      	ldr	r3, [pc, #620]	; (800b678 <_dtoa_r+0x618>)
 800b40c:	f006 020f 	and.w	r2, r6, #15
 800b410:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b418:	ec51 0b19 	vmov	r0, r1, d9
 800b41c:	f7f5 f8ec 	bl	80005f8 <__aeabi_dmul>
 800b420:	1136      	asrs	r6, r6, #4
 800b422:	4682      	mov	sl, r0
 800b424:	468b      	mov	fp, r1
 800b426:	2300      	movs	r3, #0
 800b428:	2502      	movs	r5, #2
 800b42a:	2e00      	cmp	r6, #0
 800b42c:	d17a      	bne.n	800b524 <_dtoa_r+0x4c4>
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d1d3      	bne.n	800b3da <_dtoa_r+0x37a>
 800b432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b434:	2b00      	cmp	r3, #0
 800b436:	f000 8082 	beq.w	800b53e <_dtoa_r+0x4de>
 800b43a:	4b91      	ldr	r3, [pc, #580]	; (800b680 <_dtoa_r+0x620>)
 800b43c:	2200      	movs	r2, #0
 800b43e:	4650      	mov	r0, sl
 800b440:	4659      	mov	r1, fp
 800b442:	f7f5 fb4b 	bl	8000adc <__aeabi_dcmplt>
 800b446:	2800      	cmp	r0, #0
 800b448:	d079      	beq.n	800b53e <_dtoa_r+0x4de>
 800b44a:	9b03      	ldr	r3, [sp, #12]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d076      	beq.n	800b53e <_dtoa_r+0x4de>
 800b450:	9b02      	ldr	r3, [sp, #8]
 800b452:	2b00      	cmp	r3, #0
 800b454:	dd36      	ble.n	800b4c4 <_dtoa_r+0x464>
 800b456:	9b00      	ldr	r3, [sp, #0]
 800b458:	4650      	mov	r0, sl
 800b45a:	4659      	mov	r1, fp
 800b45c:	1e5f      	subs	r7, r3, #1
 800b45e:	2200      	movs	r2, #0
 800b460:	4b88      	ldr	r3, [pc, #544]	; (800b684 <_dtoa_r+0x624>)
 800b462:	f7f5 f8c9 	bl	80005f8 <__aeabi_dmul>
 800b466:	9e02      	ldr	r6, [sp, #8]
 800b468:	4682      	mov	sl, r0
 800b46a:	468b      	mov	fp, r1
 800b46c:	3501      	adds	r5, #1
 800b46e:	4628      	mov	r0, r5
 800b470:	f7f5 f858 	bl	8000524 <__aeabi_i2d>
 800b474:	4652      	mov	r2, sl
 800b476:	465b      	mov	r3, fp
 800b478:	f7f5 f8be 	bl	80005f8 <__aeabi_dmul>
 800b47c:	4b82      	ldr	r3, [pc, #520]	; (800b688 <_dtoa_r+0x628>)
 800b47e:	2200      	movs	r2, #0
 800b480:	f7f4 ff04 	bl	800028c <__adddf3>
 800b484:	46d0      	mov	r8, sl
 800b486:	46d9      	mov	r9, fp
 800b488:	4682      	mov	sl, r0
 800b48a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b48e:	2e00      	cmp	r6, #0
 800b490:	d158      	bne.n	800b544 <_dtoa_r+0x4e4>
 800b492:	4b7e      	ldr	r3, [pc, #504]	; (800b68c <_dtoa_r+0x62c>)
 800b494:	2200      	movs	r2, #0
 800b496:	4640      	mov	r0, r8
 800b498:	4649      	mov	r1, r9
 800b49a:	f7f4 fef5 	bl	8000288 <__aeabi_dsub>
 800b49e:	4652      	mov	r2, sl
 800b4a0:	465b      	mov	r3, fp
 800b4a2:	4680      	mov	r8, r0
 800b4a4:	4689      	mov	r9, r1
 800b4a6:	f7f5 fb37 	bl	8000b18 <__aeabi_dcmpgt>
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	f040 8295 	bne.w	800b9da <_dtoa_r+0x97a>
 800b4b0:	4652      	mov	r2, sl
 800b4b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b4b6:	4640      	mov	r0, r8
 800b4b8:	4649      	mov	r1, r9
 800b4ba:	f7f5 fb0f 	bl	8000adc <__aeabi_dcmplt>
 800b4be:	2800      	cmp	r0, #0
 800b4c0:	f040 8289 	bne.w	800b9d6 <_dtoa_r+0x976>
 800b4c4:	ec5b ab19 	vmov	sl, fp, d9
 800b4c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	f2c0 8148 	blt.w	800b760 <_dtoa_r+0x700>
 800b4d0:	9a00      	ldr	r2, [sp, #0]
 800b4d2:	2a0e      	cmp	r2, #14
 800b4d4:	f300 8144 	bgt.w	800b760 <_dtoa_r+0x700>
 800b4d8:	4b67      	ldr	r3, [pc, #412]	; (800b678 <_dtoa_r+0x618>)
 800b4da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4de:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b4e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	f280 80d5 	bge.w	800b694 <_dtoa_r+0x634>
 800b4ea:	9b03      	ldr	r3, [sp, #12]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	f300 80d1 	bgt.w	800b694 <_dtoa_r+0x634>
 800b4f2:	f040 826f 	bne.w	800b9d4 <_dtoa_r+0x974>
 800b4f6:	4b65      	ldr	r3, [pc, #404]	; (800b68c <_dtoa_r+0x62c>)
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	4640      	mov	r0, r8
 800b4fc:	4649      	mov	r1, r9
 800b4fe:	f7f5 f87b 	bl	80005f8 <__aeabi_dmul>
 800b502:	4652      	mov	r2, sl
 800b504:	465b      	mov	r3, fp
 800b506:	f7f5 fafd 	bl	8000b04 <__aeabi_dcmpge>
 800b50a:	9e03      	ldr	r6, [sp, #12]
 800b50c:	4637      	mov	r7, r6
 800b50e:	2800      	cmp	r0, #0
 800b510:	f040 8245 	bne.w	800b99e <_dtoa_r+0x93e>
 800b514:	9d01      	ldr	r5, [sp, #4]
 800b516:	2331      	movs	r3, #49	; 0x31
 800b518:	f805 3b01 	strb.w	r3, [r5], #1
 800b51c:	9b00      	ldr	r3, [sp, #0]
 800b51e:	3301      	adds	r3, #1
 800b520:	9300      	str	r3, [sp, #0]
 800b522:	e240      	b.n	800b9a6 <_dtoa_r+0x946>
 800b524:	07f2      	lsls	r2, r6, #31
 800b526:	d505      	bpl.n	800b534 <_dtoa_r+0x4d4>
 800b528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b52c:	f7f5 f864 	bl	80005f8 <__aeabi_dmul>
 800b530:	3501      	adds	r5, #1
 800b532:	2301      	movs	r3, #1
 800b534:	1076      	asrs	r6, r6, #1
 800b536:	3708      	adds	r7, #8
 800b538:	e777      	b.n	800b42a <_dtoa_r+0x3ca>
 800b53a:	2502      	movs	r5, #2
 800b53c:	e779      	b.n	800b432 <_dtoa_r+0x3d2>
 800b53e:	9f00      	ldr	r7, [sp, #0]
 800b540:	9e03      	ldr	r6, [sp, #12]
 800b542:	e794      	b.n	800b46e <_dtoa_r+0x40e>
 800b544:	9901      	ldr	r1, [sp, #4]
 800b546:	4b4c      	ldr	r3, [pc, #304]	; (800b678 <_dtoa_r+0x618>)
 800b548:	4431      	add	r1, r6
 800b54a:	910d      	str	r1, [sp, #52]	; 0x34
 800b54c:	9908      	ldr	r1, [sp, #32]
 800b54e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b552:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b556:	2900      	cmp	r1, #0
 800b558:	d043      	beq.n	800b5e2 <_dtoa_r+0x582>
 800b55a:	494d      	ldr	r1, [pc, #308]	; (800b690 <_dtoa_r+0x630>)
 800b55c:	2000      	movs	r0, #0
 800b55e:	f7f5 f975 	bl	800084c <__aeabi_ddiv>
 800b562:	4652      	mov	r2, sl
 800b564:	465b      	mov	r3, fp
 800b566:	f7f4 fe8f 	bl	8000288 <__aeabi_dsub>
 800b56a:	9d01      	ldr	r5, [sp, #4]
 800b56c:	4682      	mov	sl, r0
 800b56e:	468b      	mov	fp, r1
 800b570:	4649      	mov	r1, r9
 800b572:	4640      	mov	r0, r8
 800b574:	f7f5 faf0 	bl	8000b58 <__aeabi_d2iz>
 800b578:	4606      	mov	r6, r0
 800b57a:	f7f4 ffd3 	bl	8000524 <__aeabi_i2d>
 800b57e:	4602      	mov	r2, r0
 800b580:	460b      	mov	r3, r1
 800b582:	4640      	mov	r0, r8
 800b584:	4649      	mov	r1, r9
 800b586:	f7f4 fe7f 	bl	8000288 <__aeabi_dsub>
 800b58a:	3630      	adds	r6, #48	; 0x30
 800b58c:	f805 6b01 	strb.w	r6, [r5], #1
 800b590:	4652      	mov	r2, sl
 800b592:	465b      	mov	r3, fp
 800b594:	4680      	mov	r8, r0
 800b596:	4689      	mov	r9, r1
 800b598:	f7f5 faa0 	bl	8000adc <__aeabi_dcmplt>
 800b59c:	2800      	cmp	r0, #0
 800b59e:	d163      	bne.n	800b668 <_dtoa_r+0x608>
 800b5a0:	4642      	mov	r2, r8
 800b5a2:	464b      	mov	r3, r9
 800b5a4:	4936      	ldr	r1, [pc, #216]	; (800b680 <_dtoa_r+0x620>)
 800b5a6:	2000      	movs	r0, #0
 800b5a8:	f7f4 fe6e 	bl	8000288 <__aeabi_dsub>
 800b5ac:	4652      	mov	r2, sl
 800b5ae:	465b      	mov	r3, fp
 800b5b0:	f7f5 fa94 	bl	8000adc <__aeabi_dcmplt>
 800b5b4:	2800      	cmp	r0, #0
 800b5b6:	f040 80b5 	bne.w	800b724 <_dtoa_r+0x6c4>
 800b5ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5bc:	429d      	cmp	r5, r3
 800b5be:	d081      	beq.n	800b4c4 <_dtoa_r+0x464>
 800b5c0:	4b30      	ldr	r3, [pc, #192]	; (800b684 <_dtoa_r+0x624>)
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	4650      	mov	r0, sl
 800b5c6:	4659      	mov	r1, fp
 800b5c8:	f7f5 f816 	bl	80005f8 <__aeabi_dmul>
 800b5cc:	4b2d      	ldr	r3, [pc, #180]	; (800b684 <_dtoa_r+0x624>)
 800b5ce:	4682      	mov	sl, r0
 800b5d0:	468b      	mov	fp, r1
 800b5d2:	4640      	mov	r0, r8
 800b5d4:	4649      	mov	r1, r9
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f7f5 f80e 	bl	80005f8 <__aeabi_dmul>
 800b5dc:	4680      	mov	r8, r0
 800b5de:	4689      	mov	r9, r1
 800b5e0:	e7c6      	b.n	800b570 <_dtoa_r+0x510>
 800b5e2:	4650      	mov	r0, sl
 800b5e4:	4659      	mov	r1, fp
 800b5e6:	f7f5 f807 	bl	80005f8 <__aeabi_dmul>
 800b5ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5ec:	9d01      	ldr	r5, [sp, #4]
 800b5ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5f0:	4682      	mov	sl, r0
 800b5f2:	468b      	mov	fp, r1
 800b5f4:	4649      	mov	r1, r9
 800b5f6:	4640      	mov	r0, r8
 800b5f8:	f7f5 faae 	bl	8000b58 <__aeabi_d2iz>
 800b5fc:	4606      	mov	r6, r0
 800b5fe:	f7f4 ff91 	bl	8000524 <__aeabi_i2d>
 800b602:	3630      	adds	r6, #48	; 0x30
 800b604:	4602      	mov	r2, r0
 800b606:	460b      	mov	r3, r1
 800b608:	4640      	mov	r0, r8
 800b60a:	4649      	mov	r1, r9
 800b60c:	f7f4 fe3c 	bl	8000288 <__aeabi_dsub>
 800b610:	f805 6b01 	strb.w	r6, [r5], #1
 800b614:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b616:	429d      	cmp	r5, r3
 800b618:	4680      	mov	r8, r0
 800b61a:	4689      	mov	r9, r1
 800b61c:	f04f 0200 	mov.w	r2, #0
 800b620:	d124      	bne.n	800b66c <_dtoa_r+0x60c>
 800b622:	4b1b      	ldr	r3, [pc, #108]	; (800b690 <_dtoa_r+0x630>)
 800b624:	4650      	mov	r0, sl
 800b626:	4659      	mov	r1, fp
 800b628:	f7f4 fe30 	bl	800028c <__adddf3>
 800b62c:	4602      	mov	r2, r0
 800b62e:	460b      	mov	r3, r1
 800b630:	4640      	mov	r0, r8
 800b632:	4649      	mov	r1, r9
 800b634:	f7f5 fa70 	bl	8000b18 <__aeabi_dcmpgt>
 800b638:	2800      	cmp	r0, #0
 800b63a:	d173      	bne.n	800b724 <_dtoa_r+0x6c4>
 800b63c:	4652      	mov	r2, sl
 800b63e:	465b      	mov	r3, fp
 800b640:	4913      	ldr	r1, [pc, #76]	; (800b690 <_dtoa_r+0x630>)
 800b642:	2000      	movs	r0, #0
 800b644:	f7f4 fe20 	bl	8000288 <__aeabi_dsub>
 800b648:	4602      	mov	r2, r0
 800b64a:	460b      	mov	r3, r1
 800b64c:	4640      	mov	r0, r8
 800b64e:	4649      	mov	r1, r9
 800b650:	f7f5 fa44 	bl	8000adc <__aeabi_dcmplt>
 800b654:	2800      	cmp	r0, #0
 800b656:	f43f af35 	beq.w	800b4c4 <_dtoa_r+0x464>
 800b65a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b65c:	1e6b      	subs	r3, r5, #1
 800b65e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b660:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b664:	2b30      	cmp	r3, #48	; 0x30
 800b666:	d0f8      	beq.n	800b65a <_dtoa_r+0x5fa>
 800b668:	9700      	str	r7, [sp, #0]
 800b66a:	e049      	b.n	800b700 <_dtoa_r+0x6a0>
 800b66c:	4b05      	ldr	r3, [pc, #20]	; (800b684 <_dtoa_r+0x624>)
 800b66e:	f7f4 ffc3 	bl	80005f8 <__aeabi_dmul>
 800b672:	4680      	mov	r8, r0
 800b674:	4689      	mov	r9, r1
 800b676:	e7bd      	b.n	800b5f4 <_dtoa_r+0x594>
 800b678:	08026d78 	.word	0x08026d78
 800b67c:	08026d50 	.word	0x08026d50
 800b680:	3ff00000 	.word	0x3ff00000
 800b684:	40240000 	.word	0x40240000
 800b688:	401c0000 	.word	0x401c0000
 800b68c:	40140000 	.word	0x40140000
 800b690:	3fe00000 	.word	0x3fe00000
 800b694:	9d01      	ldr	r5, [sp, #4]
 800b696:	4656      	mov	r6, sl
 800b698:	465f      	mov	r7, fp
 800b69a:	4642      	mov	r2, r8
 800b69c:	464b      	mov	r3, r9
 800b69e:	4630      	mov	r0, r6
 800b6a0:	4639      	mov	r1, r7
 800b6a2:	f7f5 f8d3 	bl	800084c <__aeabi_ddiv>
 800b6a6:	f7f5 fa57 	bl	8000b58 <__aeabi_d2iz>
 800b6aa:	4682      	mov	sl, r0
 800b6ac:	f7f4 ff3a 	bl	8000524 <__aeabi_i2d>
 800b6b0:	4642      	mov	r2, r8
 800b6b2:	464b      	mov	r3, r9
 800b6b4:	f7f4 ffa0 	bl	80005f8 <__aeabi_dmul>
 800b6b8:	4602      	mov	r2, r0
 800b6ba:	460b      	mov	r3, r1
 800b6bc:	4630      	mov	r0, r6
 800b6be:	4639      	mov	r1, r7
 800b6c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b6c4:	f7f4 fde0 	bl	8000288 <__aeabi_dsub>
 800b6c8:	f805 6b01 	strb.w	r6, [r5], #1
 800b6cc:	9e01      	ldr	r6, [sp, #4]
 800b6ce:	9f03      	ldr	r7, [sp, #12]
 800b6d0:	1bae      	subs	r6, r5, r6
 800b6d2:	42b7      	cmp	r7, r6
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	460b      	mov	r3, r1
 800b6d8:	d135      	bne.n	800b746 <_dtoa_r+0x6e6>
 800b6da:	f7f4 fdd7 	bl	800028c <__adddf3>
 800b6de:	4642      	mov	r2, r8
 800b6e0:	464b      	mov	r3, r9
 800b6e2:	4606      	mov	r6, r0
 800b6e4:	460f      	mov	r7, r1
 800b6e6:	f7f5 fa17 	bl	8000b18 <__aeabi_dcmpgt>
 800b6ea:	b9d0      	cbnz	r0, 800b722 <_dtoa_r+0x6c2>
 800b6ec:	4642      	mov	r2, r8
 800b6ee:	464b      	mov	r3, r9
 800b6f0:	4630      	mov	r0, r6
 800b6f2:	4639      	mov	r1, r7
 800b6f4:	f7f5 f9e8 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6f8:	b110      	cbz	r0, 800b700 <_dtoa_r+0x6a0>
 800b6fa:	f01a 0f01 	tst.w	sl, #1
 800b6fe:	d110      	bne.n	800b722 <_dtoa_r+0x6c2>
 800b700:	4620      	mov	r0, r4
 800b702:	ee18 1a10 	vmov	r1, s16
 800b706:	f000 fb05 	bl	800bd14 <_Bfree>
 800b70a:	2300      	movs	r3, #0
 800b70c:	9800      	ldr	r0, [sp, #0]
 800b70e:	702b      	strb	r3, [r5, #0]
 800b710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b712:	3001      	adds	r0, #1
 800b714:	6018      	str	r0, [r3, #0]
 800b716:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b718:	2b00      	cmp	r3, #0
 800b71a:	f43f acf1 	beq.w	800b100 <_dtoa_r+0xa0>
 800b71e:	601d      	str	r5, [r3, #0]
 800b720:	e4ee      	b.n	800b100 <_dtoa_r+0xa0>
 800b722:	9f00      	ldr	r7, [sp, #0]
 800b724:	462b      	mov	r3, r5
 800b726:	461d      	mov	r5, r3
 800b728:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b72c:	2a39      	cmp	r2, #57	; 0x39
 800b72e:	d106      	bne.n	800b73e <_dtoa_r+0x6de>
 800b730:	9a01      	ldr	r2, [sp, #4]
 800b732:	429a      	cmp	r2, r3
 800b734:	d1f7      	bne.n	800b726 <_dtoa_r+0x6c6>
 800b736:	9901      	ldr	r1, [sp, #4]
 800b738:	2230      	movs	r2, #48	; 0x30
 800b73a:	3701      	adds	r7, #1
 800b73c:	700a      	strb	r2, [r1, #0]
 800b73e:	781a      	ldrb	r2, [r3, #0]
 800b740:	3201      	adds	r2, #1
 800b742:	701a      	strb	r2, [r3, #0]
 800b744:	e790      	b.n	800b668 <_dtoa_r+0x608>
 800b746:	4ba6      	ldr	r3, [pc, #664]	; (800b9e0 <_dtoa_r+0x980>)
 800b748:	2200      	movs	r2, #0
 800b74a:	f7f4 ff55 	bl	80005f8 <__aeabi_dmul>
 800b74e:	2200      	movs	r2, #0
 800b750:	2300      	movs	r3, #0
 800b752:	4606      	mov	r6, r0
 800b754:	460f      	mov	r7, r1
 800b756:	f7f5 f9b7 	bl	8000ac8 <__aeabi_dcmpeq>
 800b75a:	2800      	cmp	r0, #0
 800b75c:	d09d      	beq.n	800b69a <_dtoa_r+0x63a>
 800b75e:	e7cf      	b.n	800b700 <_dtoa_r+0x6a0>
 800b760:	9a08      	ldr	r2, [sp, #32]
 800b762:	2a00      	cmp	r2, #0
 800b764:	f000 80d7 	beq.w	800b916 <_dtoa_r+0x8b6>
 800b768:	9a06      	ldr	r2, [sp, #24]
 800b76a:	2a01      	cmp	r2, #1
 800b76c:	f300 80ba 	bgt.w	800b8e4 <_dtoa_r+0x884>
 800b770:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b772:	2a00      	cmp	r2, #0
 800b774:	f000 80b2 	beq.w	800b8dc <_dtoa_r+0x87c>
 800b778:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b77c:	9e07      	ldr	r6, [sp, #28]
 800b77e:	9d04      	ldr	r5, [sp, #16]
 800b780:	9a04      	ldr	r2, [sp, #16]
 800b782:	441a      	add	r2, r3
 800b784:	9204      	str	r2, [sp, #16]
 800b786:	9a05      	ldr	r2, [sp, #20]
 800b788:	2101      	movs	r1, #1
 800b78a:	441a      	add	r2, r3
 800b78c:	4620      	mov	r0, r4
 800b78e:	9205      	str	r2, [sp, #20]
 800b790:	f000 fb78 	bl	800be84 <__i2b>
 800b794:	4607      	mov	r7, r0
 800b796:	2d00      	cmp	r5, #0
 800b798:	dd0c      	ble.n	800b7b4 <_dtoa_r+0x754>
 800b79a:	9b05      	ldr	r3, [sp, #20]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	dd09      	ble.n	800b7b4 <_dtoa_r+0x754>
 800b7a0:	42ab      	cmp	r3, r5
 800b7a2:	9a04      	ldr	r2, [sp, #16]
 800b7a4:	bfa8      	it	ge
 800b7a6:	462b      	movge	r3, r5
 800b7a8:	1ad2      	subs	r2, r2, r3
 800b7aa:	9204      	str	r2, [sp, #16]
 800b7ac:	9a05      	ldr	r2, [sp, #20]
 800b7ae:	1aed      	subs	r5, r5, r3
 800b7b0:	1ad3      	subs	r3, r2, r3
 800b7b2:	9305      	str	r3, [sp, #20]
 800b7b4:	9b07      	ldr	r3, [sp, #28]
 800b7b6:	b31b      	cbz	r3, 800b800 <_dtoa_r+0x7a0>
 800b7b8:	9b08      	ldr	r3, [sp, #32]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	f000 80af 	beq.w	800b91e <_dtoa_r+0x8be>
 800b7c0:	2e00      	cmp	r6, #0
 800b7c2:	dd13      	ble.n	800b7ec <_dtoa_r+0x78c>
 800b7c4:	4639      	mov	r1, r7
 800b7c6:	4632      	mov	r2, r6
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	f000 fc1b 	bl	800c004 <__pow5mult>
 800b7ce:	ee18 2a10 	vmov	r2, s16
 800b7d2:	4601      	mov	r1, r0
 800b7d4:	4607      	mov	r7, r0
 800b7d6:	4620      	mov	r0, r4
 800b7d8:	f000 fb6a 	bl	800beb0 <__multiply>
 800b7dc:	ee18 1a10 	vmov	r1, s16
 800b7e0:	4680      	mov	r8, r0
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	f000 fa96 	bl	800bd14 <_Bfree>
 800b7e8:	ee08 8a10 	vmov	s16, r8
 800b7ec:	9b07      	ldr	r3, [sp, #28]
 800b7ee:	1b9a      	subs	r2, r3, r6
 800b7f0:	d006      	beq.n	800b800 <_dtoa_r+0x7a0>
 800b7f2:	ee18 1a10 	vmov	r1, s16
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	f000 fc04 	bl	800c004 <__pow5mult>
 800b7fc:	ee08 0a10 	vmov	s16, r0
 800b800:	2101      	movs	r1, #1
 800b802:	4620      	mov	r0, r4
 800b804:	f000 fb3e 	bl	800be84 <__i2b>
 800b808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	4606      	mov	r6, r0
 800b80e:	f340 8088 	ble.w	800b922 <_dtoa_r+0x8c2>
 800b812:	461a      	mov	r2, r3
 800b814:	4601      	mov	r1, r0
 800b816:	4620      	mov	r0, r4
 800b818:	f000 fbf4 	bl	800c004 <__pow5mult>
 800b81c:	9b06      	ldr	r3, [sp, #24]
 800b81e:	2b01      	cmp	r3, #1
 800b820:	4606      	mov	r6, r0
 800b822:	f340 8081 	ble.w	800b928 <_dtoa_r+0x8c8>
 800b826:	f04f 0800 	mov.w	r8, #0
 800b82a:	6933      	ldr	r3, [r6, #16]
 800b82c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b830:	6918      	ldr	r0, [r3, #16]
 800b832:	f000 fad7 	bl	800bde4 <__hi0bits>
 800b836:	f1c0 0020 	rsb	r0, r0, #32
 800b83a:	9b05      	ldr	r3, [sp, #20]
 800b83c:	4418      	add	r0, r3
 800b83e:	f010 001f 	ands.w	r0, r0, #31
 800b842:	f000 8092 	beq.w	800b96a <_dtoa_r+0x90a>
 800b846:	f1c0 0320 	rsb	r3, r0, #32
 800b84a:	2b04      	cmp	r3, #4
 800b84c:	f340 808a 	ble.w	800b964 <_dtoa_r+0x904>
 800b850:	f1c0 001c 	rsb	r0, r0, #28
 800b854:	9b04      	ldr	r3, [sp, #16]
 800b856:	4403      	add	r3, r0
 800b858:	9304      	str	r3, [sp, #16]
 800b85a:	9b05      	ldr	r3, [sp, #20]
 800b85c:	4403      	add	r3, r0
 800b85e:	4405      	add	r5, r0
 800b860:	9305      	str	r3, [sp, #20]
 800b862:	9b04      	ldr	r3, [sp, #16]
 800b864:	2b00      	cmp	r3, #0
 800b866:	dd07      	ble.n	800b878 <_dtoa_r+0x818>
 800b868:	ee18 1a10 	vmov	r1, s16
 800b86c:	461a      	mov	r2, r3
 800b86e:	4620      	mov	r0, r4
 800b870:	f000 fc22 	bl	800c0b8 <__lshift>
 800b874:	ee08 0a10 	vmov	s16, r0
 800b878:	9b05      	ldr	r3, [sp, #20]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	dd05      	ble.n	800b88a <_dtoa_r+0x82a>
 800b87e:	4631      	mov	r1, r6
 800b880:	461a      	mov	r2, r3
 800b882:	4620      	mov	r0, r4
 800b884:	f000 fc18 	bl	800c0b8 <__lshift>
 800b888:	4606      	mov	r6, r0
 800b88a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d06e      	beq.n	800b96e <_dtoa_r+0x90e>
 800b890:	ee18 0a10 	vmov	r0, s16
 800b894:	4631      	mov	r1, r6
 800b896:	f000 fc7f 	bl	800c198 <__mcmp>
 800b89a:	2800      	cmp	r0, #0
 800b89c:	da67      	bge.n	800b96e <_dtoa_r+0x90e>
 800b89e:	9b00      	ldr	r3, [sp, #0]
 800b8a0:	3b01      	subs	r3, #1
 800b8a2:	ee18 1a10 	vmov	r1, s16
 800b8a6:	9300      	str	r3, [sp, #0]
 800b8a8:	220a      	movs	r2, #10
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	4620      	mov	r0, r4
 800b8ae:	f000 fa53 	bl	800bd58 <__multadd>
 800b8b2:	9b08      	ldr	r3, [sp, #32]
 800b8b4:	ee08 0a10 	vmov	s16, r0
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	f000 81b1 	beq.w	800bc20 <_dtoa_r+0xbc0>
 800b8be:	2300      	movs	r3, #0
 800b8c0:	4639      	mov	r1, r7
 800b8c2:	220a      	movs	r2, #10
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	f000 fa47 	bl	800bd58 <__multadd>
 800b8ca:	9b02      	ldr	r3, [sp, #8]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	4607      	mov	r7, r0
 800b8d0:	f300 808e 	bgt.w	800b9f0 <_dtoa_r+0x990>
 800b8d4:	9b06      	ldr	r3, [sp, #24]
 800b8d6:	2b02      	cmp	r3, #2
 800b8d8:	dc51      	bgt.n	800b97e <_dtoa_r+0x91e>
 800b8da:	e089      	b.n	800b9f0 <_dtoa_r+0x990>
 800b8dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b8de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b8e2:	e74b      	b.n	800b77c <_dtoa_r+0x71c>
 800b8e4:	9b03      	ldr	r3, [sp, #12]
 800b8e6:	1e5e      	subs	r6, r3, #1
 800b8e8:	9b07      	ldr	r3, [sp, #28]
 800b8ea:	42b3      	cmp	r3, r6
 800b8ec:	bfbf      	itttt	lt
 800b8ee:	9b07      	ldrlt	r3, [sp, #28]
 800b8f0:	9607      	strlt	r6, [sp, #28]
 800b8f2:	1af2      	sublt	r2, r6, r3
 800b8f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b8f6:	bfb6      	itet	lt
 800b8f8:	189b      	addlt	r3, r3, r2
 800b8fa:	1b9e      	subge	r6, r3, r6
 800b8fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b8fe:	9b03      	ldr	r3, [sp, #12]
 800b900:	bfb8      	it	lt
 800b902:	2600      	movlt	r6, #0
 800b904:	2b00      	cmp	r3, #0
 800b906:	bfb7      	itett	lt
 800b908:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b90c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b910:	1a9d      	sublt	r5, r3, r2
 800b912:	2300      	movlt	r3, #0
 800b914:	e734      	b.n	800b780 <_dtoa_r+0x720>
 800b916:	9e07      	ldr	r6, [sp, #28]
 800b918:	9d04      	ldr	r5, [sp, #16]
 800b91a:	9f08      	ldr	r7, [sp, #32]
 800b91c:	e73b      	b.n	800b796 <_dtoa_r+0x736>
 800b91e:	9a07      	ldr	r2, [sp, #28]
 800b920:	e767      	b.n	800b7f2 <_dtoa_r+0x792>
 800b922:	9b06      	ldr	r3, [sp, #24]
 800b924:	2b01      	cmp	r3, #1
 800b926:	dc18      	bgt.n	800b95a <_dtoa_r+0x8fa>
 800b928:	f1ba 0f00 	cmp.w	sl, #0
 800b92c:	d115      	bne.n	800b95a <_dtoa_r+0x8fa>
 800b92e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b932:	b993      	cbnz	r3, 800b95a <_dtoa_r+0x8fa>
 800b934:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b938:	0d1b      	lsrs	r3, r3, #20
 800b93a:	051b      	lsls	r3, r3, #20
 800b93c:	b183      	cbz	r3, 800b960 <_dtoa_r+0x900>
 800b93e:	9b04      	ldr	r3, [sp, #16]
 800b940:	3301      	adds	r3, #1
 800b942:	9304      	str	r3, [sp, #16]
 800b944:	9b05      	ldr	r3, [sp, #20]
 800b946:	3301      	adds	r3, #1
 800b948:	9305      	str	r3, [sp, #20]
 800b94a:	f04f 0801 	mov.w	r8, #1
 800b94e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b950:	2b00      	cmp	r3, #0
 800b952:	f47f af6a 	bne.w	800b82a <_dtoa_r+0x7ca>
 800b956:	2001      	movs	r0, #1
 800b958:	e76f      	b.n	800b83a <_dtoa_r+0x7da>
 800b95a:	f04f 0800 	mov.w	r8, #0
 800b95e:	e7f6      	b.n	800b94e <_dtoa_r+0x8ee>
 800b960:	4698      	mov	r8, r3
 800b962:	e7f4      	b.n	800b94e <_dtoa_r+0x8ee>
 800b964:	f43f af7d 	beq.w	800b862 <_dtoa_r+0x802>
 800b968:	4618      	mov	r0, r3
 800b96a:	301c      	adds	r0, #28
 800b96c:	e772      	b.n	800b854 <_dtoa_r+0x7f4>
 800b96e:	9b03      	ldr	r3, [sp, #12]
 800b970:	2b00      	cmp	r3, #0
 800b972:	dc37      	bgt.n	800b9e4 <_dtoa_r+0x984>
 800b974:	9b06      	ldr	r3, [sp, #24]
 800b976:	2b02      	cmp	r3, #2
 800b978:	dd34      	ble.n	800b9e4 <_dtoa_r+0x984>
 800b97a:	9b03      	ldr	r3, [sp, #12]
 800b97c:	9302      	str	r3, [sp, #8]
 800b97e:	9b02      	ldr	r3, [sp, #8]
 800b980:	b96b      	cbnz	r3, 800b99e <_dtoa_r+0x93e>
 800b982:	4631      	mov	r1, r6
 800b984:	2205      	movs	r2, #5
 800b986:	4620      	mov	r0, r4
 800b988:	f000 f9e6 	bl	800bd58 <__multadd>
 800b98c:	4601      	mov	r1, r0
 800b98e:	4606      	mov	r6, r0
 800b990:	ee18 0a10 	vmov	r0, s16
 800b994:	f000 fc00 	bl	800c198 <__mcmp>
 800b998:	2800      	cmp	r0, #0
 800b99a:	f73f adbb 	bgt.w	800b514 <_dtoa_r+0x4b4>
 800b99e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9a0:	9d01      	ldr	r5, [sp, #4]
 800b9a2:	43db      	mvns	r3, r3
 800b9a4:	9300      	str	r3, [sp, #0]
 800b9a6:	f04f 0800 	mov.w	r8, #0
 800b9aa:	4631      	mov	r1, r6
 800b9ac:	4620      	mov	r0, r4
 800b9ae:	f000 f9b1 	bl	800bd14 <_Bfree>
 800b9b2:	2f00      	cmp	r7, #0
 800b9b4:	f43f aea4 	beq.w	800b700 <_dtoa_r+0x6a0>
 800b9b8:	f1b8 0f00 	cmp.w	r8, #0
 800b9bc:	d005      	beq.n	800b9ca <_dtoa_r+0x96a>
 800b9be:	45b8      	cmp	r8, r7
 800b9c0:	d003      	beq.n	800b9ca <_dtoa_r+0x96a>
 800b9c2:	4641      	mov	r1, r8
 800b9c4:	4620      	mov	r0, r4
 800b9c6:	f000 f9a5 	bl	800bd14 <_Bfree>
 800b9ca:	4639      	mov	r1, r7
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	f000 f9a1 	bl	800bd14 <_Bfree>
 800b9d2:	e695      	b.n	800b700 <_dtoa_r+0x6a0>
 800b9d4:	2600      	movs	r6, #0
 800b9d6:	4637      	mov	r7, r6
 800b9d8:	e7e1      	b.n	800b99e <_dtoa_r+0x93e>
 800b9da:	9700      	str	r7, [sp, #0]
 800b9dc:	4637      	mov	r7, r6
 800b9de:	e599      	b.n	800b514 <_dtoa_r+0x4b4>
 800b9e0:	40240000 	.word	0x40240000
 800b9e4:	9b08      	ldr	r3, [sp, #32]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	f000 80ca 	beq.w	800bb80 <_dtoa_r+0xb20>
 800b9ec:	9b03      	ldr	r3, [sp, #12]
 800b9ee:	9302      	str	r3, [sp, #8]
 800b9f0:	2d00      	cmp	r5, #0
 800b9f2:	dd05      	ble.n	800ba00 <_dtoa_r+0x9a0>
 800b9f4:	4639      	mov	r1, r7
 800b9f6:	462a      	mov	r2, r5
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	f000 fb5d 	bl	800c0b8 <__lshift>
 800b9fe:	4607      	mov	r7, r0
 800ba00:	f1b8 0f00 	cmp.w	r8, #0
 800ba04:	d05b      	beq.n	800babe <_dtoa_r+0xa5e>
 800ba06:	6879      	ldr	r1, [r7, #4]
 800ba08:	4620      	mov	r0, r4
 800ba0a:	f000 f943 	bl	800bc94 <_Balloc>
 800ba0e:	4605      	mov	r5, r0
 800ba10:	b928      	cbnz	r0, 800ba1e <_dtoa_r+0x9be>
 800ba12:	4b87      	ldr	r3, [pc, #540]	; (800bc30 <_dtoa_r+0xbd0>)
 800ba14:	4602      	mov	r2, r0
 800ba16:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ba1a:	f7ff bb3b 	b.w	800b094 <_dtoa_r+0x34>
 800ba1e:	693a      	ldr	r2, [r7, #16]
 800ba20:	3202      	adds	r2, #2
 800ba22:	0092      	lsls	r2, r2, #2
 800ba24:	f107 010c 	add.w	r1, r7, #12
 800ba28:	300c      	adds	r0, #12
 800ba2a:	f000 f925 	bl	800bc78 <memcpy>
 800ba2e:	2201      	movs	r2, #1
 800ba30:	4629      	mov	r1, r5
 800ba32:	4620      	mov	r0, r4
 800ba34:	f000 fb40 	bl	800c0b8 <__lshift>
 800ba38:	9b01      	ldr	r3, [sp, #4]
 800ba3a:	f103 0901 	add.w	r9, r3, #1
 800ba3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ba42:	4413      	add	r3, r2
 800ba44:	9305      	str	r3, [sp, #20]
 800ba46:	f00a 0301 	and.w	r3, sl, #1
 800ba4a:	46b8      	mov	r8, r7
 800ba4c:	9304      	str	r3, [sp, #16]
 800ba4e:	4607      	mov	r7, r0
 800ba50:	4631      	mov	r1, r6
 800ba52:	ee18 0a10 	vmov	r0, s16
 800ba56:	f7ff fa75 	bl	800af44 <quorem>
 800ba5a:	4641      	mov	r1, r8
 800ba5c:	9002      	str	r0, [sp, #8]
 800ba5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ba62:	ee18 0a10 	vmov	r0, s16
 800ba66:	f000 fb97 	bl	800c198 <__mcmp>
 800ba6a:	463a      	mov	r2, r7
 800ba6c:	9003      	str	r0, [sp, #12]
 800ba6e:	4631      	mov	r1, r6
 800ba70:	4620      	mov	r0, r4
 800ba72:	f000 fbad 	bl	800c1d0 <__mdiff>
 800ba76:	68c2      	ldr	r2, [r0, #12]
 800ba78:	f109 3bff 	add.w	fp, r9, #4294967295
 800ba7c:	4605      	mov	r5, r0
 800ba7e:	bb02      	cbnz	r2, 800bac2 <_dtoa_r+0xa62>
 800ba80:	4601      	mov	r1, r0
 800ba82:	ee18 0a10 	vmov	r0, s16
 800ba86:	f000 fb87 	bl	800c198 <__mcmp>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	4629      	mov	r1, r5
 800ba8e:	4620      	mov	r0, r4
 800ba90:	9207      	str	r2, [sp, #28]
 800ba92:	f000 f93f 	bl	800bd14 <_Bfree>
 800ba96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ba9a:	ea43 0102 	orr.w	r1, r3, r2
 800ba9e:	9b04      	ldr	r3, [sp, #16]
 800baa0:	430b      	orrs	r3, r1
 800baa2:	464d      	mov	r5, r9
 800baa4:	d10f      	bne.n	800bac6 <_dtoa_r+0xa66>
 800baa6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800baaa:	d02a      	beq.n	800bb02 <_dtoa_r+0xaa2>
 800baac:	9b03      	ldr	r3, [sp, #12]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	dd02      	ble.n	800bab8 <_dtoa_r+0xa58>
 800bab2:	9b02      	ldr	r3, [sp, #8]
 800bab4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bab8:	f88b a000 	strb.w	sl, [fp]
 800babc:	e775      	b.n	800b9aa <_dtoa_r+0x94a>
 800babe:	4638      	mov	r0, r7
 800bac0:	e7ba      	b.n	800ba38 <_dtoa_r+0x9d8>
 800bac2:	2201      	movs	r2, #1
 800bac4:	e7e2      	b.n	800ba8c <_dtoa_r+0xa2c>
 800bac6:	9b03      	ldr	r3, [sp, #12]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	db04      	blt.n	800bad6 <_dtoa_r+0xa76>
 800bacc:	9906      	ldr	r1, [sp, #24]
 800bace:	430b      	orrs	r3, r1
 800bad0:	9904      	ldr	r1, [sp, #16]
 800bad2:	430b      	orrs	r3, r1
 800bad4:	d122      	bne.n	800bb1c <_dtoa_r+0xabc>
 800bad6:	2a00      	cmp	r2, #0
 800bad8:	ddee      	ble.n	800bab8 <_dtoa_r+0xa58>
 800bada:	ee18 1a10 	vmov	r1, s16
 800bade:	2201      	movs	r2, #1
 800bae0:	4620      	mov	r0, r4
 800bae2:	f000 fae9 	bl	800c0b8 <__lshift>
 800bae6:	4631      	mov	r1, r6
 800bae8:	ee08 0a10 	vmov	s16, r0
 800baec:	f000 fb54 	bl	800c198 <__mcmp>
 800baf0:	2800      	cmp	r0, #0
 800baf2:	dc03      	bgt.n	800bafc <_dtoa_r+0xa9c>
 800baf4:	d1e0      	bne.n	800bab8 <_dtoa_r+0xa58>
 800baf6:	f01a 0f01 	tst.w	sl, #1
 800bafa:	d0dd      	beq.n	800bab8 <_dtoa_r+0xa58>
 800bafc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bb00:	d1d7      	bne.n	800bab2 <_dtoa_r+0xa52>
 800bb02:	2339      	movs	r3, #57	; 0x39
 800bb04:	f88b 3000 	strb.w	r3, [fp]
 800bb08:	462b      	mov	r3, r5
 800bb0a:	461d      	mov	r5, r3
 800bb0c:	3b01      	subs	r3, #1
 800bb0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bb12:	2a39      	cmp	r2, #57	; 0x39
 800bb14:	d071      	beq.n	800bbfa <_dtoa_r+0xb9a>
 800bb16:	3201      	adds	r2, #1
 800bb18:	701a      	strb	r2, [r3, #0]
 800bb1a:	e746      	b.n	800b9aa <_dtoa_r+0x94a>
 800bb1c:	2a00      	cmp	r2, #0
 800bb1e:	dd07      	ble.n	800bb30 <_dtoa_r+0xad0>
 800bb20:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bb24:	d0ed      	beq.n	800bb02 <_dtoa_r+0xaa2>
 800bb26:	f10a 0301 	add.w	r3, sl, #1
 800bb2a:	f88b 3000 	strb.w	r3, [fp]
 800bb2e:	e73c      	b.n	800b9aa <_dtoa_r+0x94a>
 800bb30:	9b05      	ldr	r3, [sp, #20]
 800bb32:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bb36:	4599      	cmp	r9, r3
 800bb38:	d047      	beq.n	800bbca <_dtoa_r+0xb6a>
 800bb3a:	ee18 1a10 	vmov	r1, s16
 800bb3e:	2300      	movs	r3, #0
 800bb40:	220a      	movs	r2, #10
 800bb42:	4620      	mov	r0, r4
 800bb44:	f000 f908 	bl	800bd58 <__multadd>
 800bb48:	45b8      	cmp	r8, r7
 800bb4a:	ee08 0a10 	vmov	s16, r0
 800bb4e:	f04f 0300 	mov.w	r3, #0
 800bb52:	f04f 020a 	mov.w	r2, #10
 800bb56:	4641      	mov	r1, r8
 800bb58:	4620      	mov	r0, r4
 800bb5a:	d106      	bne.n	800bb6a <_dtoa_r+0xb0a>
 800bb5c:	f000 f8fc 	bl	800bd58 <__multadd>
 800bb60:	4680      	mov	r8, r0
 800bb62:	4607      	mov	r7, r0
 800bb64:	f109 0901 	add.w	r9, r9, #1
 800bb68:	e772      	b.n	800ba50 <_dtoa_r+0x9f0>
 800bb6a:	f000 f8f5 	bl	800bd58 <__multadd>
 800bb6e:	4639      	mov	r1, r7
 800bb70:	4680      	mov	r8, r0
 800bb72:	2300      	movs	r3, #0
 800bb74:	220a      	movs	r2, #10
 800bb76:	4620      	mov	r0, r4
 800bb78:	f000 f8ee 	bl	800bd58 <__multadd>
 800bb7c:	4607      	mov	r7, r0
 800bb7e:	e7f1      	b.n	800bb64 <_dtoa_r+0xb04>
 800bb80:	9b03      	ldr	r3, [sp, #12]
 800bb82:	9302      	str	r3, [sp, #8]
 800bb84:	9d01      	ldr	r5, [sp, #4]
 800bb86:	ee18 0a10 	vmov	r0, s16
 800bb8a:	4631      	mov	r1, r6
 800bb8c:	f7ff f9da 	bl	800af44 <quorem>
 800bb90:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bb94:	9b01      	ldr	r3, [sp, #4]
 800bb96:	f805 ab01 	strb.w	sl, [r5], #1
 800bb9a:	1aea      	subs	r2, r5, r3
 800bb9c:	9b02      	ldr	r3, [sp, #8]
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	dd09      	ble.n	800bbb6 <_dtoa_r+0xb56>
 800bba2:	ee18 1a10 	vmov	r1, s16
 800bba6:	2300      	movs	r3, #0
 800bba8:	220a      	movs	r2, #10
 800bbaa:	4620      	mov	r0, r4
 800bbac:	f000 f8d4 	bl	800bd58 <__multadd>
 800bbb0:	ee08 0a10 	vmov	s16, r0
 800bbb4:	e7e7      	b.n	800bb86 <_dtoa_r+0xb26>
 800bbb6:	9b02      	ldr	r3, [sp, #8]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	bfc8      	it	gt
 800bbbc:	461d      	movgt	r5, r3
 800bbbe:	9b01      	ldr	r3, [sp, #4]
 800bbc0:	bfd8      	it	le
 800bbc2:	2501      	movle	r5, #1
 800bbc4:	441d      	add	r5, r3
 800bbc6:	f04f 0800 	mov.w	r8, #0
 800bbca:	ee18 1a10 	vmov	r1, s16
 800bbce:	2201      	movs	r2, #1
 800bbd0:	4620      	mov	r0, r4
 800bbd2:	f000 fa71 	bl	800c0b8 <__lshift>
 800bbd6:	4631      	mov	r1, r6
 800bbd8:	ee08 0a10 	vmov	s16, r0
 800bbdc:	f000 fadc 	bl	800c198 <__mcmp>
 800bbe0:	2800      	cmp	r0, #0
 800bbe2:	dc91      	bgt.n	800bb08 <_dtoa_r+0xaa8>
 800bbe4:	d102      	bne.n	800bbec <_dtoa_r+0xb8c>
 800bbe6:	f01a 0f01 	tst.w	sl, #1
 800bbea:	d18d      	bne.n	800bb08 <_dtoa_r+0xaa8>
 800bbec:	462b      	mov	r3, r5
 800bbee:	461d      	mov	r5, r3
 800bbf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bbf4:	2a30      	cmp	r2, #48	; 0x30
 800bbf6:	d0fa      	beq.n	800bbee <_dtoa_r+0xb8e>
 800bbf8:	e6d7      	b.n	800b9aa <_dtoa_r+0x94a>
 800bbfa:	9a01      	ldr	r2, [sp, #4]
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d184      	bne.n	800bb0a <_dtoa_r+0xaaa>
 800bc00:	9b00      	ldr	r3, [sp, #0]
 800bc02:	3301      	adds	r3, #1
 800bc04:	9300      	str	r3, [sp, #0]
 800bc06:	2331      	movs	r3, #49	; 0x31
 800bc08:	7013      	strb	r3, [r2, #0]
 800bc0a:	e6ce      	b.n	800b9aa <_dtoa_r+0x94a>
 800bc0c:	4b09      	ldr	r3, [pc, #36]	; (800bc34 <_dtoa_r+0xbd4>)
 800bc0e:	f7ff ba95 	b.w	800b13c <_dtoa_r+0xdc>
 800bc12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	f47f aa6e 	bne.w	800b0f6 <_dtoa_r+0x96>
 800bc1a:	4b07      	ldr	r3, [pc, #28]	; (800bc38 <_dtoa_r+0xbd8>)
 800bc1c:	f7ff ba8e 	b.w	800b13c <_dtoa_r+0xdc>
 800bc20:	9b02      	ldr	r3, [sp, #8]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	dcae      	bgt.n	800bb84 <_dtoa_r+0xb24>
 800bc26:	9b06      	ldr	r3, [sp, #24]
 800bc28:	2b02      	cmp	r3, #2
 800bc2a:	f73f aea8 	bgt.w	800b97e <_dtoa_r+0x91e>
 800bc2e:	e7a9      	b.n	800bb84 <_dtoa_r+0xb24>
 800bc30:	08026ce3 	.word	0x08026ce3
 800bc34:	08026c04 	.word	0x08026c04
 800bc38:	08026c64 	.word	0x08026c64

0800bc3c <fiprintf>:
 800bc3c:	b40e      	push	{r1, r2, r3}
 800bc3e:	b503      	push	{r0, r1, lr}
 800bc40:	4601      	mov	r1, r0
 800bc42:	ab03      	add	r3, sp, #12
 800bc44:	4805      	ldr	r0, [pc, #20]	; (800bc5c <fiprintf+0x20>)
 800bc46:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc4a:	6800      	ldr	r0, [r0, #0]
 800bc4c:	9301      	str	r3, [sp, #4]
 800bc4e:	f000 fcc5 	bl	800c5dc <_vfiprintf_r>
 800bc52:	b002      	add	sp, #8
 800bc54:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc58:	b003      	add	sp, #12
 800bc5a:	4770      	bx	lr
 800bc5c:	20000040 	.word	0x20000040

0800bc60 <_localeconv_r>:
 800bc60:	4800      	ldr	r0, [pc, #0]	; (800bc64 <_localeconv_r+0x4>)
 800bc62:	4770      	bx	lr
 800bc64:	20000194 	.word	0x20000194

0800bc68 <malloc>:
 800bc68:	4b02      	ldr	r3, [pc, #8]	; (800bc74 <malloc+0xc>)
 800bc6a:	4601      	mov	r1, r0
 800bc6c:	6818      	ldr	r0, [r3, #0]
 800bc6e:	f000 bc17 	b.w	800c4a0 <_malloc_r>
 800bc72:	bf00      	nop
 800bc74:	20000040 	.word	0x20000040

0800bc78 <memcpy>:
 800bc78:	440a      	add	r2, r1
 800bc7a:	4291      	cmp	r1, r2
 800bc7c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc80:	d100      	bne.n	800bc84 <memcpy+0xc>
 800bc82:	4770      	bx	lr
 800bc84:	b510      	push	{r4, lr}
 800bc86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc8e:	4291      	cmp	r1, r2
 800bc90:	d1f9      	bne.n	800bc86 <memcpy+0xe>
 800bc92:	bd10      	pop	{r4, pc}

0800bc94 <_Balloc>:
 800bc94:	b570      	push	{r4, r5, r6, lr}
 800bc96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bc98:	4604      	mov	r4, r0
 800bc9a:	460d      	mov	r5, r1
 800bc9c:	b976      	cbnz	r6, 800bcbc <_Balloc+0x28>
 800bc9e:	2010      	movs	r0, #16
 800bca0:	f7ff ffe2 	bl	800bc68 <malloc>
 800bca4:	4602      	mov	r2, r0
 800bca6:	6260      	str	r0, [r4, #36]	; 0x24
 800bca8:	b920      	cbnz	r0, 800bcb4 <_Balloc+0x20>
 800bcaa:	4b18      	ldr	r3, [pc, #96]	; (800bd0c <_Balloc+0x78>)
 800bcac:	4818      	ldr	r0, [pc, #96]	; (800bd10 <_Balloc+0x7c>)
 800bcae:	2166      	movs	r1, #102	; 0x66
 800bcb0:	f7ff f92a 	bl	800af08 <__assert_func>
 800bcb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bcb8:	6006      	str	r6, [r0, #0]
 800bcba:	60c6      	str	r6, [r0, #12]
 800bcbc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bcbe:	68f3      	ldr	r3, [r6, #12]
 800bcc0:	b183      	cbz	r3, 800bce4 <_Balloc+0x50>
 800bcc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcc4:	68db      	ldr	r3, [r3, #12]
 800bcc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bcca:	b9b8      	cbnz	r0, 800bcfc <_Balloc+0x68>
 800bccc:	2101      	movs	r1, #1
 800bcce:	fa01 f605 	lsl.w	r6, r1, r5
 800bcd2:	1d72      	adds	r2, r6, #5
 800bcd4:	0092      	lsls	r2, r2, #2
 800bcd6:	4620      	mov	r0, r4
 800bcd8:	f000 fb60 	bl	800c39c <_calloc_r>
 800bcdc:	b160      	cbz	r0, 800bcf8 <_Balloc+0x64>
 800bcde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bce2:	e00e      	b.n	800bd02 <_Balloc+0x6e>
 800bce4:	2221      	movs	r2, #33	; 0x21
 800bce6:	2104      	movs	r1, #4
 800bce8:	4620      	mov	r0, r4
 800bcea:	f000 fb57 	bl	800c39c <_calloc_r>
 800bcee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcf0:	60f0      	str	r0, [r6, #12]
 800bcf2:	68db      	ldr	r3, [r3, #12]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d1e4      	bne.n	800bcc2 <_Balloc+0x2e>
 800bcf8:	2000      	movs	r0, #0
 800bcfa:	bd70      	pop	{r4, r5, r6, pc}
 800bcfc:	6802      	ldr	r2, [r0, #0]
 800bcfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bd02:	2300      	movs	r3, #0
 800bd04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd08:	e7f7      	b.n	800bcfa <_Balloc+0x66>
 800bd0a:	bf00      	nop
 800bd0c:	08026c71 	.word	0x08026c71
 800bd10:	08026cf4 	.word	0x08026cf4

0800bd14 <_Bfree>:
 800bd14:	b570      	push	{r4, r5, r6, lr}
 800bd16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bd18:	4605      	mov	r5, r0
 800bd1a:	460c      	mov	r4, r1
 800bd1c:	b976      	cbnz	r6, 800bd3c <_Bfree+0x28>
 800bd1e:	2010      	movs	r0, #16
 800bd20:	f7ff ffa2 	bl	800bc68 <malloc>
 800bd24:	4602      	mov	r2, r0
 800bd26:	6268      	str	r0, [r5, #36]	; 0x24
 800bd28:	b920      	cbnz	r0, 800bd34 <_Bfree+0x20>
 800bd2a:	4b09      	ldr	r3, [pc, #36]	; (800bd50 <_Bfree+0x3c>)
 800bd2c:	4809      	ldr	r0, [pc, #36]	; (800bd54 <_Bfree+0x40>)
 800bd2e:	218a      	movs	r1, #138	; 0x8a
 800bd30:	f7ff f8ea 	bl	800af08 <__assert_func>
 800bd34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd38:	6006      	str	r6, [r0, #0]
 800bd3a:	60c6      	str	r6, [r0, #12]
 800bd3c:	b13c      	cbz	r4, 800bd4e <_Bfree+0x3a>
 800bd3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bd40:	6862      	ldr	r2, [r4, #4]
 800bd42:	68db      	ldr	r3, [r3, #12]
 800bd44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd48:	6021      	str	r1, [r4, #0]
 800bd4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bd4e:	bd70      	pop	{r4, r5, r6, pc}
 800bd50:	08026c71 	.word	0x08026c71
 800bd54:	08026cf4 	.word	0x08026cf4

0800bd58 <__multadd>:
 800bd58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd5c:	690d      	ldr	r5, [r1, #16]
 800bd5e:	4607      	mov	r7, r0
 800bd60:	460c      	mov	r4, r1
 800bd62:	461e      	mov	r6, r3
 800bd64:	f101 0c14 	add.w	ip, r1, #20
 800bd68:	2000      	movs	r0, #0
 800bd6a:	f8dc 3000 	ldr.w	r3, [ip]
 800bd6e:	b299      	uxth	r1, r3
 800bd70:	fb02 6101 	mla	r1, r2, r1, r6
 800bd74:	0c1e      	lsrs	r6, r3, #16
 800bd76:	0c0b      	lsrs	r3, r1, #16
 800bd78:	fb02 3306 	mla	r3, r2, r6, r3
 800bd7c:	b289      	uxth	r1, r1
 800bd7e:	3001      	adds	r0, #1
 800bd80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bd84:	4285      	cmp	r5, r0
 800bd86:	f84c 1b04 	str.w	r1, [ip], #4
 800bd8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bd8e:	dcec      	bgt.n	800bd6a <__multadd+0x12>
 800bd90:	b30e      	cbz	r6, 800bdd6 <__multadd+0x7e>
 800bd92:	68a3      	ldr	r3, [r4, #8]
 800bd94:	42ab      	cmp	r3, r5
 800bd96:	dc19      	bgt.n	800bdcc <__multadd+0x74>
 800bd98:	6861      	ldr	r1, [r4, #4]
 800bd9a:	4638      	mov	r0, r7
 800bd9c:	3101      	adds	r1, #1
 800bd9e:	f7ff ff79 	bl	800bc94 <_Balloc>
 800bda2:	4680      	mov	r8, r0
 800bda4:	b928      	cbnz	r0, 800bdb2 <__multadd+0x5a>
 800bda6:	4602      	mov	r2, r0
 800bda8:	4b0c      	ldr	r3, [pc, #48]	; (800bddc <__multadd+0x84>)
 800bdaa:	480d      	ldr	r0, [pc, #52]	; (800bde0 <__multadd+0x88>)
 800bdac:	21b5      	movs	r1, #181	; 0xb5
 800bdae:	f7ff f8ab 	bl	800af08 <__assert_func>
 800bdb2:	6922      	ldr	r2, [r4, #16]
 800bdb4:	3202      	adds	r2, #2
 800bdb6:	f104 010c 	add.w	r1, r4, #12
 800bdba:	0092      	lsls	r2, r2, #2
 800bdbc:	300c      	adds	r0, #12
 800bdbe:	f7ff ff5b 	bl	800bc78 <memcpy>
 800bdc2:	4621      	mov	r1, r4
 800bdc4:	4638      	mov	r0, r7
 800bdc6:	f7ff ffa5 	bl	800bd14 <_Bfree>
 800bdca:	4644      	mov	r4, r8
 800bdcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bdd0:	3501      	adds	r5, #1
 800bdd2:	615e      	str	r6, [r3, #20]
 800bdd4:	6125      	str	r5, [r4, #16]
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bddc:	08026ce3 	.word	0x08026ce3
 800bde0:	08026cf4 	.word	0x08026cf4

0800bde4 <__hi0bits>:
 800bde4:	0c03      	lsrs	r3, r0, #16
 800bde6:	041b      	lsls	r3, r3, #16
 800bde8:	b9d3      	cbnz	r3, 800be20 <__hi0bits+0x3c>
 800bdea:	0400      	lsls	r0, r0, #16
 800bdec:	2310      	movs	r3, #16
 800bdee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bdf2:	bf04      	itt	eq
 800bdf4:	0200      	lsleq	r0, r0, #8
 800bdf6:	3308      	addeq	r3, #8
 800bdf8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bdfc:	bf04      	itt	eq
 800bdfe:	0100      	lsleq	r0, r0, #4
 800be00:	3304      	addeq	r3, #4
 800be02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800be06:	bf04      	itt	eq
 800be08:	0080      	lsleq	r0, r0, #2
 800be0a:	3302      	addeq	r3, #2
 800be0c:	2800      	cmp	r0, #0
 800be0e:	db05      	blt.n	800be1c <__hi0bits+0x38>
 800be10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800be14:	f103 0301 	add.w	r3, r3, #1
 800be18:	bf08      	it	eq
 800be1a:	2320      	moveq	r3, #32
 800be1c:	4618      	mov	r0, r3
 800be1e:	4770      	bx	lr
 800be20:	2300      	movs	r3, #0
 800be22:	e7e4      	b.n	800bdee <__hi0bits+0xa>

0800be24 <__lo0bits>:
 800be24:	6803      	ldr	r3, [r0, #0]
 800be26:	f013 0207 	ands.w	r2, r3, #7
 800be2a:	4601      	mov	r1, r0
 800be2c:	d00b      	beq.n	800be46 <__lo0bits+0x22>
 800be2e:	07da      	lsls	r2, r3, #31
 800be30:	d423      	bmi.n	800be7a <__lo0bits+0x56>
 800be32:	0798      	lsls	r0, r3, #30
 800be34:	bf49      	itett	mi
 800be36:	085b      	lsrmi	r3, r3, #1
 800be38:	089b      	lsrpl	r3, r3, #2
 800be3a:	2001      	movmi	r0, #1
 800be3c:	600b      	strmi	r3, [r1, #0]
 800be3e:	bf5c      	itt	pl
 800be40:	600b      	strpl	r3, [r1, #0]
 800be42:	2002      	movpl	r0, #2
 800be44:	4770      	bx	lr
 800be46:	b298      	uxth	r0, r3
 800be48:	b9a8      	cbnz	r0, 800be76 <__lo0bits+0x52>
 800be4a:	0c1b      	lsrs	r3, r3, #16
 800be4c:	2010      	movs	r0, #16
 800be4e:	b2da      	uxtb	r2, r3
 800be50:	b90a      	cbnz	r2, 800be56 <__lo0bits+0x32>
 800be52:	3008      	adds	r0, #8
 800be54:	0a1b      	lsrs	r3, r3, #8
 800be56:	071a      	lsls	r2, r3, #28
 800be58:	bf04      	itt	eq
 800be5a:	091b      	lsreq	r3, r3, #4
 800be5c:	3004      	addeq	r0, #4
 800be5e:	079a      	lsls	r2, r3, #30
 800be60:	bf04      	itt	eq
 800be62:	089b      	lsreq	r3, r3, #2
 800be64:	3002      	addeq	r0, #2
 800be66:	07da      	lsls	r2, r3, #31
 800be68:	d403      	bmi.n	800be72 <__lo0bits+0x4e>
 800be6a:	085b      	lsrs	r3, r3, #1
 800be6c:	f100 0001 	add.w	r0, r0, #1
 800be70:	d005      	beq.n	800be7e <__lo0bits+0x5a>
 800be72:	600b      	str	r3, [r1, #0]
 800be74:	4770      	bx	lr
 800be76:	4610      	mov	r0, r2
 800be78:	e7e9      	b.n	800be4e <__lo0bits+0x2a>
 800be7a:	2000      	movs	r0, #0
 800be7c:	4770      	bx	lr
 800be7e:	2020      	movs	r0, #32
 800be80:	4770      	bx	lr
	...

0800be84 <__i2b>:
 800be84:	b510      	push	{r4, lr}
 800be86:	460c      	mov	r4, r1
 800be88:	2101      	movs	r1, #1
 800be8a:	f7ff ff03 	bl	800bc94 <_Balloc>
 800be8e:	4602      	mov	r2, r0
 800be90:	b928      	cbnz	r0, 800be9e <__i2b+0x1a>
 800be92:	4b05      	ldr	r3, [pc, #20]	; (800bea8 <__i2b+0x24>)
 800be94:	4805      	ldr	r0, [pc, #20]	; (800beac <__i2b+0x28>)
 800be96:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800be9a:	f7ff f835 	bl	800af08 <__assert_func>
 800be9e:	2301      	movs	r3, #1
 800bea0:	6144      	str	r4, [r0, #20]
 800bea2:	6103      	str	r3, [r0, #16]
 800bea4:	bd10      	pop	{r4, pc}
 800bea6:	bf00      	nop
 800bea8:	08026ce3 	.word	0x08026ce3
 800beac:	08026cf4 	.word	0x08026cf4

0800beb0 <__multiply>:
 800beb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beb4:	4691      	mov	r9, r2
 800beb6:	690a      	ldr	r2, [r1, #16]
 800beb8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bebc:	429a      	cmp	r2, r3
 800bebe:	bfb8      	it	lt
 800bec0:	460b      	movlt	r3, r1
 800bec2:	460c      	mov	r4, r1
 800bec4:	bfbc      	itt	lt
 800bec6:	464c      	movlt	r4, r9
 800bec8:	4699      	movlt	r9, r3
 800beca:	6927      	ldr	r7, [r4, #16]
 800becc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bed0:	68a3      	ldr	r3, [r4, #8]
 800bed2:	6861      	ldr	r1, [r4, #4]
 800bed4:	eb07 060a 	add.w	r6, r7, sl
 800bed8:	42b3      	cmp	r3, r6
 800beda:	b085      	sub	sp, #20
 800bedc:	bfb8      	it	lt
 800bede:	3101      	addlt	r1, #1
 800bee0:	f7ff fed8 	bl	800bc94 <_Balloc>
 800bee4:	b930      	cbnz	r0, 800bef4 <__multiply+0x44>
 800bee6:	4602      	mov	r2, r0
 800bee8:	4b44      	ldr	r3, [pc, #272]	; (800bffc <__multiply+0x14c>)
 800beea:	4845      	ldr	r0, [pc, #276]	; (800c000 <__multiply+0x150>)
 800beec:	f240 115d 	movw	r1, #349	; 0x15d
 800bef0:	f7ff f80a 	bl	800af08 <__assert_func>
 800bef4:	f100 0514 	add.w	r5, r0, #20
 800bef8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800befc:	462b      	mov	r3, r5
 800befe:	2200      	movs	r2, #0
 800bf00:	4543      	cmp	r3, r8
 800bf02:	d321      	bcc.n	800bf48 <__multiply+0x98>
 800bf04:	f104 0314 	add.w	r3, r4, #20
 800bf08:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bf0c:	f109 0314 	add.w	r3, r9, #20
 800bf10:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bf14:	9202      	str	r2, [sp, #8]
 800bf16:	1b3a      	subs	r2, r7, r4
 800bf18:	3a15      	subs	r2, #21
 800bf1a:	f022 0203 	bic.w	r2, r2, #3
 800bf1e:	3204      	adds	r2, #4
 800bf20:	f104 0115 	add.w	r1, r4, #21
 800bf24:	428f      	cmp	r7, r1
 800bf26:	bf38      	it	cc
 800bf28:	2204      	movcc	r2, #4
 800bf2a:	9201      	str	r2, [sp, #4]
 800bf2c:	9a02      	ldr	r2, [sp, #8]
 800bf2e:	9303      	str	r3, [sp, #12]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d80c      	bhi.n	800bf4e <__multiply+0x9e>
 800bf34:	2e00      	cmp	r6, #0
 800bf36:	dd03      	ble.n	800bf40 <__multiply+0x90>
 800bf38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d05a      	beq.n	800bff6 <__multiply+0x146>
 800bf40:	6106      	str	r6, [r0, #16]
 800bf42:	b005      	add	sp, #20
 800bf44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf48:	f843 2b04 	str.w	r2, [r3], #4
 800bf4c:	e7d8      	b.n	800bf00 <__multiply+0x50>
 800bf4e:	f8b3 a000 	ldrh.w	sl, [r3]
 800bf52:	f1ba 0f00 	cmp.w	sl, #0
 800bf56:	d024      	beq.n	800bfa2 <__multiply+0xf2>
 800bf58:	f104 0e14 	add.w	lr, r4, #20
 800bf5c:	46a9      	mov	r9, r5
 800bf5e:	f04f 0c00 	mov.w	ip, #0
 800bf62:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bf66:	f8d9 1000 	ldr.w	r1, [r9]
 800bf6a:	fa1f fb82 	uxth.w	fp, r2
 800bf6e:	b289      	uxth	r1, r1
 800bf70:	fb0a 110b 	mla	r1, sl, fp, r1
 800bf74:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bf78:	f8d9 2000 	ldr.w	r2, [r9]
 800bf7c:	4461      	add	r1, ip
 800bf7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bf82:	fb0a c20b 	mla	r2, sl, fp, ip
 800bf86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bf8a:	b289      	uxth	r1, r1
 800bf8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bf90:	4577      	cmp	r7, lr
 800bf92:	f849 1b04 	str.w	r1, [r9], #4
 800bf96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bf9a:	d8e2      	bhi.n	800bf62 <__multiply+0xb2>
 800bf9c:	9a01      	ldr	r2, [sp, #4]
 800bf9e:	f845 c002 	str.w	ip, [r5, r2]
 800bfa2:	9a03      	ldr	r2, [sp, #12]
 800bfa4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bfa8:	3304      	adds	r3, #4
 800bfaa:	f1b9 0f00 	cmp.w	r9, #0
 800bfae:	d020      	beq.n	800bff2 <__multiply+0x142>
 800bfb0:	6829      	ldr	r1, [r5, #0]
 800bfb2:	f104 0c14 	add.w	ip, r4, #20
 800bfb6:	46ae      	mov	lr, r5
 800bfb8:	f04f 0a00 	mov.w	sl, #0
 800bfbc:	f8bc b000 	ldrh.w	fp, [ip]
 800bfc0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bfc4:	fb09 220b 	mla	r2, r9, fp, r2
 800bfc8:	4492      	add	sl, r2
 800bfca:	b289      	uxth	r1, r1
 800bfcc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bfd0:	f84e 1b04 	str.w	r1, [lr], #4
 800bfd4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bfd8:	f8be 1000 	ldrh.w	r1, [lr]
 800bfdc:	0c12      	lsrs	r2, r2, #16
 800bfde:	fb09 1102 	mla	r1, r9, r2, r1
 800bfe2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bfe6:	4567      	cmp	r7, ip
 800bfe8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bfec:	d8e6      	bhi.n	800bfbc <__multiply+0x10c>
 800bfee:	9a01      	ldr	r2, [sp, #4]
 800bff0:	50a9      	str	r1, [r5, r2]
 800bff2:	3504      	adds	r5, #4
 800bff4:	e79a      	b.n	800bf2c <__multiply+0x7c>
 800bff6:	3e01      	subs	r6, #1
 800bff8:	e79c      	b.n	800bf34 <__multiply+0x84>
 800bffa:	bf00      	nop
 800bffc:	08026ce3 	.word	0x08026ce3
 800c000:	08026cf4 	.word	0x08026cf4

0800c004 <__pow5mult>:
 800c004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c008:	4615      	mov	r5, r2
 800c00a:	f012 0203 	ands.w	r2, r2, #3
 800c00e:	4606      	mov	r6, r0
 800c010:	460f      	mov	r7, r1
 800c012:	d007      	beq.n	800c024 <__pow5mult+0x20>
 800c014:	4c25      	ldr	r4, [pc, #148]	; (800c0ac <__pow5mult+0xa8>)
 800c016:	3a01      	subs	r2, #1
 800c018:	2300      	movs	r3, #0
 800c01a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c01e:	f7ff fe9b 	bl	800bd58 <__multadd>
 800c022:	4607      	mov	r7, r0
 800c024:	10ad      	asrs	r5, r5, #2
 800c026:	d03d      	beq.n	800c0a4 <__pow5mult+0xa0>
 800c028:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c02a:	b97c      	cbnz	r4, 800c04c <__pow5mult+0x48>
 800c02c:	2010      	movs	r0, #16
 800c02e:	f7ff fe1b 	bl	800bc68 <malloc>
 800c032:	4602      	mov	r2, r0
 800c034:	6270      	str	r0, [r6, #36]	; 0x24
 800c036:	b928      	cbnz	r0, 800c044 <__pow5mult+0x40>
 800c038:	4b1d      	ldr	r3, [pc, #116]	; (800c0b0 <__pow5mult+0xac>)
 800c03a:	481e      	ldr	r0, [pc, #120]	; (800c0b4 <__pow5mult+0xb0>)
 800c03c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c040:	f7fe ff62 	bl	800af08 <__assert_func>
 800c044:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c048:	6004      	str	r4, [r0, #0]
 800c04a:	60c4      	str	r4, [r0, #12]
 800c04c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c050:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c054:	b94c      	cbnz	r4, 800c06a <__pow5mult+0x66>
 800c056:	f240 2171 	movw	r1, #625	; 0x271
 800c05a:	4630      	mov	r0, r6
 800c05c:	f7ff ff12 	bl	800be84 <__i2b>
 800c060:	2300      	movs	r3, #0
 800c062:	f8c8 0008 	str.w	r0, [r8, #8]
 800c066:	4604      	mov	r4, r0
 800c068:	6003      	str	r3, [r0, #0]
 800c06a:	f04f 0900 	mov.w	r9, #0
 800c06e:	07eb      	lsls	r3, r5, #31
 800c070:	d50a      	bpl.n	800c088 <__pow5mult+0x84>
 800c072:	4639      	mov	r1, r7
 800c074:	4622      	mov	r2, r4
 800c076:	4630      	mov	r0, r6
 800c078:	f7ff ff1a 	bl	800beb0 <__multiply>
 800c07c:	4639      	mov	r1, r7
 800c07e:	4680      	mov	r8, r0
 800c080:	4630      	mov	r0, r6
 800c082:	f7ff fe47 	bl	800bd14 <_Bfree>
 800c086:	4647      	mov	r7, r8
 800c088:	106d      	asrs	r5, r5, #1
 800c08a:	d00b      	beq.n	800c0a4 <__pow5mult+0xa0>
 800c08c:	6820      	ldr	r0, [r4, #0]
 800c08e:	b938      	cbnz	r0, 800c0a0 <__pow5mult+0x9c>
 800c090:	4622      	mov	r2, r4
 800c092:	4621      	mov	r1, r4
 800c094:	4630      	mov	r0, r6
 800c096:	f7ff ff0b 	bl	800beb0 <__multiply>
 800c09a:	6020      	str	r0, [r4, #0]
 800c09c:	f8c0 9000 	str.w	r9, [r0]
 800c0a0:	4604      	mov	r4, r0
 800c0a2:	e7e4      	b.n	800c06e <__pow5mult+0x6a>
 800c0a4:	4638      	mov	r0, r7
 800c0a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0aa:	bf00      	nop
 800c0ac:	08026e40 	.word	0x08026e40
 800c0b0:	08026c71 	.word	0x08026c71
 800c0b4:	08026cf4 	.word	0x08026cf4

0800c0b8 <__lshift>:
 800c0b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0bc:	460c      	mov	r4, r1
 800c0be:	6849      	ldr	r1, [r1, #4]
 800c0c0:	6923      	ldr	r3, [r4, #16]
 800c0c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c0c6:	68a3      	ldr	r3, [r4, #8]
 800c0c8:	4607      	mov	r7, r0
 800c0ca:	4691      	mov	r9, r2
 800c0cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c0d0:	f108 0601 	add.w	r6, r8, #1
 800c0d4:	42b3      	cmp	r3, r6
 800c0d6:	db0b      	blt.n	800c0f0 <__lshift+0x38>
 800c0d8:	4638      	mov	r0, r7
 800c0da:	f7ff fddb 	bl	800bc94 <_Balloc>
 800c0de:	4605      	mov	r5, r0
 800c0e0:	b948      	cbnz	r0, 800c0f6 <__lshift+0x3e>
 800c0e2:	4602      	mov	r2, r0
 800c0e4:	4b2a      	ldr	r3, [pc, #168]	; (800c190 <__lshift+0xd8>)
 800c0e6:	482b      	ldr	r0, [pc, #172]	; (800c194 <__lshift+0xdc>)
 800c0e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c0ec:	f7fe ff0c 	bl	800af08 <__assert_func>
 800c0f0:	3101      	adds	r1, #1
 800c0f2:	005b      	lsls	r3, r3, #1
 800c0f4:	e7ee      	b.n	800c0d4 <__lshift+0x1c>
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	f100 0114 	add.w	r1, r0, #20
 800c0fc:	f100 0210 	add.w	r2, r0, #16
 800c100:	4618      	mov	r0, r3
 800c102:	4553      	cmp	r3, sl
 800c104:	db37      	blt.n	800c176 <__lshift+0xbe>
 800c106:	6920      	ldr	r0, [r4, #16]
 800c108:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c10c:	f104 0314 	add.w	r3, r4, #20
 800c110:	f019 091f 	ands.w	r9, r9, #31
 800c114:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c118:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c11c:	d02f      	beq.n	800c17e <__lshift+0xc6>
 800c11e:	f1c9 0e20 	rsb	lr, r9, #32
 800c122:	468a      	mov	sl, r1
 800c124:	f04f 0c00 	mov.w	ip, #0
 800c128:	681a      	ldr	r2, [r3, #0]
 800c12a:	fa02 f209 	lsl.w	r2, r2, r9
 800c12e:	ea42 020c 	orr.w	r2, r2, ip
 800c132:	f84a 2b04 	str.w	r2, [sl], #4
 800c136:	f853 2b04 	ldr.w	r2, [r3], #4
 800c13a:	4298      	cmp	r0, r3
 800c13c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c140:	d8f2      	bhi.n	800c128 <__lshift+0x70>
 800c142:	1b03      	subs	r3, r0, r4
 800c144:	3b15      	subs	r3, #21
 800c146:	f023 0303 	bic.w	r3, r3, #3
 800c14a:	3304      	adds	r3, #4
 800c14c:	f104 0215 	add.w	r2, r4, #21
 800c150:	4290      	cmp	r0, r2
 800c152:	bf38      	it	cc
 800c154:	2304      	movcc	r3, #4
 800c156:	f841 c003 	str.w	ip, [r1, r3]
 800c15a:	f1bc 0f00 	cmp.w	ip, #0
 800c15e:	d001      	beq.n	800c164 <__lshift+0xac>
 800c160:	f108 0602 	add.w	r6, r8, #2
 800c164:	3e01      	subs	r6, #1
 800c166:	4638      	mov	r0, r7
 800c168:	612e      	str	r6, [r5, #16]
 800c16a:	4621      	mov	r1, r4
 800c16c:	f7ff fdd2 	bl	800bd14 <_Bfree>
 800c170:	4628      	mov	r0, r5
 800c172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c176:	f842 0f04 	str.w	r0, [r2, #4]!
 800c17a:	3301      	adds	r3, #1
 800c17c:	e7c1      	b.n	800c102 <__lshift+0x4a>
 800c17e:	3904      	subs	r1, #4
 800c180:	f853 2b04 	ldr.w	r2, [r3], #4
 800c184:	f841 2f04 	str.w	r2, [r1, #4]!
 800c188:	4298      	cmp	r0, r3
 800c18a:	d8f9      	bhi.n	800c180 <__lshift+0xc8>
 800c18c:	e7ea      	b.n	800c164 <__lshift+0xac>
 800c18e:	bf00      	nop
 800c190:	08026ce3 	.word	0x08026ce3
 800c194:	08026cf4 	.word	0x08026cf4

0800c198 <__mcmp>:
 800c198:	b530      	push	{r4, r5, lr}
 800c19a:	6902      	ldr	r2, [r0, #16]
 800c19c:	690c      	ldr	r4, [r1, #16]
 800c19e:	1b12      	subs	r2, r2, r4
 800c1a0:	d10e      	bne.n	800c1c0 <__mcmp+0x28>
 800c1a2:	f100 0314 	add.w	r3, r0, #20
 800c1a6:	3114      	adds	r1, #20
 800c1a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c1ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c1b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c1b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c1b8:	42a5      	cmp	r5, r4
 800c1ba:	d003      	beq.n	800c1c4 <__mcmp+0x2c>
 800c1bc:	d305      	bcc.n	800c1ca <__mcmp+0x32>
 800c1be:	2201      	movs	r2, #1
 800c1c0:	4610      	mov	r0, r2
 800c1c2:	bd30      	pop	{r4, r5, pc}
 800c1c4:	4283      	cmp	r3, r0
 800c1c6:	d3f3      	bcc.n	800c1b0 <__mcmp+0x18>
 800c1c8:	e7fa      	b.n	800c1c0 <__mcmp+0x28>
 800c1ca:	f04f 32ff 	mov.w	r2, #4294967295
 800c1ce:	e7f7      	b.n	800c1c0 <__mcmp+0x28>

0800c1d0 <__mdiff>:
 800c1d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d4:	460c      	mov	r4, r1
 800c1d6:	4606      	mov	r6, r0
 800c1d8:	4611      	mov	r1, r2
 800c1da:	4620      	mov	r0, r4
 800c1dc:	4690      	mov	r8, r2
 800c1de:	f7ff ffdb 	bl	800c198 <__mcmp>
 800c1e2:	1e05      	subs	r5, r0, #0
 800c1e4:	d110      	bne.n	800c208 <__mdiff+0x38>
 800c1e6:	4629      	mov	r1, r5
 800c1e8:	4630      	mov	r0, r6
 800c1ea:	f7ff fd53 	bl	800bc94 <_Balloc>
 800c1ee:	b930      	cbnz	r0, 800c1fe <__mdiff+0x2e>
 800c1f0:	4b3a      	ldr	r3, [pc, #232]	; (800c2dc <__mdiff+0x10c>)
 800c1f2:	4602      	mov	r2, r0
 800c1f4:	f240 2132 	movw	r1, #562	; 0x232
 800c1f8:	4839      	ldr	r0, [pc, #228]	; (800c2e0 <__mdiff+0x110>)
 800c1fa:	f7fe fe85 	bl	800af08 <__assert_func>
 800c1fe:	2301      	movs	r3, #1
 800c200:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c204:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c208:	bfa4      	itt	ge
 800c20a:	4643      	movge	r3, r8
 800c20c:	46a0      	movge	r8, r4
 800c20e:	4630      	mov	r0, r6
 800c210:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c214:	bfa6      	itte	ge
 800c216:	461c      	movge	r4, r3
 800c218:	2500      	movge	r5, #0
 800c21a:	2501      	movlt	r5, #1
 800c21c:	f7ff fd3a 	bl	800bc94 <_Balloc>
 800c220:	b920      	cbnz	r0, 800c22c <__mdiff+0x5c>
 800c222:	4b2e      	ldr	r3, [pc, #184]	; (800c2dc <__mdiff+0x10c>)
 800c224:	4602      	mov	r2, r0
 800c226:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c22a:	e7e5      	b.n	800c1f8 <__mdiff+0x28>
 800c22c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c230:	6926      	ldr	r6, [r4, #16]
 800c232:	60c5      	str	r5, [r0, #12]
 800c234:	f104 0914 	add.w	r9, r4, #20
 800c238:	f108 0514 	add.w	r5, r8, #20
 800c23c:	f100 0e14 	add.w	lr, r0, #20
 800c240:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c244:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c248:	f108 0210 	add.w	r2, r8, #16
 800c24c:	46f2      	mov	sl, lr
 800c24e:	2100      	movs	r1, #0
 800c250:	f859 3b04 	ldr.w	r3, [r9], #4
 800c254:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c258:	fa1f f883 	uxth.w	r8, r3
 800c25c:	fa11 f18b 	uxtah	r1, r1, fp
 800c260:	0c1b      	lsrs	r3, r3, #16
 800c262:	eba1 0808 	sub.w	r8, r1, r8
 800c266:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c26a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c26e:	fa1f f888 	uxth.w	r8, r8
 800c272:	1419      	asrs	r1, r3, #16
 800c274:	454e      	cmp	r6, r9
 800c276:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c27a:	f84a 3b04 	str.w	r3, [sl], #4
 800c27e:	d8e7      	bhi.n	800c250 <__mdiff+0x80>
 800c280:	1b33      	subs	r3, r6, r4
 800c282:	3b15      	subs	r3, #21
 800c284:	f023 0303 	bic.w	r3, r3, #3
 800c288:	3304      	adds	r3, #4
 800c28a:	3415      	adds	r4, #21
 800c28c:	42a6      	cmp	r6, r4
 800c28e:	bf38      	it	cc
 800c290:	2304      	movcc	r3, #4
 800c292:	441d      	add	r5, r3
 800c294:	4473      	add	r3, lr
 800c296:	469e      	mov	lr, r3
 800c298:	462e      	mov	r6, r5
 800c29a:	4566      	cmp	r6, ip
 800c29c:	d30e      	bcc.n	800c2bc <__mdiff+0xec>
 800c29e:	f10c 0203 	add.w	r2, ip, #3
 800c2a2:	1b52      	subs	r2, r2, r5
 800c2a4:	f022 0203 	bic.w	r2, r2, #3
 800c2a8:	3d03      	subs	r5, #3
 800c2aa:	45ac      	cmp	ip, r5
 800c2ac:	bf38      	it	cc
 800c2ae:	2200      	movcc	r2, #0
 800c2b0:	441a      	add	r2, r3
 800c2b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c2b6:	b17b      	cbz	r3, 800c2d8 <__mdiff+0x108>
 800c2b8:	6107      	str	r7, [r0, #16]
 800c2ba:	e7a3      	b.n	800c204 <__mdiff+0x34>
 800c2bc:	f856 8b04 	ldr.w	r8, [r6], #4
 800c2c0:	fa11 f288 	uxtah	r2, r1, r8
 800c2c4:	1414      	asrs	r4, r2, #16
 800c2c6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c2ca:	b292      	uxth	r2, r2
 800c2cc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c2d0:	f84e 2b04 	str.w	r2, [lr], #4
 800c2d4:	1421      	asrs	r1, r4, #16
 800c2d6:	e7e0      	b.n	800c29a <__mdiff+0xca>
 800c2d8:	3f01      	subs	r7, #1
 800c2da:	e7ea      	b.n	800c2b2 <__mdiff+0xe2>
 800c2dc:	08026ce3 	.word	0x08026ce3
 800c2e0:	08026cf4 	.word	0x08026cf4

0800c2e4 <__d2b>:
 800c2e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c2e8:	4689      	mov	r9, r1
 800c2ea:	2101      	movs	r1, #1
 800c2ec:	ec57 6b10 	vmov	r6, r7, d0
 800c2f0:	4690      	mov	r8, r2
 800c2f2:	f7ff fccf 	bl	800bc94 <_Balloc>
 800c2f6:	4604      	mov	r4, r0
 800c2f8:	b930      	cbnz	r0, 800c308 <__d2b+0x24>
 800c2fa:	4602      	mov	r2, r0
 800c2fc:	4b25      	ldr	r3, [pc, #148]	; (800c394 <__d2b+0xb0>)
 800c2fe:	4826      	ldr	r0, [pc, #152]	; (800c398 <__d2b+0xb4>)
 800c300:	f240 310a 	movw	r1, #778	; 0x30a
 800c304:	f7fe fe00 	bl	800af08 <__assert_func>
 800c308:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c30c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c310:	bb35      	cbnz	r5, 800c360 <__d2b+0x7c>
 800c312:	2e00      	cmp	r6, #0
 800c314:	9301      	str	r3, [sp, #4]
 800c316:	d028      	beq.n	800c36a <__d2b+0x86>
 800c318:	4668      	mov	r0, sp
 800c31a:	9600      	str	r6, [sp, #0]
 800c31c:	f7ff fd82 	bl	800be24 <__lo0bits>
 800c320:	9900      	ldr	r1, [sp, #0]
 800c322:	b300      	cbz	r0, 800c366 <__d2b+0x82>
 800c324:	9a01      	ldr	r2, [sp, #4]
 800c326:	f1c0 0320 	rsb	r3, r0, #32
 800c32a:	fa02 f303 	lsl.w	r3, r2, r3
 800c32e:	430b      	orrs	r3, r1
 800c330:	40c2      	lsrs	r2, r0
 800c332:	6163      	str	r3, [r4, #20]
 800c334:	9201      	str	r2, [sp, #4]
 800c336:	9b01      	ldr	r3, [sp, #4]
 800c338:	61a3      	str	r3, [r4, #24]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	bf14      	ite	ne
 800c33e:	2202      	movne	r2, #2
 800c340:	2201      	moveq	r2, #1
 800c342:	6122      	str	r2, [r4, #16]
 800c344:	b1d5      	cbz	r5, 800c37c <__d2b+0x98>
 800c346:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c34a:	4405      	add	r5, r0
 800c34c:	f8c9 5000 	str.w	r5, [r9]
 800c350:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c354:	f8c8 0000 	str.w	r0, [r8]
 800c358:	4620      	mov	r0, r4
 800c35a:	b003      	add	sp, #12
 800c35c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c360:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c364:	e7d5      	b.n	800c312 <__d2b+0x2e>
 800c366:	6161      	str	r1, [r4, #20]
 800c368:	e7e5      	b.n	800c336 <__d2b+0x52>
 800c36a:	a801      	add	r0, sp, #4
 800c36c:	f7ff fd5a 	bl	800be24 <__lo0bits>
 800c370:	9b01      	ldr	r3, [sp, #4]
 800c372:	6163      	str	r3, [r4, #20]
 800c374:	2201      	movs	r2, #1
 800c376:	6122      	str	r2, [r4, #16]
 800c378:	3020      	adds	r0, #32
 800c37a:	e7e3      	b.n	800c344 <__d2b+0x60>
 800c37c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c380:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c384:	f8c9 0000 	str.w	r0, [r9]
 800c388:	6918      	ldr	r0, [r3, #16]
 800c38a:	f7ff fd2b 	bl	800bde4 <__hi0bits>
 800c38e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c392:	e7df      	b.n	800c354 <__d2b+0x70>
 800c394:	08026ce3 	.word	0x08026ce3
 800c398:	08026cf4 	.word	0x08026cf4

0800c39c <_calloc_r>:
 800c39c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c39e:	fba1 2402 	umull	r2, r4, r1, r2
 800c3a2:	b94c      	cbnz	r4, 800c3b8 <_calloc_r+0x1c>
 800c3a4:	4611      	mov	r1, r2
 800c3a6:	9201      	str	r2, [sp, #4]
 800c3a8:	f000 f87a 	bl	800c4a0 <_malloc_r>
 800c3ac:	9a01      	ldr	r2, [sp, #4]
 800c3ae:	4605      	mov	r5, r0
 800c3b0:	b930      	cbnz	r0, 800c3c0 <_calloc_r+0x24>
 800c3b2:	4628      	mov	r0, r5
 800c3b4:	b003      	add	sp, #12
 800c3b6:	bd30      	pop	{r4, r5, pc}
 800c3b8:	220c      	movs	r2, #12
 800c3ba:	6002      	str	r2, [r0, #0]
 800c3bc:	2500      	movs	r5, #0
 800c3be:	e7f8      	b.n	800c3b2 <_calloc_r+0x16>
 800c3c0:	4621      	mov	r1, r4
 800c3c2:	f7fe f92f 	bl	800a624 <memset>
 800c3c6:	e7f4      	b.n	800c3b2 <_calloc_r+0x16>

0800c3c8 <_free_r>:
 800c3c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3ca:	2900      	cmp	r1, #0
 800c3cc:	d044      	beq.n	800c458 <_free_r+0x90>
 800c3ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3d2:	9001      	str	r0, [sp, #4]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	f1a1 0404 	sub.w	r4, r1, #4
 800c3da:	bfb8      	it	lt
 800c3dc:	18e4      	addlt	r4, r4, r3
 800c3de:	f000 fd37 	bl	800ce50 <__malloc_lock>
 800c3e2:	4a1e      	ldr	r2, [pc, #120]	; (800c45c <_free_r+0x94>)
 800c3e4:	9801      	ldr	r0, [sp, #4]
 800c3e6:	6813      	ldr	r3, [r2, #0]
 800c3e8:	b933      	cbnz	r3, 800c3f8 <_free_r+0x30>
 800c3ea:	6063      	str	r3, [r4, #4]
 800c3ec:	6014      	str	r4, [r2, #0]
 800c3ee:	b003      	add	sp, #12
 800c3f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c3f4:	f000 bd32 	b.w	800ce5c <__malloc_unlock>
 800c3f8:	42a3      	cmp	r3, r4
 800c3fa:	d908      	bls.n	800c40e <_free_r+0x46>
 800c3fc:	6825      	ldr	r5, [r4, #0]
 800c3fe:	1961      	adds	r1, r4, r5
 800c400:	428b      	cmp	r3, r1
 800c402:	bf01      	itttt	eq
 800c404:	6819      	ldreq	r1, [r3, #0]
 800c406:	685b      	ldreq	r3, [r3, #4]
 800c408:	1949      	addeq	r1, r1, r5
 800c40a:	6021      	streq	r1, [r4, #0]
 800c40c:	e7ed      	b.n	800c3ea <_free_r+0x22>
 800c40e:	461a      	mov	r2, r3
 800c410:	685b      	ldr	r3, [r3, #4]
 800c412:	b10b      	cbz	r3, 800c418 <_free_r+0x50>
 800c414:	42a3      	cmp	r3, r4
 800c416:	d9fa      	bls.n	800c40e <_free_r+0x46>
 800c418:	6811      	ldr	r1, [r2, #0]
 800c41a:	1855      	adds	r5, r2, r1
 800c41c:	42a5      	cmp	r5, r4
 800c41e:	d10b      	bne.n	800c438 <_free_r+0x70>
 800c420:	6824      	ldr	r4, [r4, #0]
 800c422:	4421      	add	r1, r4
 800c424:	1854      	adds	r4, r2, r1
 800c426:	42a3      	cmp	r3, r4
 800c428:	6011      	str	r1, [r2, #0]
 800c42a:	d1e0      	bne.n	800c3ee <_free_r+0x26>
 800c42c:	681c      	ldr	r4, [r3, #0]
 800c42e:	685b      	ldr	r3, [r3, #4]
 800c430:	6053      	str	r3, [r2, #4]
 800c432:	4421      	add	r1, r4
 800c434:	6011      	str	r1, [r2, #0]
 800c436:	e7da      	b.n	800c3ee <_free_r+0x26>
 800c438:	d902      	bls.n	800c440 <_free_r+0x78>
 800c43a:	230c      	movs	r3, #12
 800c43c:	6003      	str	r3, [r0, #0]
 800c43e:	e7d6      	b.n	800c3ee <_free_r+0x26>
 800c440:	6825      	ldr	r5, [r4, #0]
 800c442:	1961      	adds	r1, r4, r5
 800c444:	428b      	cmp	r3, r1
 800c446:	bf04      	itt	eq
 800c448:	6819      	ldreq	r1, [r3, #0]
 800c44a:	685b      	ldreq	r3, [r3, #4]
 800c44c:	6063      	str	r3, [r4, #4]
 800c44e:	bf04      	itt	eq
 800c450:	1949      	addeq	r1, r1, r5
 800c452:	6021      	streq	r1, [r4, #0]
 800c454:	6054      	str	r4, [r2, #4]
 800c456:	e7ca      	b.n	800c3ee <_free_r+0x26>
 800c458:	b003      	add	sp, #12
 800c45a:	bd30      	pop	{r4, r5, pc}
 800c45c:	2000a9a4 	.word	0x2000a9a4

0800c460 <sbrk_aligned>:
 800c460:	b570      	push	{r4, r5, r6, lr}
 800c462:	4e0e      	ldr	r6, [pc, #56]	; (800c49c <sbrk_aligned+0x3c>)
 800c464:	460c      	mov	r4, r1
 800c466:	6831      	ldr	r1, [r6, #0]
 800c468:	4605      	mov	r5, r0
 800c46a:	b911      	cbnz	r1, 800c472 <sbrk_aligned+0x12>
 800c46c:	f000 f9e6 	bl	800c83c <_sbrk_r>
 800c470:	6030      	str	r0, [r6, #0]
 800c472:	4621      	mov	r1, r4
 800c474:	4628      	mov	r0, r5
 800c476:	f000 f9e1 	bl	800c83c <_sbrk_r>
 800c47a:	1c43      	adds	r3, r0, #1
 800c47c:	d00a      	beq.n	800c494 <sbrk_aligned+0x34>
 800c47e:	1cc4      	adds	r4, r0, #3
 800c480:	f024 0403 	bic.w	r4, r4, #3
 800c484:	42a0      	cmp	r0, r4
 800c486:	d007      	beq.n	800c498 <sbrk_aligned+0x38>
 800c488:	1a21      	subs	r1, r4, r0
 800c48a:	4628      	mov	r0, r5
 800c48c:	f000 f9d6 	bl	800c83c <_sbrk_r>
 800c490:	3001      	adds	r0, #1
 800c492:	d101      	bne.n	800c498 <sbrk_aligned+0x38>
 800c494:	f04f 34ff 	mov.w	r4, #4294967295
 800c498:	4620      	mov	r0, r4
 800c49a:	bd70      	pop	{r4, r5, r6, pc}
 800c49c:	2000a9a8 	.word	0x2000a9a8

0800c4a0 <_malloc_r>:
 800c4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4a4:	1ccd      	adds	r5, r1, #3
 800c4a6:	f025 0503 	bic.w	r5, r5, #3
 800c4aa:	3508      	adds	r5, #8
 800c4ac:	2d0c      	cmp	r5, #12
 800c4ae:	bf38      	it	cc
 800c4b0:	250c      	movcc	r5, #12
 800c4b2:	2d00      	cmp	r5, #0
 800c4b4:	4607      	mov	r7, r0
 800c4b6:	db01      	blt.n	800c4bc <_malloc_r+0x1c>
 800c4b8:	42a9      	cmp	r1, r5
 800c4ba:	d905      	bls.n	800c4c8 <_malloc_r+0x28>
 800c4bc:	230c      	movs	r3, #12
 800c4be:	603b      	str	r3, [r7, #0]
 800c4c0:	2600      	movs	r6, #0
 800c4c2:	4630      	mov	r0, r6
 800c4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4c8:	4e2e      	ldr	r6, [pc, #184]	; (800c584 <_malloc_r+0xe4>)
 800c4ca:	f000 fcc1 	bl	800ce50 <__malloc_lock>
 800c4ce:	6833      	ldr	r3, [r6, #0]
 800c4d0:	461c      	mov	r4, r3
 800c4d2:	bb34      	cbnz	r4, 800c522 <_malloc_r+0x82>
 800c4d4:	4629      	mov	r1, r5
 800c4d6:	4638      	mov	r0, r7
 800c4d8:	f7ff ffc2 	bl	800c460 <sbrk_aligned>
 800c4dc:	1c43      	adds	r3, r0, #1
 800c4de:	4604      	mov	r4, r0
 800c4e0:	d14d      	bne.n	800c57e <_malloc_r+0xde>
 800c4e2:	6834      	ldr	r4, [r6, #0]
 800c4e4:	4626      	mov	r6, r4
 800c4e6:	2e00      	cmp	r6, #0
 800c4e8:	d140      	bne.n	800c56c <_malloc_r+0xcc>
 800c4ea:	6823      	ldr	r3, [r4, #0]
 800c4ec:	4631      	mov	r1, r6
 800c4ee:	4638      	mov	r0, r7
 800c4f0:	eb04 0803 	add.w	r8, r4, r3
 800c4f4:	f000 f9a2 	bl	800c83c <_sbrk_r>
 800c4f8:	4580      	cmp	r8, r0
 800c4fa:	d13a      	bne.n	800c572 <_malloc_r+0xd2>
 800c4fc:	6821      	ldr	r1, [r4, #0]
 800c4fe:	3503      	adds	r5, #3
 800c500:	1a6d      	subs	r5, r5, r1
 800c502:	f025 0503 	bic.w	r5, r5, #3
 800c506:	3508      	adds	r5, #8
 800c508:	2d0c      	cmp	r5, #12
 800c50a:	bf38      	it	cc
 800c50c:	250c      	movcc	r5, #12
 800c50e:	4629      	mov	r1, r5
 800c510:	4638      	mov	r0, r7
 800c512:	f7ff ffa5 	bl	800c460 <sbrk_aligned>
 800c516:	3001      	adds	r0, #1
 800c518:	d02b      	beq.n	800c572 <_malloc_r+0xd2>
 800c51a:	6823      	ldr	r3, [r4, #0]
 800c51c:	442b      	add	r3, r5
 800c51e:	6023      	str	r3, [r4, #0]
 800c520:	e00e      	b.n	800c540 <_malloc_r+0xa0>
 800c522:	6822      	ldr	r2, [r4, #0]
 800c524:	1b52      	subs	r2, r2, r5
 800c526:	d41e      	bmi.n	800c566 <_malloc_r+0xc6>
 800c528:	2a0b      	cmp	r2, #11
 800c52a:	d916      	bls.n	800c55a <_malloc_r+0xba>
 800c52c:	1961      	adds	r1, r4, r5
 800c52e:	42a3      	cmp	r3, r4
 800c530:	6025      	str	r5, [r4, #0]
 800c532:	bf18      	it	ne
 800c534:	6059      	strne	r1, [r3, #4]
 800c536:	6863      	ldr	r3, [r4, #4]
 800c538:	bf08      	it	eq
 800c53a:	6031      	streq	r1, [r6, #0]
 800c53c:	5162      	str	r2, [r4, r5]
 800c53e:	604b      	str	r3, [r1, #4]
 800c540:	4638      	mov	r0, r7
 800c542:	f104 060b 	add.w	r6, r4, #11
 800c546:	f000 fc89 	bl	800ce5c <__malloc_unlock>
 800c54a:	f026 0607 	bic.w	r6, r6, #7
 800c54e:	1d23      	adds	r3, r4, #4
 800c550:	1af2      	subs	r2, r6, r3
 800c552:	d0b6      	beq.n	800c4c2 <_malloc_r+0x22>
 800c554:	1b9b      	subs	r3, r3, r6
 800c556:	50a3      	str	r3, [r4, r2]
 800c558:	e7b3      	b.n	800c4c2 <_malloc_r+0x22>
 800c55a:	6862      	ldr	r2, [r4, #4]
 800c55c:	42a3      	cmp	r3, r4
 800c55e:	bf0c      	ite	eq
 800c560:	6032      	streq	r2, [r6, #0]
 800c562:	605a      	strne	r2, [r3, #4]
 800c564:	e7ec      	b.n	800c540 <_malloc_r+0xa0>
 800c566:	4623      	mov	r3, r4
 800c568:	6864      	ldr	r4, [r4, #4]
 800c56a:	e7b2      	b.n	800c4d2 <_malloc_r+0x32>
 800c56c:	4634      	mov	r4, r6
 800c56e:	6876      	ldr	r6, [r6, #4]
 800c570:	e7b9      	b.n	800c4e6 <_malloc_r+0x46>
 800c572:	230c      	movs	r3, #12
 800c574:	603b      	str	r3, [r7, #0]
 800c576:	4638      	mov	r0, r7
 800c578:	f000 fc70 	bl	800ce5c <__malloc_unlock>
 800c57c:	e7a1      	b.n	800c4c2 <_malloc_r+0x22>
 800c57e:	6025      	str	r5, [r4, #0]
 800c580:	e7de      	b.n	800c540 <_malloc_r+0xa0>
 800c582:	bf00      	nop
 800c584:	2000a9a4 	.word	0x2000a9a4

0800c588 <__sfputc_r>:
 800c588:	6893      	ldr	r3, [r2, #8]
 800c58a:	3b01      	subs	r3, #1
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	b410      	push	{r4}
 800c590:	6093      	str	r3, [r2, #8]
 800c592:	da08      	bge.n	800c5a6 <__sfputc_r+0x1e>
 800c594:	6994      	ldr	r4, [r2, #24]
 800c596:	42a3      	cmp	r3, r4
 800c598:	db01      	blt.n	800c59e <__sfputc_r+0x16>
 800c59a:	290a      	cmp	r1, #10
 800c59c:	d103      	bne.n	800c5a6 <__sfputc_r+0x1e>
 800c59e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5a2:	f000 b95b 	b.w	800c85c <__swbuf_r>
 800c5a6:	6813      	ldr	r3, [r2, #0]
 800c5a8:	1c58      	adds	r0, r3, #1
 800c5aa:	6010      	str	r0, [r2, #0]
 800c5ac:	7019      	strb	r1, [r3, #0]
 800c5ae:	4608      	mov	r0, r1
 800c5b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5b4:	4770      	bx	lr

0800c5b6 <__sfputs_r>:
 800c5b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5b8:	4606      	mov	r6, r0
 800c5ba:	460f      	mov	r7, r1
 800c5bc:	4614      	mov	r4, r2
 800c5be:	18d5      	adds	r5, r2, r3
 800c5c0:	42ac      	cmp	r4, r5
 800c5c2:	d101      	bne.n	800c5c8 <__sfputs_r+0x12>
 800c5c4:	2000      	movs	r0, #0
 800c5c6:	e007      	b.n	800c5d8 <__sfputs_r+0x22>
 800c5c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5cc:	463a      	mov	r2, r7
 800c5ce:	4630      	mov	r0, r6
 800c5d0:	f7ff ffda 	bl	800c588 <__sfputc_r>
 800c5d4:	1c43      	adds	r3, r0, #1
 800c5d6:	d1f3      	bne.n	800c5c0 <__sfputs_r+0xa>
 800c5d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c5dc <_vfiprintf_r>:
 800c5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e0:	460d      	mov	r5, r1
 800c5e2:	b09d      	sub	sp, #116	; 0x74
 800c5e4:	4614      	mov	r4, r2
 800c5e6:	4698      	mov	r8, r3
 800c5e8:	4606      	mov	r6, r0
 800c5ea:	b118      	cbz	r0, 800c5f4 <_vfiprintf_r+0x18>
 800c5ec:	6983      	ldr	r3, [r0, #24]
 800c5ee:	b90b      	cbnz	r3, 800c5f4 <_vfiprintf_r+0x18>
 800c5f0:	f000 fb16 	bl	800cc20 <__sinit>
 800c5f4:	4b89      	ldr	r3, [pc, #548]	; (800c81c <_vfiprintf_r+0x240>)
 800c5f6:	429d      	cmp	r5, r3
 800c5f8:	d11b      	bne.n	800c632 <_vfiprintf_r+0x56>
 800c5fa:	6875      	ldr	r5, [r6, #4]
 800c5fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5fe:	07d9      	lsls	r1, r3, #31
 800c600:	d405      	bmi.n	800c60e <_vfiprintf_r+0x32>
 800c602:	89ab      	ldrh	r3, [r5, #12]
 800c604:	059a      	lsls	r2, r3, #22
 800c606:	d402      	bmi.n	800c60e <_vfiprintf_r+0x32>
 800c608:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c60a:	f000 fba7 	bl	800cd5c <__retarget_lock_acquire_recursive>
 800c60e:	89ab      	ldrh	r3, [r5, #12]
 800c610:	071b      	lsls	r3, r3, #28
 800c612:	d501      	bpl.n	800c618 <_vfiprintf_r+0x3c>
 800c614:	692b      	ldr	r3, [r5, #16]
 800c616:	b9eb      	cbnz	r3, 800c654 <_vfiprintf_r+0x78>
 800c618:	4629      	mov	r1, r5
 800c61a:	4630      	mov	r0, r6
 800c61c:	f000 f970 	bl	800c900 <__swsetup_r>
 800c620:	b1c0      	cbz	r0, 800c654 <_vfiprintf_r+0x78>
 800c622:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c624:	07dc      	lsls	r4, r3, #31
 800c626:	d50e      	bpl.n	800c646 <_vfiprintf_r+0x6a>
 800c628:	f04f 30ff 	mov.w	r0, #4294967295
 800c62c:	b01d      	add	sp, #116	; 0x74
 800c62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c632:	4b7b      	ldr	r3, [pc, #492]	; (800c820 <_vfiprintf_r+0x244>)
 800c634:	429d      	cmp	r5, r3
 800c636:	d101      	bne.n	800c63c <_vfiprintf_r+0x60>
 800c638:	68b5      	ldr	r5, [r6, #8]
 800c63a:	e7df      	b.n	800c5fc <_vfiprintf_r+0x20>
 800c63c:	4b79      	ldr	r3, [pc, #484]	; (800c824 <_vfiprintf_r+0x248>)
 800c63e:	429d      	cmp	r5, r3
 800c640:	bf08      	it	eq
 800c642:	68f5      	ldreq	r5, [r6, #12]
 800c644:	e7da      	b.n	800c5fc <_vfiprintf_r+0x20>
 800c646:	89ab      	ldrh	r3, [r5, #12]
 800c648:	0598      	lsls	r0, r3, #22
 800c64a:	d4ed      	bmi.n	800c628 <_vfiprintf_r+0x4c>
 800c64c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c64e:	f000 fb86 	bl	800cd5e <__retarget_lock_release_recursive>
 800c652:	e7e9      	b.n	800c628 <_vfiprintf_r+0x4c>
 800c654:	2300      	movs	r3, #0
 800c656:	9309      	str	r3, [sp, #36]	; 0x24
 800c658:	2320      	movs	r3, #32
 800c65a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c65e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c662:	2330      	movs	r3, #48	; 0x30
 800c664:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c828 <_vfiprintf_r+0x24c>
 800c668:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c66c:	f04f 0901 	mov.w	r9, #1
 800c670:	4623      	mov	r3, r4
 800c672:	469a      	mov	sl, r3
 800c674:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c678:	b10a      	cbz	r2, 800c67e <_vfiprintf_r+0xa2>
 800c67a:	2a25      	cmp	r2, #37	; 0x25
 800c67c:	d1f9      	bne.n	800c672 <_vfiprintf_r+0x96>
 800c67e:	ebba 0b04 	subs.w	fp, sl, r4
 800c682:	d00b      	beq.n	800c69c <_vfiprintf_r+0xc0>
 800c684:	465b      	mov	r3, fp
 800c686:	4622      	mov	r2, r4
 800c688:	4629      	mov	r1, r5
 800c68a:	4630      	mov	r0, r6
 800c68c:	f7ff ff93 	bl	800c5b6 <__sfputs_r>
 800c690:	3001      	adds	r0, #1
 800c692:	f000 80aa 	beq.w	800c7ea <_vfiprintf_r+0x20e>
 800c696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c698:	445a      	add	r2, fp
 800c69a:	9209      	str	r2, [sp, #36]	; 0x24
 800c69c:	f89a 3000 	ldrb.w	r3, [sl]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	f000 80a2 	beq.w	800c7ea <_vfiprintf_r+0x20e>
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	f04f 32ff 	mov.w	r2, #4294967295
 800c6ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6b0:	f10a 0a01 	add.w	sl, sl, #1
 800c6b4:	9304      	str	r3, [sp, #16]
 800c6b6:	9307      	str	r3, [sp, #28]
 800c6b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6bc:	931a      	str	r3, [sp, #104]	; 0x68
 800c6be:	4654      	mov	r4, sl
 800c6c0:	2205      	movs	r2, #5
 800c6c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6c6:	4858      	ldr	r0, [pc, #352]	; (800c828 <_vfiprintf_r+0x24c>)
 800c6c8:	f7f3 fd8a 	bl	80001e0 <memchr>
 800c6cc:	9a04      	ldr	r2, [sp, #16]
 800c6ce:	b9d8      	cbnz	r0, 800c708 <_vfiprintf_r+0x12c>
 800c6d0:	06d1      	lsls	r1, r2, #27
 800c6d2:	bf44      	itt	mi
 800c6d4:	2320      	movmi	r3, #32
 800c6d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6da:	0713      	lsls	r3, r2, #28
 800c6dc:	bf44      	itt	mi
 800c6de:	232b      	movmi	r3, #43	; 0x2b
 800c6e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6e4:	f89a 3000 	ldrb.w	r3, [sl]
 800c6e8:	2b2a      	cmp	r3, #42	; 0x2a
 800c6ea:	d015      	beq.n	800c718 <_vfiprintf_r+0x13c>
 800c6ec:	9a07      	ldr	r2, [sp, #28]
 800c6ee:	4654      	mov	r4, sl
 800c6f0:	2000      	movs	r0, #0
 800c6f2:	f04f 0c0a 	mov.w	ip, #10
 800c6f6:	4621      	mov	r1, r4
 800c6f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6fc:	3b30      	subs	r3, #48	; 0x30
 800c6fe:	2b09      	cmp	r3, #9
 800c700:	d94e      	bls.n	800c7a0 <_vfiprintf_r+0x1c4>
 800c702:	b1b0      	cbz	r0, 800c732 <_vfiprintf_r+0x156>
 800c704:	9207      	str	r2, [sp, #28]
 800c706:	e014      	b.n	800c732 <_vfiprintf_r+0x156>
 800c708:	eba0 0308 	sub.w	r3, r0, r8
 800c70c:	fa09 f303 	lsl.w	r3, r9, r3
 800c710:	4313      	orrs	r3, r2
 800c712:	9304      	str	r3, [sp, #16]
 800c714:	46a2      	mov	sl, r4
 800c716:	e7d2      	b.n	800c6be <_vfiprintf_r+0xe2>
 800c718:	9b03      	ldr	r3, [sp, #12]
 800c71a:	1d19      	adds	r1, r3, #4
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	9103      	str	r1, [sp, #12]
 800c720:	2b00      	cmp	r3, #0
 800c722:	bfbb      	ittet	lt
 800c724:	425b      	neglt	r3, r3
 800c726:	f042 0202 	orrlt.w	r2, r2, #2
 800c72a:	9307      	strge	r3, [sp, #28]
 800c72c:	9307      	strlt	r3, [sp, #28]
 800c72e:	bfb8      	it	lt
 800c730:	9204      	strlt	r2, [sp, #16]
 800c732:	7823      	ldrb	r3, [r4, #0]
 800c734:	2b2e      	cmp	r3, #46	; 0x2e
 800c736:	d10c      	bne.n	800c752 <_vfiprintf_r+0x176>
 800c738:	7863      	ldrb	r3, [r4, #1]
 800c73a:	2b2a      	cmp	r3, #42	; 0x2a
 800c73c:	d135      	bne.n	800c7aa <_vfiprintf_r+0x1ce>
 800c73e:	9b03      	ldr	r3, [sp, #12]
 800c740:	1d1a      	adds	r2, r3, #4
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	9203      	str	r2, [sp, #12]
 800c746:	2b00      	cmp	r3, #0
 800c748:	bfb8      	it	lt
 800c74a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c74e:	3402      	adds	r4, #2
 800c750:	9305      	str	r3, [sp, #20]
 800c752:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c838 <_vfiprintf_r+0x25c>
 800c756:	7821      	ldrb	r1, [r4, #0]
 800c758:	2203      	movs	r2, #3
 800c75a:	4650      	mov	r0, sl
 800c75c:	f7f3 fd40 	bl	80001e0 <memchr>
 800c760:	b140      	cbz	r0, 800c774 <_vfiprintf_r+0x198>
 800c762:	2340      	movs	r3, #64	; 0x40
 800c764:	eba0 000a 	sub.w	r0, r0, sl
 800c768:	fa03 f000 	lsl.w	r0, r3, r0
 800c76c:	9b04      	ldr	r3, [sp, #16]
 800c76e:	4303      	orrs	r3, r0
 800c770:	3401      	adds	r4, #1
 800c772:	9304      	str	r3, [sp, #16]
 800c774:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c778:	482c      	ldr	r0, [pc, #176]	; (800c82c <_vfiprintf_r+0x250>)
 800c77a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c77e:	2206      	movs	r2, #6
 800c780:	f7f3 fd2e 	bl	80001e0 <memchr>
 800c784:	2800      	cmp	r0, #0
 800c786:	d03f      	beq.n	800c808 <_vfiprintf_r+0x22c>
 800c788:	4b29      	ldr	r3, [pc, #164]	; (800c830 <_vfiprintf_r+0x254>)
 800c78a:	bb1b      	cbnz	r3, 800c7d4 <_vfiprintf_r+0x1f8>
 800c78c:	9b03      	ldr	r3, [sp, #12]
 800c78e:	3307      	adds	r3, #7
 800c790:	f023 0307 	bic.w	r3, r3, #7
 800c794:	3308      	adds	r3, #8
 800c796:	9303      	str	r3, [sp, #12]
 800c798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c79a:	443b      	add	r3, r7
 800c79c:	9309      	str	r3, [sp, #36]	; 0x24
 800c79e:	e767      	b.n	800c670 <_vfiprintf_r+0x94>
 800c7a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7a4:	460c      	mov	r4, r1
 800c7a6:	2001      	movs	r0, #1
 800c7a8:	e7a5      	b.n	800c6f6 <_vfiprintf_r+0x11a>
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	3401      	adds	r4, #1
 800c7ae:	9305      	str	r3, [sp, #20]
 800c7b0:	4619      	mov	r1, r3
 800c7b2:	f04f 0c0a 	mov.w	ip, #10
 800c7b6:	4620      	mov	r0, r4
 800c7b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7bc:	3a30      	subs	r2, #48	; 0x30
 800c7be:	2a09      	cmp	r2, #9
 800c7c0:	d903      	bls.n	800c7ca <_vfiprintf_r+0x1ee>
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d0c5      	beq.n	800c752 <_vfiprintf_r+0x176>
 800c7c6:	9105      	str	r1, [sp, #20]
 800c7c8:	e7c3      	b.n	800c752 <_vfiprintf_r+0x176>
 800c7ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7ce:	4604      	mov	r4, r0
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	e7f0      	b.n	800c7b6 <_vfiprintf_r+0x1da>
 800c7d4:	ab03      	add	r3, sp, #12
 800c7d6:	9300      	str	r3, [sp, #0]
 800c7d8:	462a      	mov	r2, r5
 800c7da:	4b16      	ldr	r3, [pc, #88]	; (800c834 <_vfiprintf_r+0x258>)
 800c7dc:	a904      	add	r1, sp, #16
 800c7de:	4630      	mov	r0, r6
 800c7e0:	f7fd ffc8 	bl	800a774 <_printf_float>
 800c7e4:	4607      	mov	r7, r0
 800c7e6:	1c78      	adds	r0, r7, #1
 800c7e8:	d1d6      	bne.n	800c798 <_vfiprintf_r+0x1bc>
 800c7ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7ec:	07d9      	lsls	r1, r3, #31
 800c7ee:	d405      	bmi.n	800c7fc <_vfiprintf_r+0x220>
 800c7f0:	89ab      	ldrh	r3, [r5, #12]
 800c7f2:	059a      	lsls	r2, r3, #22
 800c7f4:	d402      	bmi.n	800c7fc <_vfiprintf_r+0x220>
 800c7f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7f8:	f000 fab1 	bl	800cd5e <__retarget_lock_release_recursive>
 800c7fc:	89ab      	ldrh	r3, [r5, #12]
 800c7fe:	065b      	lsls	r3, r3, #25
 800c800:	f53f af12 	bmi.w	800c628 <_vfiprintf_r+0x4c>
 800c804:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c806:	e711      	b.n	800c62c <_vfiprintf_r+0x50>
 800c808:	ab03      	add	r3, sp, #12
 800c80a:	9300      	str	r3, [sp, #0]
 800c80c:	462a      	mov	r2, r5
 800c80e:	4b09      	ldr	r3, [pc, #36]	; (800c834 <_vfiprintf_r+0x258>)
 800c810:	a904      	add	r1, sp, #16
 800c812:	4630      	mov	r0, r6
 800c814:	f7fe fa52 	bl	800acbc <_printf_i>
 800c818:	e7e4      	b.n	800c7e4 <_vfiprintf_r+0x208>
 800c81a:	bf00      	nop
 800c81c:	08026e80 	.word	0x08026e80
 800c820:	08026ea0 	.word	0x08026ea0
 800c824:	08026e60 	.word	0x08026e60
 800c828:	08026e4c 	.word	0x08026e4c
 800c82c:	08026e56 	.word	0x08026e56
 800c830:	0800a775 	.word	0x0800a775
 800c834:	0800c5b7 	.word	0x0800c5b7
 800c838:	08026e52 	.word	0x08026e52

0800c83c <_sbrk_r>:
 800c83c:	b538      	push	{r3, r4, r5, lr}
 800c83e:	4d06      	ldr	r5, [pc, #24]	; (800c858 <_sbrk_r+0x1c>)
 800c840:	2300      	movs	r3, #0
 800c842:	4604      	mov	r4, r0
 800c844:	4608      	mov	r0, r1
 800c846:	602b      	str	r3, [r5, #0]
 800c848:	f7f5 fed8 	bl	80025fc <_sbrk>
 800c84c:	1c43      	adds	r3, r0, #1
 800c84e:	d102      	bne.n	800c856 <_sbrk_r+0x1a>
 800c850:	682b      	ldr	r3, [r5, #0]
 800c852:	b103      	cbz	r3, 800c856 <_sbrk_r+0x1a>
 800c854:	6023      	str	r3, [r4, #0]
 800c856:	bd38      	pop	{r3, r4, r5, pc}
 800c858:	2000a9b0 	.word	0x2000a9b0

0800c85c <__swbuf_r>:
 800c85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c85e:	460e      	mov	r6, r1
 800c860:	4614      	mov	r4, r2
 800c862:	4605      	mov	r5, r0
 800c864:	b118      	cbz	r0, 800c86e <__swbuf_r+0x12>
 800c866:	6983      	ldr	r3, [r0, #24]
 800c868:	b90b      	cbnz	r3, 800c86e <__swbuf_r+0x12>
 800c86a:	f000 f9d9 	bl	800cc20 <__sinit>
 800c86e:	4b21      	ldr	r3, [pc, #132]	; (800c8f4 <__swbuf_r+0x98>)
 800c870:	429c      	cmp	r4, r3
 800c872:	d12b      	bne.n	800c8cc <__swbuf_r+0x70>
 800c874:	686c      	ldr	r4, [r5, #4]
 800c876:	69a3      	ldr	r3, [r4, #24]
 800c878:	60a3      	str	r3, [r4, #8]
 800c87a:	89a3      	ldrh	r3, [r4, #12]
 800c87c:	071a      	lsls	r2, r3, #28
 800c87e:	d52f      	bpl.n	800c8e0 <__swbuf_r+0x84>
 800c880:	6923      	ldr	r3, [r4, #16]
 800c882:	b36b      	cbz	r3, 800c8e0 <__swbuf_r+0x84>
 800c884:	6923      	ldr	r3, [r4, #16]
 800c886:	6820      	ldr	r0, [r4, #0]
 800c888:	1ac0      	subs	r0, r0, r3
 800c88a:	6963      	ldr	r3, [r4, #20]
 800c88c:	b2f6      	uxtb	r6, r6
 800c88e:	4283      	cmp	r3, r0
 800c890:	4637      	mov	r7, r6
 800c892:	dc04      	bgt.n	800c89e <__swbuf_r+0x42>
 800c894:	4621      	mov	r1, r4
 800c896:	4628      	mov	r0, r5
 800c898:	f000 f92e 	bl	800caf8 <_fflush_r>
 800c89c:	bb30      	cbnz	r0, 800c8ec <__swbuf_r+0x90>
 800c89e:	68a3      	ldr	r3, [r4, #8]
 800c8a0:	3b01      	subs	r3, #1
 800c8a2:	60a3      	str	r3, [r4, #8]
 800c8a4:	6823      	ldr	r3, [r4, #0]
 800c8a6:	1c5a      	adds	r2, r3, #1
 800c8a8:	6022      	str	r2, [r4, #0]
 800c8aa:	701e      	strb	r6, [r3, #0]
 800c8ac:	6963      	ldr	r3, [r4, #20]
 800c8ae:	3001      	adds	r0, #1
 800c8b0:	4283      	cmp	r3, r0
 800c8b2:	d004      	beq.n	800c8be <__swbuf_r+0x62>
 800c8b4:	89a3      	ldrh	r3, [r4, #12]
 800c8b6:	07db      	lsls	r3, r3, #31
 800c8b8:	d506      	bpl.n	800c8c8 <__swbuf_r+0x6c>
 800c8ba:	2e0a      	cmp	r6, #10
 800c8bc:	d104      	bne.n	800c8c8 <__swbuf_r+0x6c>
 800c8be:	4621      	mov	r1, r4
 800c8c0:	4628      	mov	r0, r5
 800c8c2:	f000 f919 	bl	800caf8 <_fflush_r>
 800c8c6:	b988      	cbnz	r0, 800c8ec <__swbuf_r+0x90>
 800c8c8:	4638      	mov	r0, r7
 800c8ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8cc:	4b0a      	ldr	r3, [pc, #40]	; (800c8f8 <__swbuf_r+0x9c>)
 800c8ce:	429c      	cmp	r4, r3
 800c8d0:	d101      	bne.n	800c8d6 <__swbuf_r+0x7a>
 800c8d2:	68ac      	ldr	r4, [r5, #8]
 800c8d4:	e7cf      	b.n	800c876 <__swbuf_r+0x1a>
 800c8d6:	4b09      	ldr	r3, [pc, #36]	; (800c8fc <__swbuf_r+0xa0>)
 800c8d8:	429c      	cmp	r4, r3
 800c8da:	bf08      	it	eq
 800c8dc:	68ec      	ldreq	r4, [r5, #12]
 800c8de:	e7ca      	b.n	800c876 <__swbuf_r+0x1a>
 800c8e0:	4621      	mov	r1, r4
 800c8e2:	4628      	mov	r0, r5
 800c8e4:	f000 f80c 	bl	800c900 <__swsetup_r>
 800c8e8:	2800      	cmp	r0, #0
 800c8ea:	d0cb      	beq.n	800c884 <__swbuf_r+0x28>
 800c8ec:	f04f 37ff 	mov.w	r7, #4294967295
 800c8f0:	e7ea      	b.n	800c8c8 <__swbuf_r+0x6c>
 800c8f2:	bf00      	nop
 800c8f4:	08026e80 	.word	0x08026e80
 800c8f8:	08026ea0 	.word	0x08026ea0
 800c8fc:	08026e60 	.word	0x08026e60

0800c900 <__swsetup_r>:
 800c900:	4b32      	ldr	r3, [pc, #200]	; (800c9cc <__swsetup_r+0xcc>)
 800c902:	b570      	push	{r4, r5, r6, lr}
 800c904:	681d      	ldr	r5, [r3, #0]
 800c906:	4606      	mov	r6, r0
 800c908:	460c      	mov	r4, r1
 800c90a:	b125      	cbz	r5, 800c916 <__swsetup_r+0x16>
 800c90c:	69ab      	ldr	r3, [r5, #24]
 800c90e:	b913      	cbnz	r3, 800c916 <__swsetup_r+0x16>
 800c910:	4628      	mov	r0, r5
 800c912:	f000 f985 	bl	800cc20 <__sinit>
 800c916:	4b2e      	ldr	r3, [pc, #184]	; (800c9d0 <__swsetup_r+0xd0>)
 800c918:	429c      	cmp	r4, r3
 800c91a:	d10f      	bne.n	800c93c <__swsetup_r+0x3c>
 800c91c:	686c      	ldr	r4, [r5, #4]
 800c91e:	89a3      	ldrh	r3, [r4, #12]
 800c920:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c924:	0719      	lsls	r1, r3, #28
 800c926:	d42c      	bmi.n	800c982 <__swsetup_r+0x82>
 800c928:	06dd      	lsls	r5, r3, #27
 800c92a:	d411      	bmi.n	800c950 <__swsetup_r+0x50>
 800c92c:	2309      	movs	r3, #9
 800c92e:	6033      	str	r3, [r6, #0]
 800c930:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c934:	81a3      	strh	r3, [r4, #12]
 800c936:	f04f 30ff 	mov.w	r0, #4294967295
 800c93a:	e03e      	b.n	800c9ba <__swsetup_r+0xba>
 800c93c:	4b25      	ldr	r3, [pc, #148]	; (800c9d4 <__swsetup_r+0xd4>)
 800c93e:	429c      	cmp	r4, r3
 800c940:	d101      	bne.n	800c946 <__swsetup_r+0x46>
 800c942:	68ac      	ldr	r4, [r5, #8]
 800c944:	e7eb      	b.n	800c91e <__swsetup_r+0x1e>
 800c946:	4b24      	ldr	r3, [pc, #144]	; (800c9d8 <__swsetup_r+0xd8>)
 800c948:	429c      	cmp	r4, r3
 800c94a:	bf08      	it	eq
 800c94c:	68ec      	ldreq	r4, [r5, #12]
 800c94e:	e7e6      	b.n	800c91e <__swsetup_r+0x1e>
 800c950:	0758      	lsls	r0, r3, #29
 800c952:	d512      	bpl.n	800c97a <__swsetup_r+0x7a>
 800c954:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c956:	b141      	cbz	r1, 800c96a <__swsetup_r+0x6a>
 800c958:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c95c:	4299      	cmp	r1, r3
 800c95e:	d002      	beq.n	800c966 <__swsetup_r+0x66>
 800c960:	4630      	mov	r0, r6
 800c962:	f7ff fd31 	bl	800c3c8 <_free_r>
 800c966:	2300      	movs	r3, #0
 800c968:	6363      	str	r3, [r4, #52]	; 0x34
 800c96a:	89a3      	ldrh	r3, [r4, #12]
 800c96c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c970:	81a3      	strh	r3, [r4, #12]
 800c972:	2300      	movs	r3, #0
 800c974:	6063      	str	r3, [r4, #4]
 800c976:	6923      	ldr	r3, [r4, #16]
 800c978:	6023      	str	r3, [r4, #0]
 800c97a:	89a3      	ldrh	r3, [r4, #12]
 800c97c:	f043 0308 	orr.w	r3, r3, #8
 800c980:	81a3      	strh	r3, [r4, #12]
 800c982:	6923      	ldr	r3, [r4, #16]
 800c984:	b94b      	cbnz	r3, 800c99a <__swsetup_r+0x9a>
 800c986:	89a3      	ldrh	r3, [r4, #12]
 800c988:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c98c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c990:	d003      	beq.n	800c99a <__swsetup_r+0x9a>
 800c992:	4621      	mov	r1, r4
 800c994:	4630      	mov	r0, r6
 800c996:	f000 fa09 	bl	800cdac <__smakebuf_r>
 800c99a:	89a0      	ldrh	r0, [r4, #12]
 800c99c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9a0:	f010 0301 	ands.w	r3, r0, #1
 800c9a4:	d00a      	beq.n	800c9bc <__swsetup_r+0xbc>
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	60a3      	str	r3, [r4, #8]
 800c9aa:	6963      	ldr	r3, [r4, #20]
 800c9ac:	425b      	negs	r3, r3
 800c9ae:	61a3      	str	r3, [r4, #24]
 800c9b0:	6923      	ldr	r3, [r4, #16]
 800c9b2:	b943      	cbnz	r3, 800c9c6 <__swsetup_r+0xc6>
 800c9b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c9b8:	d1ba      	bne.n	800c930 <__swsetup_r+0x30>
 800c9ba:	bd70      	pop	{r4, r5, r6, pc}
 800c9bc:	0781      	lsls	r1, r0, #30
 800c9be:	bf58      	it	pl
 800c9c0:	6963      	ldrpl	r3, [r4, #20]
 800c9c2:	60a3      	str	r3, [r4, #8]
 800c9c4:	e7f4      	b.n	800c9b0 <__swsetup_r+0xb0>
 800c9c6:	2000      	movs	r0, #0
 800c9c8:	e7f7      	b.n	800c9ba <__swsetup_r+0xba>
 800c9ca:	bf00      	nop
 800c9cc:	20000040 	.word	0x20000040
 800c9d0:	08026e80 	.word	0x08026e80
 800c9d4:	08026ea0 	.word	0x08026ea0
 800c9d8:	08026e60 	.word	0x08026e60

0800c9dc <abort>:
 800c9dc:	b508      	push	{r3, lr}
 800c9de:	2006      	movs	r0, #6
 800c9e0:	f000 fa6a 	bl	800ceb8 <raise>
 800c9e4:	2001      	movs	r0, #1
 800c9e6:	f7f5 fd91 	bl	800250c <_exit>
	...

0800c9ec <__sflush_r>:
 800c9ec:	898a      	ldrh	r2, [r1, #12]
 800c9ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9f2:	4605      	mov	r5, r0
 800c9f4:	0710      	lsls	r0, r2, #28
 800c9f6:	460c      	mov	r4, r1
 800c9f8:	d458      	bmi.n	800caac <__sflush_r+0xc0>
 800c9fa:	684b      	ldr	r3, [r1, #4]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	dc05      	bgt.n	800ca0c <__sflush_r+0x20>
 800ca00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	dc02      	bgt.n	800ca0c <__sflush_r+0x20>
 800ca06:	2000      	movs	r0, #0
 800ca08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca0e:	2e00      	cmp	r6, #0
 800ca10:	d0f9      	beq.n	800ca06 <__sflush_r+0x1a>
 800ca12:	2300      	movs	r3, #0
 800ca14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ca18:	682f      	ldr	r7, [r5, #0]
 800ca1a:	602b      	str	r3, [r5, #0]
 800ca1c:	d032      	beq.n	800ca84 <__sflush_r+0x98>
 800ca1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ca20:	89a3      	ldrh	r3, [r4, #12]
 800ca22:	075a      	lsls	r2, r3, #29
 800ca24:	d505      	bpl.n	800ca32 <__sflush_r+0x46>
 800ca26:	6863      	ldr	r3, [r4, #4]
 800ca28:	1ac0      	subs	r0, r0, r3
 800ca2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ca2c:	b10b      	cbz	r3, 800ca32 <__sflush_r+0x46>
 800ca2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ca30:	1ac0      	subs	r0, r0, r3
 800ca32:	2300      	movs	r3, #0
 800ca34:	4602      	mov	r2, r0
 800ca36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca38:	6a21      	ldr	r1, [r4, #32]
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	47b0      	blx	r6
 800ca3e:	1c43      	adds	r3, r0, #1
 800ca40:	89a3      	ldrh	r3, [r4, #12]
 800ca42:	d106      	bne.n	800ca52 <__sflush_r+0x66>
 800ca44:	6829      	ldr	r1, [r5, #0]
 800ca46:	291d      	cmp	r1, #29
 800ca48:	d82c      	bhi.n	800caa4 <__sflush_r+0xb8>
 800ca4a:	4a2a      	ldr	r2, [pc, #168]	; (800caf4 <__sflush_r+0x108>)
 800ca4c:	40ca      	lsrs	r2, r1
 800ca4e:	07d6      	lsls	r6, r2, #31
 800ca50:	d528      	bpl.n	800caa4 <__sflush_r+0xb8>
 800ca52:	2200      	movs	r2, #0
 800ca54:	6062      	str	r2, [r4, #4]
 800ca56:	04d9      	lsls	r1, r3, #19
 800ca58:	6922      	ldr	r2, [r4, #16]
 800ca5a:	6022      	str	r2, [r4, #0]
 800ca5c:	d504      	bpl.n	800ca68 <__sflush_r+0x7c>
 800ca5e:	1c42      	adds	r2, r0, #1
 800ca60:	d101      	bne.n	800ca66 <__sflush_r+0x7a>
 800ca62:	682b      	ldr	r3, [r5, #0]
 800ca64:	b903      	cbnz	r3, 800ca68 <__sflush_r+0x7c>
 800ca66:	6560      	str	r0, [r4, #84]	; 0x54
 800ca68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca6a:	602f      	str	r7, [r5, #0]
 800ca6c:	2900      	cmp	r1, #0
 800ca6e:	d0ca      	beq.n	800ca06 <__sflush_r+0x1a>
 800ca70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca74:	4299      	cmp	r1, r3
 800ca76:	d002      	beq.n	800ca7e <__sflush_r+0x92>
 800ca78:	4628      	mov	r0, r5
 800ca7a:	f7ff fca5 	bl	800c3c8 <_free_r>
 800ca7e:	2000      	movs	r0, #0
 800ca80:	6360      	str	r0, [r4, #52]	; 0x34
 800ca82:	e7c1      	b.n	800ca08 <__sflush_r+0x1c>
 800ca84:	6a21      	ldr	r1, [r4, #32]
 800ca86:	2301      	movs	r3, #1
 800ca88:	4628      	mov	r0, r5
 800ca8a:	47b0      	blx	r6
 800ca8c:	1c41      	adds	r1, r0, #1
 800ca8e:	d1c7      	bne.n	800ca20 <__sflush_r+0x34>
 800ca90:	682b      	ldr	r3, [r5, #0]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d0c4      	beq.n	800ca20 <__sflush_r+0x34>
 800ca96:	2b1d      	cmp	r3, #29
 800ca98:	d001      	beq.n	800ca9e <__sflush_r+0xb2>
 800ca9a:	2b16      	cmp	r3, #22
 800ca9c:	d101      	bne.n	800caa2 <__sflush_r+0xb6>
 800ca9e:	602f      	str	r7, [r5, #0]
 800caa0:	e7b1      	b.n	800ca06 <__sflush_r+0x1a>
 800caa2:	89a3      	ldrh	r3, [r4, #12]
 800caa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caa8:	81a3      	strh	r3, [r4, #12]
 800caaa:	e7ad      	b.n	800ca08 <__sflush_r+0x1c>
 800caac:	690f      	ldr	r7, [r1, #16]
 800caae:	2f00      	cmp	r7, #0
 800cab0:	d0a9      	beq.n	800ca06 <__sflush_r+0x1a>
 800cab2:	0793      	lsls	r3, r2, #30
 800cab4:	680e      	ldr	r6, [r1, #0]
 800cab6:	bf08      	it	eq
 800cab8:	694b      	ldreq	r3, [r1, #20]
 800caba:	600f      	str	r7, [r1, #0]
 800cabc:	bf18      	it	ne
 800cabe:	2300      	movne	r3, #0
 800cac0:	eba6 0807 	sub.w	r8, r6, r7
 800cac4:	608b      	str	r3, [r1, #8]
 800cac6:	f1b8 0f00 	cmp.w	r8, #0
 800caca:	dd9c      	ble.n	800ca06 <__sflush_r+0x1a>
 800cacc:	6a21      	ldr	r1, [r4, #32]
 800cace:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cad0:	4643      	mov	r3, r8
 800cad2:	463a      	mov	r2, r7
 800cad4:	4628      	mov	r0, r5
 800cad6:	47b0      	blx	r6
 800cad8:	2800      	cmp	r0, #0
 800cada:	dc06      	bgt.n	800caea <__sflush_r+0xfe>
 800cadc:	89a3      	ldrh	r3, [r4, #12]
 800cade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cae2:	81a3      	strh	r3, [r4, #12]
 800cae4:	f04f 30ff 	mov.w	r0, #4294967295
 800cae8:	e78e      	b.n	800ca08 <__sflush_r+0x1c>
 800caea:	4407      	add	r7, r0
 800caec:	eba8 0800 	sub.w	r8, r8, r0
 800caf0:	e7e9      	b.n	800cac6 <__sflush_r+0xda>
 800caf2:	bf00      	nop
 800caf4:	20400001 	.word	0x20400001

0800caf8 <_fflush_r>:
 800caf8:	b538      	push	{r3, r4, r5, lr}
 800cafa:	690b      	ldr	r3, [r1, #16]
 800cafc:	4605      	mov	r5, r0
 800cafe:	460c      	mov	r4, r1
 800cb00:	b913      	cbnz	r3, 800cb08 <_fflush_r+0x10>
 800cb02:	2500      	movs	r5, #0
 800cb04:	4628      	mov	r0, r5
 800cb06:	bd38      	pop	{r3, r4, r5, pc}
 800cb08:	b118      	cbz	r0, 800cb12 <_fflush_r+0x1a>
 800cb0a:	6983      	ldr	r3, [r0, #24]
 800cb0c:	b90b      	cbnz	r3, 800cb12 <_fflush_r+0x1a>
 800cb0e:	f000 f887 	bl	800cc20 <__sinit>
 800cb12:	4b14      	ldr	r3, [pc, #80]	; (800cb64 <_fflush_r+0x6c>)
 800cb14:	429c      	cmp	r4, r3
 800cb16:	d11b      	bne.n	800cb50 <_fflush_r+0x58>
 800cb18:	686c      	ldr	r4, [r5, #4]
 800cb1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d0ef      	beq.n	800cb02 <_fflush_r+0xa>
 800cb22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cb24:	07d0      	lsls	r0, r2, #31
 800cb26:	d404      	bmi.n	800cb32 <_fflush_r+0x3a>
 800cb28:	0599      	lsls	r1, r3, #22
 800cb2a:	d402      	bmi.n	800cb32 <_fflush_r+0x3a>
 800cb2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb2e:	f000 f915 	bl	800cd5c <__retarget_lock_acquire_recursive>
 800cb32:	4628      	mov	r0, r5
 800cb34:	4621      	mov	r1, r4
 800cb36:	f7ff ff59 	bl	800c9ec <__sflush_r>
 800cb3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb3c:	07da      	lsls	r2, r3, #31
 800cb3e:	4605      	mov	r5, r0
 800cb40:	d4e0      	bmi.n	800cb04 <_fflush_r+0xc>
 800cb42:	89a3      	ldrh	r3, [r4, #12]
 800cb44:	059b      	lsls	r3, r3, #22
 800cb46:	d4dd      	bmi.n	800cb04 <_fflush_r+0xc>
 800cb48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb4a:	f000 f908 	bl	800cd5e <__retarget_lock_release_recursive>
 800cb4e:	e7d9      	b.n	800cb04 <_fflush_r+0xc>
 800cb50:	4b05      	ldr	r3, [pc, #20]	; (800cb68 <_fflush_r+0x70>)
 800cb52:	429c      	cmp	r4, r3
 800cb54:	d101      	bne.n	800cb5a <_fflush_r+0x62>
 800cb56:	68ac      	ldr	r4, [r5, #8]
 800cb58:	e7df      	b.n	800cb1a <_fflush_r+0x22>
 800cb5a:	4b04      	ldr	r3, [pc, #16]	; (800cb6c <_fflush_r+0x74>)
 800cb5c:	429c      	cmp	r4, r3
 800cb5e:	bf08      	it	eq
 800cb60:	68ec      	ldreq	r4, [r5, #12]
 800cb62:	e7da      	b.n	800cb1a <_fflush_r+0x22>
 800cb64:	08026e80 	.word	0x08026e80
 800cb68:	08026ea0 	.word	0x08026ea0
 800cb6c:	08026e60 	.word	0x08026e60

0800cb70 <std>:
 800cb70:	2300      	movs	r3, #0
 800cb72:	b510      	push	{r4, lr}
 800cb74:	4604      	mov	r4, r0
 800cb76:	e9c0 3300 	strd	r3, r3, [r0]
 800cb7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cb7e:	6083      	str	r3, [r0, #8]
 800cb80:	8181      	strh	r1, [r0, #12]
 800cb82:	6643      	str	r3, [r0, #100]	; 0x64
 800cb84:	81c2      	strh	r2, [r0, #14]
 800cb86:	6183      	str	r3, [r0, #24]
 800cb88:	4619      	mov	r1, r3
 800cb8a:	2208      	movs	r2, #8
 800cb8c:	305c      	adds	r0, #92	; 0x5c
 800cb8e:	f7fd fd49 	bl	800a624 <memset>
 800cb92:	4b05      	ldr	r3, [pc, #20]	; (800cba8 <std+0x38>)
 800cb94:	6263      	str	r3, [r4, #36]	; 0x24
 800cb96:	4b05      	ldr	r3, [pc, #20]	; (800cbac <std+0x3c>)
 800cb98:	62a3      	str	r3, [r4, #40]	; 0x28
 800cb9a:	4b05      	ldr	r3, [pc, #20]	; (800cbb0 <std+0x40>)
 800cb9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cb9e:	4b05      	ldr	r3, [pc, #20]	; (800cbb4 <std+0x44>)
 800cba0:	6224      	str	r4, [r4, #32]
 800cba2:	6323      	str	r3, [r4, #48]	; 0x30
 800cba4:	bd10      	pop	{r4, pc}
 800cba6:	bf00      	nop
 800cba8:	0800cef1 	.word	0x0800cef1
 800cbac:	0800cf13 	.word	0x0800cf13
 800cbb0:	0800cf4b 	.word	0x0800cf4b
 800cbb4:	0800cf6f 	.word	0x0800cf6f

0800cbb8 <_cleanup_r>:
 800cbb8:	4901      	ldr	r1, [pc, #4]	; (800cbc0 <_cleanup_r+0x8>)
 800cbba:	f000 b8af 	b.w	800cd1c <_fwalk_reent>
 800cbbe:	bf00      	nop
 800cbc0:	0800caf9 	.word	0x0800caf9

0800cbc4 <__sfmoreglue>:
 800cbc4:	b570      	push	{r4, r5, r6, lr}
 800cbc6:	2268      	movs	r2, #104	; 0x68
 800cbc8:	1e4d      	subs	r5, r1, #1
 800cbca:	4355      	muls	r5, r2
 800cbcc:	460e      	mov	r6, r1
 800cbce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cbd2:	f7ff fc65 	bl	800c4a0 <_malloc_r>
 800cbd6:	4604      	mov	r4, r0
 800cbd8:	b140      	cbz	r0, 800cbec <__sfmoreglue+0x28>
 800cbda:	2100      	movs	r1, #0
 800cbdc:	e9c0 1600 	strd	r1, r6, [r0]
 800cbe0:	300c      	adds	r0, #12
 800cbe2:	60a0      	str	r0, [r4, #8]
 800cbe4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cbe8:	f7fd fd1c 	bl	800a624 <memset>
 800cbec:	4620      	mov	r0, r4
 800cbee:	bd70      	pop	{r4, r5, r6, pc}

0800cbf0 <__sfp_lock_acquire>:
 800cbf0:	4801      	ldr	r0, [pc, #4]	; (800cbf8 <__sfp_lock_acquire+0x8>)
 800cbf2:	f000 b8b3 	b.w	800cd5c <__retarget_lock_acquire_recursive>
 800cbf6:	bf00      	nop
 800cbf8:	2000a9ad 	.word	0x2000a9ad

0800cbfc <__sfp_lock_release>:
 800cbfc:	4801      	ldr	r0, [pc, #4]	; (800cc04 <__sfp_lock_release+0x8>)
 800cbfe:	f000 b8ae 	b.w	800cd5e <__retarget_lock_release_recursive>
 800cc02:	bf00      	nop
 800cc04:	2000a9ad 	.word	0x2000a9ad

0800cc08 <__sinit_lock_acquire>:
 800cc08:	4801      	ldr	r0, [pc, #4]	; (800cc10 <__sinit_lock_acquire+0x8>)
 800cc0a:	f000 b8a7 	b.w	800cd5c <__retarget_lock_acquire_recursive>
 800cc0e:	bf00      	nop
 800cc10:	2000a9ae 	.word	0x2000a9ae

0800cc14 <__sinit_lock_release>:
 800cc14:	4801      	ldr	r0, [pc, #4]	; (800cc1c <__sinit_lock_release+0x8>)
 800cc16:	f000 b8a2 	b.w	800cd5e <__retarget_lock_release_recursive>
 800cc1a:	bf00      	nop
 800cc1c:	2000a9ae 	.word	0x2000a9ae

0800cc20 <__sinit>:
 800cc20:	b510      	push	{r4, lr}
 800cc22:	4604      	mov	r4, r0
 800cc24:	f7ff fff0 	bl	800cc08 <__sinit_lock_acquire>
 800cc28:	69a3      	ldr	r3, [r4, #24]
 800cc2a:	b11b      	cbz	r3, 800cc34 <__sinit+0x14>
 800cc2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc30:	f7ff bff0 	b.w	800cc14 <__sinit_lock_release>
 800cc34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cc38:	6523      	str	r3, [r4, #80]	; 0x50
 800cc3a:	4b13      	ldr	r3, [pc, #76]	; (800cc88 <__sinit+0x68>)
 800cc3c:	4a13      	ldr	r2, [pc, #76]	; (800cc8c <__sinit+0x6c>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	62a2      	str	r2, [r4, #40]	; 0x28
 800cc42:	42a3      	cmp	r3, r4
 800cc44:	bf04      	itt	eq
 800cc46:	2301      	moveq	r3, #1
 800cc48:	61a3      	streq	r3, [r4, #24]
 800cc4a:	4620      	mov	r0, r4
 800cc4c:	f000 f820 	bl	800cc90 <__sfp>
 800cc50:	6060      	str	r0, [r4, #4]
 800cc52:	4620      	mov	r0, r4
 800cc54:	f000 f81c 	bl	800cc90 <__sfp>
 800cc58:	60a0      	str	r0, [r4, #8]
 800cc5a:	4620      	mov	r0, r4
 800cc5c:	f000 f818 	bl	800cc90 <__sfp>
 800cc60:	2200      	movs	r2, #0
 800cc62:	60e0      	str	r0, [r4, #12]
 800cc64:	2104      	movs	r1, #4
 800cc66:	6860      	ldr	r0, [r4, #4]
 800cc68:	f7ff ff82 	bl	800cb70 <std>
 800cc6c:	68a0      	ldr	r0, [r4, #8]
 800cc6e:	2201      	movs	r2, #1
 800cc70:	2109      	movs	r1, #9
 800cc72:	f7ff ff7d 	bl	800cb70 <std>
 800cc76:	68e0      	ldr	r0, [r4, #12]
 800cc78:	2202      	movs	r2, #2
 800cc7a:	2112      	movs	r1, #18
 800cc7c:	f7ff ff78 	bl	800cb70 <std>
 800cc80:	2301      	movs	r3, #1
 800cc82:	61a3      	str	r3, [r4, #24]
 800cc84:	e7d2      	b.n	800cc2c <__sinit+0xc>
 800cc86:	bf00      	nop
 800cc88:	08026bf0 	.word	0x08026bf0
 800cc8c:	0800cbb9 	.word	0x0800cbb9

0800cc90 <__sfp>:
 800cc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc92:	4607      	mov	r7, r0
 800cc94:	f7ff ffac 	bl	800cbf0 <__sfp_lock_acquire>
 800cc98:	4b1e      	ldr	r3, [pc, #120]	; (800cd14 <__sfp+0x84>)
 800cc9a:	681e      	ldr	r6, [r3, #0]
 800cc9c:	69b3      	ldr	r3, [r6, #24]
 800cc9e:	b913      	cbnz	r3, 800cca6 <__sfp+0x16>
 800cca0:	4630      	mov	r0, r6
 800cca2:	f7ff ffbd 	bl	800cc20 <__sinit>
 800cca6:	3648      	adds	r6, #72	; 0x48
 800cca8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ccac:	3b01      	subs	r3, #1
 800ccae:	d503      	bpl.n	800ccb8 <__sfp+0x28>
 800ccb0:	6833      	ldr	r3, [r6, #0]
 800ccb2:	b30b      	cbz	r3, 800ccf8 <__sfp+0x68>
 800ccb4:	6836      	ldr	r6, [r6, #0]
 800ccb6:	e7f7      	b.n	800cca8 <__sfp+0x18>
 800ccb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ccbc:	b9d5      	cbnz	r5, 800ccf4 <__sfp+0x64>
 800ccbe:	4b16      	ldr	r3, [pc, #88]	; (800cd18 <__sfp+0x88>)
 800ccc0:	60e3      	str	r3, [r4, #12]
 800ccc2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ccc6:	6665      	str	r5, [r4, #100]	; 0x64
 800ccc8:	f000 f847 	bl	800cd5a <__retarget_lock_init_recursive>
 800cccc:	f7ff ff96 	bl	800cbfc <__sfp_lock_release>
 800ccd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ccd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ccd8:	6025      	str	r5, [r4, #0]
 800ccda:	61a5      	str	r5, [r4, #24]
 800ccdc:	2208      	movs	r2, #8
 800ccde:	4629      	mov	r1, r5
 800cce0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cce4:	f7fd fc9e 	bl	800a624 <memset>
 800cce8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ccec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccf4:	3468      	adds	r4, #104	; 0x68
 800ccf6:	e7d9      	b.n	800ccac <__sfp+0x1c>
 800ccf8:	2104      	movs	r1, #4
 800ccfa:	4638      	mov	r0, r7
 800ccfc:	f7ff ff62 	bl	800cbc4 <__sfmoreglue>
 800cd00:	4604      	mov	r4, r0
 800cd02:	6030      	str	r0, [r6, #0]
 800cd04:	2800      	cmp	r0, #0
 800cd06:	d1d5      	bne.n	800ccb4 <__sfp+0x24>
 800cd08:	f7ff ff78 	bl	800cbfc <__sfp_lock_release>
 800cd0c:	230c      	movs	r3, #12
 800cd0e:	603b      	str	r3, [r7, #0]
 800cd10:	e7ee      	b.n	800ccf0 <__sfp+0x60>
 800cd12:	bf00      	nop
 800cd14:	08026bf0 	.word	0x08026bf0
 800cd18:	ffff0001 	.word	0xffff0001

0800cd1c <_fwalk_reent>:
 800cd1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd20:	4606      	mov	r6, r0
 800cd22:	4688      	mov	r8, r1
 800cd24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cd28:	2700      	movs	r7, #0
 800cd2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd2e:	f1b9 0901 	subs.w	r9, r9, #1
 800cd32:	d505      	bpl.n	800cd40 <_fwalk_reent+0x24>
 800cd34:	6824      	ldr	r4, [r4, #0]
 800cd36:	2c00      	cmp	r4, #0
 800cd38:	d1f7      	bne.n	800cd2a <_fwalk_reent+0xe>
 800cd3a:	4638      	mov	r0, r7
 800cd3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd40:	89ab      	ldrh	r3, [r5, #12]
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d907      	bls.n	800cd56 <_fwalk_reent+0x3a>
 800cd46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cd4a:	3301      	adds	r3, #1
 800cd4c:	d003      	beq.n	800cd56 <_fwalk_reent+0x3a>
 800cd4e:	4629      	mov	r1, r5
 800cd50:	4630      	mov	r0, r6
 800cd52:	47c0      	blx	r8
 800cd54:	4307      	orrs	r7, r0
 800cd56:	3568      	adds	r5, #104	; 0x68
 800cd58:	e7e9      	b.n	800cd2e <_fwalk_reent+0x12>

0800cd5a <__retarget_lock_init_recursive>:
 800cd5a:	4770      	bx	lr

0800cd5c <__retarget_lock_acquire_recursive>:
 800cd5c:	4770      	bx	lr

0800cd5e <__retarget_lock_release_recursive>:
 800cd5e:	4770      	bx	lr

0800cd60 <__swhatbuf_r>:
 800cd60:	b570      	push	{r4, r5, r6, lr}
 800cd62:	460e      	mov	r6, r1
 800cd64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd68:	2900      	cmp	r1, #0
 800cd6a:	b096      	sub	sp, #88	; 0x58
 800cd6c:	4614      	mov	r4, r2
 800cd6e:	461d      	mov	r5, r3
 800cd70:	da08      	bge.n	800cd84 <__swhatbuf_r+0x24>
 800cd72:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cd76:	2200      	movs	r2, #0
 800cd78:	602a      	str	r2, [r5, #0]
 800cd7a:	061a      	lsls	r2, r3, #24
 800cd7c:	d410      	bmi.n	800cda0 <__swhatbuf_r+0x40>
 800cd7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd82:	e00e      	b.n	800cda2 <__swhatbuf_r+0x42>
 800cd84:	466a      	mov	r2, sp
 800cd86:	f000 f925 	bl	800cfd4 <_fstat_r>
 800cd8a:	2800      	cmp	r0, #0
 800cd8c:	dbf1      	blt.n	800cd72 <__swhatbuf_r+0x12>
 800cd8e:	9a01      	ldr	r2, [sp, #4]
 800cd90:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cd94:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cd98:	425a      	negs	r2, r3
 800cd9a:	415a      	adcs	r2, r3
 800cd9c:	602a      	str	r2, [r5, #0]
 800cd9e:	e7ee      	b.n	800cd7e <__swhatbuf_r+0x1e>
 800cda0:	2340      	movs	r3, #64	; 0x40
 800cda2:	2000      	movs	r0, #0
 800cda4:	6023      	str	r3, [r4, #0]
 800cda6:	b016      	add	sp, #88	; 0x58
 800cda8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cdac <__smakebuf_r>:
 800cdac:	898b      	ldrh	r3, [r1, #12]
 800cdae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cdb0:	079d      	lsls	r5, r3, #30
 800cdb2:	4606      	mov	r6, r0
 800cdb4:	460c      	mov	r4, r1
 800cdb6:	d507      	bpl.n	800cdc8 <__smakebuf_r+0x1c>
 800cdb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cdbc:	6023      	str	r3, [r4, #0]
 800cdbe:	6123      	str	r3, [r4, #16]
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	6163      	str	r3, [r4, #20]
 800cdc4:	b002      	add	sp, #8
 800cdc6:	bd70      	pop	{r4, r5, r6, pc}
 800cdc8:	ab01      	add	r3, sp, #4
 800cdca:	466a      	mov	r2, sp
 800cdcc:	f7ff ffc8 	bl	800cd60 <__swhatbuf_r>
 800cdd0:	9900      	ldr	r1, [sp, #0]
 800cdd2:	4605      	mov	r5, r0
 800cdd4:	4630      	mov	r0, r6
 800cdd6:	f7ff fb63 	bl	800c4a0 <_malloc_r>
 800cdda:	b948      	cbnz	r0, 800cdf0 <__smakebuf_r+0x44>
 800cddc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cde0:	059a      	lsls	r2, r3, #22
 800cde2:	d4ef      	bmi.n	800cdc4 <__smakebuf_r+0x18>
 800cde4:	f023 0303 	bic.w	r3, r3, #3
 800cde8:	f043 0302 	orr.w	r3, r3, #2
 800cdec:	81a3      	strh	r3, [r4, #12]
 800cdee:	e7e3      	b.n	800cdb8 <__smakebuf_r+0xc>
 800cdf0:	4b0d      	ldr	r3, [pc, #52]	; (800ce28 <__smakebuf_r+0x7c>)
 800cdf2:	62b3      	str	r3, [r6, #40]	; 0x28
 800cdf4:	89a3      	ldrh	r3, [r4, #12]
 800cdf6:	6020      	str	r0, [r4, #0]
 800cdf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdfc:	81a3      	strh	r3, [r4, #12]
 800cdfe:	9b00      	ldr	r3, [sp, #0]
 800ce00:	6163      	str	r3, [r4, #20]
 800ce02:	9b01      	ldr	r3, [sp, #4]
 800ce04:	6120      	str	r0, [r4, #16]
 800ce06:	b15b      	cbz	r3, 800ce20 <__smakebuf_r+0x74>
 800ce08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce0c:	4630      	mov	r0, r6
 800ce0e:	f000 f8f3 	bl	800cff8 <_isatty_r>
 800ce12:	b128      	cbz	r0, 800ce20 <__smakebuf_r+0x74>
 800ce14:	89a3      	ldrh	r3, [r4, #12]
 800ce16:	f023 0303 	bic.w	r3, r3, #3
 800ce1a:	f043 0301 	orr.w	r3, r3, #1
 800ce1e:	81a3      	strh	r3, [r4, #12]
 800ce20:	89a0      	ldrh	r0, [r4, #12]
 800ce22:	4305      	orrs	r5, r0
 800ce24:	81a5      	strh	r5, [r4, #12]
 800ce26:	e7cd      	b.n	800cdc4 <__smakebuf_r+0x18>
 800ce28:	0800cbb9 	.word	0x0800cbb9

0800ce2c <__ascii_mbtowc>:
 800ce2c:	b082      	sub	sp, #8
 800ce2e:	b901      	cbnz	r1, 800ce32 <__ascii_mbtowc+0x6>
 800ce30:	a901      	add	r1, sp, #4
 800ce32:	b142      	cbz	r2, 800ce46 <__ascii_mbtowc+0x1a>
 800ce34:	b14b      	cbz	r3, 800ce4a <__ascii_mbtowc+0x1e>
 800ce36:	7813      	ldrb	r3, [r2, #0]
 800ce38:	600b      	str	r3, [r1, #0]
 800ce3a:	7812      	ldrb	r2, [r2, #0]
 800ce3c:	1e10      	subs	r0, r2, #0
 800ce3e:	bf18      	it	ne
 800ce40:	2001      	movne	r0, #1
 800ce42:	b002      	add	sp, #8
 800ce44:	4770      	bx	lr
 800ce46:	4610      	mov	r0, r2
 800ce48:	e7fb      	b.n	800ce42 <__ascii_mbtowc+0x16>
 800ce4a:	f06f 0001 	mvn.w	r0, #1
 800ce4e:	e7f8      	b.n	800ce42 <__ascii_mbtowc+0x16>

0800ce50 <__malloc_lock>:
 800ce50:	4801      	ldr	r0, [pc, #4]	; (800ce58 <__malloc_lock+0x8>)
 800ce52:	f7ff bf83 	b.w	800cd5c <__retarget_lock_acquire_recursive>
 800ce56:	bf00      	nop
 800ce58:	2000a9ac 	.word	0x2000a9ac

0800ce5c <__malloc_unlock>:
 800ce5c:	4801      	ldr	r0, [pc, #4]	; (800ce64 <__malloc_unlock+0x8>)
 800ce5e:	f7ff bf7e 	b.w	800cd5e <__retarget_lock_release_recursive>
 800ce62:	bf00      	nop
 800ce64:	2000a9ac 	.word	0x2000a9ac

0800ce68 <_raise_r>:
 800ce68:	291f      	cmp	r1, #31
 800ce6a:	b538      	push	{r3, r4, r5, lr}
 800ce6c:	4604      	mov	r4, r0
 800ce6e:	460d      	mov	r5, r1
 800ce70:	d904      	bls.n	800ce7c <_raise_r+0x14>
 800ce72:	2316      	movs	r3, #22
 800ce74:	6003      	str	r3, [r0, #0]
 800ce76:	f04f 30ff 	mov.w	r0, #4294967295
 800ce7a:	bd38      	pop	{r3, r4, r5, pc}
 800ce7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ce7e:	b112      	cbz	r2, 800ce86 <_raise_r+0x1e>
 800ce80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce84:	b94b      	cbnz	r3, 800ce9a <_raise_r+0x32>
 800ce86:	4620      	mov	r0, r4
 800ce88:	f000 f830 	bl	800ceec <_getpid_r>
 800ce8c:	462a      	mov	r2, r5
 800ce8e:	4601      	mov	r1, r0
 800ce90:	4620      	mov	r0, r4
 800ce92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce96:	f000 b817 	b.w	800cec8 <_kill_r>
 800ce9a:	2b01      	cmp	r3, #1
 800ce9c:	d00a      	beq.n	800ceb4 <_raise_r+0x4c>
 800ce9e:	1c59      	adds	r1, r3, #1
 800cea0:	d103      	bne.n	800ceaa <_raise_r+0x42>
 800cea2:	2316      	movs	r3, #22
 800cea4:	6003      	str	r3, [r0, #0]
 800cea6:	2001      	movs	r0, #1
 800cea8:	e7e7      	b.n	800ce7a <_raise_r+0x12>
 800ceaa:	2400      	movs	r4, #0
 800ceac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ceb0:	4628      	mov	r0, r5
 800ceb2:	4798      	blx	r3
 800ceb4:	2000      	movs	r0, #0
 800ceb6:	e7e0      	b.n	800ce7a <_raise_r+0x12>

0800ceb8 <raise>:
 800ceb8:	4b02      	ldr	r3, [pc, #8]	; (800cec4 <raise+0xc>)
 800ceba:	4601      	mov	r1, r0
 800cebc:	6818      	ldr	r0, [r3, #0]
 800cebe:	f7ff bfd3 	b.w	800ce68 <_raise_r>
 800cec2:	bf00      	nop
 800cec4:	20000040 	.word	0x20000040

0800cec8 <_kill_r>:
 800cec8:	b538      	push	{r3, r4, r5, lr}
 800ceca:	4d07      	ldr	r5, [pc, #28]	; (800cee8 <_kill_r+0x20>)
 800cecc:	2300      	movs	r3, #0
 800cece:	4604      	mov	r4, r0
 800ced0:	4608      	mov	r0, r1
 800ced2:	4611      	mov	r1, r2
 800ced4:	602b      	str	r3, [r5, #0]
 800ced6:	f7f5 fb09 	bl	80024ec <_kill>
 800ceda:	1c43      	adds	r3, r0, #1
 800cedc:	d102      	bne.n	800cee4 <_kill_r+0x1c>
 800cede:	682b      	ldr	r3, [r5, #0]
 800cee0:	b103      	cbz	r3, 800cee4 <_kill_r+0x1c>
 800cee2:	6023      	str	r3, [r4, #0]
 800cee4:	bd38      	pop	{r3, r4, r5, pc}
 800cee6:	bf00      	nop
 800cee8:	2000a9b0 	.word	0x2000a9b0

0800ceec <_getpid_r>:
 800ceec:	f7f5 baf6 	b.w	80024dc <_getpid>

0800cef0 <__sread>:
 800cef0:	b510      	push	{r4, lr}
 800cef2:	460c      	mov	r4, r1
 800cef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cef8:	f000 f8a0 	bl	800d03c <_read_r>
 800cefc:	2800      	cmp	r0, #0
 800cefe:	bfab      	itete	ge
 800cf00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cf02:	89a3      	ldrhlt	r3, [r4, #12]
 800cf04:	181b      	addge	r3, r3, r0
 800cf06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cf0a:	bfac      	ite	ge
 800cf0c:	6563      	strge	r3, [r4, #84]	; 0x54
 800cf0e:	81a3      	strhlt	r3, [r4, #12]
 800cf10:	bd10      	pop	{r4, pc}

0800cf12 <__swrite>:
 800cf12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf16:	461f      	mov	r7, r3
 800cf18:	898b      	ldrh	r3, [r1, #12]
 800cf1a:	05db      	lsls	r3, r3, #23
 800cf1c:	4605      	mov	r5, r0
 800cf1e:	460c      	mov	r4, r1
 800cf20:	4616      	mov	r6, r2
 800cf22:	d505      	bpl.n	800cf30 <__swrite+0x1e>
 800cf24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf28:	2302      	movs	r3, #2
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	f000 f874 	bl	800d018 <_lseek_r>
 800cf30:	89a3      	ldrh	r3, [r4, #12]
 800cf32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf3a:	81a3      	strh	r3, [r4, #12]
 800cf3c:	4632      	mov	r2, r6
 800cf3e:	463b      	mov	r3, r7
 800cf40:	4628      	mov	r0, r5
 800cf42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf46:	f000 b823 	b.w	800cf90 <_write_r>

0800cf4a <__sseek>:
 800cf4a:	b510      	push	{r4, lr}
 800cf4c:	460c      	mov	r4, r1
 800cf4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf52:	f000 f861 	bl	800d018 <_lseek_r>
 800cf56:	1c43      	adds	r3, r0, #1
 800cf58:	89a3      	ldrh	r3, [r4, #12]
 800cf5a:	bf15      	itete	ne
 800cf5c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cf5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cf62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cf66:	81a3      	strheq	r3, [r4, #12]
 800cf68:	bf18      	it	ne
 800cf6a:	81a3      	strhne	r3, [r4, #12]
 800cf6c:	bd10      	pop	{r4, pc}

0800cf6e <__sclose>:
 800cf6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf72:	f000 b81f 	b.w	800cfb4 <_close_r>

0800cf76 <__ascii_wctomb>:
 800cf76:	b149      	cbz	r1, 800cf8c <__ascii_wctomb+0x16>
 800cf78:	2aff      	cmp	r2, #255	; 0xff
 800cf7a:	bf85      	ittet	hi
 800cf7c:	238a      	movhi	r3, #138	; 0x8a
 800cf7e:	6003      	strhi	r3, [r0, #0]
 800cf80:	700a      	strbls	r2, [r1, #0]
 800cf82:	f04f 30ff 	movhi.w	r0, #4294967295
 800cf86:	bf98      	it	ls
 800cf88:	2001      	movls	r0, #1
 800cf8a:	4770      	bx	lr
 800cf8c:	4608      	mov	r0, r1
 800cf8e:	4770      	bx	lr

0800cf90 <_write_r>:
 800cf90:	b538      	push	{r3, r4, r5, lr}
 800cf92:	4d07      	ldr	r5, [pc, #28]	; (800cfb0 <_write_r+0x20>)
 800cf94:	4604      	mov	r4, r0
 800cf96:	4608      	mov	r0, r1
 800cf98:	4611      	mov	r1, r2
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	602a      	str	r2, [r5, #0]
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	f7f5 fadb 	bl	800255a <_write>
 800cfa4:	1c43      	adds	r3, r0, #1
 800cfa6:	d102      	bne.n	800cfae <_write_r+0x1e>
 800cfa8:	682b      	ldr	r3, [r5, #0]
 800cfaa:	b103      	cbz	r3, 800cfae <_write_r+0x1e>
 800cfac:	6023      	str	r3, [r4, #0]
 800cfae:	bd38      	pop	{r3, r4, r5, pc}
 800cfb0:	2000a9b0 	.word	0x2000a9b0

0800cfb4 <_close_r>:
 800cfb4:	b538      	push	{r3, r4, r5, lr}
 800cfb6:	4d06      	ldr	r5, [pc, #24]	; (800cfd0 <_close_r+0x1c>)
 800cfb8:	2300      	movs	r3, #0
 800cfba:	4604      	mov	r4, r0
 800cfbc:	4608      	mov	r0, r1
 800cfbe:	602b      	str	r3, [r5, #0]
 800cfc0:	f7f5 fae7 	bl	8002592 <_close>
 800cfc4:	1c43      	adds	r3, r0, #1
 800cfc6:	d102      	bne.n	800cfce <_close_r+0x1a>
 800cfc8:	682b      	ldr	r3, [r5, #0]
 800cfca:	b103      	cbz	r3, 800cfce <_close_r+0x1a>
 800cfcc:	6023      	str	r3, [r4, #0]
 800cfce:	bd38      	pop	{r3, r4, r5, pc}
 800cfd0:	2000a9b0 	.word	0x2000a9b0

0800cfd4 <_fstat_r>:
 800cfd4:	b538      	push	{r3, r4, r5, lr}
 800cfd6:	4d07      	ldr	r5, [pc, #28]	; (800cff4 <_fstat_r+0x20>)
 800cfd8:	2300      	movs	r3, #0
 800cfda:	4604      	mov	r4, r0
 800cfdc:	4608      	mov	r0, r1
 800cfde:	4611      	mov	r1, r2
 800cfe0:	602b      	str	r3, [r5, #0]
 800cfe2:	f7f5 fae2 	bl	80025aa <_fstat>
 800cfe6:	1c43      	adds	r3, r0, #1
 800cfe8:	d102      	bne.n	800cff0 <_fstat_r+0x1c>
 800cfea:	682b      	ldr	r3, [r5, #0]
 800cfec:	b103      	cbz	r3, 800cff0 <_fstat_r+0x1c>
 800cfee:	6023      	str	r3, [r4, #0]
 800cff0:	bd38      	pop	{r3, r4, r5, pc}
 800cff2:	bf00      	nop
 800cff4:	2000a9b0 	.word	0x2000a9b0

0800cff8 <_isatty_r>:
 800cff8:	b538      	push	{r3, r4, r5, lr}
 800cffa:	4d06      	ldr	r5, [pc, #24]	; (800d014 <_isatty_r+0x1c>)
 800cffc:	2300      	movs	r3, #0
 800cffe:	4604      	mov	r4, r0
 800d000:	4608      	mov	r0, r1
 800d002:	602b      	str	r3, [r5, #0]
 800d004:	f7f5 fae1 	bl	80025ca <_isatty>
 800d008:	1c43      	adds	r3, r0, #1
 800d00a:	d102      	bne.n	800d012 <_isatty_r+0x1a>
 800d00c:	682b      	ldr	r3, [r5, #0]
 800d00e:	b103      	cbz	r3, 800d012 <_isatty_r+0x1a>
 800d010:	6023      	str	r3, [r4, #0]
 800d012:	bd38      	pop	{r3, r4, r5, pc}
 800d014:	2000a9b0 	.word	0x2000a9b0

0800d018 <_lseek_r>:
 800d018:	b538      	push	{r3, r4, r5, lr}
 800d01a:	4d07      	ldr	r5, [pc, #28]	; (800d038 <_lseek_r+0x20>)
 800d01c:	4604      	mov	r4, r0
 800d01e:	4608      	mov	r0, r1
 800d020:	4611      	mov	r1, r2
 800d022:	2200      	movs	r2, #0
 800d024:	602a      	str	r2, [r5, #0]
 800d026:	461a      	mov	r2, r3
 800d028:	f7f5 fada 	bl	80025e0 <_lseek>
 800d02c:	1c43      	adds	r3, r0, #1
 800d02e:	d102      	bne.n	800d036 <_lseek_r+0x1e>
 800d030:	682b      	ldr	r3, [r5, #0]
 800d032:	b103      	cbz	r3, 800d036 <_lseek_r+0x1e>
 800d034:	6023      	str	r3, [r4, #0]
 800d036:	bd38      	pop	{r3, r4, r5, pc}
 800d038:	2000a9b0 	.word	0x2000a9b0

0800d03c <_read_r>:
 800d03c:	b538      	push	{r3, r4, r5, lr}
 800d03e:	4d07      	ldr	r5, [pc, #28]	; (800d05c <_read_r+0x20>)
 800d040:	4604      	mov	r4, r0
 800d042:	4608      	mov	r0, r1
 800d044:	4611      	mov	r1, r2
 800d046:	2200      	movs	r2, #0
 800d048:	602a      	str	r2, [r5, #0]
 800d04a:	461a      	mov	r2, r3
 800d04c:	f7f5 fa68 	bl	8002520 <_read>
 800d050:	1c43      	adds	r3, r0, #1
 800d052:	d102      	bne.n	800d05a <_read_r+0x1e>
 800d054:	682b      	ldr	r3, [r5, #0]
 800d056:	b103      	cbz	r3, 800d05a <_read_r+0x1e>
 800d058:	6023      	str	r3, [r4, #0]
 800d05a:	bd38      	pop	{r3, r4, r5, pc}
 800d05c:	2000a9b0 	.word	0x2000a9b0

0800d060 <cos>:
 800d060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d062:	ec53 2b10 	vmov	r2, r3, d0
 800d066:	4826      	ldr	r0, [pc, #152]	; (800d100 <cos+0xa0>)
 800d068:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d06c:	4281      	cmp	r1, r0
 800d06e:	dc06      	bgt.n	800d07e <cos+0x1e>
 800d070:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d0f8 <cos+0x98>
 800d074:	b005      	add	sp, #20
 800d076:	f85d eb04 	ldr.w	lr, [sp], #4
 800d07a:	f000 bcc5 	b.w	800da08 <__kernel_cos>
 800d07e:	4821      	ldr	r0, [pc, #132]	; (800d104 <cos+0xa4>)
 800d080:	4281      	cmp	r1, r0
 800d082:	dd09      	ble.n	800d098 <cos+0x38>
 800d084:	ee10 0a10 	vmov	r0, s0
 800d088:	4619      	mov	r1, r3
 800d08a:	f7f3 f8fd 	bl	8000288 <__aeabi_dsub>
 800d08e:	ec41 0b10 	vmov	d0, r0, r1
 800d092:	b005      	add	sp, #20
 800d094:	f85d fb04 	ldr.w	pc, [sp], #4
 800d098:	4668      	mov	r0, sp
 800d09a:	f000 faa5 	bl	800d5e8 <__ieee754_rem_pio2>
 800d09e:	f000 0003 	and.w	r0, r0, #3
 800d0a2:	2801      	cmp	r0, #1
 800d0a4:	d00b      	beq.n	800d0be <cos+0x5e>
 800d0a6:	2802      	cmp	r0, #2
 800d0a8:	d016      	beq.n	800d0d8 <cos+0x78>
 800d0aa:	b9e0      	cbnz	r0, 800d0e6 <cos+0x86>
 800d0ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d0b0:	ed9d 0b00 	vldr	d0, [sp]
 800d0b4:	f000 fca8 	bl	800da08 <__kernel_cos>
 800d0b8:	ec51 0b10 	vmov	r0, r1, d0
 800d0bc:	e7e7      	b.n	800d08e <cos+0x2e>
 800d0be:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d0c2:	ed9d 0b00 	vldr	d0, [sp]
 800d0c6:	f001 f8b7 	bl	800e238 <__kernel_sin>
 800d0ca:	ec53 2b10 	vmov	r2, r3, d0
 800d0ce:	ee10 0a10 	vmov	r0, s0
 800d0d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d0d6:	e7da      	b.n	800d08e <cos+0x2e>
 800d0d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d0dc:	ed9d 0b00 	vldr	d0, [sp]
 800d0e0:	f000 fc92 	bl	800da08 <__kernel_cos>
 800d0e4:	e7f1      	b.n	800d0ca <cos+0x6a>
 800d0e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d0ea:	ed9d 0b00 	vldr	d0, [sp]
 800d0ee:	2001      	movs	r0, #1
 800d0f0:	f001 f8a2 	bl	800e238 <__kernel_sin>
 800d0f4:	e7e0      	b.n	800d0b8 <cos+0x58>
 800d0f6:	bf00      	nop
	...
 800d100:	3fe921fb 	.word	0x3fe921fb
 800d104:	7fefffff 	.word	0x7fefffff

0800d108 <sin>:
 800d108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d10a:	ec53 2b10 	vmov	r2, r3, d0
 800d10e:	4828      	ldr	r0, [pc, #160]	; (800d1b0 <sin+0xa8>)
 800d110:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d114:	4281      	cmp	r1, r0
 800d116:	dc07      	bgt.n	800d128 <sin+0x20>
 800d118:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800d1a8 <sin+0xa0>
 800d11c:	2000      	movs	r0, #0
 800d11e:	b005      	add	sp, #20
 800d120:	f85d eb04 	ldr.w	lr, [sp], #4
 800d124:	f001 b888 	b.w	800e238 <__kernel_sin>
 800d128:	4822      	ldr	r0, [pc, #136]	; (800d1b4 <sin+0xac>)
 800d12a:	4281      	cmp	r1, r0
 800d12c:	dd09      	ble.n	800d142 <sin+0x3a>
 800d12e:	ee10 0a10 	vmov	r0, s0
 800d132:	4619      	mov	r1, r3
 800d134:	f7f3 f8a8 	bl	8000288 <__aeabi_dsub>
 800d138:	ec41 0b10 	vmov	d0, r0, r1
 800d13c:	b005      	add	sp, #20
 800d13e:	f85d fb04 	ldr.w	pc, [sp], #4
 800d142:	4668      	mov	r0, sp
 800d144:	f000 fa50 	bl	800d5e8 <__ieee754_rem_pio2>
 800d148:	f000 0003 	and.w	r0, r0, #3
 800d14c:	2801      	cmp	r0, #1
 800d14e:	d00c      	beq.n	800d16a <sin+0x62>
 800d150:	2802      	cmp	r0, #2
 800d152:	d011      	beq.n	800d178 <sin+0x70>
 800d154:	b9f0      	cbnz	r0, 800d194 <sin+0x8c>
 800d156:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d15a:	ed9d 0b00 	vldr	d0, [sp]
 800d15e:	2001      	movs	r0, #1
 800d160:	f001 f86a 	bl	800e238 <__kernel_sin>
 800d164:	ec51 0b10 	vmov	r0, r1, d0
 800d168:	e7e6      	b.n	800d138 <sin+0x30>
 800d16a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d16e:	ed9d 0b00 	vldr	d0, [sp]
 800d172:	f000 fc49 	bl	800da08 <__kernel_cos>
 800d176:	e7f5      	b.n	800d164 <sin+0x5c>
 800d178:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d17c:	ed9d 0b00 	vldr	d0, [sp]
 800d180:	2001      	movs	r0, #1
 800d182:	f001 f859 	bl	800e238 <__kernel_sin>
 800d186:	ec53 2b10 	vmov	r2, r3, d0
 800d18a:	ee10 0a10 	vmov	r0, s0
 800d18e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d192:	e7d1      	b.n	800d138 <sin+0x30>
 800d194:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d198:	ed9d 0b00 	vldr	d0, [sp]
 800d19c:	f000 fc34 	bl	800da08 <__kernel_cos>
 800d1a0:	e7f1      	b.n	800d186 <sin+0x7e>
 800d1a2:	bf00      	nop
 800d1a4:	f3af 8000 	nop.w
	...
 800d1b0:	3fe921fb 	.word	0x3fe921fb
 800d1b4:	7fefffff 	.word	0x7fefffff

0800d1b8 <log>:
 800d1b8:	b538      	push	{r3, r4, r5, lr}
 800d1ba:	ed2d 8b02 	vpush	{d8}
 800d1be:	ec55 4b10 	vmov	r4, r5, d0
 800d1c2:	f000 f855 	bl	800d270 <__ieee754_log>
 800d1c6:	4622      	mov	r2, r4
 800d1c8:	462b      	mov	r3, r5
 800d1ca:	4620      	mov	r0, r4
 800d1cc:	4629      	mov	r1, r5
 800d1ce:	eeb0 8a40 	vmov.f32	s16, s0
 800d1d2:	eef0 8a60 	vmov.f32	s17, s1
 800d1d6:	f7f3 fca9 	bl	8000b2c <__aeabi_dcmpun>
 800d1da:	b998      	cbnz	r0, 800d204 <log+0x4c>
 800d1dc:	2200      	movs	r2, #0
 800d1de:	2300      	movs	r3, #0
 800d1e0:	4620      	mov	r0, r4
 800d1e2:	4629      	mov	r1, r5
 800d1e4:	f7f3 fc98 	bl	8000b18 <__aeabi_dcmpgt>
 800d1e8:	b960      	cbnz	r0, 800d204 <log+0x4c>
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	4620      	mov	r0, r4
 800d1f0:	4629      	mov	r1, r5
 800d1f2:	f7f3 fc69 	bl	8000ac8 <__aeabi_dcmpeq>
 800d1f6:	b160      	cbz	r0, 800d212 <log+0x5a>
 800d1f8:	f7fd f9ea 	bl	800a5d0 <__errno>
 800d1fc:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800d228 <log+0x70>
 800d200:	2322      	movs	r3, #34	; 0x22
 800d202:	6003      	str	r3, [r0, #0]
 800d204:	eeb0 0a48 	vmov.f32	s0, s16
 800d208:	eef0 0a68 	vmov.f32	s1, s17
 800d20c:	ecbd 8b02 	vpop	{d8}
 800d210:	bd38      	pop	{r3, r4, r5, pc}
 800d212:	f7fd f9dd 	bl	800a5d0 <__errno>
 800d216:	ecbd 8b02 	vpop	{d8}
 800d21a:	2321      	movs	r3, #33	; 0x21
 800d21c:	6003      	str	r3, [r0, #0]
 800d21e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d222:	4803      	ldr	r0, [pc, #12]	; (800d230 <log+0x78>)
 800d224:	f001 b950 	b.w	800e4c8 <nan>
 800d228:	00000000 	.word	0x00000000
 800d22c:	fff00000 	.word	0xfff00000
 800d230:	08026c63 	.word	0x08026c63

0800d234 <sqrtf>:
 800d234:	b508      	push	{r3, lr}
 800d236:	ed2d 8b02 	vpush	{d8}
 800d23a:	eeb0 8a40 	vmov.f32	s16, s0
 800d23e:	f000 fbdf 	bl	800da00 <__ieee754_sqrtf>
 800d242:	eeb4 8a48 	vcmp.f32	s16, s16
 800d246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d24a:	d60c      	bvs.n	800d266 <sqrtf+0x32>
 800d24c:	eddf 8a07 	vldr	s17, [pc, #28]	; 800d26c <sqrtf+0x38>
 800d250:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d258:	d505      	bpl.n	800d266 <sqrtf+0x32>
 800d25a:	f7fd f9b9 	bl	800a5d0 <__errno>
 800d25e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d262:	2321      	movs	r3, #33	; 0x21
 800d264:	6003      	str	r3, [r0, #0]
 800d266:	ecbd 8b02 	vpop	{d8}
 800d26a:	bd08      	pop	{r3, pc}
 800d26c:	00000000 	.word	0x00000000

0800d270 <__ieee754_log>:
 800d270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d274:	ec51 0b10 	vmov	r0, r1, d0
 800d278:	ed2d 8b04 	vpush	{d8-d9}
 800d27c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800d280:	b083      	sub	sp, #12
 800d282:	460d      	mov	r5, r1
 800d284:	da29      	bge.n	800d2da <__ieee754_log+0x6a>
 800d286:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d28a:	4303      	orrs	r3, r0
 800d28c:	ee10 2a10 	vmov	r2, s0
 800d290:	d10c      	bne.n	800d2ac <__ieee754_log+0x3c>
 800d292:	49cf      	ldr	r1, [pc, #828]	; (800d5d0 <__ieee754_log+0x360>)
 800d294:	2200      	movs	r2, #0
 800d296:	2300      	movs	r3, #0
 800d298:	2000      	movs	r0, #0
 800d29a:	f7f3 fad7 	bl	800084c <__aeabi_ddiv>
 800d29e:	ec41 0b10 	vmov	d0, r0, r1
 800d2a2:	b003      	add	sp, #12
 800d2a4:	ecbd 8b04 	vpop	{d8-d9}
 800d2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ac:	2900      	cmp	r1, #0
 800d2ae:	da05      	bge.n	800d2bc <__ieee754_log+0x4c>
 800d2b0:	460b      	mov	r3, r1
 800d2b2:	f7f2 ffe9 	bl	8000288 <__aeabi_dsub>
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	e7ee      	b.n	800d29a <__ieee754_log+0x2a>
 800d2bc:	4bc5      	ldr	r3, [pc, #788]	; (800d5d4 <__ieee754_log+0x364>)
 800d2be:	2200      	movs	r2, #0
 800d2c0:	f7f3 f99a 	bl	80005f8 <__aeabi_dmul>
 800d2c4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800d2c8:	460d      	mov	r5, r1
 800d2ca:	4ac3      	ldr	r2, [pc, #780]	; (800d5d8 <__ieee754_log+0x368>)
 800d2cc:	4295      	cmp	r5, r2
 800d2ce:	dd06      	ble.n	800d2de <__ieee754_log+0x6e>
 800d2d0:	4602      	mov	r2, r0
 800d2d2:	460b      	mov	r3, r1
 800d2d4:	f7f2 ffda 	bl	800028c <__adddf3>
 800d2d8:	e7e1      	b.n	800d29e <__ieee754_log+0x2e>
 800d2da:	2300      	movs	r3, #0
 800d2dc:	e7f5      	b.n	800d2ca <__ieee754_log+0x5a>
 800d2de:	152c      	asrs	r4, r5, #20
 800d2e0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800d2e4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800d2e8:	441c      	add	r4, r3
 800d2ea:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800d2ee:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800d2f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d2f6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800d2fa:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800d2fe:	ea42 0105 	orr.w	r1, r2, r5
 800d302:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800d306:	2200      	movs	r2, #0
 800d308:	4bb4      	ldr	r3, [pc, #720]	; (800d5dc <__ieee754_log+0x36c>)
 800d30a:	f7f2 ffbd 	bl	8000288 <__aeabi_dsub>
 800d30e:	1cab      	adds	r3, r5, #2
 800d310:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d314:	2b02      	cmp	r3, #2
 800d316:	4682      	mov	sl, r0
 800d318:	468b      	mov	fp, r1
 800d31a:	f04f 0200 	mov.w	r2, #0
 800d31e:	dc53      	bgt.n	800d3c8 <__ieee754_log+0x158>
 800d320:	2300      	movs	r3, #0
 800d322:	f7f3 fbd1 	bl	8000ac8 <__aeabi_dcmpeq>
 800d326:	b1d0      	cbz	r0, 800d35e <__ieee754_log+0xee>
 800d328:	2c00      	cmp	r4, #0
 800d32a:	f000 8122 	beq.w	800d572 <__ieee754_log+0x302>
 800d32e:	4620      	mov	r0, r4
 800d330:	f7f3 f8f8 	bl	8000524 <__aeabi_i2d>
 800d334:	a390      	add	r3, pc, #576	; (adr r3, 800d578 <__ieee754_log+0x308>)
 800d336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d33a:	4606      	mov	r6, r0
 800d33c:	460f      	mov	r7, r1
 800d33e:	f7f3 f95b 	bl	80005f8 <__aeabi_dmul>
 800d342:	a38f      	add	r3, pc, #572	; (adr r3, 800d580 <__ieee754_log+0x310>)
 800d344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d348:	4604      	mov	r4, r0
 800d34a:	460d      	mov	r5, r1
 800d34c:	4630      	mov	r0, r6
 800d34e:	4639      	mov	r1, r7
 800d350:	f7f3 f952 	bl	80005f8 <__aeabi_dmul>
 800d354:	4602      	mov	r2, r0
 800d356:	460b      	mov	r3, r1
 800d358:	4620      	mov	r0, r4
 800d35a:	4629      	mov	r1, r5
 800d35c:	e7ba      	b.n	800d2d4 <__ieee754_log+0x64>
 800d35e:	a38a      	add	r3, pc, #552	; (adr r3, 800d588 <__ieee754_log+0x318>)
 800d360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d364:	4650      	mov	r0, sl
 800d366:	4659      	mov	r1, fp
 800d368:	f7f3 f946 	bl	80005f8 <__aeabi_dmul>
 800d36c:	4602      	mov	r2, r0
 800d36e:	460b      	mov	r3, r1
 800d370:	2000      	movs	r0, #0
 800d372:	499b      	ldr	r1, [pc, #620]	; (800d5e0 <__ieee754_log+0x370>)
 800d374:	f7f2 ff88 	bl	8000288 <__aeabi_dsub>
 800d378:	4652      	mov	r2, sl
 800d37a:	4606      	mov	r6, r0
 800d37c:	460f      	mov	r7, r1
 800d37e:	465b      	mov	r3, fp
 800d380:	4650      	mov	r0, sl
 800d382:	4659      	mov	r1, fp
 800d384:	f7f3 f938 	bl	80005f8 <__aeabi_dmul>
 800d388:	4602      	mov	r2, r0
 800d38a:	460b      	mov	r3, r1
 800d38c:	4630      	mov	r0, r6
 800d38e:	4639      	mov	r1, r7
 800d390:	f7f3 f932 	bl	80005f8 <__aeabi_dmul>
 800d394:	4606      	mov	r6, r0
 800d396:	460f      	mov	r7, r1
 800d398:	b914      	cbnz	r4, 800d3a0 <__ieee754_log+0x130>
 800d39a:	4632      	mov	r2, r6
 800d39c:	463b      	mov	r3, r7
 800d39e:	e0a2      	b.n	800d4e6 <__ieee754_log+0x276>
 800d3a0:	4620      	mov	r0, r4
 800d3a2:	f7f3 f8bf 	bl	8000524 <__aeabi_i2d>
 800d3a6:	a374      	add	r3, pc, #464	; (adr r3, 800d578 <__ieee754_log+0x308>)
 800d3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ac:	4680      	mov	r8, r0
 800d3ae:	4689      	mov	r9, r1
 800d3b0:	f7f3 f922 	bl	80005f8 <__aeabi_dmul>
 800d3b4:	a372      	add	r3, pc, #456	; (adr r3, 800d580 <__ieee754_log+0x310>)
 800d3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ba:	4604      	mov	r4, r0
 800d3bc:	460d      	mov	r5, r1
 800d3be:	4640      	mov	r0, r8
 800d3c0:	4649      	mov	r1, r9
 800d3c2:	f7f3 f919 	bl	80005f8 <__aeabi_dmul>
 800d3c6:	e0a7      	b.n	800d518 <__ieee754_log+0x2a8>
 800d3c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d3cc:	f7f2 ff5e 	bl	800028c <__adddf3>
 800d3d0:	4602      	mov	r2, r0
 800d3d2:	460b      	mov	r3, r1
 800d3d4:	4650      	mov	r0, sl
 800d3d6:	4659      	mov	r1, fp
 800d3d8:	f7f3 fa38 	bl	800084c <__aeabi_ddiv>
 800d3dc:	ec41 0b18 	vmov	d8, r0, r1
 800d3e0:	4620      	mov	r0, r4
 800d3e2:	f7f3 f89f 	bl	8000524 <__aeabi_i2d>
 800d3e6:	ec53 2b18 	vmov	r2, r3, d8
 800d3ea:	ec41 0b19 	vmov	d9, r0, r1
 800d3ee:	ec51 0b18 	vmov	r0, r1, d8
 800d3f2:	f7f3 f901 	bl	80005f8 <__aeabi_dmul>
 800d3f6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800d3fa:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800d3fe:	9301      	str	r3, [sp, #4]
 800d400:	4602      	mov	r2, r0
 800d402:	460b      	mov	r3, r1
 800d404:	4680      	mov	r8, r0
 800d406:	4689      	mov	r9, r1
 800d408:	f7f3 f8f6 	bl	80005f8 <__aeabi_dmul>
 800d40c:	a360      	add	r3, pc, #384	; (adr r3, 800d590 <__ieee754_log+0x320>)
 800d40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d412:	4606      	mov	r6, r0
 800d414:	460f      	mov	r7, r1
 800d416:	f7f3 f8ef 	bl	80005f8 <__aeabi_dmul>
 800d41a:	a35f      	add	r3, pc, #380	; (adr r3, 800d598 <__ieee754_log+0x328>)
 800d41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d420:	f7f2 ff34 	bl	800028c <__adddf3>
 800d424:	4632      	mov	r2, r6
 800d426:	463b      	mov	r3, r7
 800d428:	f7f3 f8e6 	bl	80005f8 <__aeabi_dmul>
 800d42c:	a35c      	add	r3, pc, #368	; (adr r3, 800d5a0 <__ieee754_log+0x330>)
 800d42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d432:	f7f2 ff2b 	bl	800028c <__adddf3>
 800d436:	4632      	mov	r2, r6
 800d438:	463b      	mov	r3, r7
 800d43a:	f7f3 f8dd 	bl	80005f8 <__aeabi_dmul>
 800d43e:	a35a      	add	r3, pc, #360	; (adr r3, 800d5a8 <__ieee754_log+0x338>)
 800d440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d444:	f7f2 ff22 	bl	800028c <__adddf3>
 800d448:	4642      	mov	r2, r8
 800d44a:	464b      	mov	r3, r9
 800d44c:	f7f3 f8d4 	bl	80005f8 <__aeabi_dmul>
 800d450:	a357      	add	r3, pc, #348	; (adr r3, 800d5b0 <__ieee754_log+0x340>)
 800d452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d456:	4680      	mov	r8, r0
 800d458:	4689      	mov	r9, r1
 800d45a:	4630      	mov	r0, r6
 800d45c:	4639      	mov	r1, r7
 800d45e:	f7f3 f8cb 	bl	80005f8 <__aeabi_dmul>
 800d462:	a355      	add	r3, pc, #340	; (adr r3, 800d5b8 <__ieee754_log+0x348>)
 800d464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d468:	f7f2 ff10 	bl	800028c <__adddf3>
 800d46c:	4632      	mov	r2, r6
 800d46e:	463b      	mov	r3, r7
 800d470:	f7f3 f8c2 	bl	80005f8 <__aeabi_dmul>
 800d474:	a352      	add	r3, pc, #328	; (adr r3, 800d5c0 <__ieee754_log+0x350>)
 800d476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d47a:	f7f2 ff07 	bl	800028c <__adddf3>
 800d47e:	4632      	mov	r2, r6
 800d480:	463b      	mov	r3, r7
 800d482:	f7f3 f8b9 	bl	80005f8 <__aeabi_dmul>
 800d486:	460b      	mov	r3, r1
 800d488:	4602      	mov	r2, r0
 800d48a:	4649      	mov	r1, r9
 800d48c:	4640      	mov	r0, r8
 800d48e:	f7f2 fefd 	bl	800028c <__adddf3>
 800d492:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800d496:	9b01      	ldr	r3, [sp, #4]
 800d498:	3551      	adds	r5, #81	; 0x51
 800d49a:	431d      	orrs	r5, r3
 800d49c:	2d00      	cmp	r5, #0
 800d49e:	4680      	mov	r8, r0
 800d4a0:	4689      	mov	r9, r1
 800d4a2:	dd48      	ble.n	800d536 <__ieee754_log+0x2c6>
 800d4a4:	4b4e      	ldr	r3, [pc, #312]	; (800d5e0 <__ieee754_log+0x370>)
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	4650      	mov	r0, sl
 800d4aa:	4659      	mov	r1, fp
 800d4ac:	f7f3 f8a4 	bl	80005f8 <__aeabi_dmul>
 800d4b0:	4652      	mov	r2, sl
 800d4b2:	465b      	mov	r3, fp
 800d4b4:	f7f3 f8a0 	bl	80005f8 <__aeabi_dmul>
 800d4b8:	4602      	mov	r2, r0
 800d4ba:	460b      	mov	r3, r1
 800d4bc:	4606      	mov	r6, r0
 800d4be:	460f      	mov	r7, r1
 800d4c0:	4640      	mov	r0, r8
 800d4c2:	4649      	mov	r1, r9
 800d4c4:	f7f2 fee2 	bl	800028c <__adddf3>
 800d4c8:	ec53 2b18 	vmov	r2, r3, d8
 800d4cc:	f7f3 f894 	bl	80005f8 <__aeabi_dmul>
 800d4d0:	4680      	mov	r8, r0
 800d4d2:	4689      	mov	r9, r1
 800d4d4:	b964      	cbnz	r4, 800d4f0 <__ieee754_log+0x280>
 800d4d6:	4602      	mov	r2, r0
 800d4d8:	460b      	mov	r3, r1
 800d4da:	4630      	mov	r0, r6
 800d4dc:	4639      	mov	r1, r7
 800d4de:	f7f2 fed3 	bl	8000288 <__aeabi_dsub>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	460b      	mov	r3, r1
 800d4e6:	4650      	mov	r0, sl
 800d4e8:	4659      	mov	r1, fp
 800d4ea:	f7f2 fecd 	bl	8000288 <__aeabi_dsub>
 800d4ee:	e6d6      	b.n	800d29e <__ieee754_log+0x2e>
 800d4f0:	a321      	add	r3, pc, #132	; (adr r3, 800d578 <__ieee754_log+0x308>)
 800d4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f6:	ec51 0b19 	vmov	r0, r1, d9
 800d4fa:	f7f3 f87d 	bl	80005f8 <__aeabi_dmul>
 800d4fe:	a320      	add	r3, pc, #128	; (adr r3, 800d580 <__ieee754_log+0x310>)
 800d500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d504:	4604      	mov	r4, r0
 800d506:	460d      	mov	r5, r1
 800d508:	ec51 0b19 	vmov	r0, r1, d9
 800d50c:	f7f3 f874 	bl	80005f8 <__aeabi_dmul>
 800d510:	4642      	mov	r2, r8
 800d512:	464b      	mov	r3, r9
 800d514:	f7f2 feba 	bl	800028c <__adddf3>
 800d518:	4602      	mov	r2, r0
 800d51a:	460b      	mov	r3, r1
 800d51c:	4630      	mov	r0, r6
 800d51e:	4639      	mov	r1, r7
 800d520:	f7f2 feb2 	bl	8000288 <__aeabi_dsub>
 800d524:	4652      	mov	r2, sl
 800d526:	465b      	mov	r3, fp
 800d528:	f7f2 feae 	bl	8000288 <__aeabi_dsub>
 800d52c:	4602      	mov	r2, r0
 800d52e:	460b      	mov	r3, r1
 800d530:	4620      	mov	r0, r4
 800d532:	4629      	mov	r1, r5
 800d534:	e7d9      	b.n	800d4ea <__ieee754_log+0x27a>
 800d536:	4602      	mov	r2, r0
 800d538:	460b      	mov	r3, r1
 800d53a:	4650      	mov	r0, sl
 800d53c:	4659      	mov	r1, fp
 800d53e:	f7f2 fea3 	bl	8000288 <__aeabi_dsub>
 800d542:	ec53 2b18 	vmov	r2, r3, d8
 800d546:	f7f3 f857 	bl	80005f8 <__aeabi_dmul>
 800d54a:	4606      	mov	r6, r0
 800d54c:	460f      	mov	r7, r1
 800d54e:	2c00      	cmp	r4, #0
 800d550:	f43f af23 	beq.w	800d39a <__ieee754_log+0x12a>
 800d554:	a308      	add	r3, pc, #32	; (adr r3, 800d578 <__ieee754_log+0x308>)
 800d556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d55a:	ec51 0b19 	vmov	r0, r1, d9
 800d55e:	f7f3 f84b 	bl	80005f8 <__aeabi_dmul>
 800d562:	a307      	add	r3, pc, #28	; (adr r3, 800d580 <__ieee754_log+0x310>)
 800d564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d568:	4604      	mov	r4, r0
 800d56a:	460d      	mov	r5, r1
 800d56c:	ec51 0b19 	vmov	r0, r1, d9
 800d570:	e727      	b.n	800d3c2 <__ieee754_log+0x152>
 800d572:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800d5c8 <__ieee754_log+0x358>
 800d576:	e694      	b.n	800d2a2 <__ieee754_log+0x32>
 800d578:	fee00000 	.word	0xfee00000
 800d57c:	3fe62e42 	.word	0x3fe62e42
 800d580:	35793c76 	.word	0x35793c76
 800d584:	3dea39ef 	.word	0x3dea39ef
 800d588:	55555555 	.word	0x55555555
 800d58c:	3fd55555 	.word	0x3fd55555
 800d590:	df3e5244 	.word	0xdf3e5244
 800d594:	3fc2f112 	.word	0x3fc2f112
 800d598:	96cb03de 	.word	0x96cb03de
 800d59c:	3fc74664 	.word	0x3fc74664
 800d5a0:	94229359 	.word	0x94229359
 800d5a4:	3fd24924 	.word	0x3fd24924
 800d5a8:	55555593 	.word	0x55555593
 800d5ac:	3fe55555 	.word	0x3fe55555
 800d5b0:	d078c69f 	.word	0xd078c69f
 800d5b4:	3fc39a09 	.word	0x3fc39a09
 800d5b8:	1d8e78af 	.word	0x1d8e78af
 800d5bc:	3fcc71c5 	.word	0x3fcc71c5
 800d5c0:	9997fa04 	.word	0x9997fa04
 800d5c4:	3fd99999 	.word	0x3fd99999
	...
 800d5d0:	c3500000 	.word	0xc3500000
 800d5d4:	43500000 	.word	0x43500000
 800d5d8:	7fefffff 	.word	0x7fefffff
 800d5dc:	3ff00000 	.word	0x3ff00000
 800d5e0:	3fe00000 	.word	0x3fe00000
 800d5e4:	00000000 	.word	0x00000000

0800d5e8 <__ieee754_rem_pio2>:
 800d5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ec:	ed2d 8b02 	vpush	{d8}
 800d5f0:	ec55 4b10 	vmov	r4, r5, d0
 800d5f4:	4bca      	ldr	r3, [pc, #808]	; (800d920 <__ieee754_rem_pio2+0x338>)
 800d5f6:	b08b      	sub	sp, #44	; 0x2c
 800d5f8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d5fc:	4598      	cmp	r8, r3
 800d5fe:	4682      	mov	sl, r0
 800d600:	9502      	str	r5, [sp, #8]
 800d602:	dc08      	bgt.n	800d616 <__ieee754_rem_pio2+0x2e>
 800d604:	2200      	movs	r2, #0
 800d606:	2300      	movs	r3, #0
 800d608:	ed80 0b00 	vstr	d0, [r0]
 800d60c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d610:	f04f 0b00 	mov.w	fp, #0
 800d614:	e028      	b.n	800d668 <__ieee754_rem_pio2+0x80>
 800d616:	4bc3      	ldr	r3, [pc, #780]	; (800d924 <__ieee754_rem_pio2+0x33c>)
 800d618:	4598      	cmp	r8, r3
 800d61a:	dc78      	bgt.n	800d70e <__ieee754_rem_pio2+0x126>
 800d61c:	9b02      	ldr	r3, [sp, #8]
 800d61e:	4ec2      	ldr	r6, [pc, #776]	; (800d928 <__ieee754_rem_pio2+0x340>)
 800d620:	2b00      	cmp	r3, #0
 800d622:	ee10 0a10 	vmov	r0, s0
 800d626:	a3b0      	add	r3, pc, #704	; (adr r3, 800d8e8 <__ieee754_rem_pio2+0x300>)
 800d628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d62c:	4629      	mov	r1, r5
 800d62e:	dd39      	ble.n	800d6a4 <__ieee754_rem_pio2+0xbc>
 800d630:	f7f2 fe2a 	bl	8000288 <__aeabi_dsub>
 800d634:	45b0      	cmp	r8, r6
 800d636:	4604      	mov	r4, r0
 800d638:	460d      	mov	r5, r1
 800d63a:	d01b      	beq.n	800d674 <__ieee754_rem_pio2+0x8c>
 800d63c:	a3ac      	add	r3, pc, #688	; (adr r3, 800d8f0 <__ieee754_rem_pio2+0x308>)
 800d63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d642:	f7f2 fe21 	bl	8000288 <__aeabi_dsub>
 800d646:	4602      	mov	r2, r0
 800d648:	460b      	mov	r3, r1
 800d64a:	e9ca 2300 	strd	r2, r3, [sl]
 800d64e:	4620      	mov	r0, r4
 800d650:	4629      	mov	r1, r5
 800d652:	f7f2 fe19 	bl	8000288 <__aeabi_dsub>
 800d656:	a3a6      	add	r3, pc, #664	; (adr r3, 800d8f0 <__ieee754_rem_pio2+0x308>)
 800d658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d65c:	f7f2 fe14 	bl	8000288 <__aeabi_dsub>
 800d660:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d664:	f04f 0b01 	mov.w	fp, #1
 800d668:	4658      	mov	r0, fp
 800d66a:	b00b      	add	sp, #44	; 0x2c
 800d66c:	ecbd 8b02 	vpop	{d8}
 800d670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d674:	a3a0      	add	r3, pc, #640	; (adr r3, 800d8f8 <__ieee754_rem_pio2+0x310>)
 800d676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d67a:	f7f2 fe05 	bl	8000288 <__aeabi_dsub>
 800d67e:	a3a0      	add	r3, pc, #640	; (adr r3, 800d900 <__ieee754_rem_pio2+0x318>)
 800d680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d684:	4604      	mov	r4, r0
 800d686:	460d      	mov	r5, r1
 800d688:	f7f2 fdfe 	bl	8000288 <__aeabi_dsub>
 800d68c:	4602      	mov	r2, r0
 800d68e:	460b      	mov	r3, r1
 800d690:	e9ca 2300 	strd	r2, r3, [sl]
 800d694:	4620      	mov	r0, r4
 800d696:	4629      	mov	r1, r5
 800d698:	f7f2 fdf6 	bl	8000288 <__aeabi_dsub>
 800d69c:	a398      	add	r3, pc, #608	; (adr r3, 800d900 <__ieee754_rem_pio2+0x318>)
 800d69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a2:	e7db      	b.n	800d65c <__ieee754_rem_pio2+0x74>
 800d6a4:	f7f2 fdf2 	bl	800028c <__adddf3>
 800d6a8:	45b0      	cmp	r8, r6
 800d6aa:	4604      	mov	r4, r0
 800d6ac:	460d      	mov	r5, r1
 800d6ae:	d016      	beq.n	800d6de <__ieee754_rem_pio2+0xf6>
 800d6b0:	a38f      	add	r3, pc, #572	; (adr r3, 800d8f0 <__ieee754_rem_pio2+0x308>)
 800d6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b6:	f7f2 fde9 	bl	800028c <__adddf3>
 800d6ba:	4602      	mov	r2, r0
 800d6bc:	460b      	mov	r3, r1
 800d6be:	e9ca 2300 	strd	r2, r3, [sl]
 800d6c2:	4620      	mov	r0, r4
 800d6c4:	4629      	mov	r1, r5
 800d6c6:	f7f2 fddf 	bl	8000288 <__aeabi_dsub>
 800d6ca:	a389      	add	r3, pc, #548	; (adr r3, 800d8f0 <__ieee754_rem_pio2+0x308>)
 800d6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d0:	f7f2 fddc 	bl	800028c <__adddf3>
 800d6d4:	f04f 3bff 	mov.w	fp, #4294967295
 800d6d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d6dc:	e7c4      	b.n	800d668 <__ieee754_rem_pio2+0x80>
 800d6de:	a386      	add	r3, pc, #536	; (adr r3, 800d8f8 <__ieee754_rem_pio2+0x310>)
 800d6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e4:	f7f2 fdd2 	bl	800028c <__adddf3>
 800d6e8:	a385      	add	r3, pc, #532	; (adr r3, 800d900 <__ieee754_rem_pio2+0x318>)
 800d6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ee:	4604      	mov	r4, r0
 800d6f0:	460d      	mov	r5, r1
 800d6f2:	f7f2 fdcb 	bl	800028c <__adddf3>
 800d6f6:	4602      	mov	r2, r0
 800d6f8:	460b      	mov	r3, r1
 800d6fa:	e9ca 2300 	strd	r2, r3, [sl]
 800d6fe:	4620      	mov	r0, r4
 800d700:	4629      	mov	r1, r5
 800d702:	f7f2 fdc1 	bl	8000288 <__aeabi_dsub>
 800d706:	a37e      	add	r3, pc, #504	; (adr r3, 800d900 <__ieee754_rem_pio2+0x318>)
 800d708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d70c:	e7e0      	b.n	800d6d0 <__ieee754_rem_pio2+0xe8>
 800d70e:	4b87      	ldr	r3, [pc, #540]	; (800d92c <__ieee754_rem_pio2+0x344>)
 800d710:	4598      	cmp	r8, r3
 800d712:	f300 80d9 	bgt.w	800d8c8 <__ieee754_rem_pio2+0x2e0>
 800d716:	f000 fe4d 	bl	800e3b4 <fabs>
 800d71a:	ec55 4b10 	vmov	r4, r5, d0
 800d71e:	ee10 0a10 	vmov	r0, s0
 800d722:	a379      	add	r3, pc, #484	; (adr r3, 800d908 <__ieee754_rem_pio2+0x320>)
 800d724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d728:	4629      	mov	r1, r5
 800d72a:	f7f2 ff65 	bl	80005f8 <__aeabi_dmul>
 800d72e:	4b80      	ldr	r3, [pc, #512]	; (800d930 <__ieee754_rem_pio2+0x348>)
 800d730:	2200      	movs	r2, #0
 800d732:	f7f2 fdab 	bl	800028c <__adddf3>
 800d736:	f7f3 fa0f 	bl	8000b58 <__aeabi_d2iz>
 800d73a:	4683      	mov	fp, r0
 800d73c:	f7f2 fef2 	bl	8000524 <__aeabi_i2d>
 800d740:	4602      	mov	r2, r0
 800d742:	460b      	mov	r3, r1
 800d744:	ec43 2b18 	vmov	d8, r2, r3
 800d748:	a367      	add	r3, pc, #412	; (adr r3, 800d8e8 <__ieee754_rem_pio2+0x300>)
 800d74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d74e:	f7f2 ff53 	bl	80005f8 <__aeabi_dmul>
 800d752:	4602      	mov	r2, r0
 800d754:	460b      	mov	r3, r1
 800d756:	4620      	mov	r0, r4
 800d758:	4629      	mov	r1, r5
 800d75a:	f7f2 fd95 	bl	8000288 <__aeabi_dsub>
 800d75e:	a364      	add	r3, pc, #400	; (adr r3, 800d8f0 <__ieee754_rem_pio2+0x308>)
 800d760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d764:	4606      	mov	r6, r0
 800d766:	460f      	mov	r7, r1
 800d768:	ec51 0b18 	vmov	r0, r1, d8
 800d76c:	f7f2 ff44 	bl	80005f8 <__aeabi_dmul>
 800d770:	f1bb 0f1f 	cmp.w	fp, #31
 800d774:	4604      	mov	r4, r0
 800d776:	460d      	mov	r5, r1
 800d778:	dc0d      	bgt.n	800d796 <__ieee754_rem_pio2+0x1ae>
 800d77a:	4b6e      	ldr	r3, [pc, #440]	; (800d934 <__ieee754_rem_pio2+0x34c>)
 800d77c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800d780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d784:	4543      	cmp	r3, r8
 800d786:	d006      	beq.n	800d796 <__ieee754_rem_pio2+0x1ae>
 800d788:	4622      	mov	r2, r4
 800d78a:	462b      	mov	r3, r5
 800d78c:	4630      	mov	r0, r6
 800d78e:	4639      	mov	r1, r7
 800d790:	f7f2 fd7a 	bl	8000288 <__aeabi_dsub>
 800d794:	e00f      	b.n	800d7b6 <__ieee754_rem_pio2+0x1ce>
 800d796:	462b      	mov	r3, r5
 800d798:	4622      	mov	r2, r4
 800d79a:	4630      	mov	r0, r6
 800d79c:	4639      	mov	r1, r7
 800d79e:	f7f2 fd73 	bl	8000288 <__aeabi_dsub>
 800d7a2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d7a6:	9303      	str	r3, [sp, #12]
 800d7a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d7ac:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800d7b0:	f1b8 0f10 	cmp.w	r8, #16
 800d7b4:	dc02      	bgt.n	800d7bc <__ieee754_rem_pio2+0x1d4>
 800d7b6:	e9ca 0100 	strd	r0, r1, [sl]
 800d7ba:	e039      	b.n	800d830 <__ieee754_rem_pio2+0x248>
 800d7bc:	a34e      	add	r3, pc, #312	; (adr r3, 800d8f8 <__ieee754_rem_pio2+0x310>)
 800d7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c2:	ec51 0b18 	vmov	r0, r1, d8
 800d7c6:	f7f2 ff17 	bl	80005f8 <__aeabi_dmul>
 800d7ca:	4604      	mov	r4, r0
 800d7cc:	460d      	mov	r5, r1
 800d7ce:	4602      	mov	r2, r0
 800d7d0:	460b      	mov	r3, r1
 800d7d2:	4630      	mov	r0, r6
 800d7d4:	4639      	mov	r1, r7
 800d7d6:	f7f2 fd57 	bl	8000288 <__aeabi_dsub>
 800d7da:	4602      	mov	r2, r0
 800d7dc:	460b      	mov	r3, r1
 800d7de:	4680      	mov	r8, r0
 800d7e0:	4689      	mov	r9, r1
 800d7e2:	4630      	mov	r0, r6
 800d7e4:	4639      	mov	r1, r7
 800d7e6:	f7f2 fd4f 	bl	8000288 <__aeabi_dsub>
 800d7ea:	4622      	mov	r2, r4
 800d7ec:	462b      	mov	r3, r5
 800d7ee:	f7f2 fd4b 	bl	8000288 <__aeabi_dsub>
 800d7f2:	a343      	add	r3, pc, #268	; (adr r3, 800d900 <__ieee754_rem_pio2+0x318>)
 800d7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f8:	4604      	mov	r4, r0
 800d7fa:	460d      	mov	r5, r1
 800d7fc:	ec51 0b18 	vmov	r0, r1, d8
 800d800:	f7f2 fefa 	bl	80005f8 <__aeabi_dmul>
 800d804:	4622      	mov	r2, r4
 800d806:	462b      	mov	r3, r5
 800d808:	f7f2 fd3e 	bl	8000288 <__aeabi_dsub>
 800d80c:	4602      	mov	r2, r0
 800d80e:	460b      	mov	r3, r1
 800d810:	4604      	mov	r4, r0
 800d812:	460d      	mov	r5, r1
 800d814:	4640      	mov	r0, r8
 800d816:	4649      	mov	r1, r9
 800d818:	f7f2 fd36 	bl	8000288 <__aeabi_dsub>
 800d81c:	9a03      	ldr	r2, [sp, #12]
 800d81e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d822:	1ad3      	subs	r3, r2, r3
 800d824:	2b31      	cmp	r3, #49	; 0x31
 800d826:	dc24      	bgt.n	800d872 <__ieee754_rem_pio2+0x28a>
 800d828:	e9ca 0100 	strd	r0, r1, [sl]
 800d82c:	4646      	mov	r6, r8
 800d82e:	464f      	mov	r7, r9
 800d830:	e9da 8900 	ldrd	r8, r9, [sl]
 800d834:	4630      	mov	r0, r6
 800d836:	4642      	mov	r2, r8
 800d838:	464b      	mov	r3, r9
 800d83a:	4639      	mov	r1, r7
 800d83c:	f7f2 fd24 	bl	8000288 <__aeabi_dsub>
 800d840:	462b      	mov	r3, r5
 800d842:	4622      	mov	r2, r4
 800d844:	f7f2 fd20 	bl	8000288 <__aeabi_dsub>
 800d848:	9b02      	ldr	r3, [sp, #8]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d850:	f6bf af0a 	bge.w	800d668 <__ieee754_rem_pio2+0x80>
 800d854:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d858:	f8ca 3004 	str.w	r3, [sl, #4]
 800d85c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d860:	f8ca 8000 	str.w	r8, [sl]
 800d864:	f8ca 0008 	str.w	r0, [sl, #8]
 800d868:	f8ca 300c 	str.w	r3, [sl, #12]
 800d86c:	f1cb 0b00 	rsb	fp, fp, #0
 800d870:	e6fa      	b.n	800d668 <__ieee754_rem_pio2+0x80>
 800d872:	a327      	add	r3, pc, #156	; (adr r3, 800d910 <__ieee754_rem_pio2+0x328>)
 800d874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d878:	ec51 0b18 	vmov	r0, r1, d8
 800d87c:	f7f2 febc 	bl	80005f8 <__aeabi_dmul>
 800d880:	4604      	mov	r4, r0
 800d882:	460d      	mov	r5, r1
 800d884:	4602      	mov	r2, r0
 800d886:	460b      	mov	r3, r1
 800d888:	4640      	mov	r0, r8
 800d88a:	4649      	mov	r1, r9
 800d88c:	f7f2 fcfc 	bl	8000288 <__aeabi_dsub>
 800d890:	4602      	mov	r2, r0
 800d892:	460b      	mov	r3, r1
 800d894:	4606      	mov	r6, r0
 800d896:	460f      	mov	r7, r1
 800d898:	4640      	mov	r0, r8
 800d89a:	4649      	mov	r1, r9
 800d89c:	f7f2 fcf4 	bl	8000288 <__aeabi_dsub>
 800d8a0:	4622      	mov	r2, r4
 800d8a2:	462b      	mov	r3, r5
 800d8a4:	f7f2 fcf0 	bl	8000288 <__aeabi_dsub>
 800d8a8:	a31b      	add	r3, pc, #108	; (adr r3, 800d918 <__ieee754_rem_pio2+0x330>)
 800d8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ae:	4604      	mov	r4, r0
 800d8b0:	460d      	mov	r5, r1
 800d8b2:	ec51 0b18 	vmov	r0, r1, d8
 800d8b6:	f7f2 fe9f 	bl	80005f8 <__aeabi_dmul>
 800d8ba:	4622      	mov	r2, r4
 800d8bc:	462b      	mov	r3, r5
 800d8be:	f7f2 fce3 	bl	8000288 <__aeabi_dsub>
 800d8c2:	4604      	mov	r4, r0
 800d8c4:	460d      	mov	r5, r1
 800d8c6:	e75f      	b.n	800d788 <__ieee754_rem_pio2+0x1a0>
 800d8c8:	4b1b      	ldr	r3, [pc, #108]	; (800d938 <__ieee754_rem_pio2+0x350>)
 800d8ca:	4598      	cmp	r8, r3
 800d8cc:	dd36      	ble.n	800d93c <__ieee754_rem_pio2+0x354>
 800d8ce:	ee10 2a10 	vmov	r2, s0
 800d8d2:	462b      	mov	r3, r5
 800d8d4:	4620      	mov	r0, r4
 800d8d6:	4629      	mov	r1, r5
 800d8d8:	f7f2 fcd6 	bl	8000288 <__aeabi_dsub>
 800d8dc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d8e0:	e9ca 0100 	strd	r0, r1, [sl]
 800d8e4:	e694      	b.n	800d610 <__ieee754_rem_pio2+0x28>
 800d8e6:	bf00      	nop
 800d8e8:	54400000 	.word	0x54400000
 800d8ec:	3ff921fb 	.word	0x3ff921fb
 800d8f0:	1a626331 	.word	0x1a626331
 800d8f4:	3dd0b461 	.word	0x3dd0b461
 800d8f8:	1a600000 	.word	0x1a600000
 800d8fc:	3dd0b461 	.word	0x3dd0b461
 800d900:	2e037073 	.word	0x2e037073
 800d904:	3ba3198a 	.word	0x3ba3198a
 800d908:	6dc9c883 	.word	0x6dc9c883
 800d90c:	3fe45f30 	.word	0x3fe45f30
 800d910:	2e000000 	.word	0x2e000000
 800d914:	3ba3198a 	.word	0x3ba3198a
 800d918:	252049c1 	.word	0x252049c1
 800d91c:	397b839a 	.word	0x397b839a
 800d920:	3fe921fb 	.word	0x3fe921fb
 800d924:	4002d97b 	.word	0x4002d97b
 800d928:	3ff921fb 	.word	0x3ff921fb
 800d92c:	413921fb 	.word	0x413921fb
 800d930:	3fe00000 	.word	0x3fe00000
 800d934:	08026fcc 	.word	0x08026fcc
 800d938:	7fefffff 	.word	0x7fefffff
 800d93c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800d940:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800d944:	ee10 0a10 	vmov	r0, s0
 800d948:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800d94c:	ee10 6a10 	vmov	r6, s0
 800d950:	460f      	mov	r7, r1
 800d952:	f7f3 f901 	bl	8000b58 <__aeabi_d2iz>
 800d956:	f7f2 fde5 	bl	8000524 <__aeabi_i2d>
 800d95a:	4602      	mov	r2, r0
 800d95c:	460b      	mov	r3, r1
 800d95e:	4630      	mov	r0, r6
 800d960:	4639      	mov	r1, r7
 800d962:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d966:	f7f2 fc8f 	bl	8000288 <__aeabi_dsub>
 800d96a:	4b23      	ldr	r3, [pc, #140]	; (800d9f8 <__ieee754_rem_pio2+0x410>)
 800d96c:	2200      	movs	r2, #0
 800d96e:	f7f2 fe43 	bl	80005f8 <__aeabi_dmul>
 800d972:	460f      	mov	r7, r1
 800d974:	4606      	mov	r6, r0
 800d976:	f7f3 f8ef 	bl	8000b58 <__aeabi_d2iz>
 800d97a:	f7f2 fdd3 	bl	8000524 <__aeabi_i2d>
 800d97e:	4602      	mov	r2, r0
 800d980:	460b      	mov	r3, r1
 800d982:	4630      	mov	r0, r6
 800d984:	4639      	mov	r1, r7
 800d986:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d98a:	f7f2 fc7d 	bl	8000288 <__aeabi_dsub>
 800d98e:	4b1a      	ldr	r3, [pc, #104]	; (800d9f8 <__ieee754_rem_pio2+0x410>)
 800d990:	2200      	movs	r2, #0
 800d992:	f7f2 fe31 	bl	80005f8 <__aeabi_dmul>
 800d996:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d99a:	ad04      	add	r5, sp, #16
 800d99c:	f04f 0803 	mov.w	r8, #3
 800d9a0:	46a9      	mov	r9, r5
 800d9a2:	2600      	movs	r6, #0
 800d9a4:	2700      	movs	r7, #0
 800d9a6:	4632      	mov	r2, r6
 800d9a8:	463b      	mov	r3, r7
 800d9aa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800d9ae:	46c3      	mov	fp, r8
 800d9b0:	3d08      	subs	r5, #8
 800d9b2:	f108 38ff 	add.w	r8, r8, #4294967295
 800d9b6:	f7f3 f887 	bl	8000ac8 <__aeabi_dcmpeq>
 800d9ba:	2800      	cmp	r0, #0
 800d9bc:	d1f3      	bne.n	800d9a6 <__ieee754_rem_pio2+0x3be>
 800d9be:	4b0f      	ldr	r3, [pc, #60]	; (800d9fc <__ieee754_rem_pio2+0x414>)
 800d9c0:	9301      	str	r3, [sp, #4]
 800d9c2:	2302      	movs	r3, #2
 800d9c4:	9300      	str	r3, [sp, #0]
 800d9c6:	4622      	mov	r2, r4
 800d9c8:	465b      	mov	r3, fp
 800d9ca:	4651      	mov	r1, sl
 800d9cc:	4648      	mov	r0, r9
 800d9ce:	f000 f8e3 	bl	800db98 <__kernel_rem_pio2>
 800d9d2:	9b02      	ldr	r3, [sp, #8]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	4683      	mov	fp, r0
 800d9d8:	f6bf ae46 	bge.w	800d668 <__ieee754_rem_pio2+0x80>
 800d9dc:	e9da 2100 	ldrd	r2, r1, [sl]
 800d9e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d9e4:	e9ca 2300 	strd	r2, r3, [sl]
 800d9e8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800d9ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d9f0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800d9f4:	e73a      	b.n	800d86c <__ieee754_rem_pio2+0x284>
 800d9f6:	bf00      	nop
 800d9f8:	41700000 	.word	0x41700000
 800d9fc:	0802704c 	.word	0x0802704c

0800da00 <__ieee754_sqrtf>:
 800da00:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800da04:	4770      	bx	lr
	...

0800da08 <__kernel_cos>:
 800da08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da0c:	ec57 6b10 	vmov	r6, r7, d0
 800da10:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800da14:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800da18:	ed8d 1b00 	vstr	d1, [sp]
 800da1c:	da07      	bge.n	800da2e <__kernel_cos+0x26>
 800da1e:	ee10 0a10 	vmov	r0, s0
 800da22:	4639      	mov	r1, r7
 800da24:	f7f3 f898 	bl	8000b58 <__aeabi_d2iz>
 800da28:	2800      	cmp	r0, #0
 800da2a:	f000 8088 	beq.w	800db3e <__kernel_cos+0x136>
 800da2e:	4632      	mov	r2, r6
 800da30:	463b      	mov	r3, r7
 800da32:	4630      	mov	r0, r6
 800da34:	4639      	mov	r1, r7
 800da36:	f7f2 fddf 	bl	80005f8 <__aeabi_dmul>
 800da3a:	4b51      	ldr	r3, [pc, #324]	; (800db80 <__kernel_cos+0x178>)
 800da3c:	2200      	movs	r2, #0
 800da3e:	4604      	mov	r4, r0
 800da40:	460d      	mov	r5, r1
 800da42:	f7f2 fdd9 	bl	80005f8 <__aeabi_dmul>
 800da46:	a340      	add	r3, pc, #256	; (adr r3, 800db48 <__kernel_cos+0x140>)
 800da48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da4c:	4682      	mov	sl, r0
 800da4e:	468b      	mov	fp, r1
 800da50:	4620      	mov	r0, r4
 800da52:	4629      	mov	r1, r5
 800da54:	f7f2 fdd0 	bl	80005f8 <__aeabi_dmul>
 800da58:	a33d      	add	r3, pc, #244	; (adr r3, 800db50 <__kernel_cos+0x148>)
 800da5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da5e:	f7f2 fc15 	bl	800028c <__adddf3>
 800da62:	4622      	mov	r2, r4
 800da64:	462b      	mov	r3, r5
 800da66:	f7f2 fdc7 	bl	80005f8 <__aeabi_dmul>
 800da6a:	a33b      	add	r3, pc, #236	; (adr r3, 800db58 <__kernel_cos+0x150>)
 800da6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da70:	f7f2 fc0a 	bl	8000288 <__aeabi_dsub>
 800da74:	4622      	mov	r2, r4
 800da76:	462b      	mov	r3, r5
 800da78:	f7f2 fdbe 	bl	80005f8 <__aeabi_dmul>
 800da7c:	a338      	add	r3, pc, #224	; (adr r3, 800db60 <__kernel_cos+0x158>)
 800da7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da82:	f7f2 fc03 	bl	800028c <__adddf3>
 800da86:	4622      	mov	r2, r4
 800da88:	462b      	mov	r3, r5
 800da8a:	f7f2 fdb5 	bl	80005f8 <__aeabi_dmul>
 800da8e:	a336      	add	r3, pc, #216	; (adr r3, 800db68 <__kernel_cos+0x160>)
 800da90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da94:	f7f2 fbf8 	bl	8000288 <__aeabi_dsub>
 800da98:	4622      	mov	r2, r4
 800da9a:	462b      	mov	r3, r5
 800da9c:	f7f2 fdac 	bl	80005f8 <__aeabi_dmul>
 800daa0:	a333      	add	r3, pc, #204	; (adr r3, 800db70 <__kernel_cos+0x168>)
 800daa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa6:	f7f2 fbf1 	bl	800028c <__adddf3>
 800daaa:	4622      	mov	r2, r4
 800daac:	462b      	mov	r3, r5
 800daae:	f7f2 fda3 	bl	80005f8 <__aeabi_dmul>
 800dab2:	4622      	mov	r2, r4
 800dab4:	462b      	mov	r3, r5
 800dab6:	f7f2 fd9f 	bl	80005f8 <__aeabi_dmul>
 800daba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dabe:	4604      	mov	r4, r0
 800dac0:	460d      	mov	r5, r1
 800dac2:	4630      	mov	r0, r6
 800dac4:	4639      	mov	r1, r7
 800dac6:	f7f2 fd97 	bl	80005f8 <__aeabi_dmul>
 800daca:	460b      	mov	r3, r1
 800dacc:	4602      	mov	r2, r0
 800dace:	4629      	mov	r1, r5
 800dad0:	4620      	mov	r0, r4
 800dad2:	f7f2 fbd9 	bl	8000288 <__aeabi_dsub>
 800dad6:	4b2b      	ldr	r3, [pc, #172]	; (800db84 <__kernel_cos+0x17c>)
 800dad8:	4598      	cmp	r8, r3
 800dada:	4606      	mov	r6, r0
 800dadc:	460f      	mov	r7, r1
 800dade:	dc10      	bgt.n	800db02 <__kernel_cos+0xfa>
 800dae0:	4602      	mov	r2, r0
 800dae2:	460b      	mov	r3, r1
 800dae4:	4650      	mov	r0, sl
 800dae6:	4659      	mov	r1, fp
 800dae8:	f7f2 fbce 	bl	8000288 <__aeabi_dsub>
 800daec:	460b      	mov	r3, r1
 800daee:	4926      	ldr	r1, [pc, #152]	; (800db88 <__kernel_cos+0x180>)
 800daf0:	4602      	mov	r2, r0
 800daf2:	2000      	movs	r0, #0
 800daf4:	f7f2 fbc8 	bl	8000288 <__aeabi_dsub>
 800daf8:	ec41 0b10 	vmov	d0, r0, r1
 800dafc:	b003      	add	sp, #12
 800dafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db02:	4b22      	ldr	r3, [pc, #136]	; (800db8c <__kernel_cos+0x184>)
 800db04:	4920      	ldr	r1, [pc, #128]	; (800db88 <__kernel_cos+0x180>)
 800db06:	4598      	cmp	r8, r3
 800db08:	bfcc      	ite	gt
 800db0a:	4d21      	ldrgt	r5, [pc, #132]	; (800db90 <__kernel_cos+0x188>)
 800db0c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800db10:	2400      	movs	r4, #0
 800db12:	4622      	mov	r2, r4
 800db14:	462b      	mov	r3, r5
 800db16:	2000      	movs	r0, #0
 800db18:	f7f2 fbb6 	bl	8000288 <__aeabi_dsub>
 800db1c:	4622      	mov	r2, r4
 800db1e:	4680      	mov	r8, r0
 800db20:	4689      	mov	r9, r1
 800db22:	462b      	mov	r3, r5
 800db24:	4650      	mov	r0, sl
 800db26:	4659      	mov	r1, fp
 800db28:	f7f2 fbae 	bl	8000288 <__aeabi_dsub>
 800db2c:	4632      	mov	r2, r6
 800db2e:	463b      	mov	r3, r7
 800db30:	f7f2 fbaa 	bl	8000288 <__aeabi_dsub>
 800db34:	4602      	mov	r2, r0
 800db36:	460b      	mov	r3, r1
 800db38:	4640      	mov	r0, r8
 800db3a:	4649      	mov	r1, r9
 800db3c:	e7da      	b.n	800daf4 <__kernel_cos+0xec>
 800db3e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800db78 <__kernel_cos+0x170>
 800db42:	e7db      	b.n	800dafc <__kernel_cos+0xf4>
 800db44:	f3af 8000 	nop.w
 800db48:	be8838d4 	.word	0xbe8838d4
 800db4c:	bda8fae9 	.word	0xbda8fae9
 800db50:	bdb4b1c4 	.word	0xbdb4b1c4
 800db54:	3e21ee9e 	.word	0x3e21ee9e
 800db58:	809c52ad 	.word	0x809c52ad
 800db5c:	3e927e4f 	.word	0x3e927e4f
 800db60:	19cb1590 	.word	0x19cb1590
 800db64:	3efa01a0 	.word	0x3efa01a0
 800db68:	16c15177 	.word	0x16c15177
 800db6c:	3f56c16c 	.word	0x3f56c16c
 800db70:	5555554c 	.word	0x5555554c
 800db74:	3fa55555 	.word	0x3fa55555
 800db78:	00000000 	.word	0x00000000
 800db7c:	3ff00000 	.word	0x3ff00000
 800db80:	3fe00000 	.word	0x3fe00000
 800db84:	3fd33332 	.word	0x3fd33332
 800db88:	3ff00000 	.word	0x3ff00000
 800db8c:	3fe90000 	.word	0x3fe90000
 800db90:	3fd20000 	.word	0x3fd20000
 800db94:	00000000 	.word	0x00000000

0800db98 <__kernel_rem_pio2>:
 800db98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db9c:	ed2d 8b02 	vpush	{d8}
 800dba0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800dba4:	f112 0f14 	cmn.w	r2, #20
 800dba8:	9308      	str	r3, [sp, #32]
 800dbaa:	9101      	str	r1, [sp, #4]
 800dbac:	4bc4      	ldr	r3, [pc, #784]	; (800dec0 <__kernel_rem_pio2+0x328>)
 800dbae:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800dbb0:	900b      	str	r0, [sp, #44]	; 0x2c
 800dbb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dbb6:	9302      	str	r3, [sp, #8]
 800dbb8:	9b08      	ldr	r3, [sp, #32]
 800dbba:	f103 33ff 	add.w	r3, r3, #4294967295
 800dbbe:	bfa8      	it	ge
 800dbc0:	1ed4      	subge	r4, r2, #3
 800dbc2:	9306      	str	r3, [sp, #24]
 800dbc4:	bfb2      	itee	lt
 800dbc6:	2400      	movlt	r4, #0
 800dbc8:	2318      	movge	r3, #24
 800dbca:	fb94 f4f3 	sdivge	r4, r4, r3
 800dbce:	f06f 0317 	mvn.w	r3, #23
 800dbd2:	fb04 3303 	mla	r3, r4, r3, r3
 800dbd6:	eb03 0a02 	add.w	sl, r3, r2
 800dbda:	9b02      	ldr	r3, [sp, #8]
 800dbdc:	9a06      	ldr	r2, [sp, #24]
 800dbde:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800deb0 <__kernel_rem_pio2+0x318>
 800dbe2:	eb03 0802 	add.w	r8, r3, r2
 800dbe6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800dbe8:	1aa7      	subs	r7, r4, r2
 800dbea:	ae22      	add	r6, sp, #136	; 0x88
 800dbec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800dbf0:	2500      	movs	r5, #0
 800dbf2:	4545      	cmp	r5, r8
 800dbf4:	dd13      	ble.n	800dc1e <__kernel_rem_pio2+0x86>
 800dbf6:	9b08      	ldr	r3, [sp, #32]
 800dbf8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800deb0 <__kernel_rem_pio2+0x318>
 800dbfc:	aa22      	add	r2, sp, #136	; 0x88
 800dbfe:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800dc02:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800dc06:	f04f 0800 	mov.w	r8, #0
 800dc0a:	9b02      	ldr	r3, [sp, #8]
 800dc0c:	4598      	cmp	r8, r3
 800dc0e:	dc2f      	bgt.n	800dc70 <__kernel_rem_pio2+0xd8>
 800dc10:	ed8d 8b04 	vstr	d8, [sp, #16]
 800dc14:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800dc18:	462f      	mov	r7, r5
 800dc1a:	2600      	movs	r6, #0
 800dc1c:	e01b      	b.n	800dc56 <__kernel_rem_pio2+0xbe>
 800dc1e:	42ef      	cmn	r7, r5
 800dc20:	d407      	bmi.n	800dc32 <__kernel_rem_pio2+0x9a>
 800dc22:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800dc26:	f7f2 fc7d 	bl	8000524 <__aeabi_i2d>
 800dc2a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800dc2e:	3501      	adds	r5, #1
 800dc30:	e7df      	b.n	800dbf2 <__kernel_rem_pio2+0x5a>
 800dc32:	ec51 0b18 	vmov	r0, r1, d8
 800dc36:	e7f8      	b.n	800dc2a <__kernel_rem_pio2+0x92>
 800dc38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc3c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800dc40:	f7f2 fcda 	bl	80005f8 <__aeabi_dmul>
 800dc44:	4602      	mov	r2, r0
 800dc46:	460b      	mov	r3, r1
 800dc48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dc4c:	f7f2 fb1e 	bl	800028c <__adddf3>
 800dc50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dc54:	3601      	adds	r6, #1
 800dc56:	9b06      	ldr	r3, [sp, #24]
 800dc58:	429e      	cmp	r6, r3
 800dc5a:	f1a7 0708 	sub.w	r7, r7, #8
 800dc5e:	ddeb      	ble.n	800dc38 <__kernel_rem_pio2+0xa0>
 800dc60:	ed9d 7b04 	vldr	d7, [sp, #16]
 800dc64:	f108 0801 	add.w	r8, r8, #1
 800dc68:	ecab 7b02 	vstmia	fp!, {d7}
 800dc6c:	3508      	adds	r5, #8
 800dc6e:	e7cc      	b.n	800dc0a <__kernel_rem_pio2+0x72>
 800dc70:	9b02      	ldr	r3, [sp, #8]
 800dc72:	aa0e      	add	r2, sp, #56	; 0x38
 800dc74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dc78:	930d      	str	r3, [sp, #52]	; 0x34
 800dc7a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800dc7c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800dc80:	9c02      	ldr	r4, [sp, #8]
 800dc82:	930c      	str	r3, [sp, #48]	; 0x30
 800dc84:	00e3      	lsls	r3, r4, #3
 800dc86:	930a      	str	r3, [sp, #40]	; 0x28
 800dc88:	ab9a      	add	r3, sp, #616	; 0x268
 800dc8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dc8e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800dc92:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800dc96:	ab72      	add	r3, sp, #456	; 0x1c8
 800dc98:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800dc9c:	46c3      	mov	fp, r8
 800dc9e:	46a1      	mov	r9, r4
 800dca0:	f1b9 0f00 	cmp.w	r9, #0
 800dca4:	f1a5 0508 	sub.w	r5, r5, #8
 800dca8:	dc77      	bgt.n	800dd9a <__kernel_rem_pio2+0x202>
 800dcaa:	ec47 6b10 	vmov	d0, r6, r7
 800dcae:	4650      	mov	r0, sl
 800dcb0:	f000 fc12 	bl	800e4d8 <scalbn>
 800dcb4:	ec57 6b10 	vmov	r6, r7, d0
 800dcb8:	2200      	movs	r2, #0
 800dcba:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800dcbe:	ee10 0a10 	vmov	r0, s0
 800dcc2:	4639      	mov	r1, r7
 800dcc4:	f7f2 fc98 	bl	80005f8 <__aeabi_dmul>
 800dcc8:	ec41 0b10 	vmov	d0, r0, r1
 800dccc:	f000 fb7c 	bl	800e3c8 <floor>
 800dcd0:	4b7c      	ldr	r3, [pc, #496]	; (800dec4 <__kernel_rem_pio2+0x32c>)
 800dcd2:	ec51 0b10 	vmov	r0, r1, d0
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	f7f2 fc8e 	bl	80005f8 <__aeabi_dmul>
 800dcdc:	4602      	mov	r2, r0
 800dcde:	460b      	mov	r3, r1
 800dce0:	4630      	mov	r0, r6
 800dce2:	4639      	mov	r1, r7
 800dce4:	f7f2 fad0 	bl	8000288 <__aeabi_dsub>
 800dce8:	460f      	mov	r7, r1
 800dcea:	4606      	mov	r6, r0
 800dcec:	f7f2 ff34 	bl	8000b58 <__aeabi_d2iz>
 800dcf0:	9004      	str	r0, [sp, #16]
 800dcf2:	f7f2 fc17 	bl	8000524 <__aeabi_i2d>
 800dcf6:	4602      	mov	r2, r0
 800dcf8:	460b      	mov	r3, r1
 800dcfa:	4630      	mov	r0, r6
 800dcfc:	4639      	mov	r1, r7
 800dcfe:	f7f2 fac3 	bl	8000288 <__aeabi_dsub>
 800dd02:	f1ba 0f00 	cmp.w	sl, #0
 800dd06:	4606      	mov	r6, r0
 800dd08:	460f      	mov	r7, r1
 800dd0a:	dd6d      	ble.n	800dde8 <__kernel_rem_pio2+0x250>
 800dd0c:	1e62      	subs	r2, r4, #1
 800dd0e:	ab0e      	add	r3, sp, #56	; 0x38
 800dd10:	9d04      	ldr	r5, [sp, #16]
 800dd12:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800dd16:	f1ca 0118 	rsb	r1, sl, #24
 800dd1a:	fa40 f301 	asr.w	r3, r0, r1
 800dd1e:	441d      	add	r5, r3
 800dd20:	408b      	lsls	r3, r1
 800dd22:	1ac0      	subs	r0, r0, r3
 800dd24:	ab0e      	add	r3, sp, #56	; 0x38
 800dd26:	9504      	str	r5, [sp, #16]
 800dd28:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800dd2c:	f1ca 0317 	rsb	r3, sl, #23
 800dd30:	fa40 fb03 	asr.w	fp, r0, r3
 800dd34:	f1bb 0f00 	cmp.w	fp, #0
 800dd38:	dd65      	ble.n	800de06 <__kernel_rem_pio2+0x26e>
 800dd3a:	9b04      	ldr	r3, [sp, #16]
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	3301      	adds	r3, #1
 800dd40:	9304      	str	r3, [sp, #16]
 800dd42:	4615      	mov	r5, r2
 800dd44:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800dd48:	4294      	cmp	r4, r2
 800dd4a:	f300 809c 	bgt.w	800de86 <__kernel_rem_pio2+0x2ee>
 800dd4e:	f1ba 0f00 	cmp.w	sl, #0
 800dd52:	dd07      	ble.n	800dd64 <__kernel_rem_pio2+0x1cc>
 800dd54:	f1ba 0f01 	cmp.w	sl, #1
 800dd58:	f000 80c0 	beq.w	800dedc <__kernel_rem_pio2+0x344>
 800dd5c:	f1ba 0f02 	cmp.w	sl, #2
 800dd60:	f000 80c6 	beq.w	800def0 <__kernel_rem_pio2+0x358>
 800dd64:	f1bb 0f02 	cmp.w	fp, #2
 800dd68:	d14d      	bne.n	800de06 <__kernel_rem_pio2+0x26e>
 800dd6a:	4632      	mov	r2, r6
 800dd6c:	463b      	mov	r3, r7
 800dd6e:	4956      	ldr	r1, [pc, #344]	; (800dec8 <__kernel_rem_pio2+0x330>)
 800dd70:	2000      	movs	r0, #0
 800dd72:	f7f2 fa89 	bl	8000288 <__aeabi_dsub>
 800dd76:	4606      	mov	r6, r0
 800dd78:	460f      	mov	r7, r1
 800dd7a:	2d00      	cmp	r5, #0
 800dd7c:	d043      	beq.n	800de06 <__kernel_rem_pio2+0x26e>
 800dd7e:	4650      	mov	r0, sl
 800dd80:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800deb8 <__kernel_rem_pio2+0x320>
 800dd84:	f000 fba8 	bl	800e4d8 <scalbn>
 800dd88:	4630      	mov	r0, r6
 800dd8a:	4639      	mov	r1, r7
 800dd8c:	ec53 2b10 	vmov	r2, r3, d0
 800dd90:	f7f2 fa7a 	bl	8000288 <__aeabi_dsub>
 800dd94:	4606      	mov	r6, r0
 800dd96:	460f      	mov	r7, r1
 800dd98:	e035      	b.n	800de06 <__kernel_rem_pio2+0x26e>
 800dd9a:	4b4c      	ldr	r3, [pc, #304]	; (800decc <__kernel_rem_pio2+0x334>)
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	4630      	mov	r0, r6
 800dda0:	4639      	mov	r1, r7
 800dda2:	f7f2 fc29 	bl	80005f8 <__aeabi_dmul>
 800dda6:	f7f2 fed7 	bl	8000b58 <__aeabi_d2iz>
 800ddaa:	f7f2 fbbb 	bl	8000524 <__aeabi_i2d>
 800ddae:	4602      	mov	r2, r0
 800ddb0:	460b      	mov	r3, r1
 800ddb2:	ec43 2b18 	vmov	d8, r2, r3
 800ddb6:	4b46      	ldr	r3, [pc, #280]	; (800ded0 <__kernel_rem_pio2+0x338>)
 800ddb8:	2200      	movs	r2, #0
 800ddba:	f7f2 fc1d 	bl	80005f8 <__aeabi_dmul>
 800ddbe:	4602      	mov	r2, r0
 800ddc0:	460b      	mov	r3, r1
 800ddc2:	4630      	mov	r0, r6
 800ddc4:	4639      	mov	r1, r7
 800ddc6:	f7f2 fa5f 	bl	8000288 <__aeabi_dsub>
 800ddca:	f7f2 fec5 	bl	8000b58 <__aeabi_d2iz>
 800ddce:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ddd2:	f84b 0b04 	str.w	r0, [fp], #4
 800ddd6:	ec51 0b18 	vmov	r0, r1, d8
 800ddda:	f7f2 fa57 	bl	800028c <__adddf3>
 800ddde:	f109 39ff 	add.w	r9, r9, #4294967295
 800dde2:	4606      	mov	r6, r0
 800dde4:	460f      	mov	r7, r1
 800dde6:	e75b      	b.n	800dca0 <__kernel_rem_pio2+0x108>
 800dde8:	d106      	bne.n	800ddf8 <__kernel_rem_pio2+0x260>
 800ddea:	1e63      	subs	r3, r4, #1
 800ddec:	aa0e      	add	r2, sp, #56	; 0x38
 800ddee:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ddf2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800ddf6:	e79d      	b.n	800dd34 <__kernel_rem_pio2+0x19c>
 800ddf8:	4b36      	ldr	r3, [pc, #216]	; (800ded4 <__kernel_rem_pio2+0x33c>)
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	f7f2 fe82 	bl	8000b04 <__aeabi_dcmpge>
 800de00:	2800      	cmp	r0, #0
 800de02:	d13d      	bne.n	800de80 <__kernel_rem_pio2+0x2e8>
 800de04:	4683      	mov	fp, r0
 800de06:	2200      	movs	r2, #0
 800de08:	2300      	movs	r3, #0
 800de0a:	4630      	mov	r0, r6
 800de0c:	4639      	mov	r1, r7
 800de0e:	f7f2 fe5b 	bl	8000ac8 <__aeabi_dcmpeq>
 800de12:	2800      	cmp	r0, #0
 800de14:	f000 80c0 	beq.w	800df98 <__kernel_rem_pio2+0x400>
 800de18:	1e65      	subs	r5, r4, #1
 800de1a:	462b      	mov	r3, r5
 800de1c:	2200      	movs	r2, #0
 800de1e:	9902      	ldr	r1, [sp, #8]
 800de20:	428b      	cmp	r3, r1
 800de22:	da6c      	bge.n	800defe <__kernel_rem_pio2+0x366>
 800de24:	2a00      	cmp	r2, #0
 800de26:	f000 8089 	beq.w	800df3c <__kernel_rem_pio2+0x3a4>
 800de2a:	ab0e      	add	r3, sp, #56	; 0x38
 800de2c:	f1aa 0a18 	sub.w	sl, sl, #24
 800de30:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800de34:	2b00      	cmp	r3, #0
 800de36:	f000 80ad 	beq.w	800df94 <__kernel_rem_pio2+0x3fc>
 800de3a:	4650      	mov	r0, sl
 800de3c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800deb8 <__kernel_rem_pio2+0x320>
 800de40:	f000 fb4a 	bl	800e4d8 <scalbn>
 800de44:	ab9a      	add	r3, sp, #616	; 0x268
 800de46:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800de4a:	ec57 6b10 	vmov	r6, r7, d0
 800de4e:	00ec      	lsls	r4, r5, #3
 800de50:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800de54:	46aa      	mov	sl, r5
 800de56:	f1ba 0f00 	cmp.w	sl, #0
 800de5a:	f280 80d6 	bge.w	800e00a <__kernel_rem_pio2+0x472>
 800de5e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800deb0 <__kernel_rem_pio2+0x318>
 800de62:	462e      	mov	r6, r5
 800de64:	2e00      	cmp	r6, #0
 800de66:	f2c0 8104 	blt.w	800e072 <__kernel_rem_pio2+0x4da>
 800de6a:	ab72      	add	r3, sp, #456	; 0x1c8
 800de6c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800de70:	f8df a064 	ldr.w	sl, [pc, #100]	; 800ded8 <__kernel_rem_pio2+0x340>
 800de74:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800de78:	f04f 0800 	mov.w	r8, #0
 800de7c:	1baf      	subs	r7, r5, r6
 800de7e:	e0ea      	b.n	800e056 <__kernel_rem_pio2+0x4be>
 800de80:	f04f 0b02 	mov.w	fp, #2
 800de84:	e759      	b.n	800dd3a <__kernel_rem_pio2+0x1a2>
 800de86:	f8d8 3000 	ldr.w	r3, [r8]
 800de8a:	b955      	cbnz	r5, 800dea2 <__kernel_rem_pio2+0x30a>
 800de8c:	b123      	cbz	r3, 800de98 <__kernel_rem_pio2+0x300>
 800de8e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800de92:	f8c8 3000 	str.w	r3, [r8]
 800de96:	2301      	movs	r3, #1
 800de98:	3201      	adds	r2, #1
 800de9a:	f108 0804 	add.w	r8, r8, #4
 800de9e:	461d      	mov	r5, r3
 800dea0:	e752      	b.n	800dd48 <__kernel_rem_pio2+0x1b0>
 800dea2:	1acb      	subs	r3, r1, r3
 800dea4:	f8c8 3000 	str.w	r3, [r8]
 800dea8:	462b      	mov	r3, r5
 800deaa:	e7f5      	b.n	800de98 <__kernel_rem_pio2+0x300>
 800deac:	f3af 8000 	nop.w
	...
 800debc:	3ff00000 	.word	0x3ff00000
 800dec0:	08027198 	.word	0x08027198
 800dec4:	40200000 	.word	0x40200000
 800dec8:	3ff00000 	.word	0x3ff00000
 800decc:	3e700000 	.word	0x3e700000
 800ded0:	41700000 	.word	0x41700000
 800ded4:	3fe00000 	.word	0x3fe00000
 800ded8:	08027158 	.word	0x08027158
 800dedc:	1e62      	subs	r2, r4, #1
 800dede:	ab0e      	add	r3, sp, #56	; 0x38
 800dee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dee4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800dee8:	a90e      	add	r1, sp, #56	; 0x38
 800deea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800deee:	e739      	b.n	800dd64 <__kernel_rem_pio2+0x1cc>
 800def0:	1e62      	subs	r2, r4, #1
 800def2:	ab0e      	add	r3, sp, #56	; 0x38
 800def4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800def8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800defc:	e7f4      	b.n	800dee8 <__kernel_rem_pio2+0x350>
 800defe:	a90e      	add	r1, sp, #56	; 0x38
 800df00:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800df04:	3b01      	subs	r3, #1
 800df06:	430a      	orrs	r2, r1
 800df08:	e789      	b.n	800de1e <__kernel_rem_pio2+0x286>
 800df0a:	3301      	adds	r3, #1
 800df0c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800df10:	2900      	cmp	r1, #0
 800df12:	d0fa      	beq.n	800df0a <__kernel_rem_pio2+0x372>
 800df14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df16:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800df1a:	446a      	add	r2, sp
 800df1c:	3a98      	subs	r2, #152	; 0x98
 800df1e:	920a      	str	r2, [sp, #40]	; 0x28
 800df20:	9a08      	ldr	r2, [sp, #32]
 800df22:	18e3      	adds	r3, r4, r3
 800df24:	18a5      	adds	r5, r4, r2
 800df26:	aa22      	add	r2, sp, #136	; 0x88
 800df28:	f104 0801 	add.w	r8, r4, #1
 800df2c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800df30:	9304      	str	r3, [sp, #16]
 800df32:	9b04      	ldr	r3, [sp, #16]
 800df34:	4543      	cmp	r3, r8
 800df36:	da04      	bge.n	800df42 <__kernel_rem_pio2+0x3aa>
 800df38:	461c      	mov	r4, r3
 800df3a:	e6a3      	b.n	800dc84 <__kernel_rem_pio2+0xec>
 800df3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800df3e:	2301      	movs	r3, #1
 800df40:	e7e4      	b.n	800df0c <__kernel_rem_pio2+0x374>
 800df42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800df44:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800df48:	f7f2 faec 	bl	8000524 <__aeabi_i2d>
 800df4c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800df50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df52:	46ab      	mov	fp, r5
 800df54:	461c      	mov	r4, r3
 800df56:	f04f 0900 	mov.w	r9, #0
 800df5a:	2600      	movs	r6, #0
 800df5c:	2700      	movs	r7, #0
 800df5e:	9b06      	ldr	r3, [sp, #24]
 800df60:	4599      	cmp	r9, r3
 800df62:	dd06      	ble.n	800df72 <__kernel_rem_pio2+0x3da>
 800df64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df66:	e8e3 6702 	strd	r6, r7, [r3], #8
 800df6a:	f108 0801 	add.w	r8, r8, #1
 800df6e:	930a      	str	r3, [sp, #40]	; 0x28
 800df70:	e7df      	b.n	800df32 <__kernel_rem_pio2+0x39a>
 800df72:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800df76:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800df7a:	f7f2 fb3d 	bl	80005f8 <__aeabi_dmul>
 800df7e:	4602      	mov	r2, r0
 800df80:	460b      	mov	r3, r1
 800df82:	4630      	mov	r0, r6
 800df84:	4639      	mov	r1, r7
 800df86:	f7f2 f981 	bl	800028c <__adddf3>
 800df8a:	f109 0901 	add.w	r9, r9, #1
 800df8e:	4606      	mov	r6, r0
 800df90:	460f      	mov	r7, r1
 800df92:	e7e4      	b.n	800df5e <__kernel_rem_pio2+0x3c6>
 800df94:	3d01      	subs	r5, #1
 800df96:	e748      	b.n	800de2a <__kernel_rem_pio2+0x292>
 800df98:	ec47 6b10 	vmov	d0, r6, r7
 800df9c:	f1ca 0000 	rsb	r0, sl, #0
 800dfa0:	f000 fa9a 	bl	800e4d8 <scalbn>
 800dfa4:	ec57 6b10 	vmov	r6, r7, d0
 800dfa8:	4ba0      	ldr	r3, [pc, #640]	; (800e22c <__kernel_rem_pio2+0x694>)
 800dfaa:	ee10 0a10 	vmov	r0, s0
 800dfae:	2200      	movs	r2, #0
 800dfb0:	4639      	mov	r1, r7
 800dfb2:	f7f2 fda7 	bl	8000b04 <__aeabi_dcmpge>
 800dfb6:	b1f8      	cbz	r0, 800dff8 <__kernel_rem_pio2+0x460>
 800dfb8:	4b9d      	ldr	r3, [pc, #628]	; (800e230 <__kernel_rem_pio2+0x698>)
 800dfba:	2200      	movs	r2, #0
 800dfbc:	4630      	mov	r0, r6
 800dfbe:	4639      	mov	r1, r7
 800dfc0:	f7f2 fb1a 	bl	80005f8 <__aeabi_dmul>
 800dfc4:	f7f2 fdc8 	bl	8000b58 <__aeabi_d2iz>
 800dfc8:	4680      	mov	r8, r0
 800dfca:	f7f2 faab 	bl	8000524 <__aeabi_i2d>
 800dfce:	4b97      	ldr	r3, [pc, #604]	; (800e22c <__kernel_rem_pio2+0x694>)
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	f7f2 fb11 	bl	80005f8 <__aeabi_dmul>
 800dfd6:	460b      	mov	r3, r1
 800dfd8:	4602      	mov	r2, r0
 800dfda:	4639      	mov	r1, r7
 800dfdc:	4630      	mov	r0, r6
 800dfde:	f7f2 f953 	bl	8000288 <__aeabi_dsub>
 800dfe2:	f7f2 fdb9 	bl	8000b58 <__aeabi_d2iz>
 800dfe6:	1c65      	adds	r5, r4, #1
 800dfe8:	ab0e      	add	r3, sp, #56	; 0x38
 800dfea:	f10a 0a18 	add.w	sl, sl, #24
 800dfee:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800dff2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800dff6:	e720      	b.n	800de3a <__kernel_rem_pio2+0x2a2>
 800dff8:	4630      	mov	r0, r6
 800dffa:	4639      	mov	r1, r7
 800dffc:	f7f2 fdac 	bl	8000b58 <__aeabi_d2iz>
 800e000:	ab0e      	add	r3, sp, #56	; 0x38
 800e002:	4625      	mov	r5, r4
 800e004:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e008:	e717      	b.n	800de3a <__kernel_rem_pio2+0x2a2>
 800e00a:	ab0e      	add	r3, sp, #56	; 0x38
 800e00c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800e010:	f7f2 fa88 	bl	8000524 <__aeabi_i2d>
 800e014:	4632      	mov	r2, r6
 800e016:	463b      	mov	r3, r7
 800e018:	f7f2 faee 	bl	80005f8 <__aeabi_dmul>
 800e01c:	4b84      	ldr	r3, [pc, #528]	; (800e230 <__kernel_rem_pio2+0x698>)
 800e01e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800e022:	2200      	movs	r2, #0
 800e024:	4630      	mov	r0, r6
 800e026:	4639      	mov	r1, r7
 800e028:	f7f2 fae6 	bl	80005f8 <__aeabi_dmul>
 800e02c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e030:	4606      	mov	r6, r0
 800e032:	460f      	mov	r7, r1
 800e034:	e70f      	b.n	800de56 <__kernel_rem_pio2+0x2be>
 800e036:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800e03a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800e03e:	f7f2 fadb 	bl	80005f8 <__aeabi_dmul>
 800e042:	4602      	mov	r2, r0
 800e044:	460b      	mov	r3, r1
 800e046:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e04a:	f7f2 f91f 	bl	800028c <__adddf3>
 800e04e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e052:	f108 0801 	add.w	r8, r8, #1
 800e056:	9b02      	ldr	r3, [sp, #8]
 800e058:	4598      	cmp	r8, r3
 800e05a:	dc01      	bgt.n	800e060 <__kernel_rem_pio2+0x4c8>
 800e05c:	45b8      	cmp	r8, r7
 800e05e:	ddea      	ble.n	800e036 <__kernel_rem_pio2+0x49e>
 800e060:	ed9d 7b06 	vldr	d7, [sp, #24]
 800e064:	ab4a      	add	r3, sp, #296	; 0x128
 800e066:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e06a:	ed87 7b00 	vstr	d7, [r7]
 800e06e:	3e01      	subs	r6, #1
 800e070:	e6f8      	b.n	800de64 <__kernel_rem_pio2+0x2cc>
 800e072:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e074:	2b02      	cmp	r3, #2
 800e076:	dc0b      	bgt.n	800e090 <__kernel_rem_pio2+0x4f8>
 800e078:	2b00      	cmp	r3, #0
 800e07a:	dc35      	bgt.n	800e0e8 <__kernel_rem_pio2+0x550>
 800e07c:	d059      	beq.n	800e132 <__kernel_rem_pio2+0x59a>
 800e07e:	9b04      	ldr	r3, [sp, #16]
 800e080:	f003 0007 	and.w	r0, r3, #7
 800e084:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800e088:	ecbd 8b02 	vpop	{d8}
 800e08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e090:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e092:	2b03      	cmp	r3, #3
 800e094:	d1f3      	bne.n	800e07e <__kernel_rem_pio2+0x4e6>
 800e096:	ab4a      	add	r3, sp, #296	; 0x128
 800e098:	4423      	add	r3, r4
 800e09a:	9306      	str	r3, [sp, #24]
 800e09c:	461c      	mov	r4, r3
 800e09e:	469a      	mov	sl, r3
 800e0a0:	9502      	str	r5, [sp, #8]
 800e0a2:	9b02      	ldr	r3, [sp, #8]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	f1aa 0a08 	sub.w	sl, sl, #8
 800e0aa:	dc6b      	bgt.n	800e184 <__kernel_rem_pio2+0x5ec>
 800e0ac:	46aa      	mov	sl, r5
 800e0ae:	f1ba 0f01 	cmp.w	sl, #1
 800e0b2:	f1a4 0408 	sub.w	r4, r4, #8
 800e0b6:	f300 8085 	bgt.w	800e1c4 <__kernel_rem_pio2+0x62c>
 800e0ba:	9c06      	ldr	r4, [sp, #24]
 800e0bc:	2000      	movs	r0, #0
 800e0be:	3408      	adds	r4, #8
 800e0c0:	2100      	movs	r1, #0
 800e0c2:	2d01      	cmp	r5, #1
 800e0c4:	f300 809d 	bgt.w	800e202 <__kernel_rem_pio2+0x66a>
 800e0c8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800e0cc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800e0d0:	f1bb 0f00 	cmp.w	fp, #0
 800e0d4:	f040 809b 	bne.w	800e20e <__kernel_rem_pio2+0x676>
 800e0d8:	9b01      	ldr	r3, [sp, #4]
 800e0da:	e9c3 5600 	strd	r5, r6, [r3]
 800e0de:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800e0e2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e0e6:	e7ca      	b.n	800e07e <__kernel_rem_pio2+0x4e6>
 800e0e8:	3408      	adds	r4, #8
 800e0ea:	ab4a      	add	r3, sp, #296	; 0x128
 800e0ec:	441c      	add	r4, r3
 800e0ee:	462e      	mov	r6, r5
 800e0f0:	2000      	movs	r0, #0
 800e0f2:	2100      	movs	r1, #0
 800e0f4:	2e00      	cmp	r6, #0
 800e0f6:	da36      	bge.n	800e166 <__kernel_rem_pio2+0x5ce>
 800e0f8:	f1bb 0f00 	cmp.w	fp, #0
 800e0fc:	d039      	beq.n	800e172 <__kernel_rem_pio2+0x5da>
 800e0fe:	4602      	mov	r2, r0
 800e100:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e104:	9c01      	ldr	r4, [sp, #4]
 800e106:	e9c4 2300 	strd	r2, r3, [r4]
 800e10a:	4602      	mov	r2, r0
 800e10c:	460b      	mov	r3, r1
 800e10e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800e112:	f7f2 f8b9 	bl	8000288 <__aeabi_dsub>
 800e116:	ae4c      	add	r6, sp, #304	; 0x130
 800e118:	2401      	movs	r4, #1
 800e11a:	42a5      	cmp	r5, r4
 800e11c:	da2c      	bge.n	800e178 <__kernel_rem_pio2+0x5e0>
 800e11e:	f1bb 0f00 	cmp.w	fp, #0
 800e122:	d002      	beq.n	800e12a <__kernel_rem_pio2+0x592>
 800e124:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e128:	4619      	mov	r1, r3
 800e12a:	9b01      	ldr	r3, [sp, #4]
 800e12c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e130:	e7a5      	b.n	800e07e <__kernel_rem_pio2+0x4e6>
 800e132:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800e136:	eb0d 0403 	add.w	r4, sp, r3
 800e13a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800e13e:	2000      	movs	r0, #0
 800e140:	2100      	movs	r1, #0
 800e142:	2d00      	cmp	r5, #0
 800e144:	da09      	bge.n	800e15a <__kernel_rem_pio2+0x5c2>
 800e146:	f1bb 0f00 	cmp.w	fp, #0
 800e14a:	d002      	beq.n	800e152 <__kernel_rem_pio2+0x5ba>
 800e14c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e150:	4619      	mov	r1, r3
 800e152:	9b01      	ldr	r3, [sp, #4]
 800e154:	e9c3 0100 	strd	r0, r1, [r3]
 800e158:	e791      	b.n	800e07e <__kernel_rem_pio2+0x4e6>
 800e15a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e15e:	f7f2 f895 	bl	800028c <__adddf3>
 800e162:	3d01      	subs	r5, #1
 800e164:	e7ed      	b.n	800e142 <__kernel_rem_pio2+0x5aa>
 800e166:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e16a:	f7f2 f88f 	bl	800028c <__adddf3>
 800e16e:	3e01      	subs	r6, #1
 800e170:	e7c0      	b.n	800e0f4 <__kernel_rem_pio2+0x55c>
 800e172:	4602      	mov	r2, r0
 800e174:	460b      	mov	r3, r1
 800e176:	e7c5      	b.n	800e104 <__kernel_rem_pio2+0x56c>
 800e178:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e17c:	f7f2 f886 	bl	800028c <__adddf3>
 800e180:	3401      	adds	r4, #1
 800e182:	e7ca      	b.n	800e11a <__kernel_rem_pio2+0x582>
 800e184:	e9da 8900 	ldrd	r8, r9, [sl]
 800e188:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e18c:	9b02      	ldr	r3, [sp, #8]
 800e18e:	3b01      	subs	r3, #1
 800e190:	9302      	str	r3, [sp, #8]
 800e192:	4632      	mov	r2, r6
 800e194:	463b      	mov	r3, r7
 800e196:	4640      	mov	r0, r8
 800e198:	4649      	mov	r1, r9
 800e19a:	f7f2 f877 	bl	800028c <__adddf3>
 800e19e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	460b      	mov	r3, r1
 800e1a6:	4640      	mov	r0, r8
 800e1a8:	4649      	mov	r1, r9
 800e1aa:	f7f2 f86d 	bl	8000288 <__aeabi_dsub>
 800e1ae:	4632      	mov	r2, r6
 800e1b0:	463b      	mov	r3, r7
 800e1b2:	f7f2 f86b 	bl	800028c <__adddf3>
 800e1b6:	ed9d 7b08 	vldr	d7, [sp, #32]
 800e1ba:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e1be:	ed8a 7b00 	vstr	d7, [sl]
 800e1c2:	e76e      	b.n	800e0a2 <__kernel_rem_pio2+0x50a>
 800e1c4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e1c8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800e1cc:	4640      	mov	r0, r8
 800e1ce:	4632      	mov	r2, r6
 800e1d0:	463b      	mov	r3, r7
 800e1d2:	4649      	mov	r1, r9
 800e1d4:	f7f2 f85a 	bl	800028c <__adddf3>
 800e1d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1dc:	4602      	mov	r2, r0
 800e1de:	460b      	mov	r3, r1
 800e1e0:	4640      	mov	r0, r8
 800e1e2:	4649      	mov	r1, r9
 800e1e4:	f7f2 f850 	bl	8000288 <__aeabi_dsub>
 800e1e8:	4632      	mov	r2, r6
 800e1ea:	463b      	mov	r3, r7
 800e1ec:	f7f2 f84e 	bl	800028c <__adddf3>
 800e1f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e1f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e1f8:	ed84 7b00 	vstr	d7, [r4]
 800e1fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e200:	e755      	b.n	800e0ae <__kernel_rem_pio2+0x516>
 800e202:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e206:	f7f2 f841 	bl	800028c <__adddf3>
 800e20a:	3d01      	subs	r5, #1
 800e20c:	e759      	b.n	800e0c2 <__kernel_rem_pio2+0x52a>
 800e20e:	9b01      	ldr	r3, [sp, #4]
 800e210:	9a01      	ldr	r2, [sp, #4]
 800e212:	601d      	str	r5, [r3, #0]
 800e214:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800e218:	605c      	str	r4, [r3, #4]
 800e21a:	609f      	str	r7, [r3, #8]
 800e21c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800e220:	60d3      	str	r3, [r2, #12]
 800e222:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e226:	6110      	str	r0, [r2, #16]
 800e228:	6153      	str	r3, [r2, #20]
 800e22a:	e728      	b.n	800e07e <__kernel_rem_pio2+0x4e6>
 800e22c:	41700000 	.word	0x41700000
 800e230:	3e700000 	.word	0x3e700000
 800e234:	00000000 	.word	0x00000000

0800e238 <__kernel_sin>:
 800e238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e23c:	ed2d 8b04 	vpush	{d8-d9}
 800e240:	eeb0 8a41 	vmov.f32	s16, s2
 800e244:	eef0 8a61 	vmov.f32	s17, s3
 800e248:	ec55 4b10 	vmov	r4, r5, d0
 800e24c:	b083      	sub	sp, #12
 800e24e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e252:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e256:	9001      	str	r0, [sp, #4]
 800e258:	da06      	bge.n	800e268 <__kernel_sin+0x30>
 800e25a:	ee10 0a10 	vmov	r0, s0
 800e25e:	4629      	mov	r1, r5
 800e260:	f7f2 fc7a 	bl	8000b58 <__aeabi_d2iz>
 800e264:	2800      	cmp	r0, #0
 800e266:	d051      	beq.n	800e30c <__kernel_sin+0xd4>
 800e268:	4622      	mov	r2, r4
 800e26a:	462b      	mov	r3, r5
 800e26c:	4620      	mov	r0, r4
 800e26e:	4629      	mov	r1, r5
 800e270:	f7f2 f9c2 	bl	80005f8 <__aeabi_dmul>
 800e274:	4682      	mov	sl, r0
 800e276:	468b      	mov	fp, r1
 800e278:	4602      	mov	r2, r0
 800e27a:	460b      	mov	r3, r1
 800e27c:	4620      	mov	r0, r4
 800e27e:	4629      	mov	r1, r5
 800e280:	f7f2 f9ba 	bl	80005f8 <__aeabi_dmul>
 800e284:	a341      	add	r3, pc, #260	; (adr r3, 800e38c <__kernel_sin+0x154>)
 800e286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e28a:	4680      	mov	r8, r0
 800e28c:	4689      	mov	r9, r1
 800e28e:	4650      	mov	r0, sl
 800e290:	4659      	mov	r1, fp
 800e292:	f7f2 f9b1 	bl	80005f8 <__aeabi_dmul>
 800e296:	a33f      	add	r3, pc, #252	; (adr r3, 800e394 <__kernel_sin+0x15c>)
 800e298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e29c:	f7f1 fff4 	bl	8000288 <__aeabi_dsub>
 800e2a0:	4652      	mov	r2, sl
 800e2a2:	465b      	mov	r3, fp
 800e2a4:	f7f2 f9a8 	bl	80005f8 <__aeabi_dmul>
 800e2a8:	a33c      	add	r3, pc, #240	; (adr r3, 800e39c <__kernel_sin+0x164>)
 800e2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ae:	f7f1 ffed 	bl	800028c <__adddf3>
 800e2b2:	4652      	mov	r2, sl
 800e2b4:	465b      	mov	r3, fp
 800e2b6:	f7f2 f99f 	bl	80005f8 <__aeabi_dmul>
 800e2ba:	a33a      	add	r3, pc, #232	; (adr r3, 800e3a4 <__kernel_sin+0x16c>)
 800e2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c0:	f7f1 ffe2 	bl	8000288 <__aeabi_dsub>
 800e2c4:	4652      	mov	r2, sl
 800e2c6:	465b      	mov	r3, fp
 800e2c8:	f7f2 f996 	bl	80005f8 <__aeabi_dmul>
 800e2cc:	a337      	add	r3, pc, #220	; (adr r3, 800e3ac <__kernel_sin+0x174>)
 800e2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d2:	f7f1 ffdb 	bl	800028c <__adddf3>
 800e2d6:	9b01      	ldr	r3, [sp, #4]
 800e2d8:	4606      	mov	r6, r0
 800e2da:	460f      	mov	r7, r1
 800e2dc:	b9eb      	cbnz	r3, 800e31a <__kernel_sin+0xe2>
 800e2de:	4602      	mov	r2, r0
 800e2e0:	460b      	mov	r3, r1
 800e2e2:	4650      	mov	r0, sl
 800e2e4:	4659      	mov	r1, fp
 800e2e6:	f7f2 f987 	bl	80005f8 <__aeabi_dmul>
 800e2ea:	a325      	add	r3, pc, #148	; (adr r3, 800e380 <__kernel_sin+0x148>)
 800e2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f0:	f7f1 ffca 	bl	8000288 <__aeabi_dsub>
 800e2f4:	4642      	mov	r2, r8
 800e2f6:	464b      	mov	r3, r9
 800e2f8:	f7f2 f97e 	bl	80005f8 <__aeabi_dmul>
 800e2fc:	4602      	mov	r2, r0
 800e2fe:	460b      	mov	r3, r1
 800e300:	4620      	mov	r0, r4
 800e302:	4629      	mov	r1, r5
 800e304:	f7f1 ffc2 	bl	800028c <__adddf3>
 800e308:	4604      	mov	r4, r0
 800e30a:	460d      	mov	r5, r1
 800e30c:	ec45 4b10 	vmov	d0, r4, r5
 800e310:	b003      	add	sp, #12
 800e312:	ecbd 8b04 	vpop	{d8-d9}
 800e316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e31a:	4b1b      	ldr	r3, [pc, #108]	; (800e388 <__kernel_sin+0x150>)
 800e31c:	ec51 0b18 	vmov	r0, r1, d8
 800e320:	2200      	movs	r2, #0
 800e322:	f7f2 f969 	bl	80005f8 <__aeabi_dmul>
 800e326:	4632      	mov	r2, r6
 800e328:	ec41 0b19 	vmov	d9, r0, r1
 800e32c:	463b      	mov	r3, r7
 800e32e:	4640      	mov	r0, r8
 800e330:	4649      	mov	r1, r9
 800e332:	f7f2 f961 	bl	80005f8 <__aeabi_dmul>
 800e336:	4602      	mov	r2, r0
 800e338:	460b      	mov	r3, r1
 800e33a:	ec51 0b19 	vmov	r0, r1, d9
 800e33e:	f7f1 ffa3 	bl	8000288 <__aeabi_dsub>
 800e342:	4652      	mov	r2, sl
 800e344:	465b      	mov	r3, fp
 800e346:	f7f2 f957 	bl	80005f8 <__aeabi_dmul>
 800e34a:	ec53 2b18 	vmov	r2, r3, d8
 800e34e:	f7f1 ff9b 	bl	8000288 <__aeabi_dsub>
 800e352:	a30b      	add	r3, pc, #44	; (adr r3, 800e380 <__kernel_sin+0x148>)
 800e354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e358:	4606      	mov	r6, r0
 800e35a:	460f      	mov	r7, r1
 800e35c:	4640      	mov	r0, r8
 800e35e:	4649      	mov	r1, r9
 800e360:	f7f2 f94a 	bl	80005f8 <__aeabi_dmul>
 800e364:	4602      	mov	r2, r0
 800e366:	460b      	mov	r3, r1
 800e368:	4630      	mov	r0, r6
 800e36a:	4639      	mov	r1, r7
 800e36c:	f7f1 ff8e 	bl	800028c <__adddf3>
 800e370:	4602      	mov	r2, r0
 800e372:	460b      	mov	r3, r1
 800e374:	4620      	mov	r0, r4
 800e376:	4629      	mov	r1, r5
 800e378:	f7f1 ff86 	bl	8000288 <__aeabi_dsub>
 800e37c:	e7c4      	b.n	800e308 <__kernel_sin+0xd0>
 800e37e:	bf00      	nop
 800e380:	55555549 	.word	0x55555549
 800e384:	3fc55555 	.word	0x3fc55555
 800e388:	3fe00000 	.word	0x3fe00000
 800e38c:	5acfd57c 	.word	0x5acfd57c
 800e390:	3de5d93a 	.word	0x3de5d93a
 800e394:	8a2b9ceb 	.word	0x8a2b9ceb
 800e398:	3e5ae5e6 	.word	0x3e5ae5e6
 800e39c:	57b1fe7d 	.word	0x57b1fe7d
 800e3a0:	3ec71de3 	.word	0x3ec71de3
 800e3a4:	19c161d5 	.word	0x19c161d5
 800e3a8:	3f2a01a0 	.word	0x3f2a01a0
 800e3ac:	1110f8a6 	.word	0x1110f8a6
 800e3b0:	3f811111 	.word	0x3f811111

0800e3b4 <fabs>:
 800e3b4:	ec51 0b10 	vmov	r0, r1, d0
 800e3b8:	ee10 2a10 	vmov	r2, s0
 800e3bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e3c0:	ec43 2b10 	vmov	d0, r2, r3
 800e3c4:	4770      	bx	lr
	...

0800e3c8 <floor>:
 800e3c8:	ec51 0b10 	vmov	r0, r1, d0
 800e3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3d0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e3d4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e3d8:	2e13      	cmp	r6, #19
 800e3da:	ee10 5a10 	vmov	r5, s0
 800e3de:	ee10 8a10 	vmov	r8, s0
 800e3e2:	460c      	mov	r4, r1
 800e3e4:	dc32      	bgt.n	800e44c <floor+0x84>
 800e3e6:	2e00      	cmp	r6, #0
 800e3e8:	da14      	bge.n	800e414 <floor+0x4c>
 800e3ea:	a333      	add	r3, pc, #204	; (adr r3, 800e4b8 <floor+0xf0>)
 800e3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f0:	f7f1 ff4c 	bl	800028c <__adddf3>
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	f7f2 fb8e 	bl	8000b18 <__aeabi_dcmpgt>
 800e3fc:	b138      	cbz	r0, 800e40e <floor+0x46>
 800e3fe:	2c00      	cmp	r4, #0
 800e400:	da57      	bge.n	800e4b2 <floor+0xea>
 800e402:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e406:	431d      	orrs	r5, r3
 800e408:	d001      	beq.n	800e40e <floor+0x46>
 800e40a:	4c2d      	ldr	r4, [pc, #180]	; (800e4c0 <floor+0xf8>)
 800e40c:	2500      	movs	r5, #0
 800e40e:	4621      	mov	r1, r4
 800e410:	4628      	mov	r0, r5
 800e412:	e025      	b.n	800e460 <floor+0x98>
 800e414:	4f2b      	ldr	r7, [pc, #172]	; (800e4c4 <floor+0xfc>)
 800e416:	4137      	asrs	r7, r6
 800e418:	ea01 0307 	and.w	r3, r1, r7
 800e41c:	4303      	orrs	r3, r0
 800e41e:	d01f      	beq.n	800e460 <floor+0x98>
 800e420:	a325      	add	r3, pc, #148	; (adr r3, 800e4b8 <floor+0xf0>)
 800e422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e426:	f7f1 ff31 	bl	800028c <__adddf3>
 800e42a:	2200      	movs	r2, #0
 800e42c:	2300      	movs	r3, #0
 800e42e:	f7f2 fb73 	bl	8000b18 <__aeabi_dcmpgt>
 800e432:	2800      	cmp	r0, #0
 800e434:	d0eb      	beq.n	800e40e <floor+0x46>
 800e436:	2c00      	cmp	r4, #0
 800e438:	bfbe      	ittt	lt
 800e43a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e43e:	fa43 f606 	asrlt.w	r6, r3, r6
 800e442:	19a4      	addlt	r4, r4, r6
 800e444:	ea24 0407 	bic.w	r4, r4, r7
 800e448:	2500      	movs	r5, #0
 800e44a:	e7e0      	b.n	800e40e <floor+0x46>
 800e44c:	2e33      	cmp	r6, #51	; 0x33
 800e44e:	dd0b      	ble.n	800e468 <floor+0xa0>
 800e450:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e454:	d104      	bne.n	800e460 <floor+0x98>
 800e456:	ee10 2a10 	vmov	r2, s0
 800e45a:	460b      	mov	r3, r1
 800e45c:	f7f1 ff16 	bl	800028c <__adddf3>
 800e460:	ec41 0b10 	vmov	d0, r0, r1
 800e464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e468:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e46c:	f04f 33ff 	mov.w	r3, #4294967295
 800e470:	fa23 f707 	lsr.w	r7, r3, r7
 800e474:	4207      	tst	r7, r0
 800e476:	d0f3      	beq.n	800e460 <floor+0x98>
 800e478:	a30f      	add	r3, pc, #60	; (adr r3, 800e4b8 <floor+0xf0>)
 800e47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e47e:	f7f1 ff05 	bl	800028c <__adddf3>
 800e482:	2200      	movs	r2, #0
 800e484:	2300      	movs	r3, #0
 800e486:	f7f2 fb47 	bl	8000b18 <__aeabi_dcmpgt>
 800e48a:	2800      	cmp	r0, #0
 800e48c:	d0bf      	beq.n	800e40e <floor+0x46>
 800e48e:	2c00      	cmp	r4, #0
 800e490:	da02      	bge.n	800e498 <floor+0xd0>
 800e492:	2e14      	cmp	r6, #20
 800e494:	d103      	bne.n	800e49e <floor+0xd6>
 800e496:	3401      	adds	r4, #1
 800e498:	ea25 0507 	bic.w	r5, r5, r7
 800e49c:	e7b7      	b.n	800e40e <floor+0x46>
 800e49e:	2301      	movs	r3, #1
 800e4a0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e4a4:	fa03 f606 	lsl.w	r6, r3, r6
 800e4a8:	4435      	add	r5, r6
 800e4aa:	4545      	cmp	r5, r8
 800e4ac:	bf38      	it	cc
 800e4ae:	18e4      	addcc	r4, r4, r3
 800e4b0:	e7f2      	b.n	800e498 <floor+0xd0>
 800e4b2:	2500      	movs	r5, #0
 800e4b4:	462c      	mov	r4, r5
 800e4b6:	e7aa      	b.n	800e40e <floor+0x46>
 800e4b8:	8800759c 	.word	0x8800759c
 800e4bc:	7e37e43c 	.word	0x7e37e43c
 800e4c0:	bff00000 	.word	0xbff00000
 800e4c4:	000fffff 	.word	0x000fffff

0800e4c8 <nan>:
 800e4c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e4d0 <nan+0x8>
 800e4cc:	4770      	bx	lr
 800e4ce:	bf00      	nop
 800e4d0:	00000000 	.word	0x00000000
 800e4d4:	7ff80000 	.word	0x7ff80000

0800e4d8 <scalbn>:
 800e4d8:	b570      	push	{r4, r5, r6, lr}
 800e4da:	ec55 4b10 	vmov	r4, r5, d0
 800e4de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e4e2:	4606      	mov	r6, r0
 800e4e4:	462b      	mov	r3, r5
 800e4e6:	b99a      	cbnz	r2, 800e510 <scalbn+0x38>
 800e4e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e4ec:	4323      	orrs	r3, r4
 800e4ee:	d036      	beq.n	800e55e <scalbn+0x86>
 800e4f0:	4b39      	ldr	r3, [pc, #228]	; (800e5d8 <scalbn+0x100>)
 800e4f2:	4629      	mov	r1, r5
 800e4f4:	ee10 0a10 	vmov	r0, s0
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	f7f2 f87d 	bl	80005f8 <__aeabi_dmul>
 800e4fe:	4b37      	ldr	r3, [pc, #220]	; (800e5dc <scalbn+0x104>)
 800e500:	429e      	cmp	r6, r3
 800e502:	4604      	mov	r4, r0
 800e504:	460d      	mov	r5, r1
 800e506:	da10      	bge.n	800e52a <scalbn+0x52>
 800e508:	a32b      	add	r3, pc, #172	; (adr r3, 800e5b8 <scalbn+0xe0>)
 800e50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e50e:	e03a      	b.n	800e586 <scalbn+0xae>
 800e510:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e514:	428a      	cmp	r2, r1
 800e516:	d10c      	bne.n	800e532 <scalbn+0x5a>
 800e518:	ee10 2a10 	vmov	r2, s0
 800e51c:	4620      	mov	r0, r4
 800e51e:	4629      	mov	r1, r5
 800e520:	f7f1 feb4 	bl	800028c <__adddf3>
 800e524:	4604      	mov	r4, r0
 800e526:	460d      	mov	r5, r1
 800e528:	e019      	b.n	800e55e <scalbn+0x86>
 800e52a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e52e:	460b      	mov	r3, r1
 800e530:	3a36      	subs	r2, #54	; 0x36
 800e532:	4432      	add	r2, r6
 800e534:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e538:	428a      	cmp	r2, r1
 800e53a:	dd08      	ble.n	800e54e <scalbn+0x76>
 800e53c:	2d00      	cmp	r5, #0
 800e53e:	a120      	add	r1, pc, #128	; (adr r1, 800e5c0 <scalbn+0xe8>)
 800e540:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e544:	da1c      	bge.n	800e580 <scalbn+0xa8>
 800e546:	a120      	add	r1, pc, #128	; (adr r1, 800e5c8 <scalbn+0xf0>)
 800e548:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e54c:	e018      	b.n	800e580 <scalbn+0xa8>
 800e54e:	2a00      	cmp	r2, #0
 800e550:	dd08      	ble.n	800e564 <scalbn+0x8c>
 800e552:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e556:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e55a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e55e:	ec45 4b10 	vmov	d0, r4, r5
 800e562:	bd70      	pop	{r4, r5, r6, pc}
 800e564:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e568:	da19      	bge.n	800e59e <scalbn+0xc6>
 800e56a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e56e:	429e      	cmp	r6, r3
 800e570:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e574:	dd0a      	ble.n	800e58c <scalbn+0xb4>
 800e576:	a112      	add	r1, pc, #72	; (adr r1, 800e5c0 <scalbn+0xe8>)
 800e578:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d1e2      	bne.n	800e546 <scalbn+0x6e>
 800e580:	a30f      	add	r3, pc, #60	; (adr r3, 800e5c0 <scalbn+0xe8>)
 800e582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e586:	f7f2 f837 	bl	80005f8 <__aeabi_dmul>
 800e58a:	e7cb      	b.n	800e524 <scalbn+0x4c>
 800e58c:	a10a      	add	r1, pc, #40	; (adr r1, 800e5b8 <scalbn+0xe0>)
 800e58e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d0b8      	beq.n	800e508 <scalbn+0x30>
 800e596:	a10e      	add	r1, pc, #56	; (adr r1, 800e5d0 <scalbn+0xf8>)
 800e598:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e59c:	e7b4      	b.n	800e508 <scalbn+0x30>
 800e59e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e5a2:	3236      	adds	r2, #54	; 0x36
 800e5a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e5a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e5ac:	4620      	mov	r0, r4
 800e5ae:	4b0c      	ldr	r3, [pc, #48]	; (800e5e0 <scalbn+0x108>)
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	e7e8      	b.n	800e586 <scalbn+0xae>
 800e5b4:	f3af 8000 	nop.w
 800e5b8:	c2f8f359 	.word	0xc2f8f359
 800e5bc:	01a56e1f 	.word	0x01a56e1f
 800e5c0:	8800759c 	.word	0x8800759c
 800e5c4:	7e37e43c 	.word	0x7e37e43c
 800e5c8:	8800759c 	.word	0x8800759c
 800e5cc:	fe37e43c 	.word	0xfe37e43c
 800e5d0:	c2f8f359 	.word	0xc2f8f359
 800e5d4:	81a56e1f 	.word	0x81a56e1f
 800e5d8:	43500000 	.word	0x43500000
 800e5dc:	ffff3cb0 	.word	0xffff3cb0
 800e5e0:	3c900000 	.word	0x3c900000

0800e5e4 <_init>:
 800e5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5e6:	bf00      	nop
 800e5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5ea:	bc08      	pop	{r3}
 800e5ec:	469e      	mov	lr, r3
 800e5ee:	4770      	bx	lr

0800e5f0 <_fini>:
 800e5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5f2:	bf00      	nop
 800e5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5f6:	bc08      	pop	{r3}
 800e5f8:	469e      	mov	lr, r3
 800e5fa:	4770      	bx	lr
