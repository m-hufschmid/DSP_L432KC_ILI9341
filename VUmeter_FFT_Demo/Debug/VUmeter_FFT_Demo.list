
VUmeter_FFT_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e280  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00018b40  0800e410  0800e410  0000f410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026f50  08026f50  00028208  2**0
                  CONTENTS
  4 .ARM          00000008  08026f50  08026f50  00027f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026f58  08026f58  00028208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026f58  08026f58  00027f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08026f5c  08026f5c  00027f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  08026f60  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a8e0  20000208  08027168  00028208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000aae8  08027168  00028ae8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00028208  2**0
                  CONTENTS, READONLY
 12 .debug_info   000208cb  00000000  00000000  00028238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c14  00000000  00000000  00048b03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  0004d718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c56  00000000  00000000  0004e948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000234ab  00000000  00000000  0004f59e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019b6f  00000000  00000000  00072a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c92f4  00000000  00000000  0008c5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  001558ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000590c  00000000  00000000  00155964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  0015b270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00004b28  00000000  00000000  0015b2f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000002a8  00000000  00000000  0015fe1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e3f8 	.word	0x0800e3f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0800e3f8 	.word	0x0800e3f8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <displayFFTdata>:
#include "displayFFT.h"
#include "dma.h"
#include "main.h"
#include "colors.h"

void displayFFTdata(fftDisplay_t *fftDisplay, float32_t *fftData) {
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 8000f3e:	af02      	add	r7, sp, #8
 8000f40:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000f44:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000f48:	6018      	str	r0, [r3, #0]
 8000f4a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000f4e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8000f52:	6019      	str	r1, [r3, #0]
	float32_t magFFT[BUFFER_SIZE >> 1];
	float32_t octValue;
	uint16_t i, iOctave, nBins, iMagFFT;

	arm_cmplx_mag_f32(fftData, magFFT, BUFFER_SIZE >> 1);
 8000f54:	f107 0108 	add.w	r1, r7, #8
 8000f58:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000f5c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8000f60:	2280      	movs	r2, #128	@ 0x80
 8000f62:	6818      	ldr	r0, [r3, #0]
 8000f64:	f008 fe3c 	bl	8009be0 <arm_cmplx_mag_f32>
	switch (fftDisplay->style) {
 8000f68:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000f6c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	791b      	ldrb	r3, [r3, #4]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d003      	beq.n	8000f80 <displayFFTdata+0x48>
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	f000 80bf 	beq.w	80010fc <displayFFTdata+0x1c4>
			}
		}

		break;
	}
}
 8000f7e:	e1e9      	b.n	8001354 <displayFFTdata+0x41c>
		for (i = 0; i < N_PLOT; i++) {
 8000f80:	2300      	movs	r3, #0
 8000f82:	f8a7 3212 	strh.w	r3, [r7, #530]	@ 0x212
 8000f86:	e0b3      	b.n	80010f0 <displayFFTdata+0x1b8>
			int16_t y = (int16_t) (8.686 * log(2.0 * magFFT[i]) + 16.9);
 8000f88:	f8b7 3212 	ldrh.w	r3, [r7, #530]	@ 0x212
 8000f8c:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8000f90:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	4413      	add	r3, r2
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fad4 	bl	8000548 <__aeabi_f2d>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	f7ff f972 	bl	800028c <__adddf3>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	ec43 2b17 	vmov	d7, r2, r3
 8000fb0:	eeb0 0a47 	vmov.f32	s0, s14
 8000fb4:	eef0 0a67 	vmov.f32	s1, s15
 8000fb8:	f00b ff76 	bl	800cea8 <log>
 8000fbc:	ec51 0b10 	vmov	r0, r1, d0
 8000fc0:	a3e7      	add	r3, pc, #924	@ (adr r3, 8001360 <displayFFTdata+0x428>)
 8000fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc6:	f7ff fb17 	bl	80005f8 <__aeabi_dmul>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	460b      	mov	r3, r1
 8000fce:	4610      	mov	r0, r2
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	a3e5      	add	r3, pc, #916	@ (adr r3, 8001368 <displayFFTdata+0x430>)
 8000fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd8:	f7ff f958 	bl	800028c <__adddf3>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f7ff fdb8 	bl	8000b58 <__aeabi_d2iz>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a
			if (y > 59) {
 8000fee:	f9b7 320a 	ldrsh.w	r3, [r7, #522]	@ 0x20a
 8000ff2:	2b3b      	cmp	r3, #59	@ 0x3b
 8000ff4:	dd02      	ble.n	8000ffc <displayFFTdata+0xc4>
				y = 59;
 8000ff6:	233b      	movs	r3, #59	@ 0x3b
 8000ff8:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a
			if (y < 0) {
 8000ffc:	f9b7 320a 	ldrsh.w	r3, [r7, #522]	@ 0x20a
 8001000:	2b00      	cmp	r3, #0
 8001002:	da02      	bge.n	800100a <displayFFTdata+0xd2>
				y = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a
			if (y > 0) {
 800100a:	f9b7 320a 	ldrsh.w	r3, [r7, #522]	@ 0x20a
 800100e:	2b00      	cmp	r3, #0
 8001010:	dd35      	ble.n	800107e <displayFFTdata+0x146>
				Displ_Line(fftDisplay->x0 + i + 4, fftDisplay->y0 + 59, fftDisplay->x0 + i + 4, fftDisplay->y0 + 60 - y, FFT_COLOR);
 8001012:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001016:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	881a      	ldrh	r2, [r3, #0]
 800101e:	f8b7 3212 	ldrh.w	r3, [r7, #530]	@ 0x212
 8001022:	4413      	add	r3, r2
 8001024:	b29b      	uxth	r3, r3
 8001026:	3304      	adds	r3, #4
 8001028:	b29b      	uxth	r3, r3
 800102a:	b218      	sxth	r0, r3
 800102c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001030:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	885b      	ldrh	r3, [r3, #2]
 8001038:	333b      	adds	r3, #59	@ 0x3b
 800103a:	b29b      	uxth	r3, r3
 800103c:	b219      	sxth	r1, r3
 800103e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001042:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	881a      	ldrh	r2, [r3, #0]
 800104a:	f8b7 3212 	ldrh.w	r3, [r7, #530]	@ 0x212
 800104e:	4413      	add	r3, r2
 8001050:	b29b      	uxth	r3, r3
 8001052:	3304      	adds	r3, #4
 8001054:	b29b      	uxth	r3, r3
 8001056:	b21c      	sxth	r4, r3
 8001058:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800105c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	885a      	ldrh	r2, [r3, #2]
 8001064:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	b29b      	uxth	r3, r3
 800106c:	333c      	adds	r3, #60	@ 0x3c
 800106e:	b29b      	uxth	r3, r3
 8001070:	b21b      	sxth	r3, r3
 8001072:	f64f 52e0 	movw	r2, #64992	@ 0xfde0
 8001076:	9200      	str	r2, [sp, #0]
 8001078:	4622      	mov	r2, r4
 800107a:	f001 ffdd 	bl	8003038 <Displ_Line>
			Displ_Line(fftDisplay->x0 + i + 4, fftDisplay->y0, fftDisplay->x0 + i + 4, fftDisplay->y0 + 59 - y, FFT_BACKGROUND);
 800107e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001082:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	881a      	ldrh	r2, [r3, #0]
 800108a:	f8b7 3212 	ldrh.w	r3, [r7, #530]	@ 0x212
 800108e:	4413      	add	r3, r2
 8001090:	b29b      	uxth	r3, r3
 8001092:	3304      	adds	r3, #4
 8001094:	b29b      	uxth	r3, r3
 8001096:	b218      	sxth	r0, r3
 8001098:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800109c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	885b      	ldrh	r3, [r3, #2]
 80010a4:	b219      	sxth	r1, r3
 80010a6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80010aa:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	881a      	ldrh	r2, [r3, #0]
 80010b2:	f8b7 3212 	ldrh.w	r3, [r7, #530]	@ 0x212
 80010b6:	4413      	add	r3, r2
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	3304      	adds	r3, #4
 80010bc:	b29b      	uxth	r3, r3
 80010be:	b21c      	sxth	r4, r3
 80010c0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80010c4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	885a      	ldrh	r2, [r3, #2]
 80010cc:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	333b      	adds	r3, #59	@ 0x3b
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	b21b      	sxth	r3, r3
 80010da:	f245 3251 	movw	r2, #21329	@ 0x5351
 80010de:	9200      	str	r2, [sp, #0]
 80010e0:	4622      	mov	r2, r4
 80010e2:	f001 ffa9 	bl	8003038 <Displ_Line>
		for (i = 0; i < N_PLOT; i++) {
 80010e6:	f8b7 3212 	ldrh.w	r3, [r7, #530]	@ 0x212
 80010ea:	3301      	adds	r3, #1
 80010ec:	f8a7 3212 	strh.w	r3, [r7, #530]	@ 0x212
 80010f0:	f8b7 3212 	ldrh.w	r3, [r7, #530]	@ 0x212
 80010f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80010f6:	f67f af47 	bls.w	8000f88 <displayFFTdata+0x50>
		break;
 80010fa:	e12b      	b.n	8001354 <displayFFTdata+0x41c>
		iOctave = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f8a7 3210 	strh.w	r3, [r7, #528]	@ 0x210
		iMagFFT = 1;
 8001102:	2301      	movs	r3, #1
 8001104:	f8a7 320c 	strh.w	r3, [r7, #524]	@ 0x20c
		nBins = 1;
 8001108:	2301      	movs	r3, #1
 800110a:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e
		while (iOctave < NOCTAVES) {
 800110e:	e083      	b.n	8001218 <displayFFTdata+0x2e0>
			octValue = 0;
 8001110:	f04f 0300 	mov.w	r3, #0
 8001114:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
			for (i = 0; i < nBins; i++) {
 8001118:	2300      	movs	r3, #0
 800111a:	f8a7 3212 	strh.w	r3, [r7, #530]	@ 0x212
 800111e:	e025      	b.n	800116c <displayFFTdata+0x234>
				octValue += magFFT[iMagFFT] * magFFT[iMagFFT];
 8001120:	f8b7 320c 	ldrh.w	r3, [r7, #524]	@ 0x20c
 8001124:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8001128:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	ed93 7a00 	vldr	s14, [r3]
 8001134:	f8b7 320c 	ldrh.w	r3, [r7, #524]	@ 0x20c
 8001138:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800113c:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	edd3 7a00 	vldr	s15, [r3]
 8001148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800114c:	ed97 7a85 	vldr	s14, [r7, #532]	@ 0x214
 8001150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001154:	edc7 7a85 	vstr	s15, [r7, #532]	@ 0x214
				iMagFFT++;
 8001158:	f8b7 320c 	ldrh.w	r3, [r7, #524]	@ 0x20c
 800115c:	3301      	adds	r3, #1
 800115e:	f8a7 320c 	strh.w	r3, [r7, #524]	@ 0x20c
			for (i = 0; i < nBins; i++) {
 8001162:	f8b7 3212 	ldrh.w	r3, [r7, #530]	@ 0x212
 8001166:	3301      	adds	r3, #1
 8001168:	f8a7 3212 	strh.w	r3, [r7, #530]	@ 0x212
 800116c:	f8b7 2212 	ldrh.w	r2, [r7, #530]	@ 0x212
 8001170:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8001174:	429a      	cmp	r2, r3
 8001176:	d3d3      	bcc.n	8001120 <displayFFTdata+0x1e8>
			if (octValue >= fftDisplay->octValues[iOctave]) {
 8001178:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800117c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	f8b7 3210 	ldrh.w	r3, [r7, #528]	@ 0x210
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	edd3 7a00 	vldr	s15, [r3]
 8001190:	ed97 7a85 	vldr	s14, [r7, #532]	@ 0x214
 8001194:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119c:	db0d      	blt.n	80011ba <displayFFTdata+0x282>
				fftDisplay->octValues[iOctave] = octValue;
 800119e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80011a2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	f8b7 3210 	ldrh.w	r3, [r7, #528]	@ 0x210
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	e024      	b.n	8001204 <displayFFTdata+0x2cc>
				fftDisplay->octValues[iOctave] = 0.8 * fftDisplay->octValues[iOctave];
 80011ba:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80011be:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	f8b7 3210 	ldrh.w	r3, [r7, #528]	@ 0x210
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff f9b9 	bl	8000548 <__aeabi_f2d>
 80011d6:	a366      	add	r3, pc, #408	@ (adr r3, 8001370 <displayFFTdata+0x438>)
 80011d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011dc:	f7ff fa0c 	bl	80005f8 <__aeabi_dmul>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4610      	mov	r0, r2
 80011e6:	4619      	mov	r1, r3
 80011e8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80011ec:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	f8b7 3210 	ldrh.w	r3, [r7, #528]	@ 0x210
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	18d4      	adds	r4, r2, r3
 80011fc:	f7ff fcd4 	bl	8000ba8 <__aeabi_d2f>
 8001200:	4603      	mov	r3, r0
 8001202:	6023      	str	r3, [r4, #0]
			iOctave++;
 8001204:	f8b7 3210 	ldrh.w	r3, [r7, #528]	@ 0x210
 8001208:	3301      	adds	r3, #1
 800120a:	f8a7 3210 	strh.w	r3, [r7, #528]	@ 0x210
			nBins = nBins << 1;
 800120e:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e
		while (iOctave < NOCTAVES) {
 8001218:	f8b7 3210 	ldrh.w	r3, [r7, #528]	@ 0x210
 800121c:	2b06      	cmp	r3, #6
 800121e:	f67f af77 	bls.w	8001110 <displayFFTdata+0x1d8>
		for (i = 0; i < NOCTAVES; i++) {
 8001222:	2300      	movs	r3, #0
 8001224:	f8a7 3212 	strh.w	r3, [r7, #530]	@ 0x212
 8001228:	e08e      	b.n	8001348 <displayFFTdata+0x410>
			int16_t y = (int16_t) (-4.343 * log(fftDisplay->octValues[i]) + 42.1);
 800122a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800122e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	f8b7 3212 	ldrh.w	r3, [r7, #530]	@ 0x212
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4413      	add	r3, r2
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f981 	bl	8000548 <__aeabi_f2d>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	ec43 2b10 	vmov	d0, r2, r3
 800124e:	f00b fe2b 	bl	800cea8 <log>
 8001252:	ec51 0b10 	vmov	r0, r1, d0
 8001256:	a348      	add	r3, pc, #288	@ (adr r3, 8001378 <displayFFTdata+0x440>)
 8001258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125c:	f7ff f9cc 	bl	80005f8 <__aeabi_dmul>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4610      	mov	r0, r2
 8001266:	4619      	mov	r1, r3
 8001268:	a345      	add	r3, pc, #276	@ (adr r3, 8001380 <displayFFTdata+0x448>)
 800126a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126e:	f7ff f80d 	bl	800028c <__adddf3>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	f7ff fc6d 	bl	8000b58 <__aeabi_d2iz>
 800127e:	4603      	mov	r3, r0
 8001280:	f8a7 3208 	strh.w	r3, [r7, #520]	@ 0x208
			if (y > 59) {
 8001284:	f9b7 3208 	ldrsh.w	r3, [r7, #520]	@ 0x208
 8001288:	2b3b      	cmp	r3, #59	@ 0x3b
 800128a:	dd02      	ble.n	8001292 <displayFFTdata+0x35a>
				y = 59;
 800128c:	233b      	movs	r3, #59	@ 0x3b
 800128e:	f8a7 3208 	strh.w	r3, [r7, #520]	@ 0x208
			if (y < 0) {
 8001292:	f9b7 3208 	ldrsh.w	r3, [r7, #520]	@ 0x208
 8001296:	2b00      	cmp	r3, #0
 8001298:	da02      	bge.n	80012a0 <displayFFTdata+0x368>
				y = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	f8a7 3208 	strh.w	r3, [r7, #520]	@ 0x208
			Displ_FillArea(fftDisplay->x0 + 19 * i + 3, fftDisplay->y0 + y + 1, 15, 59 - y, FFT_COLOR);
 80012a0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80012a4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	881a      	ldrh	r2, [r3, #0]
 80012ac:	f8b7 3212 	ldrh.w	r3, [r7, #530]	@ 0x212
 80012b0:	4619      	mov	r1, r3
 80012b2:	00c9      	lsls	r1, r1, #3
 80012b4:	4419      	add	r1, r3
 80012b6:	0049      	lsls	r1, r1, #1
 80012b8:	440b      	add	r3, r1
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	4413      	add	r3, r2
 80012be:	b29b      	uxth	r3, r3
 80012c0:	3303      	adds	r3, #3
 80012c2:	b298      	uxth	r0, r3
 80012c4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80012c8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	885a      	ldrh	r2, [r3, #2]
 80012d0:	f8b7 3208 	ldrh.w	r3, [r7, #520]	@ 0x208
 80012d4:	4413      	add	r3, r2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	3301      	adds	r3, #1
 80012da:	b299      	uxth	r1, r3
 80012dc:	f8b7 3208 	ldrh.w	r3, [r7, #520]	@ 0x208
 80012e0:	f1c3 033b 	rsb	r3, r3, #59	@ 0x3b
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	f64f 52e0 	movw	r2, #64992	@ 0xfde0
 80012ea:	9200      	str	r2, [sp, #0]
 80012ec:	220f      	movs	r2, #15
 80012ee:	f001 fccd 	bl	8002c8c <Displ_FillArea>
			if (y > 0) {
 80012f2:	f9b7 3208 	ldrsh.w	r3, [r7, #520]	@ 0x208
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	dd21      	ble.n	800133e <displayFFTdata+0x406>
				Displ_FillArea(fftDisplay->x0 + 19 * i + 3, fftDisplay->y0 + 1, 15, y, FFT_BACKGROUND);
 80012fa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80012fe:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	881a      	ldrh	r2, [r3, #0]
 8001306:	f8b7 3212 	ldrh.w	r3, [r7, #530]	@ 0x212
 800130a:	4619      	mov	r1, r3
 800130c:	00c9      	lsls	r1, r1, #3
 800130e:	4419      	add	r1, r3
 8001310:	0049      	lsls	r1, r1, #1
 8001312:	440b      	add	r3, r1
 8001314:	b29b      	uxth	r3, r3
 8001316:	4413      	add	r3, r2
 8001318:	b29b      	uxth	r3, r3
 800131a:	3303      	adds	r3, #3
 800131c:	b298      	uxth	r0, r3
 800131e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001322:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	885b      	ldrh	r3, [r3, #2]
 800132a:	3301      	adds	r3, #1
 800132c:	b299      	uxth	r1, r3
 800132e:	f8b7 3208 	ldrh.w	r3, [r7, #520]	@ 0x208
 8001332:	f245 3251 	movw	r2, #21329	@ 0x5351
 8001336:	9200      	str	r2, [sp, #0]
 8001338:	220f      	movs	r2, #15
 800133a:	f001 fca7 	bl	8002c8c <Displ_FillArea>
		for (i = 0; i < NOCTAVES; i++) {
 800133e:	f8b7 3212 	ldrh.w	r3, [r7, #530]	@ 0x212
 8001342:	3301      	adds	r3, #1
 8001344:	f8a7 3212 	strh.w	r3, [r7, #530]	@ 0x212
 8001348:	f8b7 3212 	ldrh.w	r3, [r7, #530]	@ 0x212
 800134c:	2b06      	cmp	r3, #6
 800134e:	f67f af6c 	bls.w	800122a <displayFFTdata+0x2f2>
		break;
 8001352:	bf00      	nop
}
 8001354:	bf00      	nop
 8001356:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 800135a:	46bd      	mov	sp, r7
 800135c:	bd90      	pop	{r4, r7, pc}
 800135e:	bf00      	nop
 8001360:	645a1cac 	.word	0x645a1cac
 8001364:	40215f3b 	.word	0x40215f3b
 8001368:	66666666 	.word	0x66666666
 800136c:	4030e666 	.word	0x4030e666
 8001370:	9999999a 	.word	0x9999999a
 8001374:	3fe99999 	.word	0x3fe99999
 8001378:	645a1cac 	.word	0x645a1cac
 800137c:	c0115f3b 	.word	0xc0115f3b
 8001380:	cccccccd 	.word	0xcccccccd
 8001384:	40450ccc 	.word	0x40450ccc

08001388 <clearFFTdisplay>:

void clearFFTdisplay(fftDisplay_t *fftDisplay) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af02      	add	r7, sp, #8
 800138e:	6078      	str	r0, [r7, #4]
	Displ_FillArea(fftDisplay->x0, fftDisplay->y0, FFT_WIDTH, FFT_HEIGHT, FFT_BACKGROUND);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	8818      	ldrh	r0, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	8859      	ldrh	r1, [r3, #2]
 8001398:	f245 3351 	movw	r3, #21329	@ 0x5351
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	233c      	movs	r3, #60	@ 0x3c
 80013a0:	2287      	movs	r2, #135	@ 0x87
 80013a2:	f001 fc73 	bl	8002c8c <Displ_FillArea>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <initFFTdisplay>:

void initFFTdisplay(fftDisplay_t *fftDisplay, uint16_t x0, uint16_t y0, enum displayFFTstyle_t style, float32_t *octValues){
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b084      	sub	sp, #16
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	60f8      	str	r0, [r7, #12]
 80013b6:	4608      	mov	r0, r1
 80013b8:	4611      	mov	r1, r2
 80013ba:	461a      	mov	r2, r3
 80013bc:	4603      	mov	r3, r0
 80013be:	817b      	strh	r3, [r7, #10]
 80013c0:	460b      	mov	r3, r1
 80013c2:	813b      	strh	r3, [r7, #8]
 80013c4:	4613      	mov	r3, r2
 80013c6:	71fb      	strb	r3, [r7, #7]
	fftDisplay->x0 = x0;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	897a      	ldrh	r2, [r7, #10]
 80013cc:	801a      	strh	r2, [r3, #0]
	fftDisplay->y0 = y0;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	893a      	ldrh	r2, [r7, #8]
 80013d2:	805a      	strh	r2, [r3, #2]
	fftDisplay->style = style;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	79fa      	ldrb	r2, [r7, #7]
 80013d8:	711a      	strb	r2, [r3, #4]
	fftDisplay->octValues = octValues;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	609a      	str	r2, [r3, #8]
	redrawFFTdisplay(fftDisplay);
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f000 f805 	bl	80013f0 <redrawFFTdisplay>
}
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <redrawFFTdisplay>:

void redrawFFTdisplay(fftDisplay_t *fftDisplay) {
 80013f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f2:	b08d      	sub	sp, #52	@ 0x34
 80013f4:	af08      	add	r7, sp, #32
 80013f6:	6078      	str	r0, [r7, #4]
	Displ_fillRoundRect(fftDisplay->x0 - 5, fftDisplay->y0 - 5, FFT_WIDTH + 10, FFT_HEIGHT + 10, 3, FRAME_COLOR);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	3b05      	subs	r3, #5
 80013fe:	b29b      	uxth	r3, r3
 8001400:	b218      	sxth	r0, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	885b      	ldrh	r3, [r3, #2]
 8001406:	3b05      	subs	r3, #5
 8001408:	b29b      	uxth	r3, r3
 800140a:	b219      	sxth	r1, r3
 800140c:	2300      	movs	r3, #0
 800140e:	9301      	str	r3, [sp, #4]
 8001410:	2303      	movs	r3, #3
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	2346      	movs	r3, #70	@ 0x46
 8001416:	2291      	movs	r2, #145	@ 0x91
 8001418:	f002 f83e 	bl	8003498 <Displ_fillRoundRect>
	clearFFTdisplay(fftDisplay);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff ffb3 	bl	8001388 <clearFFTdisplay>
	switch(fftDisplay->style){
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	791b      	ldrb	r3, [r3, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d040      	beq.n	80014ac <redrawFFTdisplay+0xbc>
 800142a:	2b01      	cmp	r3, #1
 800142c:	f040 8103 	bne.w	8001636 <redrawFFTdisplay+0x246>
	case OCTAVE:
		Displ_FillArea(fftDisplay->x0, fftDisplay->y0+FFT_HEIGHT+7,fftDisplay->x0+FFT_WIDTH,fftDisplay->y0+FFT_HEIGHT+10,BACKGROUND_COLOR);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	8818      	ldrh	r0, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	885b      	ldrh	r3, [r3, #2]
 8001438:	3343      	adds	r3, #67	@ 0x43
 800143a:	b299      	uxth	r1, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	881b      	ldrh	r3, [r3, #0]
 8001440:	3387      	adds	r3, #135	@ 0x87
 8001442:	b29a      	uxth	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	885b      	ldrh	r3, [r3, #2]
 8001448:	3346      	adds	r3, #70	@ 0x46
 800144a:	b29b      	uxth	r3, r3
 800144c:	f243 14e8 	movw	r4, #12776	@ 0x31e8
 8001450:	9400      	str	r4, [sp, #0]
 8001452:	f001 fc1b 	bl	8002c8c <Displ_FillArea>
		Displ_CString(fftDisplay->x0 - 12, fftDisplay->y0 + FFT_HEIGHT + 12, fftDisplay->x0 + FFT_WIDTH + 12, Font12.Height + fftDisplay->y0 + FFT_HEIGHT + 12,"octaves", Font12, 1, TEXT_COLOR, BACKGROUND_COLOR);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	3b0c      	subs	r3, #12
 800145c:	b29c      	uxth	r4, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	885b      	ldrh	r3, [r3, #2]
 8001462:	3348      	adds	r3, #72	@ 0x48
 8001464:	b29d      	uxth	r5, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	3393      	adds	r3, #147	@ 0x93
 800146c:	b29e      	uxth	r6, r3
 800146e:	4b76      	ldr	r3, [pc, #472]	@ (8001648 <redrawFFTdisplay+0x258>)
 8001470:	88da      	ldrh	r2, [r3, #6]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	885b      	ldrh	r3, [r3, #2]
 8001476:	4413      	add	r3, r2
 8001478:	b29b      	uxth	r3, r3
 800147a:	3348      	adds	r3, #72	@ 0x48
 800147c:	fa1f fc83 	uxth.w	ip, r3
 8001480:	f243 13e8 	movw	r3, #12776	@ 0x31e8
 8001484:	9306      	str	r3, [sp, #24]
 8001486:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800148a:	9305      	str	r3, [sp, #20]
 800148c:	2301      	movs	r3, #1
 800148e:	9304      	str	r3, [sp, #16]
 8001490:	4a6d      	ldr	r2, [pc, #436]	@ (8001648 <redrawFFTdisplay+0x258>)
 8001492:	ab01      	add	r3, sp, #4
 8001494:	ca07      	ldmia	r2, {r0, r1, r2}
 8001496:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800149a:	4b6c      	ldr	r3, [pc, #432]	@ (800164c <redrawFFTdisplay+0x25c>)
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	4663      	mov	r3, ip
 80014a0:	4632      	mov	r2, r6
 80014a2:	4629      	mov	r1, r5
 80014a4:	4620      	mov	r0, r4
 80014a6:	f002 f8ab 	bl	8003600 <Displ_CString>
		break;
 80014aa:	e0c4      	b.n	8001636 <redrawFFTdisplay+0x246>
	case LINEAR:
		Displ_CString(fftDisplay->x0, fftDisplay->y0 + FFT_HEIGHT + 12, fftDisplay->x0 + FFT_WIDTH, Font12.Height + fftDisplay->y0 + FFT_HEIGHT + 12, "frequency [kHz]",Font12, 1, TEXT_COLOR, BACKGROUND_COLOR);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	881c      	ldrh	r4, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	885b      	ldrh	r3, [r3, #2]
 80014b4:	3348      	adds	r3, #72	@ 0x48
 80014b6:	b29d      	uxth	r5, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	3387      	adds	r3, #135	@ 0x87
 80014be:	b29e      	uxth	r6, r3
 80014c0:	4b61      	ldr	r3, [pc, #388]	@ (8001648 <redrawFFTdisplay+0x258>)
 80014c2:	88da      	ldrh	r2, [r3, #6]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	885b      	ldrh	r3, [r3, #2]
 80014c8:	4413      	add	r3, r2
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	3348      	adds	r3, #72	@ 0x48
 80014ce:	fa1f fc83 	uxth.w	ip, r3
 80014d2:	f243 13e8 	movw	r3, #12776	@ 0x31e8
 80014d6:	9306      	str	r3, [sp, #24]
 80014d8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80014dc:	9305      	str	r3, [sp, #20]
 80014de:	2301      	movs	r3, #1
 80014e0:	9304      	str	r3, [sp, #16]
 80014e2:	4a59      	ldr	r2, [pc, #356]	@ (8001648 <redrawFFTdisplay+0x258>)
 80014e4:	ab01      	add	r3, sp, #4
 80014e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80014e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80014ec:	4b58      	ldr	r3, [pc, #352]	@ (8001650 <redrawFFTdisplay+0x260>)
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	4663      	mov	r3, ip
 80014f2:	4632      	mov	r2, r6
 80014f4:	4629      	mov	r1, r5
 80014f6:	4620      	mov	r0, r4
 80014f8:	f002 f882 	bl	8003600 <Displ_CString>
		Displ_CString(fftDisplay->x0 - 8, fftDisplay->y0 + FFT_HEIGHT + 12, fftDisplay->x0 + 16, Font8.Height + fftDisplay->y0 + FFT_HEIGHT + 12, "0", Font8, 1,TEXT_COLOR, BACKGROUND_COLOR);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	3b08      	subs	r3, #8
 8001502:	b29c      	uxth	r4, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	885b      	ldrh	r3, [r3, #2]
 8001508:	3348      	adds	r3, #72	@ 0x48
 800150a:	b29d      	uxth	r5, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	3310      	adds	r3, #16
 8001512:	b29e      	uxth	r6, r3
 8001514:	4b4f      	ldr	r3, [pc, #316]	@ (8001654 <redrawFFTdisplay+0x264>)
 8001516:	88da      	ldrh	r2, [r3, #6]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	885b      	ldrh	r3, [r3, #2]
 800151c:	4413      	add	r3, r2
 800151e:	b29b      	uxth	r3, r3
 8001520:	3348      	adds	r3, #72	@ 0x48
 8001522:	fa1f fc83 	uxth.w	ip, r3
 8001526:	f243 13e8 	movw	r3, #12776	@ 0x31e8
 800152a:	9306      	str	r3, [sp, #24]
 800152c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001530:	9305      	str	r3, [sp, #20]
 8001532:	2301      	movs	r3, #1
 8001534:	9304      	str	r3, [sp, #16]
 8001536:	4a47      	ldr	r2, [pc, #284]	@ (8001654 <redrawFFTdisplay+0x264>)
 8001538:	ab01      	add	r3, sp, #4
 800153a:	ca07      	ldmia	r2, {r0, r1, r2}
 800153c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001540:	4b45      	ldr	r3, [pc, #276]	@ (8001658 <redrawFFTdisplay+0x268>)
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	4663      	mov	r3, ip
 8001546:	4632      	mov	r2, r6
 8001548:	4629      	mov	r1, r5
 800154a:	4620      	mov	r0, r4
 800154c:	f002 f858 	bl	8003600 <Displ_CString>
		Displ_CString(fftDisplay->x0 + FFT_WIDTH - 14, fftDisplay->y0 + FFT_HEIGHT + 12, fftDisplay->x0 + FFT_WIDTH + 6,Font8.Height + fftDisplay->y0 + FFT_HEIGHT + 12, "24", Font8, 1, TEXT_COLOR, BACKGROUND_COLOR);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	3379      	adds	r3, #121	@ 0x79
 8001556:	b29c      	uxth	r4, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	885b      	ldrh	r3, [r3, #2]
 800155c:	3348      	adds	r3, #72	@ 0x48
 800155e:	b29d      	uxth	r5, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	338d      	adds	r3, #141	@ 0x8d
 8001566:	b29e      	uxth	r6, r3
 8001568:	4b3a      	ldr	r3, [pc, #232]	@ (8001654 <redrawFFTdisplay+0x264>)
 800156a:	88da      	ldrh	r2, [r3, #6]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	885b      	ldrh	r3, [r3, #2]
 8001570:	4413      	add	r3, r2
 8001572:	b29b      	uxth	r3, r3
 8001574:	3348      	adds	r3, #72	@ 0x48
 8001576:	fa1f fc83 	uxth.w	ip, r3
 800157a:	f243 13e8 	movw	r3, #12776	@ 0x31e8
 800157e:	9306      	str	r3, [sp, #24]
 8001580:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001584:	9305      	str	r3, [sp, #20]
 8001586:	2301      	movs	r3, #1
 8001588:	9304      	str	r3, [sp, #16]
 800158a:	4a32      	ldr	r2, [pc, #200]	@ (8001654 <redrawFFTdisplay+0x264>)
 800158c:	ab01      	add	r3, sp, #4
 800158e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001590:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001594:	4b31      	ldr	r3, [pc, #196]	@ (800165c <redrawFFTdisplay+0x26c>)
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	4663      	mov	r3, ip
 800159a:	4632      	mov	r2, r6
 800159c:	4629      	mov	r1, r5
 800159e:	4620      	mov	r0, r4
 80015a0:	f002 f82e 	bl	8003600 <Displ_CString>

		float x = 0.0;
 80015a4:	f04f 0300 	mov.w	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
		while (x < FFT_WIDTH){
 80015aa:	e03a      	b.n	8001622 <redrawFFTdisplay+0x232>
			Displ_Line(fftDisplay->x0+(uint16_t)x+4, fftDisplay->y0 + FFT_HEIGHT + 10, fftDisplay->x0+(uint16_t)x+4, fftDisplay->y0 + FFT_HEIGHT + 7, TEXT_COLOR);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	881a      	ldrh	r2, [r3, #0]
 80015b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80015b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015b8:	ee17 3a90 	vmov	r3, s15
 80015bc:	b29b      	uxth	r3, r3
 80015be:	4413      	add	r3, r2
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	3304      	adds	r3, #4
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	b218      	sxth	r0, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	885b      	ldrh	r3, [r3, #2]
 80015cc:	3346      	adds	r3, #70	@ 0x46
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	b219      	sxth	r1, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	881a      	ldrh	r2, [r3, #0]
 80015d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80015da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015de:	ee17 3a90 	vmov	r3, s15
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	4413      	add	r3, r2
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	3304      	adds	r3, #4
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	b21a      	sxth	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	885b      	ldrh	r3, [r3, #2]
 80015f2:	3343      	adds	r3, #67	@ 0x43
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	f44f 64fc 	mov.w	r4, #2016	@ 0x7e0
 80015fc:	9400      	str	r4, [sp, #0]
 80015fe:	f001 fd1b 	bl	8003038 <Displ_Line>
			x += 10.667;
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	f7fe ffa0 	bl	8000548 <__aeabi_f2d>
 8001608:	a30d      	add	r3, pc, #52	@ (adr r3, 8001640 <redrawFFTdisplay+0x250>)
 800160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160e:	f7fe fe3d 	bl	800028c <__adddf3>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f7ff fac5 	bl	8000ba8 <__aeabi_d2f>
 800161e:	4603      	mov	r3, r0
 8001620:	60fb      	str	r3, [r7, #12]
		while (x < FFT_WIDTH){
 8001622:	edd7 7a03 	vldr	s15, [r7, #12]
 8001626:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001660 <redrawFFTdisplay+0x270>
 800162a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800162e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001632:	d4bb      	bmi.n	80015ac <redrawFFTdisplay+0x1bc>
		}
		break;
 8001634:	bf00      	nop
	}
}
 8001636:	bf00      	nop
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800163e:	bf00      	nop
 8001640:	0624dd2f 	.word	0x0624dd2f
 8001644:	40255581 	.word	0x40255581
 8001648:	20000000 	.word	0x20000000
 800164c:	0800e410 	.word	0x0800e410
 8001650:	0800e418 	.word	0x0800e418
 8001654:	20000018 	.word	0x20000018
 8001658:	0800e428 	.word	0x0800e428
 800165c:	0800e42c 	.word	0x0800e42c
 8001660:	43070000 	.word	0x43070000
 8001664:	00000000 	.word	0x00000000

08001668 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001668:	b5b0      	push	{r4, r5, r7, lr}
 800166a:	b08a      	sub	sp, #40	@ 0x28
 800166c:	af08      	add	r7, sp, #32
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800166e:	f002 fafe 	bl	8003c6e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001672:	f000 f9cf 	bl	8001a14 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8001676:	f000 fa2f 	bl	8001ad8 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800167a:	f000 fb5f 	bl	8001d3c <MX_GPIO_Init>
	MX_DMA_Init();
 800167e:	f000 fb23 	bl	8001cc8 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001682:	f000 faf1 	bl	8001c68 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 8001686:	f000 fab1 	bl	8001bec <MX_SPI1_Init>
	MX_SAI1_Init();
 800168a:	f000 fa4f 	bl	8001b2c <MX_SAI1_Init>
	/* USER CODE BEGIN 2 */
	Displ_Init(Displ_Orientat_90);
 800168e:	2001      	movs	r0, #1
 8001690:	f001 fa5c 	bl	8002b4c <Displ_Init>
	Displ_CLS(BACKGROUND_COLOR);
 8001694:	f243 10e8 	movw	r0, #12776	@ 0x31e8
 8001698:	f001 fbdc 	bl	8002e54 <Displ_CLS>
	Displ_BackLight('F');
 800169c:	2046      	movs	r0, #70	@ 0x46
 800169e:	f002 f89b 	bl	80037d8 <Displ_BackLight>
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*) saiTx_buf, SAI_BUF_LEN);
 80016a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016a6:	49c2      	ldr	r1, [pc, #776]	@ (80019b0 <main+0x348>)
 80016a8:	48c2      	ldr	r0, [pc, #776]	@ (80019b4 <main+0x34c>)
 80016aa:	f005 f909 	bl	80068c0 <HAL_SAI_Transmit_DMA>
	HAL_SAI_Receive_DMA(&hsai_BlockB1, (uint8_t*) saiRx_buf, SAI_BUF_LEN);
 80016ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016b2:	49c1      	ldr	r1, [pc, #772]	@ (80019b8 <main+0x350>)
 80016b4:	48c1      	ldr	r0, [pc, #772]	@ (80019bc <main+0x354>)
 80016b6:	f005 f9b3 	bl	8006a20 <HAL_SAI_Receive_DMA>
	arm_rfft_fast_init_f32(&fft_instance, BUFFER_SIZE);
 80016ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016be:	48c0      	ldr	r0, [pc, #768]	@ (80019c0 <main+0x358>)
 80016c0:	f007 fdcc 	bl	800925c <arm_rfft_fast_init_f32>

	initFFTdisplay(&fftDisplayLeft, 12, 148, style, octValuesLeft );
 80016c4:	4bbf      	ldr	r3, [pc, #764]	@ (80019c4 <main+0x35c>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4abf      	ldr	r2, [pc, #764]	@ (80019c8 <main+0x360>)
 80016ca:	9200      	str	r2, [sp, #0]
 80016cc:	2294      	movs	r2, #148	@ 0x94
 80016ce:	210c      	movs	r1, #12
 80016d0:	48be      	ldr	r0, [pc, #760]	@ (80019cc <main+0x364>)
 80016d2:	f7ff fe6c 	bl	80013ae <initFFTdisplay>
	initFFTdisplay(&fftDisplayRight, 172, 148, style, octValuesRight );
 80016d6:	4bbb      	ldr	r3, [pc, #748]	@ (80019c4 <main+0x35c>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	4abd      	ldr	r2, [pc, #756]	@ (80019d0 <main+0x368>)
 80016dc:	9200      	str	r2, [sp, #0]
 80016de:	2294      	movs	r2, #148	@ 0x94
 80016e0:	21ac      	movs	r1, #172	@ 0xac
 80016e2:	48bc      	ldr	r0, [pc, #752]	@ (80019d4 <main+0x36c>)
 80016e4:	f7ff fe63 	bl	80013ae <initFFTdisplay>

	initVUmeter(12, 30);
 80016e8:	211e      	movs	r1, #30
 80016ea:	200c      	movs	r0, #12
 80016ec:	f001 f8d4 	bl	8002898 <initVUmeter>
	initVUmeter(172, 30);
 80016f0:	211e      	movs	r1, #30
 80016f2:	20ac      	movs	r0, #172	@ 0xac
 80016f4:	f001 f8d0 	bl	8002898 <initVUmeter>

	Displ_CString(12, 112, 148, Font16.Height + 114, "Left", Font16, 1, TEXT_COLOR, BACKGROUND_COLOR);
 80016f8:	4bb7      	ldr	r3, [pc, #732]	@ (80019d8 <main+0x370>)
 80016fa:	88db      	ldrh	r3, [r3, #6]
 80016fc:	3372      	adds	r3, #114	@ 0x72
 80016fe:	b29c      	uxth	r4, r3
 8001700:	f243 13e8 	movw	r3, #12776	@ 0x31e8
 8001704:	9306      	str	r3, [sp, #24]
 8001706:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800170a:	9305      	str	r3, [sp, #20]
 800170c:	2301      	movs	r3, #1
 800170e:	9304      	str	r3, [sp, #16]
 8001710:	4ab1      	ldr	r2, [pc, #708]	@ (80019d8 <main+0x370>)
 8001712:	ab01      	add	r3, sp, #4
 8001714:	ca07      	ldmia	r2, {r0, r1, r2}
 8001716:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800171a:	4bb0      	ldr	r3, [pc, #704]	@ (80019dc <main+0x374>)
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	4623      	mov	r3, r4
 8001720:	2294      	movs	r2, #148	@ 0x94
 8001722:	2170      	movs	r1, #112	@ 0x70
 8001724:	200c      	movs	r0, #12
 8001726:	f001 ff6b 	bl	8003600 <Displ_CString>
	Displ_CString(172, 112, 308, Font16.Height + 114, "Right", Font16, 1, TEXT_COLOR, BACKGROUND_COLOR);
 800172a:	4bab      	ldr	r3, [pc, #684]	@ (80019d8 <main+0x370>)
 800172c:	88db      	ldrh	r3, [r3, #6]
 800172e:	3372      	adds	r3, #114	@ 0x72
 8001730:	b29c      	uxth	r4, r3
 8001732:	f243 13e8 	movw	r3, #12776	@ 0x31e8
 8001736:	9306      	str	r3, [sp, #24]
 8001738:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800173c:	9305      	str	r3, [sp, #20]
 800173e:	2301      	movs	r3, #1
 8001740:	9304      	str	r3, [sp, #16]
 8001742:	4aa5      	ldr	r2, [pc, #660]	@ (80019d8 <main+0x370>)
 8001744:	ab01      	add	r3, sp, #4
 8001746:	ca07      	ldmia	r2, {r0, r1, r2}
 8001748:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800174c:	4ba4      	ldr	r3, [pc, #656]	@ (80019e0 <main+0x378>)
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	4623      	mov	r3, r4
 8001752:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8001756:	2170      	movs	r1, #112	@ 0x70
 8001758:	20ac      	movs	r0, #172	@ 0xac
 800175a:	f001 ff51 	bl	8003600 <Displ_CString>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (!fft_data_request) {
 800175e:	4ba1      	ldr	r3, [pc, #644]	@ (80019e4 <main+0x37c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d124      	bne.n	80017b0 <main+0x148>
			arm_mult_f32(inputLeftFFT, KAISER_WINDOW, inputLeftFFT, BUFFER_SIZE);
 8001766:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800176a:	4a9f      	ldr	r2, [pc, #636]	@ (80019e8 <main+0x380>)
 800176c:	499f      	ldr	r1, [pc, #636]	@ (80019ec <main+0x384>)
 800176e:	489e      	ldr	r0, [pc, #632]	@ (80019e8 <main+0x380>)
 8001770:	f008 fbc0 	bl	8009ef4 <arm_mult_f32>
			arm_rfft_fast_f32(&fft_instance, inputLeftFFT, outputFFT, 0);
 8001774:	2300      	movs	r3, #0
 8001776:	4a9e      	ldr	r2, [pc, #632]	@ (80019f0 <main+0x388>)
 8001778:	499b      	ldr	r1, [pc, #620]	@ (80019e8 <main+0x380>)
 800177a:	4891      	ldr	r0, [pc, #580]	@ (80019c0 <main+0x358>)
 800177c:	f007 fe52 	bl	8009424 <arm_rfft_fast_f32>
			displayFFTdata(&fftDisplayLeft, outputFFT);
 8001780:	499b      	ldr	r1, [pc, #620]	@ (80019f0 <main+0x388>)
 8001782:	4892      	ldr	r0, [pc, #584]	@ (80019cc <main+0x364>)
 8001784:	f7ff fbd8 	bl	8000f38 <displayFFTdata>
			arm_mult_f32(inputRightFFT, KAISER_WINDOW, inputRightFFT, BUFFER_SIZE);
 8001788:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800178c:	4a99      	ldr	r2, [pc, #612]	@ (80019f4 <main+0x38c>)
 800178e:	4997      	ldr	r1, [pc, #604]	@ (80019ec <main+0x384>)
 8001790:	4898      	ldr	r0, [pc, #608]	@ (80019f4 <main+0x38c>)
 8001792:	f008 fbaf 	bl	8009ef4 <arm_mult_f32>
			arm_rfft_fast_f32(&fft_instance, inputRightFFT, outputFFT, 0);
 8001796:	2300      	movs	r3, #0
 8001798:	4a95      	ldr	r2, [pc, #596]	@ (80019f0 <main+0x388>)
 800179a:	4996      	ldr	r1, [pc, #600]	@ (80019f4 <main+0x38c>)
 800179c:	4888      	ldr	r0, [pc, #544]	@ (80019c0 <main+0x358>)
 800179e:	f007 fe41 	bl	8009424 <arm_rfft_fast_f32>
			displayFFTdata(&fftDisplayRight, outputFFT);
 80017a2:	4993      	ldr	r1, [pc, #588]	@ (80019f0 <main+0x388>)
 80017a4:	488b      	ldr	r0, [pc, #556]	@ (80019d4 <main+0x36c>)
 80017a6:	f7ff fbc7 	bl	8000f38 <displayFFTdata>
			fft_data_request = 1;
 80017aa:	4b8e      	ldr	r3, [pc, #568]	@ (80019e4 <main+0x37c>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	601a      	str	r2, [r3, #0]
		}

		if (powerComputed) {
 80017b0:	4b91      	ldr	r3, [pc, #580]	@ (80019f8 <main+0x390>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 80a5 	beq.w	8001904 <main+0x29c>
			q15_t PwrLeft = PowerLeft >> 15;
 80017ba:	4b90      	ldr	r3, [pc, #576]	@ (80019fc <main+0x394>)
 80017bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	0bc2      	lsrs	r2, r0, #15
 80017ca:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 80017ce:	13cb      	asrs	r3, r1, #15
 80017d0:	4613      	mov	r3, r2
 80017d2:	80fb      	strh	r3, [r7, #6]
			q15_t PwrRight = PowerRight >> 15;
 80017d4:	4b8a      	ldr	r3, [pc, #552]	@ (8001a00 <main+0x398>)
 80017d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	0bc2      	lsrs	r2, r0, #15
 80017e4:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 80017e8:	13cb      	asrs	r3, r1, #15
 80017ea:	4613      	mov	r3, r2
 80017ec:	80bb      	strh	r3, [r7, #4]
			q15_t VeffLeft, VeffRight;
			arm_sqrt_q15(PwrLeft, &VeffLeft);
 80017ee:	1cba      	adds	r2, r7, #2
 80017f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017f4:	4611      	mov	r1, r2
 80017f6:	4618      	mov	r0, r3
 80017f8:	f008 fb16 	bl	8009e28 <arm_sqrt_q15>
			arm_sqrt_q15(PwrRight, &VeffRight);
 80017fc:	463a      	mov	r2, r7
 80017fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f008 fb0f 	bl	8009e28 <arm_sqrt_q15>
			PwrAvgLeft = 0.93 * PwrAvgLeft + 0.07 * VU_GAIN / 32768 * (float32_t) (VeffLeft);
 800180a:	4b7e      	ldr	r3, [pc, #504]	@ (8001a04 <main+0x39c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe fe9a 	bl	8000548 <__aeabi_f2d>
 8001814:	a362      	add	r3, pc, #392	@ (adr r3, 80019a0 <main+0x338>)
 8001816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181a:	f7fe feed 	bl	80005f8 <__aeabi_dmul>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4614      	mov	r4, r2
 8001824:	461d      	mov	r5, r3
 8001826:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800182a:	ee07 3a90 	vmov	s15, r3
 800182e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001832:	ee17 0a90 	vmov	r0, s15
 8001836:	f7fe fe87 	bl	8000548 <__aeabi_f2d>
 800183a:	a35b      	add	r3, pc, #364	@ (adr r3, 80019a8 <main+0x340>)
 800183c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001840:	f7fe feda 	bl	80005f8 <__aeabi_dmul>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4620      	mov	r0, r4
 800184a:	4629      	mov	r1, r5
 800184c:	f7fe fd1e 	bl	800028c <__adddf3>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	f7ff f9a6 	bl	8000ba8 <__aeabi_d2f>
 800185c:	4603      	mov	r3, r0
 800185e:	4a69      	ldr	r2, [pc, #420]	@ (8001a04 <main+0x39c>)
 8001860:	6013      	str	r3, [r2, #0]
			PwrAvgRight = 0.93 * PwrAvgRight + 0.07 * VU_GAIN / 32768 * (float32_t) (VeffRight);
 8001862:	4b69      	ldr	r3, [pc, #420]	@ (8001a08 <main+0x3a0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fe6e 	bl	8000548 <__aeabi_f2d>
 800186c:	a34c      	add	r3, pc, #304	@ (adr r3, 80019a0 <main+0x338>)
 800186e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001872:	f7fe fec1 	bl	80005f8 <__aeabi_dmul>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4614      	mov	r4, r2
 800187c:	461d      	mov	r5, r3
 800187e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001882:	ee07 3a90 	vmov	s15, r3
 8001886:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800188a:	ee17 0a90 	vmov	r0, s15
 800188e:	f7fe fe5b 	bl	8000548 <__aeabi_f2d>
 8001892:	a345      	add	r3, pc, #276	@ (adr r3, 80019a8 <main+0x340>)
 8001894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001898:	f7fe feae 	bl	80005f8 <__aeabi_dmul>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4620      	mov	r0, r4
 80018a2:	4629      	mov	r1, r5
 80018a4:	f7fe fcf2 	bl	800028c <__adddf3>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4610      	mov	r0, r2
 80018ae:	4619      	mov	r1, r3
 80018b0:	f7ff f97a 	bl	8000ba8 <__aeabi_d2f>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4a54      	ldr	r2, [pc, #336]	@ (8001a08 <main+0x3a0>)
 80018b8:	6013      	str	r3, [r2, #0]
			displayVUmeter(12, 30, (int) 100.0 * PwrAvgLeft);
 80018ba:	4b52      	ldr	r3, [pc, #328]	@ (8001a04 <main+0x39c>)
 80018bc:	edd3 7a00 	vldr	s15, [r3]
 80018c0:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001a0c <main+0x3a4>
 80018c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018cc:	ee17 3a90 	vmov	r3, s15
 80018d0:	b21b      	sxth	r3, r3
 80018d2:	461a      	mov	r2, r3
 80018d4:	211e      	movs	r1, #30
 80018d6:	200c      	movs	r0, #12
 80018d8:	f000 fed2 	bl	8002680 <displayVUmeter>
			displayVUmeter(172, 30, (int) 100.0 * PwrAvgRight);
 80018dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001a08 <main+0x3a0>)
 80018de:	edd3 7a00 	vldr	s15, [r3]
 80018e2:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8001a0c <main+0x3a4>
 80018e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ee:	ee17 3a90 	vmov	r3, s15
 80018f2:	b21b      	sxth	r3, r3
 80018f4:	461a      	mov	r2, r3
 80018f6:	211e      	movs	r1, #30
 80018f8:	20ac      	movs	r0, #172	@ 0xac
 80018fa:	f000 fec1 	bl	8002680 <displayVUmeter>
			powerComputed = 0;
 80018fe:	4b3e      	ldr	r3, [pc, #248]	@ (80019f8 <main+0x390>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]

		}
		if (HAL_GetTick() - lastTouchTick > 20) {
 8001904:	f002 fa1c 	bl	8003d40 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	4b41      	ldr	r3, [pc, #260]	@ (8001a10 <main+0x3a8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b14      	cmp	r3, #20
 8001912:	f67f af24 	bls.w	800175e <main+0xf6>
			if (Touch_GotATouch(1)) {
 8001916:	2001      	movs	r0, #1
 8001918:	f002 f956 	bl	8003bc8 <Touch_GotATouch>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	f43f af1d 	beq.w	800175e <main+0xf6>
				if (Touch_In_XY_area(12, 148, 135, 60) || Touch_In_XY_area(172, 148, 135, 60)) {
 8001924:	233c      	movs	r3, #60	@ 0x3c
 8001926:	2287      	movs	r2, #135	@ 0x87
 8001928:	2194      	movs	r1, #148	@ 0x94
 800192a:	200c      	movs	r0, #12
 800192c:	f002 f912 	bl	8003b54 <Touch_In_XY_area>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d108      	bne.n	8001948 <main+0x2e0>
 8001936:	233c      	movs	r3, #60	@ 0x3c
 8001938:	2287      	movs	r2, #135	@ 0x87
 800193a:	2194      	movs	r1, #148	@ 0x94
 800193c:	20ac      	movs	r0, #172	@ 0xac
 800193e:	f002 f909 	bl	8003b54 <Touch_In_XY_area>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d022      	beq.n	800198e <main+0x326>
					if (style == LINEAR) {
 8001948:	4b1e      	ldr	r3, [pc, #120]	@ (80019c4 <main+0x35c>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d10f      	bne.n	8001970 <main+0x308>
						style = OCTAVE;
 8001950:	4b1c      	ldr	r3, [pc, #112]	@ (80019c4 <main+0x35c>)
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
						fftDisplayLeft.style = OCTAVE;
 8001956:	4b1d      	ldr	r3, [pc, #116]	@ (80019cc <main+0x364>)
 8001958:	2201      	movs	r2, #1
 800195a:	711a      	strb	r2, [r3, #4]
						redrawFFTdisplay(&fftDisplayLeft);
 800195c:	481b      	ldr	r0, [pc, #108]	@ (80019cc <main+0x364>)
 800195e:	f7ff fd47 	bl	80013f0 <redrawFFTdisplay>
						fftDisplayRight.style = OCTAVE;
 8001962:	4b1c      	ldr	r3, [pc, #112]	@ (80019d4 <main+0x36c>)
 8001964:	2201      	movs	r2, #1
 8001966:	711a      	strb	r2, [r3, #4]
						redrawFFTdisplay(&fftDisplayRight);
 8001968:	481a      	ldr	r0, [pc, #104]	@ (80019d4 <main+0x36c>)
 800196a:	f7ff fd41 	bl	80013f0 <redrawFFTdisplay>
 800196e:	e00e      	b.n	800198e <main+0x326>
					} else {
						style = LINEAR;
 8001970:	4b14      	ldr	r3, [pc, #80]	@ (80019c4 <main+0x35c>)
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]
						fftDisplayLeft.style = LINEAR;
 8001976:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <main+0x364>)
 8001978:	2200      	movs	r2, #0
 800197a:	711a      	strb	r2, [r3, #4]
						redrawFFTdisplay(&fftDisplayLeft);
 800197c:	4813      	ldr	r0, [pc, #76]	@ (80019cc <main+0x364>)
 800197e:	f7ff fd37 	bl	80013f0 <redrawFFTdisplay>
						fftDisplayRight.style = LINEAR;
 8001982:	4b14      	ldr	r3, [pc, #80]	@ (80019d4 <main+0x36c>)
 8001984:	2200      	movs	r2, #0
 8001986:	711a      	strb	r2, [r3, #4]
						redrawFFTdisplay(&fftDisplayRight);
 8001988:	4812      	ldr	r0, [pc, #72]	@ (80019d4 <main+0x36c>)
 800198a:	f7ff fd31 	bl	80013f0 <redrawFFTdisplay>
					}
				}
				lastTouchTick = HAL_GetTick();
 800198e:	f002 f9d7 	bl	8003d40 <HAL_GetTick>
 8001992:	4603      	mov	r3, r0
 8001994:	4a1e      	ldr	r2, [pc, #120]	@ (8001a10 <main+0x3a8>)
 8001996:	6013      	str	r3, [r2, #0]
		if (!fft_data_request) {
 8001998:	e6e1      	b.n	800175e <main+0xf6>
 800199a:	bf00      	nop
 800199c:	f3af 8000 	nop.w
 80019a0:	5c28f5c3 	.word	0x5c28f5c3
 80019a4:	3fedc28f 	.word	0x3fedc28f
 80019a8:	1d7dbf49 	.word	0x1d7dbf49
 80019ac:	3edc6738 	.word	0x3edc6738
 80019b0:	200004ec 	.word	0x200004ec
 80019b4:	20000224 	.word	0x20000224
 80019b8:	20000cec 	.word	0x20000cec
 80019bc:	200002a8 	.word	0x200002a8
 80019c0:	2000150c 	.word	0x2000150c
 80019c4:	20002128 	.word	0x20002128
 80019c8:	20002144 	.word	0x20002144
 80019cc:	2000212c 	.word	0x2000212c
 80019d0:	20002160 	.word	0x20002160
 80019d4:	20002138 	.word	0x20002138
 80019d8:	2000000c 	.word	0x2000000c
 80019dc:	0800e430 	.word	0x0800e430
 80019e0:	0800e438 	.word	0x0800e438
 80019e4:	20000024 	.word	0x20000024
 80019e8:	20001524 	.word	0x20001524
 80019ec:	0800f794 	.word	0x0800f794
 80019f0:	20001d24 	.word	0x20001d24
 80019f4:	20001924 	.word	0x20001924
 80019f8:	20001508 	.word	0x20001508
 80019fc:	200014f0 	.word	0x200014f0
 8001a00:	200014f8 	.word	0x200014f8
 8001a04:	20001500 	.word	0x20001500
 8001a08:	20001504 	.word	0x20001504
 8001a0c:	42c80000 	.word	0x42c80000
 8001a10:	20002124 	.word	0x20002124

08001a14 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b096      	sub	sp, #88	@ 0x58
 8001a18:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	2244      	movs	r2, #68	@ 0x44
 8001a20:	2100      	movs	r1, #0
 8001a22:	4618      	mov	r0, r3
 8001a24:	f009 fb1d 	bl	800b062 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001a28:	463b      	mov	r3, r7
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
 8001a34:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 8001a36:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001a3a:	f002 ff67 	bl	800490c <HAL_PWREx_ControlVoltageScaling>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <SystemClock_Config+0x34>
		Error_Handler();
 8001a44:	f000 fae8 	bl	8002018 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001a48:	f002 ff42 	bl	80048d0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a4c:	4b21      	ldr	r3, [pc, #132]	@ (8001ad4 <SystemClock_Config+0xc0>)
 8001a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a52:	4a20      	ldr	r2, [pc, #128]	@ (8001ad4 <SystemClock_Config+0xc0>)
 8001a54:	f023 0318 	bic.w	r3, r3, #24
 8001a58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
 8001a5c:	2314      	movs	r3, #20
 8001a5e:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a60:	2301      	movs	r3, #1
 8001a62:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a64:	2301      	movs	r3, #1
 8001a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8001a6c:	2390      	movs	r3, #144	@ 0x90
 8001a6e:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a70:	2302      	movs	r3, #2
 8001a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001a74:	2301      	movs	r3, #1
 8001a76:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 5;
 8001a78:	2305      	movs	r3, #5
 8001a7a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 33;
 8001a7c:	2321      	movs	r3, #33	@ 0x21
 8001a7e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a80:	2307      	movs	r3, #7
 8001a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a84:	2302      	movs	r3, #2
 8001a86:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	4618      	mov	r0, r3
 8001a92:	f002 ff91 	bl	80049b8 <HAL_RCC_OscConfig>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <SystemClock_Config+0x8c>
		Error_Handler();
 8001a9c:	f000 fabc 	bl	8002018 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001aa0:	230f      	movs	r3, #15
 8001aa2:	603b      	str	r3, [r7, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001ab4:	463b      	mov	r3, r7
 8001ab6:	2104      	movs	r1, #4
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f003 fb91 	bl	80051e0 <HAL_RCC_ClockConfig>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <SystemClock_Config+0xb4>
		Error_Handler();
 8001ac4:	f000 faa8 	bl	8002018 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8001ac8:	f004 fb82 	bl	80061d0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001acc:	bf00      	nop
 8001ace:	3758      	adds	r7, #88	@ 0x58
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40021000 	.word	0x40021000

08001ad8 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b096      	sub	sp, #88	@ 0x58
 8001adc:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	2254      	movs	r2, #84	@ 0x54
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f009 fabc 	bl	800b062 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001aea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001aee:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001af0:	2300      	movs	r3, #0
 8001af2:	643b      	str	r3, [r7, #64]	@ 0x40
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001af4:	2301      	movs	r3, #1
 8001af6:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8001af8:	2305      	movs	r3, #5
 8001afa:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 64;
 8001afc:	2340      	movs	r3, #64	@ 0x40
 8001afe:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV25;
 8001b00:	2319      	movs	r3, #25
 8001b02:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b04:	2302      	movs	r3, #2
 8001b06:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8001b0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b10:	623b      	str	r3, [r7, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	4618      	mov	r0, r3
 8001b16:	f003 fd87 	bl	8005628 <HAL_RCCEx_PeriphCLKConfig>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <PeriphCommonClock_Config+0x4c>
		Error_Handler();
 8001b20:	f000 fa7a 	bl	8002018 <Error_Handler>
	}
}
 8001b24:	bf00      	nop
 8001b26:	3758      	adds	r7, #88	@ 0x58
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <MX_SAI1_Init>:
/**
 * @brief SAI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI1_Init(void) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
	/* USER CODE END SAI1_Init 0 */

	/* USER CODE BEGIN SAI1_Init 1 */

	/* USER CODE END SAI1_Init 1 */
	hsai_BlockA1.Instance = SAI1_Block_A;
 8001b30:	4b2a      	ldr	r3, [pc, #168]	@ (8001bdc <MX_SAI1_Init+0xb0>)
 8001b32:	4a2b      	ldr	r2, [pc, #172]	@ (8001be0 <MX_SAI1_Init+0xb4>)
 8001b34:	601a      	str	r2, [r3, #0]
	hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001b36:	4b29      	ldr	r3, [pc, #164]	@ (8001bdc <MX_SAI1_Init+0xb0>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	605a      	str	r2, [r3, #4]
	hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001b3c:	4b27      	ldr	r3, [pc, #156]	@ (8001bdc <MX_SAI1_Init+0xb0>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
	hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001b42:	4b26      	ldr	r3, [pc, #152]	@ (8001bdc <MX_SAI1_Init+0xb0>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	611a      	str	r2, [r3, #16]
	hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001b48:	4b24      	ldr	r3, [pc, #144]	@ (8001bdc <MX_SAI1_Init+0xb0>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	615a      	str	r2, [r3, #20]
	hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001b4e:	4b23      	ldr	r3, [pc, #140]	@ (8001bdc <MX_SAI1_Init+0xb0>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
	hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001b54:	4b21      	ldr	r3, [pc, #132]	@ (8001bdc <MX_SAI1_Init+0xb0>)
 8001b56:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001b5a:	61da      	str	r2, [r3, #28]
	hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bdc <MX_SAI1_Init+0xb0>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60da      	str	r2, [r3, #12]
	hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001b62:	4b1e      	ldr	r3, [pc, #120]	@ (8001bdc <MX_SAI1_Init+0xb0>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	625a      	str	r2, [r3, #36]	@ 0x24
	hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b68:	4b1c      	ldr	r3, [pc, #112]	@ (8001bdc <MX_SAI1_Init+0xb0>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	629a      	str	r2, [r3, #40]	@ 0x28
	hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bdc <MX_SAI1_Init+0xb0>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK) {
 8001b74:	2302      	movs	r3, #2
 8001b76:	2200      	movs	r2, #0
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4818      	ldr	r0, [pc, #96]	@ (8001bdc <MX_SAI1_Init+0xb0>)
 8001b7c:	f004 fce6 	bl	800654c <HAL_SAI_InitProtocol>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_SAI1_Init+0x5e>
		Error_Handler();
 8001b86:	f000 fa47 	bl	8002018 <Error_Handler>
	}
	hsai_BlockB1.Instance = SAI1_Block_B;
 8001b8a:	4b16      	ldr	r3, [pc, #88]	@ (8001be4 <MX_SAI1_Init+0xb8>)
 8001b8c:	4a16      	ldr	r2, [pc, #88]	@ (8001be8 <MX_SAI1_Init+0xbc>)
 8001b8e:	601a      	str	r2, [r3, #0]
	hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001b90:	4b14      	ldr	r3, [pc, #80]	@ (8001be4 <MX_SAI1_Init+0xb8>)
 8001b92:	2203      	movs	r2, #3
 8001b94:	605a      	str	r2, [r3, #4]
	hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001b96:	4b13      	ldr	r3, [pc, #76]	@ (8001be4 <MX_SAI1_Init+0xb8>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	609a      	str	r2, [r3, #8]
	hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001b9c:	4b11      	ldr	r3, [pc, #68]	@ (8001be4 <MX_SAI1_Init+0xb8>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]
	hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001ba2:	4b10      	ldr	r3, [pc, #64]	@ (8001be4 <MX_SAI1_Init+0xb8>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
	hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <MX_SAI1_Init+0xb8>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	60da      	str	r2, [r3, #12]
	hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001bae:	4b0d      	ldr	r3, [pc, #52]	@ (8001be4 <MX_SAI1_Init+0xb8>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	625a      	str	r2, [r3, #36]	@ 0x24
	hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001be4 <MX_SAI1_Init+0xb8>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	629a      	str	r2, [r3, #40]	@ 0x28
	hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001bba:	4b0a      	ldr	r3, [pc, #40]	@ (8001be4 <MX_SAI1_Init+0xb8>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK) {
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4807      	ldr	r0, [pc, #28]	@ (8001be4 <MX_SAI1_Init+0xb8>)
 8001bc8:	f004 fcc0 	bl	800654c <HAL_SAI_InitProtocol>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_SAI1_Init+0xaa>
		Error_Handler();
 8001bd2:	f000 fa21 	bl	8002018 <Error_Handler>
	}
	/* USER CODE BEGIN SAI1_Init 2 */

	/* USER CODE END SAI1_Init 2 */

}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000224 	.word	0x20000224
 8001be0:	40015404 	.word	0x40015404
 8001be4:	200002a8 	.word	0x200002a8
 8001be8:	40015424 	.word	0x40015424

08001bec <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c60 <MX_SPI1_Init+0x74>)
 8001bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8001c64 <MX_SPI1_Init+0x78>)
 8001bf4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c60 <MX_SPI1_Init+0x74>)
 8001bf8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001bfc:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bfe:	4b18      	ldr	r3, [pc, #96]	@ (8001c60 <MX_SPI1_Init+0x74>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c04:	4b16      	ldr	r3, [pc, #88]	@ (8001c60 <MX_SPI1_Init+0x74>)
 8001c06:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001c0a:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c0c:	4b14      	ldr	r3, [pc, #80]	@ (8001c60 <MX_SPI1_Init+0x74>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c12:	4b13      	ldr	r3, [pc, #76]	@ (8001c60 <MX_SPI1_Init+0x74>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c18:	4b11      	ldr	r3, [pc, #68]	@ (8001c60 <MX_SPI1_Init+0x74>)
 8001c1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c1e:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001c20:	4b0f      	ldr	r3, [pc, #60]	@ (8001c60 <MX_SPI1_Init+0x74>)
 8001c22:	2220      	movs	r2, #32
 8001c24:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c26:	4b0e      	ldr	r3, [pc, #56]	@ (8001c60 <MX_SPI1_Init+0x74>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c60 <MX_SPI1_Init+0x74>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c32:	4b0b      	ldr	r3, [pc, #44]	@ (8001c60 <MX_SPI1_Init+0x74>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001c38:	4b09      	ldr	r3, [pc, #36]	@ (8001c60 <MX_SPI1_Init+0x74>)
 8001c3a:	2207      	movs	r2, #7
 8001c3c:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c3e:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <MX_SPI1_Init+0x74>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c44:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <MX_SPI1_Init+0x74>)
 8001c46:	2208      	movs	r2, #8
 8001c48:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001c4a:	4805      	ldr	r0, [pc, #20]	@ (8001c60 <MX_SPI1_Init+0x74>)
 8001c4c:	f005 fbb8 	bl	80073c0 <HAL_SPI_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_SPI1_Init+0x6e>
		Error_Handler();
 8001c56:	f000 f9df 	bl	8002018 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200003bc 	.word	0x200003bc
 8001c64:	40013000 	.word	0x40013000

08001c68 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001c6c:	4b14      	ldr	r3, [pc, #80]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001c6e:	4a15      	ldr	r2, [pc, #84]	@ (8001cc4 <MX_USART2_UART_Init+0x5c>)
 8001c70:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001c72:	4b13      	ldr	r3, [pc, #76]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001c74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c78:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c7a:	4b11      	ldr	r3, [pc, #68]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001c80:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001c86:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001c8e:	220c      	movs	r2, #12
 8001c90:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c92:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c98:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c9e:	4b08      	ldr	r3, [pc, #32]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ca4:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001caa:	4805      	ldr	r0, [pc, #20]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001cac:	f006 fd20 	bl	80086f0 <HAL_UART_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8001cb6:	f000 f9af 	bl	8002018 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000468 	.word	0x20000468
 8001cc4:	40004400 	.word	0x40004400

08001cc8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001cce:	4b1a      	ldr	r3, [pc, #104]	@ (8001d38 <MX_DMA_Init+0x70>)
 8001cd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cd2:	4a19      	ldr	r2, [pc, #100]	@ (8001d38 <MX_DMA_Init+0x70>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6493      	str	r3, [r2, #72]	@ 0x48
 8001cda:	4b17      	ldr	r3, [pc, #92]	@ (8001d38 <MX_DMA_Init+0x70>)
 8001cdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001ce6:	4b14      	ldr	r3, [pc, #80]	@ (8001d38 <MX_DMA_Init+0x70>)
 8001ce8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cea:	4a13      	ldr	r2, [pc, #76]	@ (8001d38 <MX_DMA_Init+0x70>)
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	6493      	str	r3, [r2, #72]	@ 0x48
 8001cf2:	4b11      	ldr	r3, [pc, #68]	@ (8001d38 <MX_DMA_Init+0x70>)
 8001cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2100      	movs	r1, #0
 8001d02:	200d      	movs	r0, #13
 8001d04:	f002 f969 	bl	8003fda <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001d08:	200d      	movs	r0, #13
 8001d0a:	f002 f982 	bl	8004012 <HAL_NVIC_EnableIRQ>
	/* DMA2_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2100      	movs	r1, #0
 8001d12:	2038      	movs	r0, #56	@ 0x38
 8001d14:	f002 f961 	bl	8003fda <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001d18:	2038      	movs	r0, #56	@ 0x38
 8001d1a:	f002 f97a 	bl	8004012 <HAL_NVIC_EnableIRQ>
	/* DMA2_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2100      	movs	r1, #0
 8001d22:	2039      	movs	r0, #57	@ 0x39
 8001d24:	f002 f959 	bl	8003fda <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8001d28:	2039      	movs	r0, #57	@ 0x39
 8001d2a:	f002 f972 	bl	8004012 <HAL_NVIC_EnableIRQ>

}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40021000 	.word	0x40021000

08001d3c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001d42:	f107 030c 	add.w	r3, r7, #12
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
 8001d50:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001d52:	4b48      	ldr	r3, [pc, #288]	@ (8001e74 <MX_GPIO_Init+0x138>)
 8001d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d56:	4a47      	ldr	r2, [pc, #284]	@ (8001e74 <MX_GPIO_Init+0x138>)
 8001d58:	f043 0304 	orr.w	r3, r3, #4
 8001d5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d5e:	4b45      	ldr	r3, [pc, #276]	@ (8001e74 <MX_GPIO_Init+0x138>)
 8001d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d62:	f003 0304 	and.w	r3, r3, #4
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	4b42      	ldr	r3, [pc, #264]	@ (8001e74 <MX_GPIO_Init+0x138>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6e:	4a41      	ldr	r2, [pc, #260]	@ (8001e74 <MX_GPIO_Init+0x138>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d76:	4b3f      	ldr	r3, [pc, #252]	@ (8001e74 <MX_GPIO_Init+0x138>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d82:	4b3c      	ldr	r3, [pc, #240]	@ (8001e74 <MX_GPIO_Init+0x138>)
 8001d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d86:	4a3b      	ldr	r2, [pc, #236]	@ (8001e74 <MX_GPIO_Init+0x138>)
 8001d88:	f043 0302 	orr.w	r3, r3, #2
 8001d8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d8e:	4b39      	ldr	r3, [pc, #228]	@ (8001e74 <MX_GPIO_Init+0x138>)
 8001d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	603b      	str	r3, [r7, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, DISPL_DC_Pin | DISPL_CS_Pin, GPIO_PIN_SET);
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	2130      	movs	r1, #48	@ 0x30
 8001d9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001da2:	f002 fd65 	bl	8004870 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 8001da6:	2201      	movs	r2, #1
 8001da8:	2102      	movs	r1, #2
 8001daa:	4833      	ldr	r0, [pc, #204]	@ (8001e78 <MX_GPIO_Init+0x13c>)
 8001dac:	f002 fd60 	bl	8004870 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8001db0:	2200      	movs	r2, #0
 8001db2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001db6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dba:	f002 fd59 	bl	8004870 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_RESET);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2108      	movs	r1, #8
 8001dc2:	482d      	ldr	r0, [pc, #180]	@ (8001e78 <MX_GPIO_Init+0x13c>)
 8001dc4:	f002 fd54 	bl	8004870 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : DISPL_DC_Pin DISPL_CS_Pin */
	GPIO_InitStruct.Pin = DISPL_DC_Pin | DISPL_CS_Pin;
 8001dc8:	2330      	movs	r3, #48	@ 0x30
 8001dca:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd8:	f107 030c 	add.w	r3, r7, #12
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001de2:	f002 fbc3 	bl	800456c <HAL_GPIO_Init>

	/*Configure GPIO pin : TOUCH_CS_Pin */
	GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8001de6:	2302      	movs	r3, #2
 8001de8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dea:	2301      	movs	r3, #1
 8001dec:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001df2:	2302      	movs	r3, #2
 8001df4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8001df6:	f107 030c 	add.w	r3, r7, #12
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	481e      	ldr	r0, [pc, #120]	@ (8001e78 <MX_GPIO_Init+0x13c>)
 8001dfe:	f002 fbb5 	bl	800456c <HAL_GPIO_Init>

	/*Configure GPIO pin : TOUCH_INT_Pin */
	GPIO_InitStruct.Pin = TOUCH_INT_Pin;
 8001e02:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e06:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e08:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001e0c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 8001e12:	f107 030c 	add.w	r3, r7, #12
 8001e16:	4619      	mov	r1, r3
 8001e18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e1c:	f002 fba6 	bl	800456c <HAL_GPIO_Init>

	/*Configure GPIO pin : DISPL_RST_Pin */
	GPIO_InitStruct.Pin = DISPL_RST_Pin;
 8001e20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e24:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e26:	2301      	movs	r3, #1
 8001e28:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(DISPL_RST_GPIO_Port, &GPIO_InitStruct);
 8001e32:	f107 030c 	add.w	r3, r7, #12
 8001e36:	4619      	mov	r1, r3
 8001e38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e3c:	f002 fb96 	bl	800456c <HAL_GPIO_Init>

	/*Configure GPIO pin : DISPL_LED_Pin */
	GPIO_InitStruct.Pin = DISPL_LED_Pin;
 8001e40:	2308      	movs	r3, #8
 8001e42:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e44:	2301      	movs	r3, #1
 8001e46:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(DISPL_LED_GPIO_Port, &GPIO_InitStruct);
 8001e50:	f107 030c 	add.w	r3, r7, #12
 8001e54:	4619      	mov	r1, r3
 8001e56:	4808      	ldr	r0, [pc, #32]	@ (8001e78 <MX_GPIO_Init+0x13c>)
 8001e58:	f002 fb88 	bl	800456c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2100      	movs	r1, #0
 8001e60:	2028      	movs	r0, #40	@ 0x28
 8001e62:	f002 f8ba 	bl	8003fda <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e66:	2028      	movs	r0, #40	@ 0x28
 8001e68:	f002 f8d3 	bl	8004012 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001e6c:	bf00      	nop
 8001e6e:	3720      	adds	r7, #32
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40021000 	.word	0x40021000
 8001e78:	48000400 	.word	0x48000400

08001e7c <HAL_SAI_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
	processData(&saiRx_buf[SAI_BUF_LEN / 2], &saiTx_buf[SAI_BUF_LEN / 2]);
 8001e84:	4903      	ldr	r1, [pc, #12]	@ (8001e94 <HAL_SAI_RxCpltCallback+0x18>)
 8001e86:	4804      	ldr	r0, [pc, #16]	@ (8001e98 <HAL_SAI_RxCpltCallback+0x1c>)
 8001e88:	f000 f818 	bl	8001ebc <processData>
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	200008ec 	.word	0x200008ec
 8001e98:	200010ec 	.word	0x200010ec

08001e9c <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
	processData(&saiRx_buf[0], &saiTx_buf[0]);
 8001ea4:	4903      	ldr	r1, [pc, #12]	@ (8001eb4 <HAL_SAI_RxHalfCpltCallback+0x18>)
 8001ea6:	4804      	ldr	r0, [pc, #16]	@ (8001eb8 <HAL_SAI_RxHalfCpltCallback+0x1c>)
 8001ea8:	f000 f808 	bl	8001ebc <processData>
}
 8001eac:	bf00      	nop
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	200004ec 	.word	0x200004ec
 8001eb8:	20000cec 	.word	0x20000cec

08001ebc <processData>:

void processData(int16_t *saiRxBuffer, int16_t *saiTxBuffer) {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]

	static int16_t inputSignalLeft[BUFFER_SIZE], inputSignalRight[BUFFER_SIZE];
	static int16_t outputSignalLeft[BUFFER_SIZE], outputSignalRight[BUFFER_SIZE];

	// copy RxBuffer to leftSignalBuffer and rightSignalBuffer
	for (index1 = 0, index2 = 0; index1 < BUFFER_SIZE; index1++) {
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	81fb      	strh	r3, [r7, #14]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	81bb      	strh	r3, [r7, #12]
 8001ece:	e01a      	b.n	8001f06 <processData+0x4a>
		inputSignalRight[index1] = saiRxBuffer[index2++];
 8001ed0:	89bb      	ldrh	r3, [r7, #12]
 8001ed2:	1c5a      	adds	r2, r3, #1
 8001ed4:	81ba      	strh	r2, [r7, #12]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	441a      	add	r2, r3
 8001edc:	89fb      	ldrh	r3, [r7, #14]
 8001ede:	f9b2 1000 	ldrsh.w	r1, [r2]
 8001ee2:	4a43      	ldr	r2, [pc, #268]	@ (8001ff0 <processData+0x134>)
 8001ee4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		inputSignalLeft[index1] = saiRxBuffer[index2++];
 8001ee8:	89bb      	ldrh	r3, [r7, #12]
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	81ba      	strh	r2, [r7, #12]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	441a      	add	r2, r3
 8001ef4:	89fb      	ldrh	r3, [r7, #14]
 8001ef6:	f9b2 1000 	ldrsh.w	r1, [r2]
 8001efa:	4a3e      	ldr	r2, [pc, #248]	@ (8001ff4 <processData+0x138>)
 8001efc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (index1 = 0, index2 = 0; index1 < BUFFER_SIZE; index1++) {
 8001f00:	89fb      	ldrh	r3, [r7, #14]
 8001f02:	3301      	adds	r3, #1
 8001f04:	81fb      	strh	r3, [r7, #14]
 8001f06:	89fb      	ldrh	r3, [r7, #14]
 8001f08:	2bff      	cmp	r3, #255	@ 0xff
 8001f0a:	d9e1      	bls.n	8001ed0 <processData+0x14>
	// Here, the data of inputSignalLeft[] and inputSignalRight[] can be processed
	// The result should be stored in outputSignalLeft[] and outpuSignalRight[].
	// Note that the arrays contain BUFFER_SIZE values each

	// copy input to output
	arm_copy_q15(inputSignalLeft, outputSignalLeft, BUFFER_SIZE);
 8001f0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f10:	4939      	ldr	r1, [pc, #228]	@ (8001ff8 <processData+0x13c>)
 8001f12:	4838      	ldr	r0, [pc, #224]	@ (8001ff4 <processData+0x138>)
 8001f14:	f007 f87e 	bl	8009014 <arm_copy_q15>
	arm_copy_q15(inputSignalRight, outputSignalRight, BUFFER_SIZE);
 8001f18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f1c:	4937      	ldr	r1, [pc, #220]	@ (8001ffc <processData+0x140>)
 8001f1e:	4834      	ldr	r0, [pc, #208]	@ (8001ff0 <processData+0x134>)
 8001f20:	f007 f878 	bl	8009014 <arm_copy_q15>

	// determine power
	arm_dot_prod_q15(inputSignalLeft, inputSignalLeft, BUFFER_SIZE, &PowerLeft);
 8001f24:	4b36      	ldr	r3, [pc, #216]	@ (8002000 <processData+0x144>)
 8001f26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f2a:	4932      	ldr	r1, [pc, #200]	@ (8001ff4 <processData+0x138>)
 8001f2c:	4831      	ldr	r0, [pc, #196]	@ (8001ff4 <processData+0x138>)
 8001f2e:	f008 f83b 	bl	8009fa8 <arm_dot_prod_q15>
	PowerLeft = PowerLeft >> LOG2_BUFFERSIZE;
 8001f32:	4b33      	ldr	r3, [pc, #204]	@ (8002000 <processData+0x144>)
 8001f34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	0a02      	lsrs	r2, r0, #8
 8001f42:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001f46:	120b      	asrs	r3, r1, #8
 8001f48:	492d      	ldr	r1, [pc, #180]	@ (8002000 <processData+0x144>)
 8001f4a:	e9c1 2300 	strd	r2, r3, [r1]
	arm_dot_prod_q15(inputSignalRight, inputSignalRight, BUFFER_SIZE, &PowerRight);
 8001f4e:	4b2d      	ldr	r3, [pc, #180]	@ (8002004 <processData+0x148>)
 8001f50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f54:	4926      	ldr	r1, [pc, #152]	@ (8001ff0 <processData+0x134>)
 8001f56:	4826      	ldr	r0, [pc, #152]	@ (8001ff0 <processData+0x134>)
 8001f58:	f008 f826 	bl	8009fa8 <arm_dot_prod_q15>
	PowerRight = PowerRight >> LOG2_BUFFERSIZE;
 8001f5c:	4b29      	ldr	r3, [pc, #164]	@ (8002004 <processData+0x148>)
 8001f5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	f04f 0300 	mov.w	r3, #0
 8001f6a:	0a02      	lsrs	r2, r0, #8
 8001f6c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001f70:	120b      	asrs	r3, r1, #8
 8001f72:	4924      	ldr	r1, [pc, #144]	@ (8002004 <processData+0x148>)
 8001f74:	e9c1 2300 	strd	r2, r3, [r1]
	powerComputed = 1;
 8001f78:	4b23      	ldr	r3, [pc, #140]	@ (8002008 <processData+0x14c>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]

	// load new data for fft if requested
	if (fft_data_request) {
 8001f7e:	4b23      	ldr	r3, [pc, #140]	@ (800200c <processData+0x150>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00e      	beq.n	8001fa4 <processData+0xe8>
		arm_q15_to_float(inputSignalLeft, inputLeftFFT, BUFFER_SIZE);
 8001f86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f8a:	4921      	ldr	r1, [pc, #132]	@ (8002010 <processData+0x154>)
 8001f8c:	4819      	ldr	r0, [pc, #100]	@ (8001ff4 <processData+0x138>)
 8001f8e:	f006 ffd9 	bl	8008f44 <arm_q15_to_float>
		arm_q15_to_float(inputSignalRight, inputRightFFT, BUFFER_SIZE);
 8001f92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f96:	491f      	ldr	r1, [pc, #124]	@ (8002014 <processData+0x158>)
 8001f98:	4815      	ldr	r0, [pc, #84]	@ (8001ff0 <processData+0x134>)
 8001f9a:	f006 ffd3 	bl	8008f44 <arm_q15_to_float>
		fft_data_request = 0;
 8001f9e:	4b1b      	ldr	r3, [pc, #108]	@ (800200c <processData+0x150>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
	}

	// copy left and right txBuffer into TxBuffer
	for (index1 = 0, index2 = 0; index1 < BUFFER_SIZE; index1++) {
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	81fb      	strh	r3, [r7, #14]
 8001fa8:	2300      	movs	r3, #0
 8001faa:	81bb      	strh	r3, [r7, #12]
 8001fac:	e018      	b.n	8001fe0 <processData+0x124>
		saiTxBuffer[index2++] = outputSignalRight[index1];
 8001fae:	89fa      	ldrh	r2, [r7, #14]
 8001fb0:	89bb      	ldrh	r3, [r7, #12]
 8001fb2:	1c59      	adds	r1, r3, #1
 8001fb4:	81b9      	strh	r1, [r7, #12]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	6839      	ldr	r1, [r7, #0]
 8001fba:	440b      	add	r3, r1
 8001fbc:	490f      	ldr	r1, [pc, #60]	@ (8001ffc <processData+0x140>)
 8001fbe:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001fc2:	801a      	strh	r2, [r3, #0]
		saiTxBuffer[index2++] = outputSignalLeft[index1];
 8001fc4:	89fa      	ldrh	r2, [r7, #14]
 8001fc6:	89bb      	ldrh	r3, [r7, #12]
 8001fc8:	1c59      	adds	r1, r3, #1
 8001fca:	81b9      	strh	r1, [r7, #12]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	6839      	ldr	r1, [r7, #0]
 8001fd0:	440b      	add	r3, r1
 8001fd2:	4909      	ldr	r1, [pc, #36]	@ (8001ff8 <processData+0x13c>)
 8001fd4:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001fd8:	801a      	strh	r2, [r3, #0]
	for (index1 = 0, index2 = 0; index1 < BUFFER_SIZE; index1++) {
 8001fda:	89fb      	ldrh	r3, [r7, #14]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	81fb      	strh	r3, [r7, #14]
 8001fe0:	89fb      	ldrh	r3, [r7, #14]
 8001fe2:	2bff      	cmp	r3, #255	@ 0xff
 8001fe4:	d9e3      	bls.n	8001fae <processData+0xf2>
	}
}
 8001fe6:	bf00      	nop
 8001fe8:	bf00      	nop
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	2000217c 	.word	0x2000217c
 8001ff4:	2000237c 	.word	0x2000237c
 8001ff8:	2000257c 	.word	0x2000257c
 8001ffc:	2000277c 	.word	0x2000277c
 8002000:	200014f0 	.word	0x200014f0
 8002004:	200014f8 	.word	0x200014f8
 8002008:	20001508 	.word	0x20001508
 800200c:	20000024 	.word	0x20000024
 8002010:	20001524 	.word	0x20001524
 8002014:	20001924 	.word	0x20001924

08002018 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
 \brief   Disable IRQ Interrupts
 \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void) {
	__ASM volatile ("cpsid i" : : : "memory");
 800201c:	b672      	cpsid	i
}
 800201e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002020:	bf00      	nop
 8002022:	e7fd      	b.n	8002020 <Error_Handler+0x8>

08002024 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800202a:	4b0f      	ldr	r3, [pc, #60]	@ (8002068 <HAL_MspInit+0x44>)
 800202c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800202e:	4a0e      	ldr	r2, [pc, #56]	@ (8002068 <HAL_MspInit+0x44>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	6613      	str	r3, [r2, #96]	@ 0x60
 8002036:	4b0c      	ldr	r3, [pc, #48]	@ (8002068 <HAL_MspInit+0x44>)
 8002038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	607b      	str	r3, [r7, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 8002042:	4b09      	ldr	r3, [pc, #36]	@ (8002068 <HAL_MspInit+0x44>)
 8002044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002046:	4a08      	ldr	r2, [pc, #32]	@ (8002068 <HAL_MspInit+0x44>)
 8002048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800204c:	6593      	str	r3, [r2, #88]	@ 0x58
 800204e:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <HAL_MspInit+0x44>)
 8002050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	683b      	ldr	r3, [r7, #0]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	40021000 	.word	0x40021000

0800206c <HAL_SPI_MspInit>:
 * @brief SPI MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hspi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b08a      	sub	sp, #40	@ 0x28
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
	if (hspi->Instance == SPI1) {
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a30      	ldr	r2, [pc, #192]	@ (800214c <HAL_SPI_MspInit+0xe0>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d159      	bne.n	8002142 <HAL_SPI_MspInit+0xd6>
		/* USER CODE BEGIN SPI1_MspInit 0 */

		/* USER CODE END SPI1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_SPI1_CLK_ENABLE();
 800208e:	4b30      	ldr	r3, [pc, #192]	@ (8002150 <HAL_SPI_MspInit+0xe4>)
 8002090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002092:	4a2f      	ldr	r2, [pc, #188]	@ (8002150 <HAL_SPI_MspInit+0xe4>)
 8002094:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002098:	6613      	str	r3, [r2, #96]	@ 0x60
 800209a:	4b2d      	ldr	r3, [pc, #180]	@ (8002150 <HAL_SPI_MspInit+0xe4>)
 800209c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800209e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80020a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002150 <HAL_SPI_MspInit+0xe4>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020aa:	4a29      	ldr	r2, [pc, #164]	@ (8002150 <HAL_SPI_MspInit+0xe4>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020b2:	4b27      	ldr	r3, [pc, #156]	@ (8002150 <HAL_SPI_MspInit+0xe4>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
		/**SPI1 GPIO Configuration
		 PA1     ------> SPI1_SCK
		 PA6     ------> SPI1_MISO
		 PA7     ------> SPI1_MOSI
		 */
		GPIO_InitStruct.Pin = DISPL_SCK_Pin | TOUCH_MISO_Pin | DISPL_MOSI_Pin;
 80020be:	23c2      	movs	r3, #194	@ 0xc2
 80020c0:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c2:	2302      	movs	r3, #2
 80020c4:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ca:	2303      	movs	r3, #3
 80020cc:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020ce:	2305      	movs	r3, #5
 80020d0:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d2:	f107 0314 	add.w	r3, r7, #20
 80020d6:	4619      	mov	r1, r3
 80020d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020dc:	f002 fa46 	bl	800456c <HAL_GPIO_Init>

		/* SPI1 DMA Init */
		/* SPI1_TX Init */
		hdma_spi1_tx.Instance = DMA1_Channel3;
 80020e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002154 <HAL_SPI_MspInit+0xe8>)
 80020e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002158 <HAL_SPI_MspInit+0xec>)
 80020e4:	601a      	str	r2, [r3, #0]
		hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80020e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002154 <HAL_SPI_MspInit+0xe8>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	605a      	str	r2, [r3, #4]
		hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020ec:	4b19      	ldr	r3, [pc, #100]	@ (8002154 <HAL_SPI_MspInit+0xe8>)
 80020ee:	2210      	movs	r2, #16
 80020f0:	609a      	str	r2, [r3, #8]
		hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020f2:	4b18      	ldr	r3, [pc, #96]	@ (8002154 <HAL_SPI_MspInit+0xe8>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	60da      	str	r2, [r3, #12]
		hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020f8:	4b16      	ldr	r3, [pc, #88]	@ (8002154 <HAL_SPI_MspInit+0xe8>)
 80020fa:	2280      	movs	r2, #128	@ 0x80
 80020fc:	611a      	str	r2, [r3, #16]
		hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020fe:	4b15      	ldr	r3, [pc, #84]	@ (8002154 <HAL_SPI_MspInit+0xe8>)
 8002100:	2200      	movs	r2, #0
 8002102:	615a      	str	r2, [r3, #20]
		hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002104:	4b13      	ldr	r3, [pc, #76]	@ (8002154 <HAL_SPI_MspInit+0xe8>)
 8002106:	2200      	movs	r2, #0
 8002108:	619a      	str	r2, [r3, #24]
		hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800210a:	4b12      	ldr	r3, [pc, #72]	@ (8002154 <HAL_SPI_MspInit+0xe8>)
 800210c:	2200      	movs	r2, #0
 800210e:	61da      	str	r2, [r3, #28]
		hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002110:	4b10      	ldr	r3, [pc, #64]	@ (8002154 <HAL_SPI_MspInit+0xe8>)
 8002112:	2200      	movs	r2, #0
 8002114:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK) {
 8002116:	480f      	ldr	r0, [pc, #60]	@ (8002154 <HAL_SPI_MspInit+0xe8>)
 8002118:	f001 ffb2 	bl	8004080 <HAL_DMA_Init>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_SPI_MspInit+0xba>
			Error_Handler();
 8002122:	f7ff ff79 	bl	8002018 <Error_Handler>
		}

		__HAL_LINKDMA(hspi, hdmatx, hdma_spi1_tx);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a0a      	ldr	r2, [pc, #40]	@ (8002154 <HAL_SPI_MspInit+0xe8>)
 800212a:	655a      	str	r2, [r3, #84]	@ 0x54
 800212c:	4a09      	ldr	r2, [pc, #36]	@ (8002154 <HAL_SPI_MspInit+0xe8>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6293      	str	r3, [r2, #40]	@ 0x28

		/* SPI1 interrupt Init */
		HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002132:	2200      	movs	r2, #0
 8002134:	2100      	movs	r1, #0
 8002136:	2023      	movs	r0, #35	@ 0x23
 8002138:	f001 ff4f 	bl	8003fda <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800213c:	2023      	movs	r0, #35	@ 0x23
 800213e:	f001 ff68 	bl	8004012 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN SPI1_MspInit 1 */

		/* USER CODE END SPI1_MspInit 1 */
	}

}
 8002142:	bf00      	nop
 8002144:	3728      	adds	r7, #40	@ 0x28
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40013000 	.word	0x40013000
 8002150:	40021000 	.word	0x40021000
 8002154:	20000420 	.word	0x20000420
 8002158:	40020030 	.word	0x40020030

0800215c <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 800215c:	b580      	push	{r7, lr}
 800215e:	b09e      	sub	sp, #120	@ 0x78
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002164:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8002174:	f107 0310 	add.w	r3, r7, #16
 8002178:	2254      	movs	r2, #84	@ 0x54
 800217a:	2100      	movs	r1, #0
 800217c:	4618      	mov	r0, r3
 800217e:	f008 ff70 	bl	800b062 <memset>
	if (huart->Instance == USART2) {
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a28      	ldr	r2, [pc, #160]	@ (8002228 <HAL_UART_MspInit+0xcc>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d148      	bne.n	800221e <HAL_UART_MspInit+0xc2>

		/* USER CODE END USART2_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800218c:	2302      	movs	r3, #2
 800218e:	613b      	str	r3, [r7, #16]
		PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002190:	2300      	movs	r3, #0
 8002192:	637b      	str	r3, [r7, #52]	@ 0x34
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002194:	f107 0310 	add.w	r3, r7, #16
 8002198:	4618      	mov	r0, r3
 800219a:	f003 fa45 	bl	8005628 <HAL_RCCEx_PeriphCLKConfig>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <HAL_UART_MspInit+0x4c>
			Error_Handler();
 80021a4:	f7ff ff38 	bl	8002018 <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_USART2_CLK_ENABLE();
 80021a8:	4b20      	ldr	r3, [pc, #128]	@ (800222c <HAL_UART_MspInit+0xd0>)
 80021aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ac:	4a1f      	ldr	r2, [pc, #124]	@ (800222c <HAL_UART_MspInit+0xd0>)
 80021ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80021b4:	4b1d      	ldr	r3, [pc, #116]	@ (800222c <HAL_UART_MspInit+0xd0>)
 80021b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	68fb      	ldr	r3, [r7, #12]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80021c0:	4b1a      	ldr	r3, [pc, #104]	@ (800222c <HAL_UART_MspInit+0xd0>)
 80021c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c4:	4a19      	ldr	r2, [pc, #100]	@ (800222c <HAL_UART_MspInit+0xd0>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021cc:	4b17      	ldr	r3, [pc, #92]	@ (800222c <HAL_UART_MspInit+0xd0>)
 80021ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	68bb      	ldr	r3, [r7, #8]
		/**USART2 GPIO Configuration
		 PA2     ------> USART2_TX
		 PA15 (JTDI)     ------> USART2_RX
		 */
		GPIO_InitStruct.Pin = VCP_TX_Pin;
 80021d8:	2304      	movs	r3, #4
 80021da:	667b      	str	r3, [r7, #100]	@ 0x64
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021dc:	2302      	movs	r3, #2
 80021de:	66bb      	str	r3, [r7, #104]	@ 0x68
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e4:	2303      	movs	r3, #3
 80021e6:	673b      	str	r3, [r7, #112]	@ 0x70
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021e8:	2307      	movs	r3, #7
 80021ea:	677b      	str	r3, [r7, #116]	@ 0x74
		HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80021ec:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80021f0:	4619      	mov	r1, r3
 80021f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021f6:	f002 f9b9 	bl	800456c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = VCP_RX_Pin;
 80021fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021fe:	667b      	str	r3, [r7, #100]	@ 0x64
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	66bb      	str	r3, [r7, #104]	@ 0x68
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	66fb      	str	r3, [r7, #108]	@ 0x6c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002208:	2303      	movs	r3, #3
 800220a:	673b      	str	r3, [r7, #112]	@ 0x70
		GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800220c:	2303      	movs	r3, #3
 800220e:	677b      	str	r3, [r7, #116]	@ 0x74
		HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002210:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002214:	4619      	mov	r1, r3
 8002216:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800221a:	f002 f9a7 	bl	800456c <HAL_GPIO_Init>
		/* USER CODE BEGIN USART2_MspInit 1 */

		/* USER CODE END USART2_MspInit 1 */
	}

}
 800221e:	bf00      	nop
 8002220:	3778      	adds	r7, #120	@ 0x78
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40004400 	.word	0x40004400
 800222c:	40021000 	.word	0x40021000

08002230 <HAL_SAI_MspInit>:

extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client = 0;

void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai) {
 8002230:	b580      	push	{r7, lr}
 8002232:	b08a      	sub	sp, #40	@ 0x28
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct;
	/* SAI1 */
	if (hsai->Instance == SAI1_Block_A) {
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a64      	ldr	r2, [pc, #400]	@ (80023d0 <HAL_SAI_MspInit+0x1a0>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d15f      	bne.n	8002302 <HAL_SAI_MspInit+0xd2>
		/* Peripheral clock enable */
		if (SAI1_client == 0) {
 8002242:	4b64      	ldr	r3, [pc, #400]	@ (80023d4 <HAL_SAI_MspInit+0x1a4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d113      	bne.n	8002272 <HAL_SAI_MspInit+0x42>
			__HAL_RCC_SAI1_CLK_ENABLE();
 800224a:	4b63      	ldr	r3, [pc, #396]	@ (80023d8 <HAL_SAI_MspInit+0x1a8>)
 800224c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800224e:	4a62      	ldr	r2, [pc, #392]	@ (80023d8 <HAL_SAI_MspInit+0x1a8>)
 8002250:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002254:	6613      	str	r3, [r2, #96]	@ 0x60
 8002256:	4b60      	ldr	r3, [pc, #384]	@ (80023d8 <HAL_SAI_MspInit+0x1a8>)
 8002258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800225a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	693b      	ldr	r3, [r7, #16]

			/* Peripheral interrupt init*/
			HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8002262:	2200      	movs	r2, #0
 8002264:	2100      	movs	r1, #0
 8002266:	204a      	movs	r0, #74	@ 0x4a
 8002268:	f001 feb7 	bl	8003fda <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(SAI1_IRQn);
 800226c:	204a      	movs	r0, #74	@ 0x4a
 800226e:	f001 fed0 	bl	8004012 <HAL_NVIC_EnableIRQ>
		}
		SAI1_client++;
 8002272:	4b58      	ldr	r3, [pc, #352]	@ (80023d4 <HAL_SAI_MspInit+0x1a4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	3301      	adds	r3, #1
 8002278:	4a56      	ldr	r2, [pc, #344]	@ (80023d4 <HAL_SAI_MspInit+0x1a4>)
 800227a:	6013      	str	r3, [r2, #0]
		 PA3     ------> SAI1_MCLK_A
		 PA8     ------> SAI1_SCK_A
		 PA9     ------> SAI1_FS_A
		 PA10     ------> SAI1_SD_A
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 800227c:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8002280:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002282:	2302      	movs	r3, #2
 8002284:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228a:	2300      	movs	r3, #0
 800228c:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800228e:	230d      	movs	r3, #13
 8002290:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002292:	f107 0314 	add.w	r3, r7, #20
 8002296:	4619      	mov	r1, r3
 8002298:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800229c:	f002 f966 	bl	800456c <HAL_GPIO_Init>

		/* Peripheral DMA init*/

		hdma_sai1_a.Instance = DMA2_Channel1;
 80022a0:	4b4e      	ldr	r3, [pc, #312]	@ (80023dc <HAL_SAI_MspInit+0x1ac>)
 80022a2:	4a4f      	ldr	r2, [pc, #316]	@ (80023e0 <HAL_SAI_MspInit+0x1b0>)
 80022a4:	601a      	str	r2, [r3, #0]
		hdma_sai1_a.Init.Request = DMA_REQUEST_1;
 80022a6:	4b4d      	ldr	r3, [pc, #308]	@ (80023dc <HAL_SAI_MspInit+0x1ac>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	605a      	str	r2, [r3, #4]
		hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022ac:	4b4b      	ldr	r3, [pc, #300]	@ (80023dc <HAL_SAI_MspInit+0x1ac>)
 80022ae:	2210      	movs	r2, #16
 80022b0:	609a      	str	r2, [r3, #8]
		hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80022b2:	4b4a      	ldr	r3, [pc, #296]	@ (80023dc <HAL_SAI_MspInit+0x1ac>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	60da      	str	r2, [r3, #12]
		hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80022b8:	4b48      	ldr	r3, [pc, #288]	@ (80023dc <HAL_SAI_MspInit+0x1ac>)
 80022ba:	2280      	movs	r2, #128	@ 0x80
 80022bc:	611a      	str	r2, [r3, #16]
		hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022be:	4b47      	ldr	r3, [pc, #284]	@ (80023dc <HAL_SAI_MspInit+0x1ac>)
 80022c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022c4:	615a      	str	r2, [r3, #20]
		hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022c6:	4b45      	ldr	r3, [pc, #276]	@ (80023dc <HAL_SAI_MspInit+0x1ac>)
 80022c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022cc:	619a      	str	r2, [r3, #24]
		hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80022ce:	4b43      	ldr	r3, [pc, #268]	@ (80023dc <HAL_SAI_MspInit+0x1ac>)
 80022d0:	2220      	movs	r2, #32
 80022d2:	61da      	str	r2, [r3, #28]
		hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 80022d4:	4b41      	ldr	r3, [pc, #260]	@ (80023dc <HAL_SAI_MspInit+0x1ac>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK) {
 80022da:	4840      	ldr	r0, [pc, #256]	@ (80023dc <HAL_SAI_MspInit+0x1ac>)
 80022dc:	f001 fed0 	bl	8004080 <HAL_DMA_Init>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_SAI_MspInit+0xba>
			Error_Handler();
 80022e6:	f7ff fe97 	bl	8002018 <Error_Handler>
		}

		/* Several peripheral DMA handle pointers point to the same DMA handle.
		 Be aware that there is only one channel to perform all the requested DMAs. */
		__HAL_LINKDMA(hsai, hdmarx, hdma_sai1_a);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a3b      	ldr	r2, [pc, #236]	@ (80023dc <HAL_SAI_MspInit+0x1ac>)
 80022ee:	671a      	str	r2, [r3, #112]	@ 0x70
 80022f0:	4a3a      	ldr	r2, [pc, #232]	@ (80023dc <HAL_SAI_MspInit+0x1ac>)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6293      	str	r3, [r2, #40]	@ 0x28

		__HAL_LINKDMA(hsai, hdmatx, hdma_sai1_a);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a38      	ldr	r2, [pc, #224]	@ (80023dc <HAL_SAI_MspInit+0x1ac>)
 80022fa:	66da      	str	r2, [r3, #108]	@ 0x6c
 80022fc:	4a37      	ldr	r2, [pc, #220]	@ (80023dc <HAL_SAI_MspInit+0x1ac>)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6293      	str	r3, [r2, #40]	@ 0x28

	}
	if (hsai->Instance == SAI1_Block_B) {
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a37      	ldr	r2, [pc, #220]	@ (80023e4 <HAL_SAI_MspInit+0x1b4>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d15d      	bne.n	80023c8 <HAL_SAI_MspInit+0x198>
		/* Peripheral clock enable */
		if (SAI1_client == 0) {
 800230c:	4b31      	ldr	r3, [pc, #196]	@ (80023d4 <HAL_SAI_MspInit+0x1a4>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d113      	bne.n	800233c <HAL_SAI_MspInit+0x10c>
			__HAL_RCC_SAI1_CLK_ENABLE();
 8002314:	4b30      	ldr	r3, [pc, #192]	@ (80023d8 <HAL_SAI_MspInit+0x1a8>)
 8002316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002318:	4a2f      	ldr	r2, [pc, #188]	@ (80023d8 <HAL_SAI_MspInit+0x1a8>)
 800231a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800231e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002320:	4b2d      	ldr	r3, [pc, #180]	@ (80023d8 <HAL_SAI_MspInit+0x1a8>)
 8002322:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002324:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	68fb      	ldr	r3, [r7, #12]

			/* Peripheral interrupt init*/
			HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 800232c:	2200      	movs	r2, #0
 800232e:	2100      	movs	r1, #0
 8002330:	204a      	movs	r0, #74	@ 0x4a
 8002332:	f001 fe52 	bl	8003fda <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8002336:	204a      	movs	r0, #74	@ 0x4a
 8002338:	f001 fe6b 	bl	8004012 <HAL_NVIC_EnableIRQ>
		}
		SAI1_client++;
 800233c:	4b25      	ldr	r3, [pc, #148]	@ (80023d4 <HAL_SAI_MspInit+0x1a4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	3301      	adds	r3, #1
 8002342:	4a24      	ldr	r2, [pc, #144]	@ (80023d4 <HAL_SAI_MspInit+0x1a4>)
 8002344:	6013      	str	r3, [r2, #0]

		/**SAI1_B_Block_B GPIO Configuration
		 PB5     ------> SAI1_SD_B
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002346:	2320      	movs	r3, #32
 8002348:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234a:	2302      	movs	r3, #2
 800234c:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002352:	2300      	movs	r3, #0
 8002354:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002356:	230d      	movs	r3, #13
 8002358:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800235a:	f107 0314 	add.w	r3, r7, #20
 800235e:	4619      	mov	r1, r3
 8002360:	4821      	ldr	r0, [pc, #132]	@ (80023e8 <HAL_SAI_MspInit+0x1b8>)
 8002362:	f002 f903 	bl	800456c <HAL_GPIO_Init>

		/* Peripheral DMA init*/

		hdma_sai1_b.Instance = DMA2_Channel2;
 8002366:	4b21      	ldr	r3, [pc, #132]	@ (80023ec <HAL_SAI_MspInit+0x1bc>)
 8002368:	4a21      	ldr	r2, [pc, #132]	@ (80023f0 <HAL_SAI_MspInit+0x1c0>)
 800236a:	601a      	str	r2, [r3, #0]
		hdma_sai1_b.Init.Request = DMA_REQUEST_1;
 800236c:	4b1f      	ldr	r3, [pc, #124]	@ (80023ec <HAL_SAI_MspInit+0x1bc>)
 800236e:	2201      	movs	r2, #1
 8002370:	605a      	str	r2, [r3, #4]
		hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002372:	4b1e      	ldr	r3, [pc, #120]	@ (80023ec <HAL_SAI_MspInit+0x1bc>)
 8002374:	2200      	movs	r2, #0
 8002376:	609a      	str	r2, [r3, #8]
		hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8002378:	4b1c      	ldr	r3, [pc, #112]	@ (80023ec <HAL_SAI_MspInit+0x1bc>)
 800237a:	2200      	movs	r2, #0
 800237c:	60da      	str	r2, [r3, #12]
		hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800237e:	4b1b      	ldr	r3, [pc, #108]	@ (80023ec <HAL_SAI_MspInit+0x1bc>)
 8002380:	2280      	movs	r2, #128	@ 0x80
 8002382:	611a      	str	r2, [r3, #16]
		hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002384:	4b19      	ldr	r3, [pc, #100]	@ (80023ec <HAL_SAI_MspInit+0x1bc>)
 8002386:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800238a:	615a      	str	r2, [r3, #20]
		hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800238c:	4b17      	ldr	r3, [pc, #92]	@ (80023ec <HAL_SAI_MspInit+0x1bc>)
 800238e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002392:	619a      	str	r2, [r3, #24]
		hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8002394:	4b15      	ldr	r3, [pc, #84]	@ (80023ec <HAL_SAI_MspInit+0x1bc>)
 8002396:	2220      	movs	r2, #32
 8002398:	61da      	str	r2, [r3, #28]
		hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 800239a:	4b14      	ldr	r3, [pc, #80]	@ (80023ec <HAL_SAI_MspInit+0x1bc>)
 800239c:	2200      	movs	r2, #0
 800239e:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK) {
 80023a0:	4812      	ldr	r0, [pc, #72]	@ (80023ec <HAL_SAI_MspInit+0x1bc>)
 80023a2:	f001 fe6d 	bl	8004080 <HAL_DMA_Init>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <HAL_SAI_MspInit+0x180>
			Error_Handler();
 80023ac:	f7ff fe34 	bl	8002018 <Error_Handler>
		}

		/* Several peripheral DMA handle pointers point to the same DMA handle.
		 Be aware that there is only one channel to perform all the requested DMAs. */
		__HAL_LINKDMA(hsai, hdmarx, hdma_sai1_b);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a0e      	ldr	r2, [pc, #56]	@ (80023ec <HAL_SAI_MspInit+0x1bc>)
 80023b4:	671a      	str	r2, [r3, #112]	@ 0x70
 80023b6:	4a0d      	ldr	r2, [pc, #52]	@ (80023ec <HAL_SAI_MspInit+0x1bc>)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6293      	str	r3, [r2, #40]	@ 0x28
		__HAL_LINKDMA(hsai, hdmatx, hdma_sai1_b);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a0b      	ldr	r2, [pc, #44]	@ (80023ec <HAL_SAI_MspInit+0x1bc>)
 80023c0:	66da      	str	r2, [r3, #108]	@ 0x6c
 80023c2:	4a0a      	ldr	r2, [pc, #40]	@ (80023ec <HAL_SAI_MspInit+0x1bc>)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6293      	str	r3, [r2, #40]	@ 0x28
	}
}
 80023c8:	bf00      	nop
 80023ca:	3728      	adds	r7, #40	@ 0x28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40015404 	.word	0x40015404
 80023d4:	2000297c 	.word	0x2000297c
 80023d8:	40021000 	.word	0x40021000
 80023dc:	2000032c 	.word	0x2000032c
 80023e0:	40020408 	.word	0x40020408
 80023e4:	40015424 	.word	0x40015424
 80023e8:	48000400 	.word	0x48000400
 80023ec:	20000374 	.word	0x20000374
 80023f0:	4002041c 	.word	0x4002041c

080023f4 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80023f8:	bf00      	nop
 80023fa:	e7fd      	b.n	80023f8 <NMI_Handler+0x4>

080023fc <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8002400:	bf00      	nop
 8002402:	e7fd      	b.n	8002400 <HardFault_Handler+0x4>

08002404 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8002408:	bf00      	nop
 800240a:	e7fd      	b.n	8002408 <MemManage_Handler+0x4>

0800240c <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8002410:	bf00      	nop
 8002412:	e7fd      	b.n	8002410 <BusFault_Handler+0x4>

08002414 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8002418:	bf00      	nop
 800241a:	e7fd      	b.n	8002418 <UsageFault_Handler+0x4>

0800241c <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8002446:	b580      	push	{r7, lr}
 8002448:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800244a:	f001 fc65 	bl	8003d18 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <DMA1_Channel3_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 channel3 global interrupt.
 */
void DMA1_Channel3_IRQHandler(void) {
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

	/* USER CODE END DMA1_Channel3_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002458:	4802      	ldr	r0, [pc, #8]	@ (8002464 <DMA1_Channel3_IRQHandler+0x10>)
 800245a:	f001 ffa8 	bl	80043ae <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

	/* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000420 	.word	0x20000420

08002468 <SPI1_IRQHandler>:

/**
 * @brief This function handles SPI1 global interrupt.
 */
void SPI1_IRQHandler(void) {
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SPI1_IRQn 0 */

	/* USER CODE END SPI1_IRQn 0 */
	HAL_SPI_IRQHandler(&hspi1);
 800246c:	4802      	ldr	r0, [pc, #8]	@ (8002478 <SPI1_IRQHandler+0x10>)
 800246e:	f005 fdef 	bl	8008050 <HAL_SPI_IRQHandler>
	/* USER CODE BEGIN SPI1_IRQn 1 */

	/* USER CODE END SPI1_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	200003bc 	.word	0x200003bc

0800247c <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void) {
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(TOUCH_INT_Pin);
 8002480:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002484:	f002 fa0c 	bl	80048a0 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 8002488:	bf00      	nop
 800248a:	bd80      	pop	{r7, pc}

0800248c <DMA2_Channel1_IRQHandler>:

/**
 * @brief This function handles DMA2 channel1 global interrupt.
 */
void DMA2_Channel1_IRQHandler(void) {
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

	/* USER CODE END DMA2_Channel1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_sai1_a);
 8002490:	4802      	ldr	r0, [pc, #8]	@ (800249c <DMA2_Channel1_IRQHandler+0x10>)
 8002492:	f001 ff8c 	bl	80043ae <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

	/* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	2000032c 	.word	0x2000032c

080024a0 <DMA2_Channel2_IRQHandler>:

/**
 * @brief This function handles DMA2 channel2 global interrupt.
 */
void DMA2_Channel2_IRQHandler(void) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

	/* USER CODE END DMA2_Channel2_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_sai1_b);
 80024a4:	4802      	ldr	r0, [pc, #8]	@ (80024b0 <DMA2_Channel2_IRQHandler+0x10>)
 80024a6:	f001 ff82 	bl	80043ae <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

	/* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000374 	.word	0x20000374

080024b4 <SAI1_IRQHandler>:

/**
 * @brief This function handles SAI1 global interrupt.
 */
void SAI1_IRQHandler(void) {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SAI1_IRQn 0 */

	/* USER CODE END SAI1_IRQn 0 */
	HAL_SAI_IRQHandler(&hsai_BlockA1);
 80024b8:	4803      	ldr	r0, [pc, #12]	@ (80024c8 <SAI1_IRQHandler+0x14>)
 80024ba:	f004 fb3f 	bl	8006b3c <HAL_SAI_IRQHandler>
	HAL_SAI_IRQHandler(&hsai_BlockB1);
 80024be:	4803      	ldr	r0, [pc, #12]	@ (80024cc <SAI1_IRQHandler+0x18>)
 80024c0:	f004 fb3c 	bl	8006b3c <HAL_SAI_IRQHandler>
	/* USER CODE BEGIN SAI1_IRQn 1 */

	/* USER CODE END SAI1_IRQn 1 */
}
 80024c4:	bf00      	nop
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000224 	.word	0x20000224
 80024cc:	200002a8 	.word	0x200002a8

080024d0 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
	return 1;
 80024d4:	2301      	movs	r3, #1
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <_kill>:

int _kill(int pid, int sig) {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 80024ea:	f008 fe0d 	bl	800b108 <__errno>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2216      	movs	r2, #22
 80024f2:	601a      	str	r2, [r3, #0]
	return -1;
 80024f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <_exit>:

void _exit(int status) {
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002508:	f04f 31ff 	mov.w	r1, #4294967295
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff ffe7 	bl	80024e0 <_kill>
	while (1) {
 8002512:	bf00      	nop
 8002514:	e7fd      	b.n	8002512 <_exit+0x12>

08002516 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002516:	b580      	push	{r7, lr}
 8002518:	b086      	sub	sp, #24
 800251a:	af00      	add	r7, sp, #0
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	e00a      	b.n	800253e <_read+0x28>
		*ptr++ = __io_getchar();
 8002528:	f3af 8000 	nop.w
 800252c:	4601      	mov	r1, r0
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	60ba      	str	r2, [r7, #8]
 8002534:	b2ca      	uxtb	r2, r1
 8002536:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	3301      	adds	r3, #1
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	429a      	cmp	r2, r3
 8002544:	dbf0      	blt.n	8002528 <_read+0x12>
	}

	return len;
 8002546:	687b      	ldr	r3, [r7, #4]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	e009      	b.n	8002576 <_write+0x26>
		__io_putchar(*ptr++);
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	60ba      	str	r2, [r7, #8]
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	3301      	adds	r3, #1
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	429a      	cmp	r2, r3
 800257c:	dbf1      	blt.n	8002562 <_write+0x12>
	}
	return len;
 800257e:	687b      	ldr	r3, [r7, #4]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <_close>:

int _close(int file) {
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8002590:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002594:	4618      	mov	r0, r3
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <_fstat>:

int _fstat(int file, struct stat *st) {
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025b0:	605a      	str	r2, [r3, #4]
	return 0;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <_isatty>:

int _isatty(int file) {
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80025c8:	2301      	movs	r3, #1
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80025d6:	b480      	push	{r7}
 80025d8:	b085      	sub	sp, #20
 80025da:	af00      	add	r7, sp, #0
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 80025f8:	4a14      	ldr	r2, [pc, #80]	@ (800264c <_sbrk+0x5c>)
 80025fa:	4b15      	ldr	r3, [pc, #84]	@ (8002650 <_sbrk+0x60>)
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002604:	4b13      	ldr	r3, [pc, #76]	@ (8002654 <_sbrk+0x64>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d102      	bne.n	8002612 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 800260c:	4b11      	ldr	r3, [pc, #68]	@ (8002654 <_sbrk+0x64>)
 800260e:	4a12      	ldr	r2, [pc, #72]	@ (8002658 <_sbrk+0x68>)
 8002610:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8002612:	4b10      	ldr	r3, [pc, #64]	@ (8002654 <_sbrk+0x64>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4413      	add	r3, r2
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	429a      	cmp	r2, r3
 800261e:	d207      	bcs.n	8002630 <_sbrk+0x40>
		errno = ENOMEM;
 8002620:	f008 fd72 	bl	800b108 <__errno>
 8002624:	4603      	mov	r3, r0
 8002626:	220c      	movs	r2, #12
 8002628:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800262a:	f04f 33ff 	mov.w	r3, #4294967295
 800262e:	e009      	b.n	8002644 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002630:	4b08      	ldr	r3, [pc, #32]	@ (8002654 <_sbrk+0x64>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002636:	4b07      	ldr	r3, [pc, #28]	@ (8002654 <_sbrk+0x64>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	4a05      	ldr	r2, [pc, #20]	@ (8002654 <_sbrk+0x64>)
 8002640:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8002642:	68fb      	ldr	r3, [r7, #12]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20010000 	.word	0x20010000
 8002650:	00000400 	.word	0x00000400
 8002654:	20002980 	.word	0x20002980
 8002658:	2000aae8 	.word	0x2000aae8

0800265c <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void) {
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 8002660:	4b06      	ldr	r3, [pc, #24]	@ (800267c <SystemInit+0x20>)
 8002662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002666:	4a05      	ldr	r2, [pc, #20]	@ (800267c <SystemInit+0x20>)
 8002668:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800266c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <displayVUmeter>:
 */
#include <math.h>
#include "main.h"
#include "colors.h"

void displayVUmeter(uint16_t x0, uint16_t y0, int16_t percentage) {
 8002680:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002684:	b088      	sub	sp, #32
 8002686:	af02      	add	r7, sp, #8
 8002688:	4603      	mov	r3, r0
 800268a:	80fb      	strh	r3, [r7, #6]
 800268c:	460b      	mov	r3, r1
 800268e:	80bb      	strh	r3, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	807b      	strh	r3, [r7, #2]
	int16_t x1, x2, y1, y2;
	float angle;

	if (percentage > 100) {
 8002694:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002698:	2b64      	cmp	r3, #100	@ 0x64
 800269a:	dd01      	ble.n	80026a0 <displayVUmeter+0x20>
		percentage = 100;
 800269c:	2364      	movs	r3, #100	@ 0x64
 800269e:	807b      	strh	r3, [r7, #2]
	}
	ILI9488_DrawImage(x0, y0, VU_WIDTH, VU_HEIGHT, (uint8_t*) vu_meter_135x59, VU_WIDTH * VU_HEIGHT * 2);
 80026a0:	88b9      	ldrh	r1, [r7, #4]
 80026a2:	88f8      	ldrh	r0, [r7, #6]
 80026a4:	f643 633a 	movw	r3, #15930	@ 0x3e3a
 80026a8:	9301      	str	r3, [sp, #4]
 80026aa:	4b77      	ldr	r3, [pc, #476]	@ (8002888 <displayVUmeter+0x208>)
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	233b      	movs	r3, #59	@ 0x3b
 80026b0:	2287      	movs	r2, #135	@ 0x87
 80026b2:	f000 fba5 	bl	8002e00 <ILI9488_DrawImage>
	angle = (100.0 - percentage) * 1.68 / 100.0 + 0.73;
 80026b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fd ff32 	bl	8000524 <__aeabi_i2d>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	f04f 0000 	mov.w	r0, #0
 80026c8:	4970      	ldr	r1, [pc, #448]	@ (800288c <displayVUmeter+0x20c>)
 80026ca:	f7fd fddd 	bl	8000288 <__aeabi_dsub>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	4610      	mov	r0, r2
 80026d4:	4619      	mov	r1, r3
 80026d6:	a364      	add	r3, pc, #400	@ (adr r3, 8002868 <displayVUmeter+0x1e8>)
 80026d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026dc:	f7fd ff8c 	bl	80005f8 <__aeabi_dmul>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4610      	mov	r0, r2
 80026e6:	4619      	mov	r1, r3
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	4b67      	ldr	r3, [pc, #412]	@ (800288c <displayVUmeter+0x20c>)
 80026ee:	f7fe f8ad 	bl	800084c <__aeabi_ddiv>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4610      	mov	r0, r2
 80026f8:	4619      	mov	r1, r3
 80026fa:	a35d      	add	r3, pc, #372	@ (adr r3, 8002870 <displayVUmeter+0x1f0>)
 80026fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002700:	f7fd fdc4 	bl	800028c <__adddf3>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4610      	mov	r0, r2
 800270a:	4619      	mov	r1, r3
 800270c:	f7fe fa4c 	bl	8000ba8 <__aeabi_d2f>
 8002710:	4603      	mov	r3, r0
 8002712:	617b      	str	r3, [r7, #20]
	x1 = (int16_t) (x0 + 66.1 + 68 * cos(angle));
 8002714:	88fb      	ldrh	r3, [r7, #6]
 8002716:	4618      	mov	r0, r3
 8002718:	f7fd ff04 	bl	8000524 <__aeabi_i2d>
 800271c:	a356      	add	r3, pc, #344	@ (adr r3, 8002878 <displayVUmeter+0x1f8>)
 800271e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002722:	f7fd fdb3 	bl	800028c <__adddf3>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4614      	mov	r4, r2
 800272c:	461d      	mov	r5, r3
 800272e:	6978      	ldr	r0, [r7, #20]
 8002730:	f7fd ff0a 	bl	8000548 <__aeabi_f2d>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	ec43 2b10 	vmov	d0, r2, r3
 800273c:	f00a fbf4 	bl	800cf28 <cos>
 8002740:	ec51 0b10 	vmov	r0, r1, d0
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	4b51      	ldr	r3, [pc, #324]	@ (8002890 <displayVUmeter+0x210>)
 800274a:	f7fd ff55 	bl	80005f8 <__aeabi_dmul>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4620      	mov	r0, r4
 8002754:	4629      	mov	r1, r5
 8002756:	f7fd fd99 	bl	800028c <__adddf3>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4610      	mov	r0, r2
 8002760:	4619      	mov	r1, r3
 8002762:	f7fe f9f9 	bl	8000b58 <__aeabi_d2iz>
 8002766:	4603      	mov	r3, r0
 8002768:	827b      	strh	r3, [r7, #18]
	y1 = (int16_t) (y0 + 79.5 - 68 * sin(angle));
 800276a:	88bb      	ldrh	r3, [r7, #4]
 800276c:	4618      	mov	r0, r3
 800276e:	f7fd fed9 	bl	8000524 <__aeabi_i2d>
 8002772:	a343      	add	r3, pc, #268	@ (adr r3, 8002880 <displayVUmeter+0x200>)
 8002774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002778:	f7fd fd88 	bl	800028c <__adddf3>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4614      	mov	r4, r2
 8002782:	461d      	mov	r5, r3
 8002784:	6978      	ldr	r0, [r7, #20]
 8002786:	f7fd fedf 	bl	8000548 <__aeabi_f2d>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	ec43 2b10 	vmov	d0, r2, r3
 8002792:	f00a fc1d 	bl	800cfd0 <sin>
 8002796:	ec51 0b10 	vmov	r0, r1, d0
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	4b3c      	ldr	r3, [pc, #240]	@ (8002890 <displayVUmeter+0x210>)
 80027a0:	f7fd ff2a 	bl	80005f8 <__aeabi_dmul>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4620      	mov	r0, r4
 80027aa:	4629      	mov	r1, r5
 80027ac:	f7fd fd6c 	bl	8000288 <__aeabi_dsub>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4610      	mov	r0, r2
 80027b6:	4619      	mov	r1, r3
 80027b8:	f7fe f9ce 	bl	8000b58 <__aeabi_d2iz>
 80027bc:	4603      	mov	r3, r0
 80027be:	823b      	strh	r3, [r7, #16]
	x2 = (int16_t) (x0 + 66.1 + 20.5 * cos(angle) / sin(angle));
 80027c0:	88fb      	ldrh	r3, [r7, #6]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fd feae 	bl	8000524 <__aeabi_i2d>
 80027c8:	a32b      	add	r3, pc, #172	@ (adr r3, 8002878 <displayVUmeter+0x1f8>)
 80027ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ce:	f7fd fd5d 	bl	800028c <__adddf3>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4614      	mov	r4, r2
 80027d8:	461d      	mov	r5, r3
 80027da:	6978      	ldr	r0, [r7, #20]
 80027dc:	f7fd feb4 	bl	8000548 <__aeabi_f2d>
 80027e0:	4602      	mov	r2, r0
 80027e2:	460b      	mov	r3, r1
 80027e4:	ec43 2b10 	vmov	d0, r2, r3
 80027e8:	f00a fb9e 	bl	800cf28 <cos>
 80027ec:	ec51 0b10 	vmov	r0, r1, d0
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	4b27      	ldr	r3, [pc, #156]	@ (8002894 <displayVUmeter+0x214>)
 80027f6:	f7fd feff 	bl	80005f8 <__aeabi_dmul>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	4690      	mov	r8, r2
 8002800:	4699      	mov	r9, r3
 8002802:	6978      	ldr	r0, [r7, #20]
 8002804:	f7fd fea0 	bl	8000548 <__aeabi_f2d>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	ec43 2b10 	vmov	d0, r2, r3
 8002810:	f00a fbde 	bl	800cfd0 <sin>
 8002814:	ec53 2b10 	vmov	r2, r3, d0
 8002818:	4640      	mov	r0, r8
 800281a:	4649      	mov	r1, r9
 800281c:	f7fe f816 	bl	800084c <__aeabi_ddiv>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4620      	mov	r0, r4
 8002826:	4629      	mov	r1, r5
 8002828:	f7fd fd30 	bl	800028c <__adddf3>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4610      	mov	r0, r2
 8002832:	4619      	mov	r1, r3
 8002834:	f7fe f990 	bl	8000b58 <__aeabi_d2iz>
 8002838:	4603      	mov	r3, r0
 800283a:	81fb      	strh	r3, [r7, #14]
	y2 = (int16_t) (y0 + 59);
 800283c:	88bb      	ldrh	r3, [r7, #4]
 800283e:	333b      	adds	r3, #59	@ 0x3b
 8002840:	b29b      	uxth	r3, r3
 8002842:	81bb      	strh	r3, [r7, #12]
	Displ_Line(x1, y1, x2, y2, BLACK);
 8002844:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002848:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800284c:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8002850:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 8002854:	2400      	movs	r4, #0
 8002856:	9400      	str	r4, [sp, #0]
 8002858:	f000 fbee 	bl	8003038 <Displ_Line>
}
 800285c:	bf00      	nop
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002866:	bf00      	nop
 8002868:	ae147ae1 	.word	0xae147ae1
 800286c:	3ffae147 	.word	0x3ffae147
 8002870:	f5c28f5c 	.word	0xf5c28f5c
 8002874:	3fe75c28 	.word	0x3fe75c28
 8002878:	66666666 	.word	0x66666666
 800287c:	40508666 	.word	0x40508666
 8002880:	00000000 	.word	0x00000000
 8002884:	4053e000 	.word	0x4053e000
 8002888:	0800fbdc 	.word	0x0800fbdc
 800288c:	40590000 	.word	0x40590000
 8002890:	40510000 	.word	0x40510000
 8002894:	40348000 	.word	0x40348000

08002898 <initVUmeter>:

void initVUmeter(uint16_t x0, uint16_t y0) {
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af02      	add	r7, sp, #8
 800289e:	4603      	mov	r3, r0
 80028a0:	460a      	mov	r2, r1
 80028a2:	80fb      	strh	r3, [r7, #6]
 80028a4:	4613      	mov	r3, r2
 80028a6:	80bb      	strh	r3, [r7, #4]
	Displ_fillRoundRect(x0 - 5, y0 - 5, VU_WIDTH + 10, VU_HEIGHT + 10, 3, FRAME_COLOR);
 80028a8:	88fb      	ldrh	r3, [r7, #6]
 80028aa:	3b05      	subs	r3, #5
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	b218      	sxth	r0, r3
 80028b0:	88bb      	ldrh	r3, [r7, #4]
 80028b2:	3b05      	subs	r3, #5
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	b219      	sxth	r1, r3
 80028b8:	2300      	movs	r3, #0
 80028ba:	9301      	str	r3, [sp, #4]
 80028bc:	2303      	movs	r3, #3
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	2345      	movs	r3, #69	@ 0x45
 80028c2:	2291      	movs	r2, #145	@ 0x91
 80028c4:	f000 fde8 	bl	8003498 <Displ_fillRoundRect>
	ILI9488_DrawImage(x0, y0, VU_WIDTH, VU_HEIGHT, (uint8_t*) vu_meter_135x59, VU_WIDTH * VU_HEIGHT * 2);
 80028c8:	88b9      	ldrh	r1, [r7, #4]
 80028ca:	88f8      	ldrh	r0, [r7, #6]
 80028cc:	f643 633a 	movw	r3, #15930	@ 0x3e3a
 80028d0:	9301      	str	r3, [sp, #4]
 80028d2:	4b05      	ldr	r3, [pc, #20]	@ (80028e8 <initVUmeter+0x50>)
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	233b      	movs	r3, #59	@ 0x3b
 80028d8:	2287      	movs	r2, #135	@ 0x87
 80028da:	f000 fa91 	bl	8002e00 <ILI9488_DrawImage>
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	0800fbdc 	.word	0x0800fbdc

080028ec <Displ_Select>:

/******************************************
 * @brief	enable display, disabling touch
 * 			device selected if CS low
 ******************************************/
void Displ_Select(void) {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
	if (TOUCH_SPI == DISPL_SPI) {											// if SPI port shared (display <-> touch)
		if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {					// if display not yet selected
 80028f0:	2120      	movs	r1, #32
 80028f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028f6:	f001 ffa3 	bl	8004840 <HAL_GPIO_ReadPin>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d015      	beq.n	800292c <Displ_Select+0x40>
			HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); 		// unselect touch
 8002900:	2201      	movs	r2, #1
 8002902:	2102      	movs	r1, #2
 8002904:	480a      	ldr	r0, [pc, #40]	@ (8002930 <Displ_Select+0x44>)
 8002906:	f001 ffb3 	bl	8004870 <HAL_GPIO_WritePin>
			SET_DISPL_SPI_BAUDRATE
 800290a:	4b0a      	ldr	r3, [pc, #40]	@ (8002934 <Displ_Select+0x48>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	4909      	ldr	r1, [pc, #36]	@ (8002934 <Displ_Select+0x48>)
 8002910:	f64f 73c7 	movw	r3, #65479	@ 0xffc7
 8002914:	4013      	ands	r3, r2
 8002916:	600b      	str	r3, [r1, #0]
 8002918:	4b06      	ldr	r3, [pc, #24]	@ (8002934 <Displ_Select+0x48>)
 800291a:	4a06      	ldr	r2, [pc, #24]	@ (8002934 <Displ_Select+0x48>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6013      	str	r3, [r2, #0]
			;				   									//change SPI port speed as per display needs
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);	// select display
 8002920:	2200      	movs	r2, #0
 8002922:	2120      	movs	r1, #32
 8002924:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002928:	f001 ffa2 	bl	8004870 <HAL_GPIO_WritePin>
		}
	}
}
 800292c:	bf00      	nop
 800292e:	bd80      	pop	{r7, pc}
 8002930:	48000400 	.word	0x48000400
 8002934:	40013000 	.word	0x40013000

08002938 <Displ_Transmit>:
 * @PARAM	DC_Status 	indicates if sending command or data
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t *data, uint16_t dataSize, uint8_t isTouchGFXBuffer) {
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6039      	str	r1, [r7, #0]
 8002940:	4611      	mov	r1, r2
 8002942:	461a      	mov	r2, r3
 8002944:	4603      	mov	r3, r0
 8002946:	71fb      	strb	r3, [r7, #7]
 8002948:	460b      	mov	r3, r1
 800294a:	80bb      	strh	r3, [r7, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {
 8002950:	bf00      	nop
 8002952:	4b23      	ldr	r3, [pc, #140]	@ (80029e0 <Displ_Transmit+0xa8>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0fa      	beq.n	8002952 <Displ_Transmit+0x1a>
	};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback

	Displ_Select();
 800295c:	f7ff ffc6 	bl	80028ec <Displ_Select>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	461a      	mov	r2, r3
 8002964:	2110      	movs	r1, #16
 8002966:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800296a:	f001 ff81 	bl	8004870 <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer) {
 800296e:	79bb      	ldrb	r3, [r7, #6]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d016      	beq.n	80029a2 <Displ_Transmit+0x6a>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
		uint32_t *limit = (uint32_t*) (data + dataSize);
 8002974:	88bb      	ldrh	r3, [r7, #4]
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	4413      	add	r3, r2
 800297a:	613b      	str	r3, [r7, #16]
		for (uint32_t *data32 = (uint32_t*) data; data32 < limit; data32++) {
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	e00b      	b.n	800299a <Displ_Transmit+0x62>
			*data32 = __REV16(*data32);
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	60fb      	str	r3, [r7, #12]
 \return               Reversed value
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value) {
	uint32_t result;

	__ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	ba5b      	rev16	r3, r3
 800298c:	60bb      	str	r3, [r7, #8]
	return result;
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	601a      	str	r2, [r3, #0]
		for (uint32_t *data32 = (uint32_t*) data; data32 < limit; data32++) {
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	3304      	adds	r3, #4
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d3ef      	bcc.n	8002982 <Displ_Transmit+0x4a>
#ifdef DISPLAY_SPI_INTERRUPT_MODE
		Displ_SpiAvailable=0;
		HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
	if (dataSize < DISPL_DMA_CUTOFF) {
 80029a2:	88bb      	ldrh	r3, [r7, #4]
 80029a4:	2b13      	cmp	r3, #19
 80029a6:	d80d      	bhi.n	80029c4 <Displ_Transmit+0x8c>
#endif //DISPLAY_SPI_DMA_MODE
		Displ_SpiAvailable = 0;
 80029a8:	4b0d      	ldr	r3, [pc, #52]	@ (80029e0 <Displ_Transmit+0xa8>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&DISPL_SPI_PORT, data, dataSize, HAL_MAX_DELAY);
 80029ae:	88ba      	ldrh	r2, [r7, #4]
 80029b0:	f04f 33ff 	mov.w	r3, #4294967295
 80029b4:	6839      	ldr	r1, [r7, #0]
 80029b6:	480b      	ldr	r0, [pc, #44]	@ (80029e4 <Displ_Transmit+0xac>)
 80029b8:	f004 fda5 	bl	8007506 <HAL_SPI_Transmit>
		Displ_SpiAvailable = 1;
 80029bc:	4b08      	ldr	r3, [pc, #32]	@ (80029e0 <Displ_Transmit+0xa8>)
 80029be:	2201      	movs	r2, #1
 80029c0:	701a      	strb	r2, [r3, #0]
		Displ_SpiAvailable = 0;
		HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT, data, dataSize);
	}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
}
 80029c2:	e008      	b.n	80029d6 <Displ_Transmit+0x9e>
		Displ_SpiAvailable = 0;
 80029c4:	4b06      	ldr	r3, [pc, #24]	@ (80029e0 <Displ_Transmit+0xa8>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT, data, dataSize);
 80029ca:	88bb      	ldrh	r3, [r7, #4]
 80029cc:	461a      	mov	r2, r3
 80029ce:	6839      	ldr	r1, [r7, #0]
 80029d0:	4804      	ldr	r0, [pc, #16]	@ (80029e4 <Displ_Transmit+0xac>)
 80029d2:	f005 fa49 	bl	8007e68 <HAL_SPI_Transmit_DMA>
}
 80029d6:	bf00      	nop
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	2000002c 	.word	0x2000002c
 80029e4:	200003bc 	.word	0x200003bc

080029e8 <Displ_WriteCommand>:

/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd) {
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	71fb      	strb	r3, [r7, #7]
	Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd), 0);
 80029f2:	1df9      	adds	r1, r7, #7
 80029f4:	2300      	movs	r3, #0
 80029f6:	2201      	movs	r2, #1
 80029f8:	2000      	movs	r0, #0
 80029fa:	f7ff ff9d 	bl	8002938 <Displ_Transmit>
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t *buff, size_t buff_size, uint8_t isTouchGFXBuffer) {
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b084      	sub	sp, #16
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	60f8      	str	r0, [r7, #12]
 8002a0e:	60b9      	str	r1, [r7, #8]
 8002a10:	4613      	mov	r3, r2
 8002a12:	71fb      	strb	r3, [r7, #7]
	if (buff_size == 0)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d007      	beq.n	8002a2a <Displ_WriteData+0x24>
		return;
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
 8002a20:	68f9      	ldr	r1, [r7, #12]
 8002a22:	2001      	movs	r0, #1
 8002a24:	f7ff ff88 	bl	8002938 <Displ_Transmit>
 8002a28:	e000      	b.n	8002a2c <Displ_WriteData+0x26>
		return;
 8002a2a:	bf00      	nop
}
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <ILI9XXX_Init>:

/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init() {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
	Displ_Select();
 8002a38:	f7ff ff58 	bl	80028ec <Displ_Select>

	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a46:	f001 ff13 	bl	8004870 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002a4a:	2001      	movs	r0, #1
 8002a4c:	f001 f984 	bl	8003d58 <HAL_Delay>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8002a50:	2201      	movs	r2, #1
 8002a52:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a5a:	f001 ff09 	bl	8004870 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8002a5e:	2096      	movs	r0, #150	@ 0x96
 8002a60:	f001 f97a 	bl	8003d58 <HAL_Delay>
	 data[2]=0x30; //default 0x30
	 Displ_WriteData(data,3);
	 #endif
	 */

	Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8002a64:	203a      	movs	r0, #58	@ 0x3a
 8002a66:	f7ff ffbf 	bl	80029e8 <Displ_WriteCommand>
#ifdef Z_RGB666
	Displ_WriteData((uint8_t *)"\x66",1,0);		// RGB666
#endif
#ifdef Z_RGB565
	Displ_WriteData((uint8_t*) "\x55", 1, 0);		// RGB565
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	4810      	ldr	r0, [pc, #64]	@ (8002ab0 <ILI9XXX_Init+0x7c>)
 8002a70:	f7ff ffc9 	bl	8002a06 <Displ_WriteData>
#endif
	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8002a74:	20b0      	movs	r0, #176	@ 0xb0
 8002a76:	f7ff ffb7 	bl	80029e8 <Displ_WriteCommand>
	Displ_WriteData((uint8_t*) "\x80", 1, 0);        // disable MISO pin
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	480d      	ldr	r0, [pc, #52]	@ (8002ab4 <ILI9XXX_Init+0x80>)
 8002a80:	f7ff ffc1 	bl	8002a06 <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8002a84:	20b0      	movs	r0, #176	@ 0xb0
 8002a86:	f7ff ffaf 	bl	80029e8 <Displ_WriteCommand>
	Displ_WriteData((uint8_t*) "\x80", 1, 0);        // disable MISO pin
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	4809      	ldr	r0, [pc, #36]	@ (8002ab4 <ILI9XXX_Init+0x80>)
 8002a90:	f7ff ffb9 	bl	8002a06 <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8002a94:	2011      	movs	r0, #17
 8002a96:	f7ff ffa7 	bl	80029e8 <Displ_WriteCommand>
	HAL_Delay(120);
 8002a9a:	2078      	movs	r0, #120	@ 0x78
 8002a9c:	f001 f95c 	bl	8003d58 <HAL_Delay>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 8002aa0:	2029      	movs	r0, #41	@ 0x29
 8002aa2:	f7ff ffa1 	bl	80029e8 <Displ_WriteCommand>
	HAL_Delay(5);
 8002aa6:	2005      	movs	r0, #5
 8002aa8:	f001 f956 	bl	8003d58 <HAL_Delay>

}
 8002aac:	bf00      	nop
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	0800e440 	.word	0x0800e440
 8002ab4:	0800e444 	.word	0x0800e444

08002ab8 <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8002ab8:	b590      	push	{r4, r7, lr}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4604      	mov	r4, r0
 8002ac0:	4608      	mov	r0, r1
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4623      	mov	r3, r4
 8002ac8:	80fb      	strh	r3, [r7, #6]
 8002aca:	4603      	mov	r3, r0
 8002acc:	80bb      	strh	r3, [r7, #4]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	807b      	strh	r3, [r7, #2]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t*) data)[0] = (((x2 & 0xFF) << 24) | ((x2 & 0xFF00) << 8) | ((x1 & 0xFF) << 8) | ((x1 & 0xFF00) >> 8));
 8002ad6:	887b      	ldrh	r3, [r7, #2]
 8002ad8:	061a      	lsls	r2, r3, #24
 8002ada:	887b      	ldrh	r3, [r7, #2]
 8002adc:	021b      	lsls	r3, r3, #8
 8002ade:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	88fb      	ldrh	r3, [r7, #6]
 8002ae6:	021b      	lsls	r3, r3, #8
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	4313      	orrs	r3, r2
 8002aec:	88fa      	ldrh	r2, [r7, #6]
 8002aee:	0a12      	lsrs	r2, r2, #8
 8002af0:	b292      	uxth	r2, r2
 8002af2:	431a      	orrs	r2, r3
 8002af4:	4b14      	ldr	r3, [pc, #80]	@ (8002b48 <Displ_SetAddressWindow+0x90>)
 8002af6:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 8002af8:	202a      	movs	r0, #42	@ 0x2a
 8002afa:	f7ff ff75 	bl	80029e8 <Displ_WriteCommand>
	Displ_WriteData(data, 4, 0);
 8002afe:	2200      	movs	r2, #0
 8002b00:	2104      	movs	r1, #4
 8002b02:	4811      	ldr	r0, [pc, #68]	@ (8002b48 <Displ_SetAddressWindow+0x90>)
 8002b04:	f7ff ff7f 	bl	8002a06 <Displ_WriteData>

	((uint32_t*) data)[0] = (((y2 & 0xFF) << 24) | ((y2 & 0xFF00) << 8) | ((y1 & 0xFF) << 8) | ((y1 & 0xFF00) >> 8));
 8002b08:	883b      	ldrh	r3, [r7, #0]
 8002b0a:	061a      	lsls	r2, r3, #24
 8002b0c:	883b      	ldrh	r3, [r7, #0]
 8002b0e:	021b      	lsls	r3, r3, #8
 8002b10:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002b14:	431a      	orrs	r2, r3
 8002b16:	88bb      	ldrh	r3, [r7, #4]
 8002b18:	021b      	lsls	r3, r3, #8
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	88ba      	ldrh	r2, [r7, #4]
 8002b20:	0a12      	lsrs	r2, r2, #8
 8002b22:	b292      	uxth	r2, r2
 8002b24:	431a      	orrs	r2, r3
 8002b26:	4b08      	ldr	r3, [pc, #32]	@ (8002b48 <Displ_SetAddressWindow+0x90>)
 8002b28:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 8002b2a:	202b      	movs	r0, #43	@ 0x2b
 8002b2c:	f7ff ff5c 	bl	80029e8 <Displ_WriteCommand>
	Displ_WriteData(data, 4, 0);
 8002b30:	2200      	movs	r2, #0
 8002b32:	2104      	movs	r1, #4
 8002b34:	4804      	ldr	r0, [pc, #16]	@ (8002b48 <Displ_SetAddressWindow+0x90>)
 8002b36:	f7ff ff66 	bl	8002a06 <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 8002b3a:	202c      	movs	r0, #44	@ 0x2c
 8002b3c:	f7ff ff54 	bl	80029e8 <Displ_WriteCommand>
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd90      	pop	{r4, r7, pc}
 8002b48:	2000a98c 	.word	0x2000a98c

08002b4c <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation) {
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	71fb      	strb	r3, [r7, #7]
	if (TOUCH_SPI == DISPL_SPI) {										// if touch and display share the same SPI port
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); // unselect display (will be selected at writing time)
 8002b56:	2201      	movs	r2, #1
 8002b58:	2120      	movs	r1, #32
 8002b5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b5e:	f001 fe87 	bl	8004870 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);// unselect touch (will be selected at writing time)
 8002b62:	2201      	movs	r2, #1
 8002b64:	2102      	movs	r1, #2
 8002b66:	4806      	ldr	r0, [pc, #24]	@ (8002b80 <Displ_Init+0x34>)
 8002b68:	f001 fe82 	bl	8004870 <HAL_GPIO_WritePin>
		;
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
		SET_TOUCH_SPI_BAUDRATE
		;
	}
	ILI9XXX_Init();
 8002b6c:	f7ff ff62 	bl	8002a34 <ILI9XXX_Init>
	Displ_Orientation(orientation);
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 f806 	bl	8002b84 <Displ_Orientation>
}
 8002b78:	bf00      	nop
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	48000400 	.word	0x48000400

08002b84 <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation) {
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	71fb      	strb	r3, [r7, #7]
	static uint8_t data[1];
	switch (orientation) {
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	2b03      	cmp	r3, #3
 8002b92:	d837      	bhi.n	8002c04 <Displ_Orientation+0x80>
 8002b94:	a201      	add	r2, pc, #4	@ (adr r2, 8002b9c <Displ_Orientation+0x18>)
 8002b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b9a:	bf00      	nop
 8002b9c:	08002bad 	.word	0x08002bad
 8002ba0:	08002bc3 	.word	0x08002bc3
 8002ba4:	08002bd9 	.word	0x08002bd9
 8002ba8:	08002bef 	.word	0x08002bef
	case Displ_Orientat_0:
		data[0] = ILI9XXX_MADCTL_0DEG;
 8002bac:	4b1d      	ldr	r3, [pc, #116]	@ (8002c24 <Displ_Orientation+0xa0>)
 8002bae:	2288      	movs	r2, #136	@ 0x88
 8002bb0:	701a      	strb	r2, [r3, #0]
		_height = DISPL_HEIGHT;
 8002bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c28 <Displ_Orientation+0xa4>)
 8002bb4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002bb8:	801a      	strh	r2, [r3, #0]
		_width = DISPL_WIDTH;
 8002bba:	4b1c      	ldr	r3, [pc, #112]	@ (8002c2c <Displ_Orientation+0xa8>)
 8002bbc:	22f0      	movs	r2, #240	@ 0xf0
 8002bbe:	801a      	strh	r2, [r3, #0]
		break;
 8002bc0:	e020      	b.n	8002c04 <Displ_Orientation+0x80>
	case Displ_Orientat_90:
		data[0] = ILI9XXX_MADCTL_90DEG;
 8002bc2:	4b18      	ldr	r3, [pc, #96]	@ (8002c24 <Displ_Orientation+0xa0>)
 8002bc4:	22e8      	movs	r2, #232	@ 0xe8
 8002bc6:	701a      	strb	r2, [r3, #0]
		_height = DISPL_WIDTH;
 8002bc8:	4b17      	ldr	r3, [pc, #92]	@ (8002c28 <Displ_Orientation+0xa4>)
 8002bca:	22f0      	movs	r2, #240	@ 0xf0
 8002bcc:	801a      	strh	r2, [r3, #0]
		_width = DISPL_HEIGHT;
 8002bce:	4b17      	ldr	r3, [pc, #92]	@ (8002c2c <Displ_Orientation+0xa8>)
 8002bd0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002bd4:	801a      	strh	r2, [r3, #0]
		break;
 8002bd6:	e015      	b.n	8002c04 <Displ_Orientation+0x80>
	case Displ_Orientat_180:
		data[0] = ILI9XXX_MADCTL_180DEG;
 8002bd8:	4b12      	ldr	r3, [pc, #72]	@ (8002c24 <Displ_Orientation+0xa0>)
 8002bda:	2248      	movs	r2, #72	@ 0x48
 8002bdc:	701a      	strb	r2, [r3, #0]
		_height = DISPL_HEIGHT;
 8002bde:	4b12      	ldr	r3, [pc, #72]	@ (8002c28 <Displ_Orientation+0xa4>)
 8002be0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002be4:	801a      	strh	r2, [r3, #0]
		_width = DISPL_WIDTH;
 8002be6:	4b11      	ldr	r3, [pc, #68]	@ (8002c2c <Displ_Orientation+0xa8>)
 8002be8:	22f0      	movs	r2, #240	@ 0xf0
 8002bea:	801a      	strh	r2, [r3, #0]
		break;
 8002bec:	e00a      	b.n	8002c04 <Displ_Orientation+0x80>
	case Displ_Orientat_270:
		data[0] = ILI9XXX_MADCTL_270DEG;
 8002bee:	4b0d      	ldr	r3, [pc, #52]	@ (8002c24 <Displ_Orientation+0xa0>)
 8002bf0:	2228      	movs	r2, #40	@ 0x28
 8002bf2:	701a      	strb	r2, [r3, #0]
		_height = DISPL_WIDTH;
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8002c28 <Displ_Orientation+0xa4>)
 8002bf6:	22f0      	movs	r2, #240	@ 0xf0
 8002bf8:	801a      	strh	r2, [r3, #0]
		_width = DISPL_HEIGHT;
 8002bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8002c2c <Displ_Orientation+0xa8>)
 8002bfc:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002c00:	801a      	strh	r2, [r3, #0]
		break;
 8002c02:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 8002c04:	2036      	movs	r0, #54	@ 0x36
 8002c06:	f7ff feef 	bl	80029e8 <Displ_WriteCommand>
	Displ_WriteData(data, 1, 0);
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	4805      	ldr	r0, [pc, #20]	@ (8002c24 <Displ_Orientation+0xa0>)
 8002c10:	f7ff fef9 	bl	8002a06 <Displ_WriteData>
	current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 8002c14:	4a06      	ldr	r2, [pc, #24]	@ (8002c30 <Displ_Orientation+0xac>)
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	7013      	strb	r3, [r2, #0]
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	2000a990 	.word	0x2000a990
 8002c28:	20002988 	.word	0x20002988
 8002c2c:	20002986 	.word	0x20002986
 8002c30:	20002984 	.word	0x20002984

08002c34 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == DISPL_SPI) {
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a05      	ldr	r2, [pc, #20]	@ (8002c58 <HAL_SPI_ErrorCallback+0x24>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d102      	bne.n	8002c4c <HAL_SPI_ErrorCallback+0x18>
		Displ_SpiAvailable = 1;
 8002c46:	4b05      	ldr	r3, [pc, #20]	@ (8002c5c <HAL_SPI_ErrorCallback+0x28>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	701a      	strb	r2, [r3, #0]
	}
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	40013000 	.word	0x40013000
 8002c5c:	2000002c 	.word	0x2000002c

08002c60 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == DISPL_SPI) {
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a05      	ldr	r2, [pc, #20]	@ (8002c84 <HAL_SPI_TxCpltCallback+0x24>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d102      	bne.n	8002c78 <HAL_SPI_TxCpltCallback+0x18>
		Displ_SpiAvailable = 1;
 8002c72:	4b05      	ldr	r3, [pc, #20]	@ (8002c88 <HAL_SPI_TxCpltCallback+0x28>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	701a      	strb	r2, [r3, #0]
#ifdef DISPLAY_USING_TOUCHGFX
		DisplayDriver_TransferCompleteCallback();
	#endif

	}
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	40013000 	.word	0x40013000
 8002c88:	2000002c 	.word	0x2000002c

08002c8c <Displ_FillArea>:
/*****************************
 * @brief	fill a rectangle with a color
 * @param	x, y	top left corner of the rectangle
 * 			w, h 	width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002c8c:	b590      	push	{r4, r7, lr}
 8002c8e:	b08b      	sub	sp, #44	@ 0x2c
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4604      	mov	r4, r0
 8002c94:	4608      	mov	r0, r1
 8002c96:	4611      	mov	r1, r2
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4623      	mov	r3, r4
 8002c9c:	80fb      	strh	r3, [r7, #6]
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	80bb      	strh	r3, [r7, #4]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	807b      	strh	r3, [r7, #2]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	803b      	strh	r3, [r7, #0]
	 * -	swap buffers
	 */

	uint32_t k, x1, y1, area, times;

	if ((x >= _width) || (y >= _height) || (w == 0) || (h == 0))
 8002caa:	88fb      	ldrh	r3, [r7, #6]
 8002cac:	4a4f      	ldr	r2, [pc, #316]	@ (8002dec <Displ_FillArea+0x160>)
 8002cae:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	f280 8096 	bge.w	8002de4 <Displ_FillArea+0x158>
 8002cb8:	88bb      	ldrh	r3, [r7, #4]
 8002cba:	4a4d      	ldr	r2, [pc, #308]	@ (8002df0 <Displ_FillArea+0x164>)
 8002cbc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	f280 808f 	bge.w	8002de4 <Displ_FillArea+0x158>
 8002cc6:	887b      	ldrh	r3, [r7, #2]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 808b 	beq.w	8002de4 <Displ_FillArea+0x158>
 8002cce:	883b      	ldrh	r3, [r7, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 8087 	beq.w	8002de4 <Displ_FillArea+0x158>
		return;  //

	x1 = x + w - 1;
 8002cd6:	88fa      	ldrh	r2, [r7, #6]
 8002cd8:	887b      	ldrh	r3, [r7, #2]
 8002cda:	4413      	add	r3, r2
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	623b      	str	r3, [r7, #32]
	if (x1 > _width) {
 8002ce0:	4b42      	ldr	r3, [pc, #264]	@ (8002dec <Displ_FillArea+0x160>)
 8002ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d903      	bls.n	8002cf6 <Displ_FillArea+0x6a>
		x1 = _width;
 8002cee:	4b3f      	ldr	r3, [pc, #252]	@ (8002dec <Displ_FillArea+0x160>)
 8002cf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cf4:	623b      	str	r3, [r7, #32]
	}

	y1 = y + h - 1;
 8002cf6:	88ba      	ldrh	r2, [r7, #4]
 8002cf8:	883b      	ldrh	r3, [r7, #0]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	61fb      	str	r3, [r7, #28]
	if (y1 > _height) {
 8002d00:	4b3b      	ldr	r3, [pc, #236]	@ (8002df0 <Displ_FillArea+0x164>)
 8002d02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d06:	461a      	mov	r2, r3
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d903      	bls.n	8002d16 <Displ_FillArea+0x8a>
		y1 = _height;
 8002d0e:	4b38      	ldr	r3, [pc, #224]	@ (8002df0 <Displ_FillArea+0x164>)
 8002d10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d14:	61fb      	str	r3, [r7, #28]
// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

	uint32_t data32;

	data32 = (color >> 8) | (color << 8) | (color << 24); // supposing color is 0xABCD, data32 becomes 0xCDABCDAB - set a 32 bit variable with swapped endians
 8002d16:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002d18:	0a1b      	lsrs	r3, r3, #8
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	431a      	orrs	r2, r3
 8002d24:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002d26:	061b      	lsls	r3, r3, #24
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
	area = ((y1 - y + 1) * (x1 - x + 1)); 						// area to fill in 16bit pixels
 8002d2c:	88bb      	ldrh	r3, [r7, #4]
 8002d2e:	69fa      	ldr	r2, [r7, #28]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	3301      	adds	r3, #1
 8002d34:	88fa      	ldrh	r2, [r7, #6]
 8002d36:	6a39      	ldr	r1, [r7, #32]
 8002d38:	1a8a      	subs	r2, r1, r2
 8002d3a:	3201      	adds	r2, #1
 8002d3c:	fb02 f303 	mul.w	r3, r2, r3
 8002d40:	60fb      	str	r3, [r7, #12]
	uint32_t *buf32Pos = (uint32_t*) dispBuffer; 	//dispBuffer defined in bytes, buf32Pos access it as 32 bit words
 8002d42:	4b2c      	ldr	r3, [pc, #176]	@ (8002df4 <Displ_FillArea+0x168>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	617b      	str	r3, [r7, #20]
	if (area < (SIZEBUF >> 1)) 							// if area is smaller than dispBuffer
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d4e:	d204      	bcs.n	8002d5a <Displ_FillArea+0xce>
		times = (area >> 1) + 1; 							// number of times data32 has to be loaded into buffer
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	085b      	lsrs	r3, r3, #1
 8002d54:	3301      	adds	r3, #1
 8002d56:	61bb      	str	r3, [r7, #24]
 8002d58:	e002      	b.n	8002d60 <Displ_FillArea+0xd4>
	else
		times = (SIZEBUF >> 2);  						// dispBuffer size as 32bit-words
 8002d5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d5e:	61bb      	str	r3, [r7, #24]
	for (k = 0; k < times; k++)
 8002d60:	2300      	movs	r3, #0
 8002d62:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d64:	e007      	b.n	8002d76 <Displ_FillArea+0xea>
		*(buf32Pos++) = data32; 						// loads buffer moving 32bit-words
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	1d1a      	adds	r2, r3, #4
 8002d6a:	617a      	str	r2, [r7, #20]
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	601a      	str	r2, [r3, #0]
	for (k = 0; k < times; k++)
 8002d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d72:	3301      	adds	r3, #1
 8002d74:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d3f3      	bcc.n	8002d66 <Displ_FillArea+0xda>
	}
	datasize=(buf8Pos-dispBuffer);
#endif

//START WRITING TO DISPLAY
	Displ_SetAddressWindow(x, y, x1, y1);
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	88b9      	ldrh	r1, [r7, #4]
 8002d88:	88f8      	ldrh	r0, [r7, #6]
 8002d8a:	f7ff fe95 	bl	8002ab8 <Displ_SetAddressWindow>

#ifdef Z_RGB565 // transferring RGB666 format dispBuffer
	times = (area >> (BUFLEVEL - 1)); //how many times buffer must be sent via SPI. It is (BUFFLEVEL-1) because area is 16-bit while dispBuffer is 8-bit
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	0b5b      	lsrs	r3, r3, #13
 8002d92:	61bb      	str	r3, [r7, #24]
	for (k = 0; k < times; k++) {
 8002d94:	2300      	movs	r3, #0
 8002d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d98:	e00a      	b.n	8002db0 <Displ_FillArea+0x124>
		Displ_WriteData(dispBuffer, SIZEBUF, 0);
 8002d9a:	4b16      	ldr	r3, [pc, #88]	@ (8002df4 <Displ_FillArea+0x168>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff fe2e 	bl	8002a06 <Displ_WriteData>
	for (k = 0; k < times; k++) {
 8002daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dac:	3301      	adds	r3, #1
 8002dae:	627b      	str	r3, [r7, #36]	@ 0x24
 8002db0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d3f0      	bcc.n	8002d9a <Displ_FillArea+0x10e>
	}
	Displ_WriteData(dispBuffer, (area << 1) - (times << BUFLEVEL), 0);
 8002db8:	4b0e      	ldr	r3, [pc, #56]	@ (8002df4 <Displ_FillArea+0x168>)
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	005a      	lsls	r2, r3, #1
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	039b      	lsls	r3, r3, #14
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	4619      	mov	r1, r3
 8002dca:	f7ff fe1c 	bl	8002a06 <Displ_WriteData>
	}
	Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
#endif

//BUFFER SWAP
	dispBuffer = (dispBuffer == dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8002dce:	4b09      	ldr	r3, [pc, #36]	@ (8002df4 <Displ_FillArea+0x168>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a09      	ldr	r2, [pc, #36]	@ (8002df8 <Displ_FillArea+0x16c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d101      	bne.n	8002ddc <Displ_FillArea+0x150>
 8002dd8:	4b08      	ldr	r3, [pc, #32]	@ (8002dfc <Displ_FillArea+0x170>)
 8002dda:	e000      	b.n	8002dde <Displ_FillArea+0x152>
 8002ddc:	4b06      	ldr	r3, [pc, #24]	@ (8002df8 <Displ_FillArea+0x16c>)
 8002dde:	4a05      	ldr	r2, [pc, #20]	@ (8002df4 <Displ_FillArea+0x168>)
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	e000      	b.n	8002de6 <Displ_FillArea+0x15a>
		return;  //
 8002de4:	bf00      	nop

}
 8002de6:	372c      	adds	r7, #44	@ 0x2c
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd90      	pop	{r4, r7, pc}
 8002dec:	20002986 	.word	0x20002986
 8002df0:	20002988 	.word	0x20002988
 8002df4:	20000030 	.word	0x20000030
 8002df8:	2000298c 	.word	0x2000298c
 8002dfc:	2000698c 	.word	0x2000698c

08002e00 <ILI9488_DrawImage>:
#ifndef DISPLAY_USING_TOUCHGFX

/*****************************************
 * WARNING: non tested, never used
 *****************************************/
void ILI9488_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t *data, uint32_t size) {
 8002e00:	b590      	push	{r4, r7, lr}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4604      	mov	r4, r0
 8002e08:	4608      	mov	r0, r1
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	4623      	mov	r3, r4
 8002e10:	80fb      	strh	r3, [r7, #6]
 8002e12:	4603      	mov	r3, r0
 8002e14:	80bb      	strh	r3, [r7, #4]
 8002e16:	460b      	mov	r3, r1
 8002e18:	807b      	strh	r3, [r7, #2]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	803b      	strh	r3, [r7, #0]
	Displ_SetAddressWindow(x, y, w + x - 1, h + y - 1);
 8002e1e:	887a      	ldrh	r2, [r7, #2]
 8002e20:	88fb      	ldrh	r3, [r7, #6]
 8002e22:	4413      	add	r3, r2
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b29c      	uxth	r4, r3
 8002e2a:	883a      	ldrh	r2, [r7, #0]
 8002e2c:	88bb      	ldrh	r3, [r7, #4]
 8002e2e:	4413      	add	r3, r2
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	88b9      	ldrh	r1, [r7, #4]
 8002e38:	88f8      	ldrh	r0, [r7, #6]
 8002e3a:	4622      	mov	r2, r4
 8002e3c:	f7ff fe3c 	bl	8002ab8 <Displ_SetAddressWindow>
	Displ_WriteData(data, size, 0);
 8002e40:	2200      	movs	r2, #0
 8002e42:	69f9      	ldr	r1, [r7, #28]
 8002e44:	69b8      	ldr	r0, [r7, #24]
 8002e46:	f7ff fdde 	bl	8002a06 <Displ_WriteData>
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd90      	pop	{r4, r7, pc}
	...

08002e54 <Displ_CLS>:

/*****************
 * @brief	clear display with a color.
 * @param	bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor) {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af02      	add	r7, sp, #8
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	80fb      	strh	r3, [r7, #6]
	Displ_FillArea(0, 0, _width, _height, bgcolor);
 8002e5e:	4b09      	ldr	r3, [pc, #36]	@ (8002e84 <Displ_CLS+0x30>)
 8002e60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	4b08      	ldr	r3, [pc, #32]	@ (8002e88 <Displ_CLS+0x34>)
 8002e68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e6c:	b299      	uxth	r1, r3
 8002e6e:	88fb      	ldrh	r3, [r7, #6]
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	460b      	mov	r3, r1
 8002e74:	2100      	movs	r1, #0
 8002e76:	2000      	movs	r0, #0
 8002e78:	f7ff ff08 	bl	8002c8c <Displ_FillArea>
}
 8002e7c:	bf00      	nop
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20002986 	.word	0x20002986
 8002e88:	20002988 	.word	0x20002988

08002e8c <fillCircleHelper>:
			Displ_Pixel(x0 - x, y0 - y, color);
		}
	}
}

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color) {
 8002e8c:	b590      	push	{r4, r7, lr}
 8002e8e:	b089      	sub	sp, #36	@ 0x24
 8002e90:	af02      	add	r7, sp, #8
 8002e92:	4604      	mov	r4, r0
 8002e94:	4608      	mov	r0, r1
 8002e96:	4611      	mov	r1, r2
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4623      	mov	r3, r4
 8002e9c:	80fb      	strh	r3, [r7, #6]
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	80bb      	strh	r3, [r7, #4]
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	807b      	strh	r3, [r7, #2]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8002eaa:	887b      	ldrh	r3, [r7, #2]
 8002eac:	f1c3 0301 	rsb	r3, r3, #1
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8002eb8:	887b      	ldrh	r3, [r7, #2]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	03d2      	lsls	r2, r2, #15
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8002eca:	887b      	ldrh	r3, [r7, #2]
 8002ecc:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 8002ece:	e0a7      	b.n	8003020 <fillCircleHelper+0x194>
		if (f >= 0) {
 8002ed0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	db0e      	blt.n	8002ef6 <fillCircleHelper+0x6a>
			y--;
 8002ed8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8002ee4:	8a7b      	ldrh	r3, [r7, #18]
 8002ee6:	3302      	adds	r3, #2
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8002eec:	8afa      	ldrh	r2, [r7, #22]
 8002eee:	8a7b      	ldrh	r3, [r7, #18]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8002ef6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3301      	adds	r3, #1
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8002f02:	8abb      	ldrh	r3, [r7, #20]
 8002f04:	3302      	adds	r3, #2
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8002f0a:	8afa      	ldrh	r2, [r7, #22]
 8002f0c:	8abb      	ldrh	r3, [r7, #20]
 8002f0e:	4413      	add	r3, r2
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1) {
 8002f14:	787b      	ldrb	r3, [r7, #1]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d03d      	beq.n	8002f9a <fillCircleHelper+0x10e>
			Displ_Line(x0 + x, y0 - y, x0 + x, y0 + y + 1 + delta, color);
 8002f1e:	88fa      	ldrh	r2, [r7, #6]
 8002f20:	8a3b      	ldrh	r3, [r7, #16]
 8002f22:	4413      	add	r3, r2
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	b218      	sxth	r0, r3
 8002f28:	88ba      	ldrh	r2, [r7, #4]
 8002f2a:	89fb      	ldrh	r3, [r7, #14]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	b219      	sxth	r1, r3
 8002f32:	88fa      	ldrh	r2, [r7, #6]
 8002f34:	8a3b      	ldrh	r3, [r7, #16]
 8002f36:	4413      	add	r3, r2
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	b21c      	sxth	r4, r3
 8002f3c:	88ba      	ldrh	r2, [r7, #4]
 8002f3e:	89fb      	ldrh	r3, [r7, #14]
 8002f40:	4413      	add	r3, r2
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002f46:	4413      	add	r3, r2
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	b21a      	sxth	r2, r3
 8002f50:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	4613      	mov	r3, r2
 8002f56:	4622      	mov	r2, r4
 8002f58:	f000 f86e 	bl	8003038 <Displ_Line>
			Displ_Line(x0 + y, y0 - x, x0 + y, y0 + x + 1 + delta, color);
 8002f5c:	88fa      	ldrh	r2, [r7, #6]
 8002f5e:	89fb      	ldrh	r3, [r7, #14]
 8002f60:	4413      	add	r3, r2
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	b218      	sxth	r0, r3
 8002f66:	88ba      	ldrh	r2, [r7, #4]
 8002f68:	8a3b      	ldrh	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	b219      	sxth	r1, r3
 8002f70:	88fa      	ldrh	r2, [r7, #6]
 8002f72:	89fb      	ldrh	r3, [r7, #14]
 8002f74:	4413      	add	r3, r2
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	b21c      	sxth	r4, r3
 8002f7a:	88ba      	ldrh	r2, [r7, #4]
 8002f7c:	8a3b      	ldrh	r3, [r7, #16]
 8002f7e:	4413      	add	r3, r2
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002f84:	4413      	add	r3, r2
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	3301      	adds	r3, #1
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	b21a      	sxth	r2, r3
 8002f8e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	4613      	mov	r3, r2
 8002f94:	4622      	mov	r2, r4
 8002f96:	f000 f84f 	bl	8003038 <Displ_Line>
		}
		if (cornername & 0x2) {
 8002f9a:	787b      	ldrb	r3, [r7, #1]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d03d      	beq.n	8003020 <fillCircleHelper+0x194>
			Displ_Line(x0 - x, y0 - y, x0 - x, y0 + y + 1 + delta, color);
 8002fa4:	88fa      	ldrh	r2, [r7, #6]
 8002fa6:	8a3b      	ldrh	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	b218      	sxth	r0, r3
 8002fae:	88ba      	ldrh	r2, [r7, #4]
 8002fb0:	89fb      	ldrh	r3, [r7, #14]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	b219      	sxth	r1, r3
 8002fb8:	88fa      	ldrh	r2, [r7, #6]
 8002fba:	8a3b      	ldrh	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	b21c      	sxth	r4, r3
 8002fc2:	88ba      	ldrh	r2, [r7, #4]
 8002fc4:	89fb      	ldrh	r3, [r7, #14]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002fcc:	4413      	add	r3, r2
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	b21a      	sxth	r2, r3
 8002fd6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	4622      	mov	r2, r4
 8002fde:	f000 f82b 	bl	8003038 <Displ_Line>
			Displ_Line(x0 - y, y0 - x, x0 - y, y0 + x + 1 + delta, color);
 8002fe2:	88fa      	ldrh	r2, [r7, #6]
 8002fe4:	89fb      	ldrh	r3, [r7, #14]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	b218      	sxth	r0, r3
 8002fec:	88ba      	ldrh	r2, [r7, #4]
 8002fee:	8a3b      	ldrh	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	b219      	sxth	r1, r3
 8002ff6:	88fa      	ldrh	r2, [r7, #6]
 8002ff8:	89fb      	ldrh	r3, [r7, #14]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	b21c      	sxth	r4, r3
 8003000:	88ba      	ldrh	r2, [r7, #4]
 8003002:	8a3b      	ldrh	r3, [r7, #16]
 8003004:	4413      	add	r3, r2
 8003006:	b29a      	uxth	r2, r3
 8003008:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800300a:	4413      	add	r3, r2
 800300c:	b29b      	uxth	r3, r3
 800300e:	3301      	adds	r3, #1
 8003010:	b29b      	uxth	r3, r3
 8003012:	b21a      	sxth	r2, r3
 8003014:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	4613      	mov	r3, r2
 800301a:	4622      	mov	r2, r4
 800301c:	f000 f80c 	bl	8003038 <Displ_Line>
	while (x < y) {
 8003020:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003024:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003028:	429a      	cmp	r2, r3
 800302a:	f6ff af51 	blt.w	8002ed0 <fillCircleHelper+0x44>
		}
	}
}
 800302e:	bf00      	nop
 8003030:	bf00      	nop
 8003032:	371c      	adds	r7, #28
 8003034:	46bd      	mov	sp, r7
 8003036:	bd90      	pop	{r4, r7, pc}

08003038 <Displ_Line>:
}

/************************************************************************
 * @brief	draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 8003038:	b590      	push	{r4, r7, lr}
 800303a:	b08b      	sub	sp, #44	@ 0x2c
 800303c:	af02      	add	r7, sp, #8
 800303e:	4604      	mov	r4, r0
 8003040:	4608      	mov	r0, r1
 8003042:	4611      	mov	r1, r2
 8003044:	461a      	mov	r2, r3
 8003046:	4623      	mov	r3, r4
 8003048:	80fb      	strh	r3, [r7, #6]
 800304a:	4603      	mov	r3, r0
 800304c:	80bb      	strh	r3, [r7, #4]
 800304e:	460b      	mov	r3, r1
 8003050:	807b      	strh	r3, [r7, #2]
 8003052:	4613      	mov	r3, r2
 8003054:	803b      	strh	r3, [r7, #0]
	int16_t l, x, steep, ystep, err, dx, dy;

	if (x0 == x1) {  // fast solve vertical lines
 8003056:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800305a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800305e:	429a      	cmp	r2, r3
 8003060:	d123      	bne.n	80030aa <Displ_Line+0x72>
		if (y1 > y0) {
 8003062:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003066:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800306a:	429a      	cmp	r2, r3
 800306c:	dd0e      	ble.n	800308c <Displ_Line+0x54>
			Displ_FillArea(x0, y0, 1, y1 - y0 + 1, color);
 800306e:	88f8      	ldrh	r0, [r7, #6]
 8003070:	88b9      	ldrh	r1, [r7, #4]
 8003072:	883a      	ldrh	r2, [r7, #0]
 8003074:	88bb      	ldrh	r3, [r7, #4]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	b29b      	uxth	r3, r3
 800307a:	3301      	adds	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	4613      	mov	r3, r2
 8003084:	2201      	movs	r2, #1
 8003086:	f7ff fe01 	bl	8002c8c <Displ_FillArea>
		} else {
			Displ_FillArea(x0, y1, 1, y0 - y1 + 1, color);
		}
		return;
 800308a:	e103      	b.n	8003294 <Displ_Line+0x25c>
			Displ_FillArea(x0, y1, 1, y0 - y1 + 1, color);
 800308c:	88f8      	ldrh	r0, [r7, #6]
 800308e:	8839      	ldrh	r1, [r7, #0]
 8003090:	88ba      	ldrh	r2, [r7, #4]
 8003092:	883b      	ldrh	r3, [r7, #0]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	b29b      	uxth	r3, r3
 8003098:	3301      	adds	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	4613      	mov	r3, r2
 80030a2:	2201      	movs	r2, #1
 80030a4:	f7ff fdf2 	bl	8002c8c <Displ_FillArea>
		return;
 80030a8:	e0f4      	b.n	8003294 <Displ_Line+0x25c>
	}
	if (y0 == y1) { // fast solve horizontal lines
 80030aa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80030ae:	f9b7 3000 	ldrsh.w	r3, [r7]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d121      	bne.n	80030fa <Displ_Line+0xc2>
		if (x1 > x0)
 80030b6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80030ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030be:	429a      	cmp	r2, r3
 80030c0:	dd0d      	ble.n	80030de <Displ_Line+0xa6>
			Displ_FillArea(x0, y0, x1 - x0 + 1, 1, color);
 80030c2:	88f8      	ldrh	r0, [r7, #6]
 80030c4:	88b9      	ldrh	r1, [r7, #4]
 80030c6:	887a      	ldrh	r2, [r7, #2]
 80030c8:	88fb      	ldrh	r3, [r7, #6]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	3301      	adds	r3, #1
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	2301      	movs	r3, #1
 80030d8:	f7ff fdd8 	bl	8002c8c <Displ_FillArea>
		else
			Displ_FillArea(x1, y1, x0 - x1 + 1, 1, color);
		return;
 80030dc:	e0da      	b.n	8003294 <Displ_Line+0x25c>
			Displ_FillArea(x1, y1, x0 - x1 + 1, 1, color);
 80030de:	8878      	ldrh	r0, [r7, #2]
 80030e0:	8839      	ldrh	r1, [r7, #0]
 80030e2:	88fa      	ldrh	r2, [r7, #6]
 80030e4:	887b      	ldrh	r3, [r7, #2]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	3301      	adds	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	2301      	movs	r3, #1
 80030f4:	f7ff fdca 	bl	8002c8c <Displ_FillArea>
		return;
 80030f8:	e0cc      	b.n	8003294 <Displ_Line+0x25c>
	}

	steep = (y1 > y0 ? y1 - y0 : y0 - y1) > (x1 > x0 ? x1 - x0 : x0 - x1);
 80030fa:	f9b7 2000 	ldrsh.w	r2, [r7]
 80030fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003102:	429a      	cmp	r2, r3
 8003104:	dd05      	ble.n	8003112 <Displ_Line+0xda>
 8003106:	f9b7 2000 	ldrsh.w	r2, [r7]
 800310a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800310e:	1ad2      	subs	r2, r2, r3
 8003110:	e004      	b.n	800311c <Displ_Line+0xe4>
 8003112:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003116:	f9b7 3000 	ldrsh.w	r3, [r7]
 800311a:	1ad2      	subs	r2, r2, r3
 800311c:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8003120:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003124:	4299      	cmp	r1, r3
 8003126:	dd05      	ble.n	8003134 <Displ_Line+0xfc>
 8003128:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800312c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003130:	1acb      	subs	r3, r1, r3
 8003132:	e004      	b.n	800313e <Displ_Line+0x106>
 8003134:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8003138:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800313c:	1acb      	subs	r3, r1, r3
 800313e:	429a      	cmp	r2, r3
 8003140:	bfcc      	ite	gt
 8003142:	2301      	movgt	r3, #1
 8003144:	2300      	movle	r3, #0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	82bb      	strh	r3, [r7, #20]

	if (steep) {
 800314a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00b      	beq.n	800316a <Displ_Line+0x132>
		_swap_int16_t(x0, y0);
 8003152:	88fb      	ldrh	r3, [r7, #6]
 8003154:	827b      	strh	r3, [r7, #18]
 8003156:	88bb      	ldrh	r3, [r7, #4]
 8003158:	80fb      	strh	r3, [r7, #6]
 800315a:	8a7b      	ldrh	r3, [r7, #18]
 800315c:	80bb      	strh	r3, [r7, #4]
		_swap_int16_t(x1, y1);
 800315e:	887b      	ldrh	r3, [r7, #2]
 8003160:	823b      	strh	r3, [r7, #16]
 8003162:	883b      	ldrh	r3, [r7, #0]
 8003164:	807b      	strh	r3, [r7, #2]
 8003166:	8a3b      	ldrh	r3, [r7, #16]
 8003168:	803b      	strh	r3, [r7, #0]
	}

	if (x0 > x1) {
 800316a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800316e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003172:	429a      	cmp	r2, r3
 8003174:	dd0b      	ble.n	800318e <Displ_Line+0x156>
		_swap_int16_t(x0, x1);
 8003176:	88fb      	ldrh	r3, [r7, #6]
 8003178:	81fb      	strh	r3, [r7, #14]
 800317a:	887b      	ldrh	r3, [r7, #2]
 800317c:	80fb      	strh	r3, [r7, #6]
 800317e:	89fb      	ldrh	r3, [r7, #14]
 8003180:	807b      	strh	r3, [r7, #2]
		_swap_int16_t(y0, y1);
 8003182:	88bb      	ldrh	r3, [r7, #4]
 8003184:	81bb      	strh	r3, [r7, #12]
 8003186:	883b      	ldrh	r3, [r7, #0]
 8003188:	80bb      	strh	r3, [r7, #4]
 800318a:	89bb      	ldrh	r3, [r7, #12]
 800318c:	803b      	strh	r3, [r7, #0]
	}

	dx = x1 - x0;
 800318e:	887a      	ldrh	r2, [r7, #2]
 8003190:	88fb      	ldrh	r3, [r7, #6]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	b29b      	uxth	r3, r3
 8003196:	817b      	strh	r3, [r7, #10]
	err = dx >> 1;
 8003198:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800319c:	105b      	asrs	r3, r3, #1
 800319e:	833b      	strh	r3, [r7, #24]
	if (y0 < y1) {
 80031a0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80031a4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	da07      	bge.n	80031bc <Displ_Line+0x184>
		dy = y1 - y0;
 80031ac:	883a      	ldrh	r2, [r7, #0]
 80031ae:	88bb      	ldrh	r3, [r7, #4]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	82fb      	strh	r3, [r7, #22]
		ystep = 1;
 80031b6:	2301      	movs	r3, #1
 80031b8:	837b      	strh	r3, [r7, #26]
 80031ba:	e007      	b.n	80031cc <Displ_Line+0x194>
	} else {
		dy = y0 - y1;
 80031bc:	88ba      	ldrh	r2, [r7, #4]
 80031be:	883b      	ldrh	r3, [r7, #0]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	82fb      	strh	r3, [r7, #22]
		ystep = -1;
 80031c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80031ca:	837b      	strh	r3, [r7, #26]
	}

	l = 00;
 80031cc:	2300      	movs	r3, #0
 80031ce:	83fb      	strh	r3, [r7, #30]
	for (x = x0; x <= x1; x++) {
 80031d0:	88fb      	ldrh	r3, [r7, #6]
 80031d2:	83bb      	strh	r3, [r7, #28]
 80031d4:	e03a      	b.n	800324c <Displ_Line+0x214>
		l++;
 80031d6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80031da:	b29b      	uxth	r3, r3
 80031dc:	3301      	adds	r3, #1
 80031de:	b29b      	uxth	r3, r3
 80031e0:	83fb      	strh	r3, [r7, #30]
		err -= dy;
 80031e2:	8b3a      	ldrh	r2, [r7, #24]
 80031e4:	8afb      	ldrh	r3, [r7, #22]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	833b      	strh	r3, [r7, #24]
		if (err < 0) {
 80031ec:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	da25      	bge.n	8003240 <Displ_Line+0x208>
			if (steep) {
 80031f4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d009      	beq.n	8003210 <Displ_Line+0x1d8>
				Displ_FillArea(y0, x0, 1, l, color);
 80031fc:	88b8      	ldrh	r0, [r7, #4]
 80031fe:	88f9      	ldrh	r1, [r7, #6]
 8003200:	8bfa      	ldrh	r2, [r7, #30]
 8003202:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	4613      	mov	r3, r2
 8003208:	2201      	movs	r2, #1
 800320a:	f7ff fd3f 	bl	8002c8c <Displ_FillArea>
 800320e:	e007      	b.n	8003220 <Displ_Line+0x1e8>
			} else {
				Displ_FillArea(x0, y0, l, 1, color);
 8003210:	88f8      	ldrh	r0, [r7, #6]
 8003212:	88b9      	ldrh	r1, [r7, #4]
 8003214:	8bfa      	ldrh	r2, [r7, #30]
 8003216:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	2301      	movs	r3, #1
 800321c:	f7ff fd36 	bl	8002c8c <Displ_FillArea>
			}
			y0 += ystep;
 8003220:	88ba      	ldrh	r2, [r7, #4]
 8003222:	8b7b      	ldrh	r3, [r7, #26]
 8003224:	4413      	add	r3, r2
 8003226:	b29b      	uxth	r3, r3
 8003228:	80bb      	strh	r3, [r7, #4]
			l = 0;
 800322a:	2300      	movs	r3, #0
 800322c:	83fb      	strh	r3, [r7, #30]
			x0 = x + 1;
 800322e:	8bbb      	ldrh	r3, [r7, #28]
 8003230:	3301      	adds	r3, #1
 8003232:	b29b      	uxth	r3, r3
 8003234:	80fb      	strh	r3, [r7, #6]
			err += dx;
 8003236:	8b3a      	ldrh	r2, [r7, #24]
 8003238:	897b      	ldrh	r3, [r7, #10]
 800323a:	4413      	add	r3, r2
 800323c:	b29b      	uxth	r3, r3
 800323e:	833b      	strh	r3, [r7, #24]
	for (x = x0; x <= x1; x++) {
 8003240:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003244:	b29b      	uxth	r3, r3
 8003246:	3301      	adds	r3, #1
 8003248:	b29b      	uxth	r3, r3
 800324a:	83bb      	strh	r3, [r7, #28]
 800324c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003250:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003254:	429a      	cmp	r2, r3
 8003256:	ddbe      	ble.n	80031d6 <Displ_Line+0x19e>
		}
	}
	if (l != 0) {
 8003258:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d019      	beq.n	8003294 <Displ_Line+0x25c>
		if (steep) {
 8003260:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00b      	beq.n	8003280 <Displ_Line+0x248>
			Displ_FillArea(y0, x0, 1, l - 1, color);
 8003268:	88b8      	ldrh	r0, [r7, #4]
 800326a:	88f9      	ldrh	r1, [r7, #6]
 800326c:	8bfb      	ldrh	r3, [r7, #30]
 800326e:	3b01      	subs	r3, #1
 8003270:	b29a      	uxth	r2, r3
 8003272:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	4613      	mov	r3, r2
 8003278:	2201      	movs	r2, #1
 800327a:	f7ff fd07 	bl	8002c8c <Displ_FillArea>
 800327e:	e009      	b.n	8003294 <Displ_Line+0x25c>
		} else {
			Displ_FillArea(x0, y0, l - 1, 1, color);
 8003280:	88f8      	ldrh	r0, [r7, #6]
 8003282:	88b9      	ldrh	r1, [r7, #4]
 8003284:	8bfb      	ldrh	r3, [r7, #30]
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	2301      	movs	r3, #1
 8003290:	f7ff fcfc 	bl	8002c8c <Displ_FillArea>
		}
	}
}
 8003294:	3724      	adds	r7, #36	@ 0x24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd90      	pop	{r4, r7, pc}
	...

0800329c <Displ_WChar>:
 * @brief	display one character on the display
 * @param 	x,y: top left corner of the character to be printed
 * 			ch, font, color, bgcolor: as per parameter name
 * 			size: (1 or 2) single or double wided printing
 **********************/
void Displ_WChar(uint16_t x, uint16_t y, char ch, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 800329c:	b082      	sub	sp, #8
 800329e:	b590      	push	{r4, r7, lr}
 80032a0:	b08d      	sub	sp, #52	@ 0x34
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80032a6:	4603      	mov	r3, r0
 80032a8:	80fb      	strh	r3, [r7, #6]
 80032aa:	460b      	mov	r3, r1
 80032ac:	80bb      	strh	r3, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, bytes, j, bufSize, mask;

	const uint8_t *pos;
	uint8_t wsize = font.Width; //printing char width
 80032b2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80032b6:	76fb      	strb	r3, [r7, #27]

	if (size == 2)
 80032b8:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d102      	bne.n	80032c6 <Displ_WChar+0x2a>
		wsize <<= 1;
 80032c0:	7efb      	ldrb	r3, [r7, #27]
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	76fb      	strb	r3, [r7, #27]
	bufSize = 0;
 80032c6:	2300      	movs	r3, #0
 80032c8:	623b      	str	r3, [r7, #32]
	bytes = font.Height * font.Size;
 80032ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80032ce:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 80032d2:	fb02 f303 	mul.w	r3, r2, r3
 80032d6:	617b      	str	r3, [r7, #20]
	pos = font.table + (ch - 32) * bytes; //that's char position in table
 80032d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032da:	78fb      	ldrb	r3, [r7, #3]
 80032dc:	3b20      	subs	r3, #32
 80032de:	4619      	mov	r1, r3
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	fb01 f303 	mul.w	r3, r1, r3
 80032e6:	4413      	add	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
	switch (font.Size) {
 80032ea:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d005      	beq.n	80032fe <Displ_WChar+0x62>
 80032f2:	2b03      	cmp	r3, #3
 80032f4:	d107      	bne.n	8003306 <Displ_WChar+0x6a>
	case 3:
		mask = 0x800000;
 80032f6:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80032fa:	61fb      	str	r3, [r7, #28]
		break;
 80032fc:	e005      	b.n	800330a <Displ_WChar+0x6e>
	case 2:
		mask = 0x8000;
 80032fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003302:	61fb      	str	r3, [r7, #28]
		break;
 8003304:	e001      	b.n	800330a <Displ_WChar+0x6e>
	default:
		mask = 0x80;
 8003306:	2380      	movs	r3, #128	@ 0x80
 8003308:	61fb      	str	r3, [r7, #28]
	}

#ifdef Z_RGB565

	uint16_t color1, bgcolor1;
	uint16_t *dispBuffer16 = (uint16_t*) dispBuffer;
 800330a:	4b60      	ldr	r3, [pc, #384]	@ (800348c <Displ_WChar+0x1f0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	60fb      	str	r3, [r7, #12]

	color1 = ((color & 0xFF) << 8 | (color >> 8));  //swapping byte endian: STM32 is little endian, ST7735 is big endian
 8003310:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8003314:	021b      	lsls	r3, r3, #8
 8003316:	b21a      	sxth	r2, r3
 8003318:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800331c:	0a1b      	lsrs	r3, r3, #8
 800331e:	b29b      	uxth	r3, r3
 8003320:	b21b      	sxth	r3, r3
 8003322:	4313      	orrs	r3, r2
 8003324:	b21b      	sxth	r3, r3
 8003326:	817b      	strh	r3, [r7, #10]
	bgcolor1 = ((bgcolor & 0xFF) << 8 | (bgcolor >> 8));//swapping byte endian: STM32 is little endian, ST7735 is big endian
 8003328:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800332c:	021b      	lsls	r3, r3, #8
 800332e:	b21a      	sxth	r2, r3
 8003330:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8003334:	0a1b      	lsrs	r3, r3, #8
 8003336:	b29b      	uxth	r3, r3
 8003338:	b21b      	sxth	r3, r3
 800333a:	4313      	orrs	r3, r2
 800333c:	b21b      	sxth	r3, r3
 800333e:	813b      	strh	r3, [r7, #8]

	for (i = 0; i < (bytes); i += font.Size) {
 8003340:	2300      	movs	r3, #0
 8003342:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003344:	e06f      	b.n	8003426 <Displ_WChar+0x18a>
		b = 0;
 8003346:	2300      	movs	r3, #0
 8003348:	62bb      	str	r3, [r7, #40]	@ 0x28
		switch (font.Size) {
 800334a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800334e:	2b02      	cmp	r3, #2
 8003350:	d015      	beq.n	800337e <Displ_WChar+0xe2>
 8003352:	2b03      	cmp	r3, #3
 8003354:	d120      	bne.n	8003398 <Displ_WChar+0xfc>
		case 3:
			b = pos[i] << 16 | pos[i + 1] << 8 | pos[i + 2];
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800335a:	4413      	add	r3, r2
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	041a      	lsls	r2, r3, #16
 8003360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003362:	3301      	adds	r3, #1
 8003364:	6939      	ldr	r1, [r7, #16]
 8003366:	440b      	add	r3, r1
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	021b      	lsls	r3, r3, #8
 800336c:	4313      	orrs	r3, r2
 800336e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003370:	3202      	adds	r2, #2
 8003372:	6939      	ldr	r1, [r7, #16]
 8003374:	440a      	add	r2, r1
 8003376:	7812      	ldrb	r2, [r2, #0]
 8003378:	4313      	orrs	r3, r2
 800337a:	62bb      	str	r3, [r7, #40]	@ 0x28
			break;
 800337c:	e011      	b.n	80033a2 <Displ_WChar+0x106>
		case 2:
			b = pos[i] << 8 | pos[i + 1];
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003382:	4413      	add	r3, r2
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	021b      	lsls	r3, r3, #8
 8003388:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800338a:	3201      	adds	r2, #1
 800338c:	6939      	ldr	r1, [r7, #16]
 800338e:	440a      	add	r2, r1
 8003390:	7812      	ldrb	r2, [r2, #0]
 8003392:	4313      	orrs	r3, r2
 8003394:	62bb      	str	r3, [r7, #40]	@ 0x28
			break;
 8003396:	e004      	b.n	80033a2 <Displ_WChar+0x106>
		default:
			b = pos[i];
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800339c:	4413      	add	r3, r2
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	62bb      	str	r3, [r7, #40]	@ 0x28
		}

		for (j = 0; j < font.Width; j++) {
 80033a2:	2300      	movs	r3, #0
 80033a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80033a6:	e032      	b.n	800340e <Displ_WChar+0x172>
			if ((b << j) & mask) {
 80033a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ac:	409a      	lsls	r2, r3
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d014      	beq.n	80033e0 <Displ_WChar+0x144>
				dispBuffer16[bufSize++] = color1;
 80033b6:	6a3b      	ldr	r3, [r7, #32]
 80033b8:	1c5a      	adds	r2, r3, #1
 80033ba:	623a      	str	r2, [r7, #32]
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	4413      	add	r3, r2
 80033c2:	897a      	ldrh	r2, [r7, #10]
 80033c4:	801a      	strh	r2, [r3, #0]
				if (size == 2) {
 80033c6:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d11c      	bne.n	8003408 <Displ_WChar+0x16c>
					dispBuffer16[bufSize++] = color1;
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	623a      	str	r2, [r7, #32]
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4413      	add	r3, r2
 80033da:	897a      	ldrh	r2, [r7, #10]
 80033dc:	801a      	strh	r2, [r3, #0]
 80033de:	e013      	b.n	8003408 <Displ_WChar+0x16c>
				}
			} else {
				dispBuffer16[bufSize++] = bgcolor1;
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	623a      	str	r2, [r7, #32]
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	4413      	add	r3, r2
 80033ec:	893a      	ldrh	r2, [r7, #8]
 80033ee:	801a      	strh	r2, [r3, #0]
				if (size == 2) {
 80033f0:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d107      	bne.n	8003408 <Displ_WChar+0x16c>
					dispBuffer16[bufSize++] = bgcolor1;
 80033f8:	6a3b      	ldr	r3, [r7, #32]
 80033fa:	1c5a      	adds	r2, r3, #1
 80033fc:	623a      	str	r2, [r7, #32]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4413      	add	r3, r2
 8003404:	893a      	ldrh	r2, [r7, #8]
 8003406:	801a      	strh	r2, [r3, #0]
		for (j = 0; j < font.Width; j++) {
 8003408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340a:	3301      	adds	r3, #1
 800340c:	627b      	str	r3, [r7, #36]	@ 0x24
 800340e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003412:	461a      	mov	r2, r3
 8003414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003416:	4293      	cmp	r3, r2
 8003418:	d3c6      	bcc.n	80033a8 <Displ_WChar+0x10c>
	for (i = 0; i < (bytes); i += font.Size) {
 800341a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800341e:	461a      	mov	r2, r3
 8003420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003422:	4413      	add	r3, r2
 8003424:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003426:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	429a      	cmp	r2, r3
 800342c:	d38b      	bcc.n	8003346 <Displ_WChar+0xaa>
				}
			}
		}
	}
	bufSize <<= 1;
 800342e:	6a3b      	ldr	r3, [r7, #32]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	623b      	str	r3, [r7, #32]
			}
		}
	}
#endif

	Displ_SetAddressWindow(x, y, x + wsize - 1, y + font.Height - 1);
 8003434:	7efb      	ldrb	r3, [r7, #27]
 8003436:	b29a      	uxth	r2, r3
 8003438:	88fb      	ldrh	r3, [r7, #6]
 800343a:	4413      	add	r3, r2
 800343c:	b29b      	uxth	r3, r3
 800343e:	3b01      	subs	r3, #1
 8003440:	b29c      	uxth	r4, r3
 8003442:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8003446:	88bb      	ldrh	r3, [r7, #4]
 8003448:	4413      	add	r3, r2
 800344a:	b29b      	uxth	r3, r3
 800344c:	3b01      	subs	r3, #1
 800344e:	b29b      	uxth	r3, r3
 8003450:	88b9      	ldrh	r1, [r7, #4]
 8003452:	88f8      	ldrh	r0, [r7, #6]
 8003454:	4622      	mov	r2, r4
 8003456:	f7ff fb2f 	bl	8002ab8 <Displ_SetAddressWindow>
	Displ_WriteData(dispBuffer, bufSize, 0);
 800345a:	4b0c      	ldr	r3, [pc, #48]	@ (800348c <Displ_WChar+0x1f0>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2200      	movs	r2, #0
 8003460:	6a39      	ldr	r1, [r7, #32]
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff facf 	bl	8002a06 <Displ_WriteData>
	dispBuffer = (dispBuffer == dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8003468:	4b08      	ldr	r3, [pc, #32]	@ (800348c <Displ_WChar+0x1f0>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a08      	ldr	r2, [pc, #32]	@ (8003490 <Displ_WChar+0x1f4>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d101      	bne.n	8003476 <Displ_WChar+0x1da>
 8003472:	4b08      	ldr	r3, [pc, #32]	@ (8003494 <Displ_WChar+0x1f8>)
 8003474:	e000      	b.n	8003478 <Displ_WChar+0x1dc>
 8003476:	4b06      	ldr	r3, [pc, #24]	@ (8003490 <Displ_WChar+0x1f4>)
 8003478:	4a04      	ldr	r2, [pc, #16]	@ (800348c <Displ_WChar+0x1f0>)
 800347a:	6013      	str	r3, [r2, #0]

}
 800347c:	bf00      	nop
 800347e:	3734      	adds	r7, #52	@ 0x34
 8003480:	46bd      	mov	sp, r7
 8003482:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003486:	b002      	add	sp, #8
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	20000030 	.word	0x20000030
 8003490:	2000298c 	.word	0x2000298c
 8003494:	2000698c 	.word	0x2000698c

08003498 <Displ_fillRoundRect>:
	drawCircleHelper(x + w - r - 1, y + r, r, 2, color);
	drawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
	drawCircleHelper(x + r, y + h - r - 1, r, 8, color);
}

void Displ_fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color) {
 8003498:	b590      	push	{r4, r7, lr}
 800349a:	b087      	sub	sp, #28
 800349c:	af02      	add	r7, sp, #8
 800349e:	4604      	mov	r4, r0
 80034a0:	4608      	mov	r0, r1
 80034a2:	4611      	mov	r1, r2
 80034a4:	461a      	mov	r2, r3
 80034a6:	4623      	mov	r3, r4
 80034a8:	80fb      	strh	r3, [r7, #6]
 80034aa:	4603      	mov	r3, r0
 80034ac:	80bb      	strh	r3, [r7, #4]
 80034ae:	460b      	mov	r3, r1
 80034b0:	807b      	strh	r3, [r7, #2]
 80034b2:	4613      	mov	r3, r2
 80034b4:	803b      	strh	r3, [r7, #0]
	int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 80034b6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80034ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80034be:	4293      	cmp	r3, r2
 80034c0:	bfa8      	it	ge
 80034c2:	4613      	movge	r3, r2
 80034c4:	b21b      	sxth	r3, r3
 80034c6:	0fda      	lsrs	r2, r3, #31
 80034c8:	4413      	add	r3, r2
 80034ca:	105b      	asrs	r3, r3, #1
 80034cc:	81fb      	strh	r3, [r7, #14]
	if (r > max_radius)
 80034ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80034d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	dd01      	ble.n	80034de <Displ_fillRoundRect+0x46>
		r = max_radius;
 80034da:	89fb      	ldrh	r3, [r7, #14]
 80034dc:	843b      	strh	r3, [r7, #32]
	Displ_FillArea(x + r, y, w - 2 * r, h, color);
 80034de:	88fa      	ldrh	r2, [r7, #6]
 80034e0:	8c3b      	ldrh	r3, [r7, #32]
 80034e2:	4413      	add	r3, r2
 80034e4:	b298      	uxth	r0, r3
 80034e6:	88b9      	ldrh	r1, [r7, #4]
 80034e8:	887a      	ldrh	r2, [r7, #2]
 80034ea:	8c3b      	ldrh	r3, [r7, #32]
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	883c      	ldrh	r4, [r7, #0]
 80034f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	4623      	mov	r3, r4
 80034fc:	f7ff fbc6 	bl	8002c8c <Displ_FillArea>
	fillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 8003500:	88fa      	ldrh	r2, [r7, #6]
 8003502:	887b      	ldrh	r3, [r7, #2]
 8003504:	4413      	add	r3, r2
 8003506:	b29a      	uxth	r2, r3
 8003508:	8c3b      	ldrh	r3, [r7, #32]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	b29b      	uxth	r3, r3
 800350e:	3b01      	subs	r3, #1
 8003510:	b29b      	uxth	r3, r3
 8003512:	b218      	sxth	r0, r3
 8003514:	88ba      	ldrh	r2, [r7, #4]
 8003516:	8c3b      	ldrh	r3, [r7, #32]
 8003518:	4413      	add	r3, r2
 800351a:	b29b      	uxth	r3, r3
 800351c:	b219      	sxth	r1, r3
 800351e:	883a      	ldrh	r2, [r7, #0]
 8003520:	8c3b      	ldrh	r3, [r7, #32]
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	b29b      	uxth	r3, r3
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b29b      	uxth	r3, r3
 800352e:	b21b      	sxth	r3, r3
 8003530:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8003534:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003536:	9201      	str	r2, [sp, #4]
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	2301      	movs	r3, #1
 800353c:	4622      	mov	r2, r4
 800353e:	f7ff fca5 	bl	8002e8c <fillCircleHelper>
	fillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 8003542:	88fa      	ldrh	r2, [r7, #6]
 8003544:	8c3b      	ldrh	r3, [r7, #32]
 8003546:	4413      	add	r3, r2
 8003548:	b29b      	uxth	r3, r3
 800354a:	b218      	sxth	r0, r3
 800354c:	88ba      	ldrh	r2, [r7, #4]
 800354e:	8c3b      	ldrh	r3, [r7, #32]
 8003550:	4413      	add	r3, r2
 8003552:	b29b      	uxth	r3, r3
 8003554:	b219      	sxth	r1, r3
 8003556:	883a      	ldrh	r2, [r7, #0]
 8003558:	8c3b      	ldrh	r3, [r7, #32]
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	b29b      	uxth	r3, r3
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	b29b      	uxth	r3, r3
 8003562:	3b01      	subs	r3, #1
 8003564:	b29b      	uxth	r3, r3
 8003566:	b21b      	sxth	r3, r3
 8003568:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 800356c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800356e:	9201      	str	r2, [sp, #4]
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	2302      	movs	r3, #2
 8003574:	4622      	mov	r2, r4
 8003576:	f7ff fc89 	bl	8002e8c <fillCircleHelper>
}
 800357a:	bf00      	nop
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	bd90      	pop	{r4, r7, pc}

08003582 <Displ_WString>:
 * 			font	to bu used
 * 			size	1 (normal), 2 (double width)
 * 			color	font color
 * 			bgcolor	background color
 ************************/
void Displ_WString(uint16_t x, uint16_t y, const char *str, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8003582:	b082      	sub	sp, #8
 8003584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003586:	b08b      	sub	sp, #44	@ 0x2c
 8003588:	af06      	add	r7, sp, #24
 800358a:	603a      	str	r2, [r7, #0]
 800358c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800358e:	4603      	mov	r3, r0
 8003590:	80fb      	strh	r3, [r7, #6]
 8003592:	460b      	mov	r3, r1
 8003594:	80bb      	strh	r3, [r7, #4]
	uint16_t delta = font.Width;
 8003596:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003598:	81fb      	strh	r3, [r7, #14]
	if (size > 1)
 800359a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d922      	bls.n	80035e8 <Displ_WString+0x66>
		delta <<= 1;
 80035a2:	89fb      	ldrh	r3, [r7, #14]
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	81fb      	strh	r3, [r7, #14]

	while (*str) {
 80035a8:	e01e      	b.n	80035e8 <Displ_WString+0x66>
		 str++;
		 continue;
		 }
		 }
		 */
		Displ_WChar(x, y, *str, font, size, color, bgcolor);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	781a      	ldrb	r2, [r3, #0]
 80035ae:	88bd      	ldrh	r5, [r7, #4]
 80035b0:	88fc      	ldrh	r4, [r7, #6]
 80035b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80035b6:	9304      	str	r3, [sp, #16]
 80035b8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80035ba:	9303      	str	r3, [sp, #12]
 80035bc:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80035c0:	9302      	str	r3, [sp, #8]
 80035c2:	466e      	mov	r6, sp
 80035c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80035c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80035cc:	e886 0003 	stmia.w	r6, {r0, r1}
 80035d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035d2:	4629      	mov	r1, r5
 80035d4:	4620      	mov	r0, r4
 80035d6:	f7ff fe61 	bl	800329c <Displ_WChar>
		x += delta;
 80035da:	88fa      	ldrh	r2, [r7, #6]
 80035dc:	89fb      	ldrh	r3, [r7, #14]
 80035de:	4413      	add	r3, r2
 80035e0:	80fb      	strh	r3, [r7, #6]
		str++;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	3301      	adds	r3, #1
 80035e6:	603b      	str	r3, [r7, #0]
	while (*str) {
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1dc      	bne.n	80035aa <Displ_WString+0x28>
	}
}
 80035f0:	bf00      	nop
 80035f2:	bf00      	nop
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80035fc:	b002      	add	sp, #8
 80035fe:	4770      	bx	lr

08003600 <Displ_CString>:
 * 			size	1 (normal), 2 (double width)
 * 			color	font color
 * 			bgcolor	background color
 ************************/
void Displ_CString(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, const char *str, sFONT font, uint8_t size,
		uint16_t color, uint16_t bgcolor) {
 8003600:	b5b0      	push	{r4, r5, r7, lr}
 8003602:	b08a      	sub	sp, #40	@ 0x28
 8003604:	af06      	add	r7, sp, #24
 8003606:	4604      	mov	r4, r0
 8003608:	4608      	mov	r0, r1
 800360a:	4611      	mov	r1, r2
 800360c:	461a      	mov	r2, r3
 800360e:	4623      	mov	r3, r4
 8003610:	80fb      	strh	r3, [r7, #6]
 8003612:	4603      	mov	r3, r0
 8003614:	80bb      	strh	r3, [r7, #4]
 8003616:	460b      	mov	r3, r1
 8003618:	807b      	strh	r3, [r7, #2]
 800361a:	4613      	mov	r3, r2
 800361c:	803b      	strh	r3, [r7, #0]
	uint16_t x, y;
	uint16_t wsize = font.Width;
 800361e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003620:	817b      	strh	r3, [r7, #10]
	static uint8_t cambia = 0;
	if (size > 1)
 8003622:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003626:	2b01      	cmp	r3, #1
 8003628:	d902      	bls.n	8003630 <Displ_CString+0x30>
		wsize <<= 1;
 800362a:	897b      	ldrh	r3, [r7, #10]
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	817b      	strh	r3, [r7, #10]
	if ((strlen(str) * wsize) > (x1 - x0 + 1))
 8003630:	6a38      	ldr	r0, [r7, #32]
 8003632:	f7fc fe1d 	bl	8000270 <strlen>
 8003636:	4602      	mov	r2, r0
 8003638:	897b      	ldrh	r3, [r7, #10]
 800363a:	fb02 f303 	mul.w	r3, r2, r3
 800363e:	8879      	ldrh	r1, [r7, #2]
 8003640:	88fa      	ldrh	r2, [r7, #6]
 8003642:	1a8a      	subs	r2, r1, r2
 8003644:	3201      	adds	r2, #1
 8003646:	4293      	cmp	r3, r2
 8003648:	d902      	bls.n	8003650 <Displ_CString+0x50>
		x = x0;
 800364a:	88fb      	ldrh	r3, [r7, #6]
 800364c:	81fb      	strh	r3, [r7, #14]
 800364e:	e00e      	b.n	800366e <Displ_CString+0x6e>
	else
		x = (x1 + x0 + 1 - strlen(str) * wsize) >> 1;
 8003650:	887a      	ldrh	r2, [r7, #2]
 8003652:	88fb      	ldrh	r3, [r7, #6]
 8003654:	4413      	add	r3, r2
 8003656:	461c      	mov	r4, r3
 8003658:	6a38      	ldr	r0, [r7, #32]
 800365a:	f7fc fe09 	bl	8000270 <strlen>
 800365e:	4602      	mov	r2, r0
 8003660:	897b      	ldrh	r3, [r7, #10]
 8003662:	fb02 f303 	mul.w	r3, r2, r3
 8003666:	1ae3      	subs	r3, r4, r3
 8003668:	3301      	adds	r3, #1
 800366a:	085b      	lsrs	r3, r3, #1
 800366c:	81fb      	strh	r3, [r7, #14]
	if (font.Height > (y1 - y0 + 1))
 800366e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003670:	4619      	mov	r1, r3
 8003672:	883a      	ldrh	r2, [r7, #0]
 8003674:	88bb      	ldrh	r3, [r7, #4]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	3301      	adds	r3, #1
 800367a:	4299      	cmp	r1, r3
 800367c:	dd02      	ble.n	8003684 <Displ_CString+0x84>
		y = y0;
 800367e:	88bb      	ldrh	r3, [r7, #4]
 8003680:	81bb      	strh	r3, [r7, #12]
 8003682:	e007      	b.n	8003694 <Displ_CString+0x94>
	else
		y = (y1 + y0 + 1 - font.Height) >> 1;
 8003684:	883a      	ldrh	r2, [r7, #0]
 8003686:	88bb      	ldrh	r3, [r7, #4]
 8003688:	4413      	add	r3, r2
 800368a:	3301      	adds	r3, #1
 800368c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800368e:	1a9b      	subs	r3, r3, r2
 8003690:	105b      	asrs	r3, r3, #1
 8003692:	81bb      	strh	r3, [r7, #12]

	if (x > x0) {
 8003694:	89fa      	ldrh	r2, [r7, #14]
 8003696:	88fb      	ldrh	r3, [r7, #6]
 8003698:	429a      	cmp	r2, r3
 800369a:	d912      	bls.n	80036c2 <Displ_CString+0xc2>
		Displ_FillArea(x0, y0, x - x0, y1 - y0 + 1, bgcolor);
 800369c:	89fa      	ldrh	r2, [r7, #14]
 800369e:	88fb      	ldrh	r3, [r7, #6]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	b29c      	uxth	r4, r3
 80036a4:	883a      	ldrh	r2, [r7, #0]
 80036a6:	88bb      	ldrh	r3, [r7, #4]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	3301      	adds	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	88b9      	ldrh	r1, [r7, #4]
 80036b2:	88f8      	ldrh	r0, [r7, #6]
 80036b4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	4613      	mov	r3, r2
 80036ba:	4622      	mov	r2, r4
 80036bc:	f7ff fae6 	bl	8002c8c <Displ_FillArea>
 80036c0:	e001      	b.n	80036c6 <Displ_CString+0xc6>
	} else
		x = x0; // fixing here mistake could be due to roundings: x lower than x0.
 80036c2:	88fb      	ldrh	r3, [r7, #6]
 80036c4:	81fb      	strh	r3, [r7, #14]
	if (x1 > (strlen(str) * wsize + x0))
 80036c6:	887c      	ldrh	r4, [r7, #2]
 80036c8:	6a38      	ldr	r0, [r7, #32]
 80036ca:	f7fc fdd1 	bl	8000270 <strlen>
 80036ce:	4602      	mov	r2, r0
 80036d0:	897b      	ldrh	r3, [r7, #10]
 80036d2:	fb03 f202 	mul.w	r2, r3, r2
 80036d6:	88fb      	ldrh	r3, [r7, #6]
 80036d8:	4413      	add	r3, r2
 80036da:	429c      	cmp	r4, r3
 80036dc:	d91b      	bls.n	8003716 <Displ_CString+0x116>
		Displ_FillArea(x1 - x + x0 - 1, y0, x - x0 + 1, y1 - y0 + 1, bgcolor);
 80036de:	887a      	ldrh	r2, [r7, #2]
 80036e0:	89fb      	ldrh	r3, [r7, #14]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	88fb      	ldrh	r3, [r7, #6]
 80036e8:	4413      	add	r3, r2
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b298      	uxth	r0, r3
 80036f0:	89fa      	ldrh	r2, [r7, #14]
 80036f2:	88fb      	ldrh	r3, [r7, #6]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3301      	adds	r3, #1
 80036fa:	b29c      	uxth	r4, r3
 80036fc:	883a      	ldrh	r2, [r7, #0]
 80036fe:	88bb      	ldrh	r3, [r7, #4]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	b29b      	uxth	r3, r3
 8003704:	3301      	adds	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	88b9      	ldrh	r1, [r7, #4]
 800370a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	4613      	mov	r3, r2
 8003710:	4622      	mov	r2, r4
 8003712:	f7ff fabb 	bl	8002c8c <Displ_FillArea>

	if (y > y0) {
 8003716:	89ba      	ldrh	r2, [r7, #12]
 8003718:	88bb      	ldrh	r3, [r7, #4]
 800371a:	429a      	cmp	r2, r3
 800371c:	d912      	bls.n	8003744 <Displ_CString+0x144>
		Displ_FillArea(x0, y0, x1 - x0 + 1, y - y0, bgcolor);
 800371e:	887a      	ldrh	r2, [r7, #2]
 8003720:	88fb      	ldrh	r3, [r7, #6]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	b29b      	uxth	r3, r3
 8003726:	3301      	adds	r3, #1
 8003728:	b29c      	uxth	r4, r3
 800372a:	89ba      	ldrh	r2, [r7, #12]
 800372c:	88bb      	ldrh	r3, [r7, #4]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	b29a      	uxth	r2, r3
 8003732:	88b9      	ldrh	r1, [r7, #4]
 8003734:	88f8      	ldrh	r0, [r7, #6]
 8003736:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	4613      	mov	r3, r2
 800373c:	4622      	mov	r2, r4
 800373e:	f7ff faa5 	bl	8002c8c <Displ_FillArea>
 8003742:	e001      	b.n	8003748 <Displ_CString+0x148>
	} else
		y = y0; //same comment as above
 8003744:	88bb      	ldrh	r3, [r7, #4]
 8003746:	81bb      	strh	r3, [r7, #12]
	if (y1 >= (font.Height + y0))
 8003748:	883a      	ldrh	r2, [r7, #0]
 800374a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800374c:	4619      	mov	r1, r3
 800374e:	88bb      	ldrh	r3, [r7, #4]
 8003750:	440b      	add	r3, r1
 8003752:	429a      	cmp	r2, r3
 8003754:	db19      	blt.n	800378a <Displ_CString+0x18a>
		Displ_FillArea(x0, y1 - y + y0, x1 - x0 + 1, y - y0 + 1, bgcolor);
 8003756:	883a      	ldrh	r2, [r7, #0]
 8003758:	89bb      	ldrh	r3, [r7, #12]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	b29a      	uxth	r2, r3
 800375e:	88bb      	ldrh	r3, [r7, #4]
 8003760:	4413      	add	r3, r2
 8003762:	b299      	uxth	r1, r3
 8003764:	887a      	ldrh	r2, [r7, #2]
 8003766:	88fb      	ldrh	r3, [r7, #6]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	b29b      	uxth	r3, r3
 800376c:	3301      	adds	r3, #1
 800376e:	b29c      	uxth	r4, r3
 8003770:	89ba      	ldrh	r2, [r7, #12]
 8003772:	88bb      	ldrh	r3, [r7, #4]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	b29b      	uxth	r3, r3
 8003778:	3301      	adds	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	88f8      	ldrh	r0, [r7, #6]
 800377e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	4613      	mov	r3, r2
 8003784:	4622      	mov	r2, r4
 8003786:	f7ff fa81 	bl	8002c8c <Displ_FillArea>

	cambia = !cambia;
 800378a:	4b12      	ldr	r3, [pc, #72]	@ (80037d4 <Displ_CString+0x1d4>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	bf0c      	ite	eq
 8003792:	2301      	moveq	r3, #1
 8003794:	2300      	movne	r3, #0
 8003796:	b2db      	uxtb	r3, r3
 8003798:	461a      	mov	r2, r3
 800379a:	4b0e      	ldr	r3, [pc, #56]	@ (80037d4 <Displ_CString+0x1d4>)
 800379c:	701a      	strb	r2, [r3, #0]

	Displ_WString(x, y, str, font, size, color, bgcolor);
 800379e:	89bd      	ldrh	r5, [r7, #12]
 80037a0:	89fc      	ldrh	r4, [r7, #14]
 80037a2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80037a4:	9304      	str	r3, [sp, #16]
 80037a6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80037a8:	9303      	str	r3, [sp, #12]
 80037aa:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80037ae:	9302      	str	r3, [sp, #8]
 80037b0:	466a      	mov	r2, sp
 80037b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80037b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80037ba:	e882 0003 	stmia.w	r2, {r0, r1}
 80037be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c0:	6a3a      	ldr	r2, [r7, #32]
 80037c2:	4629      	mov	r1, r5
 80037c4:	4620      	mov	r0, r4
 80037c6:	f7ff fedc 	bl	8003582 <Displ_WString>

}
 80037ca:	bf00      	nop
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bdb0      	pop	{r4, r5, r7, pc}
 80037d2:	bf00      	nop
 80037d4:	2000a991 	.word	0x2000a991

080037d8 <Displ_BackLight>:
 *				'0'		set the display level to 0 (off)
 *				'I'		'Initialize'  IT MUST BE in dimming mode
 *              'Q'		do nothing, just return current level
 * @return		current backlight level
 **************************************/
uint32_t Displ_BackLight(uint8_t cmd) {
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	71fb      	strb	r3, [r7, #7]

#ifdef DISPLAY_DIMMING_MODE
	static uint16_t memCCR1=0;  			//it stores CCR1 value while in stand-by
#endif

	switch (cmd) {
 80037e2:	79fb      	ldrb	r3, [r7, #7]
 80037e4:	2b51      	cmp	r3, #81	@ 0x51
 80037e6:	d00a      	beq.n	80037fe <Displ_BackLight+0x26>
 80037e8:	2b51      	cmp	r3, #81	@ 0x51
 80037ea:	dc16      	bgt.n	800381a <Displ_BackLight+0x42>
 80037ec:	2b46      	cmp	r3, #70	@ 0x46
 80037ee:	d008      	beq.n	8003802 <Displ_BackLight+0x2a>
 80037f0:	2b46      	cmp	r3, #70	@ 0x46
 80037f2:	dc12      	bgt.n	800381a <Displ_BackLight+0x42>
 80037f4:	2b30      	cmp	r3, #48	@ 0x30
 80037f6:	d00a      	beq.n	800380e <Displ_BackLight+0x36>
 80037f8:	2b31      	cmp	r3, #49	@ 0x31
 80037fa:	d002      	beq.n	8003802 <Displ_BackLight+0x2a>
	  	HAL_TIM_PWM_Start(&BKLIT_T, BKLIT_CHANNEL);
		BKLIT_TIMER->BKLIT_CCR=BKLIT_INIT_LEVEL;
		break;
#endif
	default:
		break;
 80037fc:	e00d      	b.n	800381a <Displ_BackLight+0x42>
		__NOP();
 80037fe:	bf00      	nop
		break;
 8003800:	e00c      	b.n	800381c <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_SET);
 8003802:	2201      	movs	r2, #1
 8003804:	2108      	movs	r1, #8
 8003806:	480a      	ldr	r0, [pc, #40]	@ (8003830 <Displ_BackLight+0x58>)
 8003808:	f001 f832 	bl	8004870 <HAL_GPIO_WritePin>
		break;
 800380c:	e006      	b.n	800381c <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_RESET);
 800380e:	2200      	movs	r2, #0
 8003810:	2108      	movs	r1, #8
 8003812:	4807      	ldr	r0, [pc, #28]	@ (8003830 <Displ_BackLight+0x58>)
 8003814:	f001 f82c 	bl	8004870 <HAL_GPIO_WritePin>
		break;
 8003818:	e000      	b.n	800381c <Displ_BackLight+0x44>
		break;
 800381a:	bf00      	nop
	}
#ifndef DISPLAY_DIMMING_MODE
	return HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin);
 800381c:	2108      	movs	r1, #8
 800381e:	4804      	ldr	r0, [pc, #16]	@ (8003830 <Displ_BackLight+0x58>)
 8003820:	f001 f80e 	bl	8004840 <HAL_GPIO_ReadPin>
 8003824:	4603      	mov	r3, r0
#else
	return (BKLIT_TIMER->BKLIT_CCR);
#endif
}
 8003826:	4618      	mov	r0, r3
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	48000400 	.word	0x48000400

08003834 <Touch_HandlePenDownInterrupt>:
extern Displ_Orientat_e current_orientation;	// indicates the active display orientation. Set by Displ_Orientation

volatile uint8_t Touch_PenDown = 0;						// set to 1 by pendown interrupt callback, reset to 0 by sw
volatile uint8_t Touch_Int_Enabled = 1;	// while reading touch sensor touch interrupt handling is disabled through this flag

void Touch_HandlePenDownInterrupt() {
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
	if (Touch_Int_Enabled) {
 8003838:	4b06      	ldr	r3, [pc, #24]	@ (8003854 <Touch_HandlePenDownInterrupt+0x20>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d002      	beq.n	8003848 <Touch_HandlePenDownInterrupt+0x14>
		Touch_PenDown = 1;
 8003842:	4b05      	ldr	r3, [pc, #20]	@ (8003858 <Touch_HandlePenDownInterrupt+0x24>)
 8003844:	2201      	movs	r2, #1
 8003846:	701a      	strb	r2, [r3, #0]
	}
}
 8003848:	bf00      	nop
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	20000034 	.word	0x20000034
 8003858:	2000a992 	.word	0x2000a992

0800385c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == TOUCH_INT_Pin) {
 8003866:	88fb      	ldrh	r3, [r7, #6]
 8003868:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800386c:	d101      	bne.n	8003872 <HAL_GPIO_EXTI_Callback+0x16>
		Touch_HandlePenDownInterrupt();
 800386e:	f7ff ffe1 	bl	8003834 <Touch_HandlePenDownInterrupt>
	}
}
 8003872:	bf00      	nop
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <Touch_Select>:

/******************************************
 * @brief	enable touch, disabling display
 * 			set SPI baudrate as needed
 ******************************************/
void Touch_Select(void) {
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
	if (TOUCH_SPI == DISPL_SPI) {										// if touch and display share the same SPI port
		if (!HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {					// if display selected
 8003880:	2120      	movs	r1, #32
 8003882:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003886:	f000 ffdb 	bl	8004840 <HAL_GPIO_ReadPin>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10b      	bne.n	80038a8 <Touch_Select+0x2c>
			while (!Displ_SpiAvailable) {
 8003890:	bf00      	nop
 8003892:	4b0f      	ldr	r3, [pc, #60]	@ (80038d0 <Touch_Select+0x54>)
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0fa      	beq.n	8003892 <Touch_Select+0x16>
			}; // waiting for completing display communication. Flag is set to 1 by transmission-complete interrupt callback
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display
 800389c:	2201      	movs	r2, #1
 800389e:	2120      	movs	r1, #32
 80038a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038a4:	f000 ffe4 	bl	8004870 <HAL_GPIO_WritePin>
		}
		SET_TOUCH_SPI_BAUDRATE
 80038a8:	4b0a      	ldr	r3, [pc, #40]	@ (80038d4 <Touch_Select+0x58>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	4909      	ldr	r1, [pc, #36]	@ (80038d4 <Touch_Select+0x58>)
 80038ae:	f64f 73c7 	movw	r3, #65479	@ 0xffc7
 80038b2:	4013      	ands	r3, r2
 80038b4:	600b      	str	r3, [r1, #0]
 80038b6:	4b07      	ldr	r3, [pc, #28]	@ (80038d4 <Touch_Select+0x58>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a06      	ldr	r2, [pc, #24]	@ (80038d4 <Touch_Select+0x58>)
 80038bc:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80038c0:	6013      	str	r3, [r2, #0]
		;				   										//change SPI port speed as per display needs
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);
 80038c2:	2200      	movs	r2, #0
 80038c4:	2102      	movs	r1, #2
 80038c6:	4804      	ldr	r0, [pc, #16]	@ (80038d8 <Touch_Select+0x5c>)
 80038c8:	f000 ffd2 	bl	8004870 <HAL_GPIO_WritePin>
	}
}
 80038cc:	bf00      	nop
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	2000002c 	.word	0x2000002c
 80038d4:	40013000 	.word	0x40013000
 80038d8:	48000400 	.word	0x48000400

080038dc <Touch_UnSelect>:

/******************************************
 * @brief	disable touch
 ******************************************/
void Touch_UnSelect(void) {
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
	if (TOUCH_SPI == DISPL_SPI) {										// if touch and display share the same SPI port
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);			// unselect touch
 80038e0:	2201      	movs	r2, #1
 80038e2:	2102      	movs	r1, #2
 80038e4:	4802      	ldr	r0, [pc, #8]	@ (80038f0 <Touch_UnSelect+0x14>)
 80038e6:	f000 ffc3 	bl	8004870 <HAL_GPIO_WritePin>
	}
}
 80038ea:	bf00      	nop
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	48000400 	.word	0x48000400

080038f4 <Touch_PollAxis>:
 * @params	axis	use only one of the three options X_AXIS, Y_AXIS or Z_AXIS
 * @return			the level measured on the "axis" axis
 * 					PLEASE NOTE this function should be only for internal usage
 * 								Use Touch_GetXYTouch() instead
 *******************************************************************************/
uint16_t Touch_PollAxis(uint8_t axis) {
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	4603      	mov	r3, r0
 80038fc:	71fb      	strb	r3, [r7, #7]
	uint8_t poll[2] = { 0, 0 };
 80038fe:	2300      	movs	r3, #0
 8003900:	813b      	strh	r3, [r7, #8]
	uint32_t poll16;

	if (TOUCH_SPI == DISPL_SPI) {				// if touch and display share the same SPI port
		Touch_Select();						// enable CS on touch device
 8003902:	f7ff ffbb 	bl	800387c <Touch_Select>
	}

	Touch_Int_Enabled = 0;	//disable interrupt handling: sensor reading triggers interrupt
 8003906:	4b17      	ldr	r3, [pc, #92]	@ (8003964 <Touch_PollAxis+0x70>)
 8003908:	2200      	movs	r2, #0
 800390a:	701a      	strb	r2, [r3, #0]
	// disable interrupt while enquiring the touch sensor because it triggers the interrupt pin
	HAL_NVIC_DisableIRQ(TOUCH_INT_EXTI_IRQn);
 800390c:	2028      	movs	r0, #40	@ 0x28
 800390e:	f000 fb8e 	bl	800402e <HAL_NVIC_DisableIRQ>

	HAL_SPI_Transmit(&TOUCH_SPI_PORT, &axis, 1, 10);
 8003912:	1df9      	adds	r1, r7, #7
 8003914:	230a      	movs	r3, #10
 8003916:	2201      	movs	r2, #1
 8003918:	4813      	ldr	r0, [pc, #76]	@ (8003968 <Touch_PollAxis+0x74>)
 800391a:	f003 fdf4 	bl	8007506 <HAL_SPI_Transmit>
	if (HAL_SPI_Receive(&TOUCH_SPI_PORT, poll, 2, 10) == HAL_OK) {
 800391e:	f107 0108 	add.w	r1, r7, #8
 8003922:	230a      	movs	r3, #10
 8003924:	2202      	movs	r2, #2
 8003926:	4810      	ldr	r0, [pc, #64]	@ (8003968 <Touch_PollAxis+0x74>)
 8003928:	f003 ff5b 	bl	80077e2 <HAL_SPI_Receive>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d105      	bne.n	800393e <Touch_PollAxis+0x4a>
		poll16 = (poll[0] << 8) + poll[1];
 8003932:	7a3b      	ldrb	r3, [r7, #8]
 8003934:	021b      	lsls	r3, r3, #8
 8003936:	7a7a      	ldrb	r2, [r7, #9]
 8003938:	4413      	add	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	e001      	b.n	8003942 <Touch_PollAxis+0x4e>
	} else {
		poll16 = 0;
 800393e:	2300      	movs	r3, #0
 8003940:	60fb      	str	r3, [r7, #12]
	}

//enable back interrupt after reading the sensor
	HAL_NVIC_ClearPendingIRQ(TOUCH_INT_EXTI_IRQn);
 8003942:	2028      	movs	r0, #40	@ 0x28
 8003944:	f000 fb8d 	bl	8004062 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(TOUCH_INT_EXTI_IRQn);
 8003948:	2028      	movs	r0, #40	@ 0x28
 800394a:	f000 fb62 	bl	8004012 <HAL_NVIC_EnableIRQ>

	Touch_Int_Enabled = 1;
 800394e:	4b05      	ldr	r3, [pc, #20]	@ (8003964 <Touch_PollAxis+0x70>)
 8003950:	2201      	movs	r2, #1
 8003952:	701a      	strb	r2, [r3, #0]

	if (TOUCH_SPI == DISPL_SPI) {	// if touch and display share the same SPI port
		Touch_UnSelect();
 8003954:	f7ff ffc2 	bl	80038dc <Touch_UnSelect>
	}

	return poll16;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	b29b      	uxth	r3, r3
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	20000034 	.word	0x20000034
 8003968:	200003bc 	.word	0x200003bc

0800396c <Touch_GetXYtouch>:
 * @brief			polls touch screen and returning its XY screen position
 * 					that's regardless touch recording flag (interrupt received)
 * @return	x,y		in case isTouch=1 contain touch coordinates
 * 			isTouch is 1 if detected a touch, otherwise 0;
 *********************************************************************************/
void Touch_GetXYtouch(uint16_t *x, uint16_t *y, uint8_t *isTouch) {
 800396c:	b580      	push	{r7, lr}
 800396e:	b08a      	sub	sp, #40	@ 0x28
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]

	const uint8_t pollingLevel = 4;
 8003978:	2304      	movs	r3, #4
 800397a:	77fb      	strb	r3, [r7, #31]
	uint32_t touchx, touchy, touch;

// get the average value (over "1<<pollingLevel" attempts of X, Y and Z axes readings)

	// reading Z
	touch = 0;
 800397c:	2300      	movs	r3, #0
 800397e:	623b      	str	r3, [r7, #32]
	for (k = 0; k < (1 << pollingLevel); k++)
 8003980:	2300      	movs	r3, #0
 8003982:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003986:	e00c      	b.n	80039a2 <Touch_GetXYtouch+0x36>
		touch += Touch_PollAxis(Z_AXIS);
 8003988:	20b0      	movs	r0, #176	@ 0xb0
 800398a:	f7ff ffb3 	bl	80038f4 <Touch_PollAxis>
 800398e:	4603      	mov	r3, r0
 8003990:	461a      	mov	r2, r3
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	4413      	add	r3, r2
 8003996:	623b      	str	r3, [r7, #32]
	for (k = 0; k < (1 << pollingLevel); k++)
 8003998:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800399c:	3301      	adds	r3, #1
 800399e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80039a2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80039a6:	7ffb      	ldrb	r3, [r7, #31]
 80039a8:	2101      	movs	r1, #1
 80039aa:	fa01 f303 	lsl.w	r3, r1, r3
 80039ae:	429a      	cmp	r2, r3
 80039b0:	dbea      	blt.n	8003988 <Touch_GetXYtouch+0x1c>
	touch >>= pollingLevel;  //get the average value
 80039b2:	7ffb      	ldrb	r3, [r7, #31]
 80039b4:	6a3a      	ldr	r2, [r7, #32]
 80039b6:	fa22 f303 	lsr.w	r3, r2, r3
 80039ba:	623b      	str	r3, [r7, #32]
	if (touch <= Z_THRESHOLD) {
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039c2:	d806      	bhi.n	80039d2 <Touch_GetXYtouch+0x66>
		*isTouch = 0;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	701a      	strb	r2, [r3, #0]
		HAL_NVIC_ClearPendingIRQ(TOUCH_INT_EXTI_IRQn);
 80039ca:	2028      	movs	r0, #40	@ 0x28
 80039cc:	f000 fb49 	bl	8004062 <HAL_NVIC_ClearPendingIRQ>
		return;	// no touch: return 0
 80039d0:	e0b2      	b.n	8003b38 <Touch_GetXYtouch+0x1cc>
	}

	// reading X
	touch = 0;
 80039d2:	2300      	movs	r3, #0
 80039d4:	623b      	str	r3, [r7, #32]
	for (k = 0; k < (1 << pollingLevel); k++)
 80039d6:	2300      	movs	r3, #0
 80039d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80039dc:	e00c      	b.n	80039f8 <Touch_GetXYtouch+0x8c>
		touch += Touch_PollAxis(X_AXIS);
 80039de:	20d0      	movs	r0, #208	@ 0xd0
 80039e0:	f7ff ff88 	bl	80038f4 <Touch_PollAxis>
 80039e4:	4603      	mov	r3, r0
 80039e6:	461a      	mov	r2, r3
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	4413      	add	r3, r2
 80039ec:	623b      	str	r3, [r7, #32]
	for (k = 0; k < (1 << pollingLevel); k++)
 80039ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039f2:	3301      	adds	r3, #1
 80039f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80039f8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80039fc:	7ffb      	ldrb	r3, [r7, #31]
 80039fe:	2101      	movs	r1, #1
 8003a00:	fa01 f303 	lsl.w	r3, r1, r3
 8003a04:	429a      	cmp	r2, r3
 8003a06:	dbea      	blt.n	80039de <Touch_GetXYtouch+0x72>
	touch >>= pollingLevel;  //get the average value
 8003a08:	7ffb      	ldrb	r3, [r7, #31]
 8003a0a:	6a3a      	ldr	r2, [r7, #32]
 8003a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a10:	623b      	str	r3, [r7, #32]
	if (touch <= X_THRESHOLD) {
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a18:	d806      	bhi.n	8003a28 <Touch_GetXYtouch+0xbc>
		*isTouch = 0;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	701a      	strb	r2, [r3, #0]
		HAL_NVIC_ClearPendingIRQ(TOUCH_INT_EXTI_IRQn);
 8003a20:	2028      	movs	r0, #40	@ 0x28
 8003a22:	f000 fb1e 	bl	8004062 <HAL_NVIC_ClearPendingIRQ>
		return;	// no touch: return 0
 8003a26:	e087      	b.n	8003b38 <Touch_GetXYtouch+0x1cc>
	}
	touchx = (AX * touch + BX);
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	ee07 3a90 	vmov	s15, r3
 8003a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a32:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8003b40 <Touch_GetXYtouch+0x1d4>
 8003a36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a3a:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8003b44 <Touch_GetXYtouch+0x1d8>
 8003a3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a46:	ee17 3a90 	vmov	r3, s15
 8003a4a:	61bb      	str	r3, [r7, #24]

	// reading Y - there is no a threshold for Y
	touch = 0;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	623b      	str	r3, [r7, #32]
	for (k = 0; k < (1 << pollingLevel); k++)
 8003a50:	2300      	movs	r3, #0
 8003a52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003a56:	e00c      	b.n	8003a72 <Touch_GetXYtouch+0x106>
		touch += Touch_PollAxis(Y_AXIS);
 8003a58:	2090      	movs	r0, #144	@ 0x90
 8003a5a:	f7ff ff4b 	bl	80038f4 <Touch_PollAxis>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	461a      	mov	r2, r3
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	4413      	add	r3, r2
 8003a66:	623b      	str	r3, [r7, #32]
	for (k = 0; k < (1 << pollingLevel); k++)
 8003a68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003a72:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003a76:	7ffb      	ldrb	r3, [r7, #31]
 8003a78:	2101      	movs	r1, #1
 8003a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	dbea      	blt.n	8003a58 <Touch_GetXYtouch+0xec>
	touch >>= pollingLevel; //get the average value
 8003a82:	7ffb      	ldrb	r3, [r7, #31]
 8003a84:	6a3a      	ldr	r2, [r7, #32]
 8003a86:	fa22 f303 	lsr.w	r3, r2, r3
 8003a8a:	623b      	str	r3, [r7, #32]

	touchy = (AY * touch + BY);
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	ee07 3a90 	vmov	s15, r3
 8003a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a96:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8003b48 <Touch_GetXYtouch+0x1dc>
 8003a9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a9e:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8003b4c <Touch_GetXYtouch+0x1e0>
 8003aa2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aaa:	ee17 3a90 	vmov	r3, s15
 8003aae:	617b      	str	r3, [r7, #20]

//having X and Y axis average values
// calculating coordinates as per screen orientation
	switch (current_orientation) {
 8003ab0:	4b27      	ldr	r3, [pc, #156]	@ (8003b50 <Touch_GetXYtouch+0x1e4>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	d83b      	bhi.n	8003b30 <Touch_GetXYtouch+0x1c4>
 8003ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ac0 <Touch_GetXYtouch+0x154>)
 8003aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abe:	bf00      	nop
 8003ac0:	08003ad1 	.word	0x08003ad1
 8003ac4:	08003ae3 	.word	0x08003ae3
 8003ac8:	08003afb 	.word	0x08003afb
 8003acc:	08003b19 	.word	0x08003b19
	case TOUCH0:
		*x = touchx;
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	801a      	strh	r2, [r3, #0]
		*y = touchy;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	801a      	strh	r2, [r3, #0]
		break;
 8003ae0:	e026      	b.n	8003b30 <Touch_GetXYtouch+0x1c4>
	case TOUCH90:
		*x = touchy;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	801a      	strh	r2, [r3, #0]
		*y = (TOUCH_0_WIDTH - touchx);
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	801a      	strh	r2, [r3, #0]
		break;
 8003af8:	e01a      	b.n	8003b30 <Touch_GetXYtouch+0x1c4>
	case TOUCH180:
		*x = (TOUCH_0_WIDTH - touchx);
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	801a      	strh	r2, [r3, #0]
		*y = (TOUCH_0_HEIGHT - touchy);
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	801a      	strh	r2, [r3, #0]
		break;
 8003b16:	e00b      	b.n	8003b30 <Touch_GetXYtouch+0x1c4>
	case TOUCH270:
		*x = (TOUCH_0_HEIGHT - touchy);
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	801a      	strh	r2, [r3, #0]
		*y = touchx;
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	801a      	strh	r2, [r3, #0]
		break;
 8003b2e:	bf00      	nop
	}

// set flag indicating there was a touch
	*isTouch = 1;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	701a      	strb	r2, [r3, #0]
	return;
 8003b36:	bf00      	nop
}
 8003b38:	3728      	adds	r7, #40	@ 0x28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	bc0090b4 	.word	0xbc0090b4
 8003b44:	437758e2 	.word	0x437758e2
 8003b48:	3c29eb20 	.word	0x3c29eb20
 8003b4c:	40eff2fa 	.word	0x40eff2fa
 8003b50:	20002984 	.word	0x20002984

08003b54 <Touch_In_XY_area>:
 * 			width,
 * 			height	display area to be polled for a touch
 * @return	1		if there is a touch inside area
 * 			0		if no touch or touch outside area defined
 ***********************************************************/
uint8_t Touch_In_XY_area(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height) {
 8003b54:	b590      	push	{r4, r7, lr}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	4604      	mov	r4, r0
 8003b5c:	4608      	mov	r0, r1
 8003b5e:	4611      	mov	r1, r2
 8003b60:	461a      	mov	r2, r3
 8003b62:	4623      	mov	r3, r4
 8003b64:	80fb      	strh	r3, [r7, #6]
 8003b66:	4603      	mov	r3, r0
 8003b68:	80bb      	strh	r3, [r7, #4]
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	807b      	strh	r3, [r7, #2]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	803b      	strh	r3, [r7, #0]
//sTouchData posXY;
	uint16_t x, y;
	uint8_t isTouch;
	Touch_GetXYtouch(&x, &y, &isTouch);
 8003b72:	f107 020b 	add.w	r2, r7, #11
 8003b76:	f107 010c 	add.w	r1, r7, #12
 8003b7a:	f107 030e 	add.w	r3, r7, #14
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff fef4 	bl	800396c <Touch_GetXYtouch>
	if (!isTouch)
 8003b84:	7afb      	ldrb	r3, [r7, #11]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <Touch_In_XY_area+0x3a>
		return 0;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	e018      	b.n	8003bc0 <Touch_In_XY_area+0x6c>
	if (x >= xpos)
 8003b8e:	89fb      	ldrh	r3, [r7, #14]
 8003b90:	88fa      	ldrh	r2, [r7, #6]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d813      	bhi.n	8003bbe <Touch_In_XY_area+0x6a>
		if (x < xpos + width)
 8003b96:	89fb      	ldrh	r3, [r7, #14]
 8003b98:	4619      	mov	r1, r3
 8003b9a:	88fa      	ldrh	r2, [r7, #6]
 8003b9c:	887b      	ldrh	r3, [r7, #2]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	4299      	cmp	r1, r3
 8003ba2:	da0c      	bge.n	8003bbe <Touch_In_XY_area+0x6a>
			if (y >= ypos)
 8003ba4:	89bb      	ldrh	r3, [r7, #12]
 8003ba6:	88ba      	ldrh	r2, [r7, #4]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d808      	bhi.n	8003bbe <Touch_In_XY_area+0x6a>
				if (y < ypos + height)
 8003bac:	89bb      	ldrh	r3, [r7, #12]
 8003bae:	4619      	mov	r1, r3
 8003bb0:	88ba      	ldrh	r2, [r7, #4]
 8003bb2:	883b      	ldrh	r3, [r7, #0]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	4299      	cmp	r1, r3
 8003bb8:	da01      	bge.n	8003bbe <Touch_In_XY_area+0x6a>
					return 1;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <Touch_In_XY_area+0x6c>
	return 0;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3714      	adds	r7, #20
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd90      	pop	{r4, r7, pc}

08003bc8 <Touch_GotATouch>:
 * 						(use "2" in main loop activating touchgfxSignalVSync()
 * @returns		1	if recorded a touch
 * 				0	if no touch recorded
 ***********************************************************/

uint8_t Touch_GotATouch(uint8_t reset) {
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	71fb      	strb	r3, [r7, #7]
	static uint32_t touchTime = 0;
	uint8_t result = Touch_PenDown;
 8003bd2:	4b10      	ldr	r3, [pc, #64]	@ (8003c14 <Touch_GotATouch+0x4c>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	73fb      	strb	r3, [r7, #15]

//	if (result)
//		result=Touch_PollTouch();

	if (reset == 2) {
 8003bd8:	79fb      	ldrb	r3, [r7, #7]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d10f      	bne.n	8003bfe <Touch_GotATouch+0x36>
		if ((HAL_GetTick() - touchTime) >= TOUCHGFX_TIMING)
 8003bde:	f000 f8af 	bl	8003d40 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	4b0c      	ldr	r3, [pc, #48]	@ (8003c18 <Touch_GotATouch+0x50>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b3b      	cmp	r3, #59	@ 0x3b
 8003bec:	d905      	bls.n	8003bfa <Touch_GotATouch+0x32>
			touchTime = HAL_GetTick();
 8003bee:	f000 f8a7 	bl	8003d40 <HAL_GetTick>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	4a08      	ldr	r2, [pc, #32]	@ (8003c18 <Touch_GotATouch+0x50>)
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	e001      	b.n	8003bfe <Touch_GotATouch+0x36>
		else
			result = 0;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	73fb      	strb	r3, [r7, #15]
	}
	if (reset == 1)
 8003bfe:	79fb      	ldrb	r3, [r7, #7]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d102      	bne.n	8003c0a <Touch_GotATouch+0x42>
		Touch_PenDown = 0;
 8003c04:	4b03      	ldr	r3, [pc, #12]	@ (8003c14 <Touch_GotATouch+0x4c>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	701a      	strb	r2, [r3, #0]
	return result;
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	2000a992 	.word	0x2000a992
 8003c18:	2000a994 	.word	0x2000a994

08003c1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003c1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003c54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003c20:	f7fe fd1c 	bl	800265c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c24:	480c      	ldr	r0, [pc, #48]	@ (8003c58 <LoopForever+0x6>)
  ldr r1, =_edata
 8003c26:	490d      	ldr	r1, [pc, #52]	@ (8003c5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c28:	4a0d      	ldr	r2, [pc, #52]	@ (8003c60 <LoopForever+0xe>)
  movs r3, #0
 8003c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c2c:	e002      	b.n	8003c34 <LoopCopyDataInit>

08003c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c32:	3304      	adds	r3, #4

08003c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c38:	d3f9      	bcc.n	8003c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003c64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003c3c:	4c0a      	ldr	r4, [pc, #40]	@ (8003c68 <LoopForever+0x16>)
  movs r3, #0
 8003c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c40:	e001      	b.n	8003c46 <LoopFillZerobss>

08003c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c44:	3204      	adds	r2, #4

08003c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c48:	d3fb      	bcc.n	8003c42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c4a:	f007 fa63 	bl	800b114 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003c4e:	f7fd fd0b 	bl	8001668 <main>

08003c52 <LoopForever>:

LoopForever:
    b LoopForever
 8003c52:	e7fe      	b.n	8003c52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003c54:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c5c:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8003c60:	08026f60 	.word	0x08026f60
  ldr r2, =_sbss
 8003c64:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8003c68:	2000aae8 	.word	0x2000aae8

08003c6c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c6c:	e7fe      	b.n	8003c6c <ADC1_IRQHandler>

08003c6e <HAL_Init>:
 *         Once done, time base tick starts incrementing: the tick variable counter is incremented
 *         each 1ms in the SysTick_Handler() interrupt handler.
 *
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b082      	sub	sp, #8
 8003c72:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

	/* Set Interrupt Group Priority */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c78:	2003      	movs	r0, #3
 8003c7a:	f000 f9a3 	bl	8003fc4 <HAL_NVIC_SetPriorityGrouping>

	/* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
	if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK) {
 8003c7e:	2000      	movs	r0, #0
 8003c80:	f000 f80e 	bl	8003ca0 <HAL_InitTick>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d002      	beq.n	8003c90 <HAL_Init+0x22>
		status = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	71fb      	strb	r3, [r7, #7]
 8003c8e:	e001      	b.n	8003c94 <HAL_Init+0x26>
	} else {
		/* Init the low level hardware */
		HAL_MspInit();
 8003c90:	f7fe f9c8 	bl	8002024 <HAL_MspInit>
	}

	/* Return function status */
	return status;
 8003c94:	79fb      	ldrb	r3, [r7, #7]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <HAL_InitTick>:
 *       The function is declared as __weak  to be overwritten  in case of other
 *       implementation  in user file.
 * @param TickPriority  Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	73fb      	strb	r3, [r7, #15]

	/* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
	if ((uint32_t) uwTickFreq != 0U) {
 8003cac:	4b17      	ldr	r3, [pc, #92]	@ (8003d0c <HAL_InitTick+0x6c>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d023      	beq.n	8003cfc <HAL_InitTick+0x5c>
		/*Configure the SysTick to have interrupt in 1ms time basis*/
		if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t) uwTickFreq)) == 0U) {
 8003cb4:	4b16      	ldr	r3, [pc, #88]	@ (8003d10 <HAL_InitTick+0x70>)
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	4b14      	ldr	r3, [pc, #80]	@ (8003d0c <HAL_InitTick+0x6c>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 f9bd 	bl	800404a <HAL_SYSTICK_Config>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10f      	bne.n	8003cf6 <HAL_InitTick+0x56>
			/* Configure the SysTick IRQ priority */
			if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b0f      	cmp	r3, #15
 8003cda:	d809      	bhi.n	8003cf0 <HAL_InitTick+0x50>
				HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cdc:	2200      	movs	r2, #0
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce4:	f000 f979 	bl	8003fda <HAL_NVIC_SetPriority>
				uwTickPrio = TickPriority;
 8003ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8003d14 <HAL_InitTick+0x74>)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	e007      	b.n	8003d00 <HAL_InitTick+0x60>
			} else {
				status = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	73fb      	strb	r3, [r7, #15]
 8003cf4:	e004      	b.n	8003d00 <HAL_InitTick+0x60>
			}
		} else {
			status = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	73fb      	strb	r3, [r7, #15]
 8003cfa:	e001      	b.n	8003d00 <HAL_InitTick+0x60>
		}
	} else {
		status = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	73fb      	strb	r3, [r7, #15]
	}

	/* Return function status */
	return status;
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	2000003c 	.word	0x2000003c
 8003d10:	20000028 	.word	0x20000028
 8003d14:	20000038 	.word	0x20000038

08003d18 <HAL_IncTick>:
 *       in SysTick ISR.
 * @note This function is declared as __weak to be overwritten in case of other
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
	uwTick += (uint32_t) uwTickFreq;
 8003d1c:	4b06      	ldr	r3, [pc, #24]	@ (8003d38 <HAL_IncTick+0x20>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	461a      	mov	r2, r3
 8003d22:	4b06      	ldr	r3, [pc, #24]	@ (8003d3c <HAL_IncTick+0x24>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4413      	add	r3, r2
 8003d28:	4a04      	ldr	r2, [pc, #16]	@ (8003d3c <HAL_IncTick+0x24>)
 8003d2a:	6013      	str	r3, [r2, #0]
}
 8003d2c:	bf00      	nop
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	2000003c 	.word	0x2000003c
 8003d3c:	2000a998 	.word	0x2000a998

08003d40 <HAL_GetTick>:
 * @brief Provide a tick value in millisecond.
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
	return uwTick;
 8003d44:	4b03      	ldr	r3, [pc, #12]	@ (8003d54 <HAL_GetTick+0x14>)
 8003d46:	681b      	ldr	r3, [r3, #0]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	2000a998 	.word	0x2000a998

08003d58 <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay  specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 8003d60:	f7ff ffee 	bl	8003d40 <HAL_GetTick>
 8003d64:	60b8      	str	r0, [r7, #8]
	uint32_t wait = Delay;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	60fb      	str	r3, [r7, #12]

	/* Add a period to guaranty minimum wait */
	if (wait < HAL_MAX_DELAY) {
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d70:	d005      	beq.n	8003d7e <HAL_Delay+0x26>
		wait += (uint32_t) uwTickFreq;
 8003d72:	4b0a      	ldr	r3, [pc, #40]	@ (8003d9c <HAL_Delay+0x44>)
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 8003d7e:	bf00      	nop
 8003d80:	f7ff ffde 	bl	8003d40 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d8f7      	bhi.n	8003d80 <HAL_Delay+0x28>
	}
}
 8003d90:	bf00      	nop
 8003d92:	bf00      	nop
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	2000003c 	.word	0x2000003c

08003da0 <__NVIC_SetPriorityGrouping>:
	 Only values from 0..7 are used.
	 In case of a conflict between priority grouping and available
	 priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
	 \param [in]      PriorityGroup  Priority grouping field.
	 */
	__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
		uint32_t reg_value;
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	60fb      	str	r3, [r7, #12]

		reg_value = SCB->AIRCR; /* read old register configuration    */
 8003db0:	4b0c      	ldr	r3, [pc, #48]	@ (8003de4 <__NVIC_SetPriorityGrouping+0x44>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	60bb      	str	r3, [r7, #8]
		reg_value &= ~((uint32_t) (SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	60bb      	str	r3, [r7, #8]
		reg_value = (reg_value | ((uint32_t) 0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
				| (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)); /* Insert write key and priority group */
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	021a      	lsls	r2, r3, #8
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4313      	orrs	r3, r2
		reg_value = (reg_value | ((uint32_t) 0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
 8003dc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dd0:	60bb      	str	r3, [r7, #8]
		SCB->AIRCR = reg_value;
 8003dd2:	4a04      	ldr	r2, [pc, #16]	@ (8003de4 <__NVIC_SetPriorityGrouping+0x44>)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	60d3      	str	r3, [r2, #12]
	}
 8003dd8:	bf00      	nop
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	e000ed00 	.word	0xe000ed00

08003de8 <__NVIC_GetPriorityGrouping>:
	/**
	 \brief   Get Priority Grouping
	 \details Reads the priority grouping field from the NVIC Interrupt Controller.
	 \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
	 */
	__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void) {
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
		return ((uint32_t) ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dec:	4b04      	ldr	r3, [pc, #16]	@ (8003e00 <__NVIC_GetPriorityGrouping+0x18>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	0a1b      	lsrs	r3, r3, #8
 8003df2:	f003 0307 	and.w	r3, r3, #7
	}
 8003df6:	4618      	mov	r0, r3
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	e000ed00 	.word	0xe000ed00

08003e04 <__NVIC_EnableIRQ>:
	 \brief   Enable Interrupt
	 \details Enables a device specific interrupt in the NVIC interrupt controller.
	 \param [in]      IRQn  Device specific interrupt number.
	 \note    IRQn must not be negative.
	 */
	__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn) {
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 8003e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	db0b      	blt.n	8003e2e <__NVIC_EnableIRQ+0x2a>
			__COMPILER_BARRIER();
			NVIC->ISER[(((uint32_t) IRQn) >> 5UL)] = (uint32_t) (1UL << (((uint32_t) IRQn) & 0x1FUL));
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	f003 021f 	and.w	r2, r3, #31
 8003e1c:	4907      	ldr	r1, [pc, #28]	@ (8003e3c <__NVIC_EnableIRQ+0x38>)
 8003e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	2001      	movs	r0, #1
 8003e26:	fa00 f202 	lsl.w	r2, r0, r2
 8003e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			__COMPILER_BARRIER();
		}
	}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	e000e100 	.word	0xe000e100

08003e40 <__NVIC_DisableIRQ>:
	 \brief   Disable Interrupt
	 \details Disables a device specific interrupt in the NVIC interrupt controller.
	 \param [in]      IRQn  Device specific interrupt number.
	 \note    IRQn must not be negative.
	 */
	__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn) {
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	4603      	mov	r3, r0
 8003e48:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 8003e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	db12      	blt.n	8003e78 <__NVIC_DisableIRQ+0x38>
			NVIC->ICER[(((uint32_t) IRQn) >> 5UL)] = (uint32_t) (1UL << (((uint32_t) IRQn) & 0x1FUL));
 8003e52:	79fb      	ldrb	r3, [r7, #7]
 8003e54:	f003 021f 	and.w	r2, r3, #31
 8003e58:	490a      	ldr	r1, [pc, #40]	@ (8003e84 <__NVIC_DisableIRQ+0x44>)
 8003e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	2001      	movs	r0, #1
 8003e62:	fa00 f202 	lsl.w	r2, r0, r2
 8003e66:	3320      	adds	r3, #32
 8003e68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	__ASM volatile ("dsb 0xF":::"memory");
 8003e6c:	f3bf 8f4f 	dsb	sy
}
 8003e70:	bf00      	nop
	__ASM volatile ("isb 0xF":::"memory");
 8003e72:	f3bf 8f6f 	isb	sy
}
 8003e76:	bf00      	nop
			__DSB();
			__ISB();
		}
	}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	e000e100 	.word	0xe000e100

08003e88 <__NVIC_ClearPendingIRQ>:
	 \brief   Clear Pending Interrupt
	 \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
	 \param [in]      IRQn  Device specific interrupt number.
	 \note    IRQn must not be negative.
	 */
	__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn) {
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	4603      	mov	r3, r0
 8003e90:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 8003e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	db0c      	blt.n	8003eb4 <__NVIC_ClearPendingIRQ+0x2c>
			NVIC->ICPR[(((uint32_t) IRQn) >> 5UL)] = (uint32_t) (1UL << (((uint32_t) IRQn) & 0x1FUL));
 8003e9a:	79fb      	ldrb	r3, [r7, #7]
 8003e9c:	f003 021f 	and.w	r2, r3, #31
 8003ea0:	4907      	ldr	r1, [pc, #28]	@ (8003ec0 <__NVIC_ClearPendingIRQ+0x38>)
 8003ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea6:	095b      	lsrs	r3, r3, #5
 8003ea8:	2001      	movs	r0, #1
 8003eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8003eae:	3360      	adds	r3, #96	@ 0x60
 8003eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
	}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	e000e100 	.word	0xe000e100

08003ec4 <__NVIC_SetPriority>:
	 or negative to specify a processor exception.
	 \param [in]      IRQn  Interrupt number.
	 \param [in]  priority  Priority to set.
	 \note    The priority cannot be set for every processor exception.
	 */
	__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority) {
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	4603      	mov	r3, r0
 8003ecc:	6039      	str	r1, [r7, #0]
 8003ece:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 8003ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	db0a      	blt.n	8003eee <__NVIC_SetPriority+0x2a>
			NVIC->IP[((uint32_t) IRQn)] = (uint8_t) ((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	490c      	ldr	r1, [pc, #48]	@ (8003f10 <__NVIC_SetPriority+0x4c>)
 8003ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee2:	0112      	lsls	r2, r2, #4
 8003ee4:	b2d2      	uxtb	r2, r2
 8003ee6:	440b      	add	r3, r1
 8003ee8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
		} else {
			SCB->SHP[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority << (8U - __NVIC_PRIO_BITS))
					& (uint32_t) 0xFFUL);
		}
	}
 8003eec:	e00a      	b.n	8003f04 <__NVIC_SetPriority+0x40>
			SCB->SHP[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority << (8U - __NVIC_PRIO_BITS))
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	4908      	ldr	r1, [pc, #32]	@ (8003f14 <__NVIC_SetPriority+0x50>)
 8003ef4:	79fb      	ldrb	r3, [r7, #7]
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	3b04      	subs	r3, #4
 8003efc:	0112      	lsls	r2, r2, #4
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	440b      	add	r3, r1
 8003f02:	761a      	strb	r2, [r3, #24]
	}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	e000e100 	.word	0xe000e100
 8003f14:	e000ed00 	.word	0xe000ed00

08003f18 <NVIC_EncodePriority>:
	 \param [in]     PriorityGroup  Used priority group.
	 \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
	 \param [in]       SubPriority  Subpriority value (starting from 0).
	 \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
	 */
	__STATIC_INLINE uint32_t NVIC_EncodePriority(uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority) {
 8003f18:	b480      	push	{r7}
 8003f1a:	b089      	sub	sp, #36	@ 0x24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f003 0307 	and.w	r3, r3, #7
 8003f2a:	61fb      	str	r3, [r7, #28]
		uint32_t PreemptPriorityBits;
		uint32_t SubPriorityBits;

		PreemptPriorityBits =
				((7UL - PriorityGroupTmp) > (uint32_t) (__NVIC_PRIO_BITS)) ?
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	f1c3 0307 	rsb	r3, r3, #7
		PreemptPriorityBits =
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	bf28      	it	cs
 8003f36:	2304      	movcs	r3, #4
 8003f38:	61bb      	str	r3, [r7, #24]
						(uint32_t) (__NVIC_PRIO_BITS) : (uint32_t) (7UL - PriorityGroupTmp);
		SubPriorityBits =
				((PriorityGroupTmp + (uint32_t) (__NVIC_PRIO_BITS)) < (uint32_t) 7UL) ?
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	3304      	adds	r3, #4
						(uint32_t) 0UL : (uint32_t) ((PriorityGroupTmp - 7UL) + (uint32_t) (__NVIC_PRIO_BITS));
 8003f3e:	2b06      	cmp	r3, #6
 8003f40:	d902      	bls.n	8003f48 <NVIC_EncodePriority+0x30>
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	3b03      	subs	r3, #3
 8003f46:	e000      	b.n	8003f4a <NVIC_EncodePriority+0x32>
 8003f48:	2300      	movs	r3, #0
		SubPriorityBits =
 8003f4a:	617b      	str	r3, [r7, #20]

		return (((PreemptPriority & (uint32_t) ((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits)
 8003f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	43da      	mvns	r2, r3
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	401a      	ands	r2, r3
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	409a      	lsls	r2, r3
				| ((SubPriority & (uint32_t) ((1UL << (SubPriorityBits)) - 1UL))));
 8003f60:	f04f 31ff 	mov.w	r1, #4294967295
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	fa01 f303 	lsl.w	r3, r1, r3
 8003f6a:	43d9      	mvns	r1, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	400b      	ands	r3, r1
 8003f70:	4313      	orrs	r3, r2
	}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3724      	adds	r7, #36	@ 0x24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
	...

08003f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f90:	d301      	bcc.n	8003f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f92:	2301      	movs	r3, #1
 8003f94:	e00f      	b.n	8003fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f96:	4a0a      	ldr	r2, [pc, #40]	@ (8003fc0 <SysTick_Config+0x40>)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f9e:	210f      	movs	r1, #15
 8003fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa4:	f7ff ff8e 	bl	8003ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fa8:	4b05      	ldr	r3, [pc, #20]	@ (8003fc0 <SysTick_Config+0x40>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fae:	4b04      	ldr	r3, [pc, #16]	@ (8003fc0 <SysTick_Config+0x40>)
 8003fb0:	2207      	movs	r2, #7
 8003fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	e000e010 	.word	0xe000e010

08003fc4 <HAL_NVIC_SetPriorityGrouping>:
 *                                    0 bit  for subpriority
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
 *         The pending IRQ priority will be managed only by the subpriority.
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7ff fee7 	bl	8003da0 <__NVIC_SetPriorityGrouping>
}
 8003fd2:	bf00      	nop
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_NVIC_SetPriority>:
 * @param  SubPriority: the subpriority level for the IRQ channel.
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority) {
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b086      	sub	sp, #24
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	607a      	str	r2, [r7, #4]
 8003fe6:	73fb      	strb	r3, [r7, #15]
	uint32_t prioritygroup = 0x00;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	617b      	str	r3, [r7, #20]

	/* Check the parameters */
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

	prioritygroup = NVIC_GetPriorityGrouping();
 8003fec:	f7ff fefc 	bl	8003de8 <__NVIC_GetPriorityGrouping>
 8003ff0:	6178      	str	r0, [r7, #20]

	NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	68b9      	ldr	r1, [r7, #8]
 8003ff6:	6978      	ldr	r0, [r7, #20]
 8003ff8:	f7ff ff8e 	bl	8003f18 <NVIC_EncodePriority>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004002:	4611      	mov	r1, r2
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff ff5d 	bl	8003ec4 <__NVIC_SetPriority>
}
 800400a:	bf00      	nop
 800400c:	3718      	adds	r7, #24
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_NVIC_EnableIRQ>:
 * @param  IRQn External interrupt number.
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn) {
 8004012:	b580      	push	{r7, lr}
 8004014:	b082      	sub	sp, #8
 8004016:	af00      	add	r7, sp, #0
 8004018:	4603      	mov	r3, r0
 800401a:	71fb      	strb	r3, [r7, #7]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Enable interrupt */
	NVIC_EnableIRQ(IRQn);
 800401c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff feef 	bl	8003e04 <__NVIC_EnableIRQ>
}
 8004026:	bf00      	nop
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_NVIC_DisableIRQ>:
 * @param  IRQn External interrupt number.
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
 * @retval None
 */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn) {
 800402e:	b580      	push	{r7, lr}
 8004030:	b082      	sub	sp, #8
 8004032:	af00      	add	r7, sp, #0
 8004034:	4603      	mov	r3, r0
 8004036:	71fb      	strb	r3, [r7, #7]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Disable interrupt */
	NVIC_DisableIRQ(IRQn);
 8004038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff feff 	bl	8003e40 <__NVIC_DisableIRQ>
}
 8004042:	bf00      	nop
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_SYSTICK_Config>:
 *         Counter is in free running mode to generate periodic interrupts.
 * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb) {
 800404a:	b580      	push	{r7, lr}
 800404c:	b082      	sub	sp, #8
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
	return SysTick_Config(TicksNumb);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7ff ff94 	bl	8003f80 <SysTick_Config>
 8004058:	4603      	mov	r3, r0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_NVIC_ClearPendingIRQ>:
 * @param  IRQn External interrupt number.
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
 * @retval None
 */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn) {
 8004062:	b580      	push	{r7, lr}
 8004064:	b082      	sub	sp, #8
 8004066:	af00      	add	r7, sp, #0
 8004068:	4603      	mov	r3, r0
 800406a:	71fb      	strb	r3, [r7, #7]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Clear pending interrupt */
	NVIC_ClearPendingIRQ(IRQn);
 800406c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff ff09 	bl	8003e88 <__NVIC_ClearPendingIRQ>
}
 8004076:	bf00      	nop
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
	...

08004080 <HAL_DMA_Init>:
 *         parameters in the DMA_InitTypeDef and initialize the associated handle.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *              the configuration information for the specified DMA Channel.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma) {
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
	uint32_t tmp;

	/* Check the DMA handle allocation */
	if (hdma == NULL) {
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_DMA_Init+0x12>
		return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e098      	b.n	80041c4 <HAL_DMA_Init+0x144>
	assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

	assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

	/* Compute the channel index */
	if ((uint32_t) (hdma->Instance) < (uint32_t) (DMA2_Channel1)) {
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	461a      	mov	r2, r3
 8004098:	4b4d      	ldr	r3, [pc, #308]	@ (80041d0 <HAL_DMA_Init+0x150>)
 800409a:	429a      	cmp	r2, r3
 800409c:	d80f      	bhi.n	80040be <HAL_DMA_Init+0x3e>
		/* DMA1 */
		hdma->ChannelIndex = (((uint32_t) hdma->Instance - (uint32_t) DMA1_Channel1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	461a      	mov	r2, r3
 80040a4:	4b4b      	ldr	r3, [pc, #300]	@ (80041d4 <HAL_DMA_Init+0x154>)
 80040a6:	4413      	add	r3, r2
				/ ((uint32_t) DMA1_Channel2 - (uint32_t) DMA1_Channel1)) << 2U;
 80040a8:	4a4b      	ldr	r2, [pc, #300]	@ (80041d8 <HAL_DMA_Init+0x158>)
 80040aa:	fba2 2303 	umull	r2, r3, r2, r3
 80040ae:	091b      	lsrs	r3, r3, #4
 80040b0:	009a      	lsls	r2, r3, #2
		hdma->ChannelIndex = (((uint32_t) hdma->Instance - (uint32_t) DMA1_Channel1)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	645a      	str	r2, [r3, #68]	@ 0x44
		hdma->DmaBaseAddress = DMA1;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a48      	ldr	r2, [pc, #288]	@ (80041dc <HAL_DMA_Init+0x15c>)
 80040ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80040bc:	e00e      	b.n	80040dc <HAL_DMA_Init+0x5c>
	} else {
		/* DMA2 */
		hdma->ChannelIndex = (((uint32_t) hdma->Instance - (uint32_t) DMA2_Channel1)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	4b46      	ldr	r3, [pc, #280]	@ (80041e0 <HAL_DMA_Init+0x160>)
 80040c6:	4413      	add	r3, r2
				/ ((uint32_t) DMA2_Channel2 - (uint32_t) DMA2_Channel1)) << 2U;
 80040c8:	4a43      	ldr	r2, [pc, #268]	@ (80041d8 <HAL_DMA_Init+0x158>)
 80040ca:	fba2 2303 	umull	r2, r3, r2, r3
 80040ce:	091b      	lsrs	r3, r3, #4
 80040d0:	009a      	lsls	r2, r3, #2
		hdma->ChannelIndex = (((uint32_t) hdma->Instance - (uint32_t) DMA2_Channel1)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	645a      	str	r2, [r3, #68]	@ 0x44
		hdma->DmaBaseAddress = DMA2;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a42      	ldr	r2, [pc, #264]	@ (80041e4 <HAL_DMA_Init+0x164>)
 80040da:	641a      	str	r2, [r3, #64]	@ 0x40
	}

	/* Change DMA peripheral state */
	hdma->State = HAL_DMA_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

	/* Get the CR register value */
	tmp = hdma->Instance->CCR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	60fb      	str	r3, [r7, #12]

	/* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
	tmp &= ((uint32_t) ~(DMA_CCR_PL | DMA_CCR_MSIZE | DMA_CCR_PSIZE |
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80040f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040f6:	60fb      	str	r3, [r7, #12]
	DMA_CCR_MINC | DMA_CCR_PINC | DMA_CCR_CIRC |
	DMA_CCR_DIR | DMA_CCR_MEM2MEM));

	/* Prepare the DMA Channel configuration */
	tmp |= hdma->Init.Direction | hdma->Init.PeriphInc | hdma->Init.MemInc | hdma->Init.PeriphDataAlignment
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	431a      	orrs	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	431a      	orrs	r2, r3
			| hdma->Init.MemDataAlignment | hdma->Init.Mode | hdma->Init.Priority;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	4313      	orrs	r3, r2
	tmp |= hdma->Init.Direction | hdma->Init.PeriphInc | hdma->Init.MemInc | hdma->Init.PeriphDataAlignment
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]

	/* Write to DMA Channel CR register */
	hdma->Instance->CCR = tmp;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

	/* Set request selection */
	if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY) {
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004136:	d039      	beq.n	80041ac <HAL_DMA_Init+0x12c>
		/* Write to DMA channel selection register */
		if (DMA1 == hdma->DmaBaseAddress) {
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413c:	4a27      	ldr	r2, [pc, #156]	@ (80041dc <HAL_DMA_Init+0x15c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d11a      	bne.n	8004178 <HAL_DMA_Init+0xf8>
			/* Reset request selection for DMA1 Channelx */
			DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004142:	4b29      	ldr	r3, [pc, #164]	@ (80041e8 <HAL_DMA_Init+0x168>)
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414a:	f003 031c 	and.w	r3, r3, #28
 800414e:	210f      	movs	r1, #15
 8004150:	fa01 f303 	lsl.w	r3, r1, r3
 8004154:	43db      	mvns	r3, r3
 8004156:	4924      	ldr	r1, [pc, #144]	@ (80041e8 <HAL_DMA_Init+0x168>)
 8004158:	4013      	ands	r3, r2
 800415a:	600b      	str	r3, [r1, #0]

			/* Configure request selection for DMA1 Channelx */
			DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800415c:	4b22      	ldr	r3, [pc, #136]	@ (80041e8 <HAL_DMA_Init+0x168>)
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6859      	ldr	r1, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004168:	f003 031c 	and.w	r3, r3, #28
 800416c:	fa01 f303 	lsl.w	r3, r1, r3
 8004170:	491d      	ldr	r1, [pc, #116]	@ (80041e8 <HAL_DMA_Init+0x168>)
 8004172:	4313      	orrs	r3, r2
 8004174:	600b      	str	r3, [r1, #0]
 8004176:	e019      	b.n	80041ac <HAL_DMA_Init+0x12c>
		} else /* DMA2 */
		{
			/* Reset request selection for DMA2 Channelx */
			DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004178:	4b1c      	ldr	r3, [pc, #112]	@ (80041ec <HAL_DMA_Init+0x16c>)
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004180:	f003 031c 	and.w	r3, r3, #28
 8004184:	210f      	movs	r1, #15
 8004186:	fa01 f303 	lsl.w	r3, r1, r3
 800418a:	43db      	mvns	r3, r3
 800418c:	4917      	ldr	r1, [pc, #92]	@ (80041ec <HAL_DMA_Init+0x16c>)
 800418e:	4013      	ands	r3, r2
 8004190:	600b      	str	r3, [r1, #0]

			/* Configure request selection for DMA2 Channelx */
			DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004192:	4b16      	ldr	r3, [pc, #88]	@ (80041ec <HAL_DMA_Init+0x16c>)
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6859      	ldr	r1, [r3, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419e:	f003 031c 	and.w	r3, r3, #28
 80041a2:	fa01 f303 	lsl.w	r3, r1, r3
 80041a6:	4911      	ldr	r1, [pc, #68]	@ (80041ec <HAL_DMA_Init+0x16c>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
	/* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
	/* STM32L496xx || STM32L4A6xx                                              */

	/* Initialise the error code */
	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	63da      	str	r2, [r3, #60]	@ 0x3c

	/* Initialize the DMA state*/
	hdma->State = HAL_DMA_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

	/* Allocate lock resource and initialize it */
	hdma->Lock = HAL_UNLOCKED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	40020407 	.word	0x40020407
 80041d4:	bffdfff8 	.word	0xbffdfff8
 80041d8:	cccccccd 	.word	0xcccccccd
 80041dc:	40020000 	.word	0x40020000
 80041e0:	bffdfbf8 	.word	0xbffdfbf8
 80041e4:	40020400 	.word	0x40020400
 80041e8:	400200a8 	.word	0x400200a8
 80041ec:	400204a8 	.word	0x400204a8

080041f0 <HAL_DMA_Start_IT>:
 * @param  DstAddress The destination memory Buffer address
 * @param  DataLength The length of data to be transferred from source to destination
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
		uint32_t DataLength) {
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
 80041fc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80041fe:	2300      	movs	r3, #0
 8004200:	75fb      	strb	r3, [r7, #23]

	/* Check the parameters */
	assert_param(IS_DMA_BUFFER_SIZE(DataLength));

	/* Process locked */
	__HAL_LOCK(hdma);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004208:	2b01      	cmp	r3, #1
 800420a:	d101      	bne.n	8004210 <HAL_DMA_Start_IT+0x20>
 800420c:	2302      	movs	r3, #2
 800420e:	e04b      	b.n	80042a8 <HAL_DMA_Start_IT+0xb8>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (HAL_DMA_STATE_READY == hdma->State) {
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b01      	cmp	r3, #1
 8004222:	d13a      	bne.n	800429a <HAL_DMA_Start_IT+0xaa>
		/* Change DMA peripheral state */
		hdma->State = HAL_DMA_STATE_BUSY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	63da      	str	r2, [r3, #60]	@ 0x3c

		/* Disable the peripheral */
		__HAL_DMA_DISABLE(hdma);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0201 	bic.w	r2, r2, #1
 8004240:	601a      	str	r2, [r3, #0]

		/* Configure the source, destination address and the data length & clear flags*/
		DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	68b9      	ldr	r1, [r7, #8]
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 f95f 	bl	800450c <DMA_SetConfig>

		/* Enable the transfer complete interrupt */
		/* Enable the transfer Error interrupt */
		if (NULL != hdma->XferHalfCpltCallback) {
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004252:	2b00      	cmp	r3, #0
 8004254:	d008      	beq.n	8004268 <HAL_DMA_Start_IT+0x78>
			/* Enable the Half transfer complete interrupt as well */
			__HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f042 020e 	orr.w	r2, r2, #14
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	e00f      	b.n	8004288 <HAL_DMA_Start_IT+0x98>
		} else {
			__HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0204 	bic.w	r2, r2, #4
 8004276:	601a      	str	r2, [r3, #0]
			__HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 020a 	orr.w	r2, r2, #10
 8004286:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

		/* Enable the Peripheral */
		__HAL_DMA_ENABLE(hdma);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 0201 	orr.w	r2, r2, #1
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	e005      	b.n	80042a6 <HAL_DMA_Start_IT+0xb6>
	} else {
		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

		/* Remain BUSY */
		status = HAL_BUSY;
 80042a2:	2302      	movs	r3, #2
 80042a4:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 80042a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3718      	adds	r7, #24
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_DMA_Abort>:
 * @brief  Abort the DMA Transfer.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA Channel.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma) {
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 80042b8:	2300      	movs	r3, #0
 80042ba:	73fb      	strb	r3, [r7, #15]

	/* Check the DMA peripheral state */
	if (hdma->State != HAL_DMA_STATE_BUSY) {
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d008      	beq.n	80042da <HAL_DMA_Abort+0x2a>
		hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2204      	movs	r2, #4
 80042cc:	63da      	str	r2, [r3, #60]	@ 0x3c

		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

		return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e022      	b.n	8004320 <HAL_DMA_Abort+0x70>
	} else {
		/* Disable DMA IT */
		__HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 020e 	bic.w	r2, r2, #14
 80042e8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

		/* Disable the channel */
		__HAL_DMA_DISABLE(hdma);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0201 	bic.w	r2, r2, #1
 80042f8:	601a      	str	r2, [r3, #0]

		/* Clear all flags */
		hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fe:	f003 021c 	and.w	r2, r3, #28
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004306:	2101      	movs	r1, #1
 8004308:	fa01 f202 	lsl.w	r2, r1, r2
 800430c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

		/* Change the DMA state */
		hdma->State = HAL_DMA_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

		return status;
 800431e:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 8004320:	4618      	mov	r0, r3
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_DMA_Abort_IT>:
 * @brief  Aborts the DMA Transfer in Interrupt mode.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *                 the configuration information for the specified DMA Channel.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma) {
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	73fb      	strb	r3, [r7, #15]

	if (HAL_DMA_STATE_BUSY != hdma->State) {
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d005      	beq.n	8004350 <HAL_DMA_Abort_IT+0x24>
		/* no transfer ongoing */
		hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2204      	movs	r2, #4
 8004348:	63da      	str	r2, [r3, #60]	@ 0x3c

		status = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	73fb      	strb	r3, [r7, #15]
 800434e:	e029      	b.n	80043a4 <HAL_DMA_Abort_IT+0x78>
	} else {
		/* Disable DMA IT */
		__HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 020e 	bic.w	r2, r2, #14
 800435e:	601a      	str	r2, [r3, #0]

		/* Disable the channel */
		__HAL_DMA_DISABLE(hdma);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0201 	bic.w	r2, r2, #1
 800436e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
		/* Clear all flags */
		hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004374:	f003 021c 	and.w	r2, r3, #28
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437c:	2101      	movs	r1, #1
 800437e:	fa01 f202 	lsl.w	r2, r1, r2
 8004382:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

		/* Change the DMA state */
		hdma->State = HAL_DMA_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

		/* Call User Abort callback */
		if (hdma->XferAbortCallback != NULL) {
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <HAL_DMA_Abort_IT+0x78>
			hdma->XferAbortCallback(hdma);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	4798      	blx	r3
		}
	}
	return status;
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <HAL_DMA_IRQHandler>:
 * @brief  Handle DMA interrupt request.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA Channel.
 * @retval None
 */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma) {
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b084      	sub	sp, #16
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	60fb      	str	r3, [r7, #12]
	uint32_t source_it = hdma->Instance->CCR;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	60bb      	str	r3, [r7, #8]

	/* Half Transfer Complete Interrupt management ******************************/
	if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U)) {
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ca:	f003 031c 	and.w	r3, r3, #28
 80043ce:	2204      	movs	r2, #4
 80043d0:	409a      	lsls	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	4013      	ands	r3, r2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d026      	beq.n	8004428 <HAL_DMA_IRQHandler+0x7a>
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d021      	beq.n	8004428 <HAL_DMA_IRQHandler+0x7a>
		/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
		if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U) {
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0320 	and.w	r3, r3, #32
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d107      	bne.n	8004402 <HAL_DMA_IRQHandler+0x54>
			/* Disable the half transfer interrupt */
			__HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0204 	bic.w	r2, r2, #4
 8004400:	601a      	str	r2, [r3, #0]
		}
		/* Clear the half transfer complete flag */
		hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004406:	f003 021c 	and.w	r2, r3, #28
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440e:	2104      	movs	r1, #4
 8004410:	fa01 f202 	lsl.w	r2, r1, r2
 8004414:	605a      	str	r2, [r3, #4]

		/* DMA peripheral state is not updated in Half Transfer */
		/* but in Transfer Complete case */

		if (hdma->XferHalfCpltCallback != NULL) {
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441a:	2b00      	cmp	r3, #0
 800441c:	d071      	beq.n	8004502 <HAL_DMA_IRQHandler+0x154>
			/* Half transfer callback */
			hdma->XferHalfCpltCallback(hdma);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	4798      	blx	r3
		if (hdma->XferHalfCpltCallback != NULL) {
 8004426:	e06c      	b.n	8004502 <HAL_DMA_IRQHandler+0x154>
		}
	}

	/* Transfer Complete Interrupt management ***********************************/
	else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U)) {
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800442c:	f003 031c 	and.w	r3, r3, #28
 8004430:	2202      	movs	r2, #2
 8004432:	409a      	lsls	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4013      	ands	r3, r2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d02e      	beq.n	800449a <HAL_DMA_IRQHandler+0xec>
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d029      	beq.n	800449a <HAL_DMA_IRQHandler+0xec>
		if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U) {
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0320 	and.w	r3, r3, #32
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10b      	bne.n	800446c <HAL_DMA_IRQHandler+0xbe>
			/* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
			/* Disable the transfer complete and error interrupt */
			/* if the DMA mode is not CIRCULAR  */
			__HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f022 020a 	bic.w	r2, r2, #10
 8004462:	601a      	str	r2, [r3, #0]

			/* Change the DMA state */
			hdma->State = HAL_DMA_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		}
		/* Clear the transfer complete flag */
		hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004470:	f003 021c 	and.w	r2, r3, #28
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004478:	2102      	movs	r1, #2
 800447a:	fa01 f202 	lsl.w	r2, r1, r2
 800447e:	605a      	str	r2, [r3, #4]

		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

		if (hdma->XferCpltCallback != NULL) {
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448c:	2b00      	cmp	r3, #0
 800448e:	d038      	beq.n	8004502 <HAL_DMA_IRQHandler+0x154>
			/* Transfer complete callback */
			hdma->XferCpltCallback(hdma);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	4798      	blx	r3
		if (hdma->XferCpltCallback != NULL) {
 8004498:	e033      	b.n	8004502 <HAL_DMA_IRQHandler+0x154>
		}
	}

	/* Transfer Error Interrupt management **************************************/
	else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U)) {
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449e:	f003 031c 	and.w	r3, r3, #28
 80044a2:	2208      	movs	r2, #8
 80044a4:	409a      	lsls	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	4013      	ands	r3, r2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d02a      	beq.n	8004504 <HAL_DMA_IRQHandler+0x156>
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	f003 0308 	and.w	r3, r3, #8
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d025      	beq.n	8004504 <HAL_DMA_IRQHandler+0x156>
		/* When a DMA transfer error occurs */
		/* A hardware clear of its EN bits is performed */
		/* Disable ALL DMA IT */
		__HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 020e 	bic.w	r2, r2, #14
 80044c6:	601a      	str	r2, [r3, #0]

		/* Clear all flags */
		hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044cc:	f003 021c 	and.w	r2, r3, #28
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d4:	2101      	movs	r1, #1
 80044d6:	fa01 f202 	lsl.w	r2, r1, r2
 80044da:	605a      	str	r2, [r3, #4]

		/* Update error code */
		hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	63da      	str	r2, [r3, #60]	@ 0x3c

		/* Change the DMA state */
		hdma->State = HAL_DMA_STATE_READY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

		if (hdma->XferErrorCallback != NULL) {
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d004      	beq.n	8004504 <HAL_DMA_IRQHandler+0x156>
			/* Transfer error callback */
			hdma->XferErrorCallback(hdma);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	4798      	blx	r3
		}
	} else {
		/* Nothing To Do */
	}
	return;
 8004502:	bf00      	nop
 8004504:	bf00      	nop
}
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <DMA_SetConfig>:
 * @param  SrcAddress The source memory Buffer address
 * @param  DstAddress The destination memory Buffer address
 * @param  DataLength The length of data to be transferred from source to destination
 * @retval HAL status
 */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength) {
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
 8004518:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

	/* Clear all flags */
	hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800451e:	f003 021c 	and.w	r2, r3, #28
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004526:	2101      	movs	r1, #1
 8004528:	fa01 f202 	lsl.w	r2, r1, r2
 800452c:	605a      	str	r2, [r3, #4]

	/* Configure DMA Channel data length */
	hdma->Instance->CNDTR = DataLength;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	605a      	str	r2, [r3, #4]

	/* Memory to Peripheral */
	if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH) {
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	2b10      	cmp	r3, #16
 800453c:	d108      	bne.n	8004550 <DMA_SetConfig+0x44>
		/* Configure DMA Channel destination address */
		hdma->Instance->CPAR = DstAddress;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	609a      	str	r2, [r3, #8]

		/* Configure DMA Channel source address */
		hdma->Instance->CMAR = SrcAddress;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	60da      	str	r2, [r3, #12]
		hdma->Instance->CPAR = SrcAddress;

		/* Configure DMA Channel destination address */
		hdma->Instance->CMAR = DstAddress;
	}
}
 800454e:	e007      	b.n	8004560 <DMA_SetConfig+0x54>
		hdma->Instance->CPAR = SrcAddress;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	609a      	str	r2, [r3, #8]
		hdma->Instance->CMAR = DstAddress;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	60da      	str	r2, [r3, #12]
}
 8004560:	bf00      	nop
 8004562:	3714      	adds	r7, #20
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_GPIO_Init>:
 * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
 * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
	uint32_t position = 0x00u;
 8004576:	2300      	movs	r3, #0
 8004578:	617b      	str	r3, [r7, #20]
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	while (((GPIO_Init->Pin) >> position) != 0x00u) {
 800457a:	e148      	b.n	800480e <HAL_GPIO_Init+0x2a2>
		/* Get current io position */
		iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	2101      	movs	r1, #1
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	fa01 f303 	lsl.w	r3, r1, r3
 8004588:	4013      	ands	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]

		if (iocurrent != 0x00u) {
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 813a 	beq.w	8004808 <HAL_GPIO_Init+0x29c>
			/*--------------------- GPIO Mode Configuration ------------------------*/
			/* In case of Output or Alternate function mode selection */
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)) {
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f003 0303 	and.w	r3, r3, #3
 800459c:	2b01      	cmp	r3, #1
 800459e:	d005      	beq.n	80045ac <HAL_GPIO_Init+0x40>
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f003 0303 	and.w	r3, r3, #3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d130      	bne.n	800460e <HAL_GPIO_Init+0xa2>
				/* Check the Speed parameter */
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

				/* Configure the IO Speed */
				temp = GPIOx->OSPEEDR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	613b      	str	r3, [r7, #16]
				temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	2203      	movs	r2, #3
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	43db      	mvns	r3, r3
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4013      	ands	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
				temp |= (GPIO_Init->Speed << (position * 2u));
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	68da      	ldr	r2, [r3, #12]
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	fa02 f303 	lsl.w	r3, r2, r3
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]
				GPIOx->OSPEEDR = temp;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	609a      	str	r2, [r3, #8]

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	613b      	str	r3, [r7, #16]
				temp &= ~(GPIO_OTYPER_OT0 << position);
 80045e2:	2201      	movs	r2, #1
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ea:	43db      	mvns	r3, r3
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	4013      	ands	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	091b      	lsrs	r3, r3, #4
 80045f8:	f003 0201 	and.w	r2, r3, #1
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4313      	orrs	r3, r2
 8004606:	613b      	str	r3, [r7, #16]
				GPIOx->OTYPER = temp;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

			/* Activate the Pull-up or Pull down resistor for the current IO */
			if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	2b03      	cmp	r3, #3
 8004618:	d017      	beq.n	800464a <HAL_GPIO_Init+0xde>
				/* Check the Pull parameter */
				assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

				temp = GPIOx->PUPDR;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	613b      	str	r3, [r7, #16]
				temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	2203      	movs	r2, #3
 8004626:	fa02 f303 	lsl.w	r3, r2, r3
 800462a:	43db      	mvns	r3, r3
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4013      	ands	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
				temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	689a      	ldr	r2, [r3, #8]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	fa02 f303 	lsl.w	r3, r2, r3
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4313      	orrs	r3, r2
 8004642:	613b      	str	r3, [r7, #16]
				GPIOx->PUPDR = temp;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	60da      	str	r2, [r3, #12]
			}

			/* In case of Alternate function mode selection */
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f003 0303 	and.w	r3, r3, #3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d123      	bne.n	800469e <HAL_GPIO_Init+0x132>
				/* Check the Alternate function parameters */
				assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3u];
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	08da      	lsrs	r2, r3, #3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3208      	adds	r2, #8
 800465e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004662:	613b      	str	r3, [r7, #16]
				temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	220f      	movs	r2, #15
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	43db      	mvns	r3, r3
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	4013      	ands	r3, r2
 8004678:	613b      	str	r3, [r7, #16]
				temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	691a      	ldr	r2, [r3, #16]
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f003 0307 	and.w	r3, r3, #7
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	fa02 f303 	lsl.w	r3, r2, r3
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	4313      	orrs	r3, r2
 800468e:	613b      	str	r3, [r7, #16]
				GPIOx->AFR[position >> 3u] = temp;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	08da      	lsrs	r2, r3, #3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3208      	adds	r2, #8
 8004698:	6939      	ldr	r1, [r7, #16]
 800469a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}

			/* Configure IO Direction mode (Input, Output, Alternate or Analog) */
			temp = GPIOx->MODER;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	613b      	str	r3, [r7, #16]
			temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	2203      	movs	r2, #3
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	43db      	mvns	r3, r3
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	4013      	ands	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f003 0203 	and.w	r2, r3, #3
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	fa02 f303 	lsl.w	r3, r2, r3
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	613b      	str	r3, [r7, #16]
			GPIOx->MODER = temp;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	601a      	str	r2, [r3, #0]

			/*--------------------- EXTI Mode Configuration ------------------------*/
			/* Configure the External Interrupt or event for the current IO */
			if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u) {
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 8094 	beq.w	8004808 <HAL_GPIO_Init+0x29c>
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 80046e0:	4b52      	ldr	r3, [pc, #328]	@ (800482c <HAL_GPIO_Init+0x2c0>)
 80046e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046e4:	4a51      	ldr	r2, [pc, #324]	@ (800482c <HAL_GPIO_Init+0x2c0>)
 80046e6:	f043 0301 	orr.w	r3, r3, #1
 80046ea:	6613      	str	r3, [r2, #96]	@ 0x60
 80046ec:	4b4f      	ldr	r3, [pc, #316]	@ (800482c <HAL_GPIO_Init+0x2c0>)
 80046ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	60bb      	str	r3, [r7, #8]
 80046f6:	68bb      	ldr	r3, [r7, #8]

				temp = SYSCFG->EXTICR[position >> 2u];
 80046f8:	4a4d      	ldr	r2, [pc, #308]	@ (8004830 <HAL_GPIO_Init+0x2c4>)
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	089b      	lsrs	r3, r3, #2
 80046fe:	3302      	adds	r3, #2
 8004700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004704:	613b      	str	r3, [r7, #16]
				temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f003 0303 	and.w	r3, r3, #3
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	220f      	movs	r2, #15
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	43db      	mvns	r3, r3
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4013      	ands	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
				temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004722:	d00d      	beq.n	8004740 <HAL_GPIO_Init+0x1d4>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a43      	ldr	r2, [pc, #268]	@ (8004834 <HAL_GPIO_Init+0x2c8>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d007      	beq.n	800473c <HAL_GPIO_Init+0x1d0>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a42      	ldr	r2, [pc, #264]	@ (8004838 <HAL_GPIO_Init+0x2cc>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d101      	bne.n	8004738 <HAL_GPIO_Init+0x1cc>
 8004734:	2302      	movs	r3, #2
 8004736:	e004      	b.n	8004742 <HAL_GPIO_Init+0x1d6>
 8004738:	2307      	movs	r3, #7
 800473a:	e002      	b.n	8004742 <HAL_GPIO_Init+0x1d6>
 800473c:	2301      	movs	r3, #1
 800473e:	e000      	b.n	8004742 <HAL_GPIO_Init+0x1d6>
 8004740:	2300      	movs	r3, #0
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	f002 0203 	and.w	r2, r2, #3
 8004748:	0092      	lsls	r2, r2, #2
 800474a:	4093      	lsls	r3, r2
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	4313      	orrs	r3, r2
 8004750:	613b      	str	r3, [r7, #16]
				SYSCFG->EXTICR[position >> 2u] = temp;
 8004752:	4937      	ldr	r1, [pc, #220]	@ (8004830 <HAL_GPIO_Init+0x2c4>)
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	089b      	lsrs	r3, r3, #2
 8004758:	3302      	adds	r3, #2
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR1;
 8004760:	4b36      	ldr	r3, [pc, #216]	@ (800483c <HAL_GPIO_Init+0x2d0>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	613b      	str	r3, [r7, #16]
				temp &= ~(iocurrent);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	43db      	mvns	r3, r3
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	4013      	ands	r3, r2
 800476e:	613b      	str	r3, [r7, #16]
				if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u) {
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <HAL_GPIO_Init+0x218>
					temp |= iocurrent;
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4313      	orrs	r3, r2
 8004782:	613b      	str	r3, [r7, #16]
				}
				EXTI->RTSR1 = temp;
 8004784:	4a2d      	ldr	r2, [pc, #180]	@ (800483c <HAL_GPIO_Init+0x2d0>)
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	6093      	str	r3, [r2, #8]

				temp = EXTI->FTSR1;
 800478a:	4b2c      	ldr	r3, [pc, #176]	@ (800483c <HAL_GPIO_Init+0x2d0>)
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	613b      	str	r3, [r7, #16]
				temp &= ~(iocurrent);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	43db      	mvns	r3, r3
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	4013      	ands	r3, r2
 8004798:	613b      	str	r3, [r7, #16]
				if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u) {
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_GPIO_Init+0x242>
					temp |= iocurrent;
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	613b      	str	r3, [r7, #16]
				}
				EXTI->FTSR1 = temp;
 80047ae:	4a23      	ldr	r2, [pc, #140]	@ (800483c <HAL_GPIO_Init+0x2d0>)
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	60d3      	str	r3, [r2, #12]

				/* Clear EXTI line configuration */
				temp = EXTI->EMR1;
 80047b4:	4b21      	ldr	r3, [pc, #132]	@ (800483c <HAL_GPIO_Init+0x2d0>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	613b      	str	r3, [r7, #16]
				temp &= ~(iocurrent);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	43db      	mvns	r3, r3
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	4013      	ands	r3, r2
 80047c2:	613b      	str	r3, [r7, #16]
				if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u) {
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <HAL_GPIO_Init+0x26c>
					temp |= iocurrent;
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	613b      	str	r3, [r7, #16]
				}
				EXTI->EMR1 = temp;
 80047d8:	4a18      	ldr	r2, [pc, #96]	@ (800483c <HAL_GPIO_Init+0x2d0>)
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	6053      	str	r3, [r2, #4]

				temp = EXTI->IMR1;
 80047de:	4b17      	ldr	r3, [pc, #92]	@ (800483c <HAL_GPIO_Init+0x2d0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	613b      	str	r3, [r7, #16]
				temp &= ~(iocurrent);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	43db      	mvns	r3, r3
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	4013      	ands	r3, r2
 80047ec:	613b      	str	r3, [r7, #16]
				if ((GPIO_Init->Mode & EXTI_IT) != 0x00u) {
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <HAL_GPIO_Init+0x296>
					temp |= iocurrent;
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4313      	orrs	r3, r2
 8004800:	613b      	str	r3, [r7, #16]
				}
				EXTI->IMR1 = temp;
 8004802:	4a0e      	ldr	r2, [pc, #56]	@ (800483c <HAL_GPIO_Init+0x2d0>)
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	6013      	str	r3, [r2, #0]
			}
		}

		position++;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	3301      	adds	r3, #1
 800480c:	617b      	str	r3, [r7, #20]
	while (((GPIO_Init->Pin) >> position) != 0x00u) {
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	fa22 f303 	lsr.w	r3, r2, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	f47f aeaf 	bne.w	800457c <HAL_GPIO_Init+0x10>
	}
}
 800481e:	bf00      	nop
 8004820:	bf00      	nop
 8004822:	371c      	adds	r7, #28
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	40021000 	.word	0x40021000
 8004830:	40010000 	.word	0x40010000
 8004834:	48000400 	.word	0x48000400
 8004838:	48000800 	.word	0x48000800
 800483c:	40010400 	.word	0x40010400

08004840 <HAL_GPIO_ReadPin>:
 * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
 * @param  GPIO_Pin specifies the port bit to read.
 *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
 * @retval The input port pin value.
 */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	460b      	mov	r3, r1
 800484a:	807b      	strh	r3, [r7, #2]
	GPIO_PinState bitstatus;

	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));

	if ((GPIOx->IDR & GPIO_Pin) != 0x00u) {
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691a      	ldr	r2, [r3, #16]
 8004850:	887b      	ldrh	r3, [r7, #2]
 8004852:	4013      	ands	r3, r2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <HAL_GPIO_ReadPin+0x1e>
		bitstatus = GPIO_PIN_SET;
 8004858:	2301      	movs	r3, #1
 800485a:	73fb      	strb	r3, [r7, #15]
 800485c:	e001      	b.n	8004862 <HAL_GPIO_ReadPin+0x22>
	} else {
		bitstatus = GPIO_PIN_RESET;
 800485e:	2300      	movs	r3, #0
 8004860:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus;
 8004862:	7bfb      	ldrb	r3, [r7, #15]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_GPIO_WritePin>:
 *         This parameter can be one of the GPIO_PinState enum values:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState) {
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	460b      	mov	r3, r1
 800487a:	807b      	strh	r3, [r7, #2]
 800487c:	4613      	mov	r3, r2
 800487e:	707b      	strb	r3, [r7, #1]
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 8004880:	787b      	ldrb	r3, [r7, #1]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_GPIO_WritePin+0x1e>
		GPIOx->BSRR = (uint32_t) GPIO_Pin;
 8004886:	887a      	ldrh	r2, [r7, #2]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	619a      	str	r2, [r3, #24]
	} else {
		GPIOx->BRR = (uint32_t) GPIO_Pin;
	}
}
 800488c:	e002      	b.n	8004894 <HAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t) GPIO_Pin;
 800488e:	887a      	ldrh	r2, [r7, #2]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <HAL_GPIO_EXTI_IRQHandler>:
/**
 * @brief  Handle EXTI interrupt request.
 * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin) {
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	4603      	mov	r3, r0
 80048a8:	80fb      	strh	r3, [r7, #6]
	/* EXTI line interrupt detected */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u) {
 80048aa:	4b08      	ldr	r3, [pc, #32]	@ (80048cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048ac:	695a      	ldr	r2, [r3, #20]
 80048ae:	88fb      	ldrh	r3, [r7, #6]
 80048b0:	4013      	ands	r3, r2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d006      	beq.n	80048c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048b6:	4a05      	ldr	r2, [pc, #20]	@ (80048cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048b8:	88fb      	ldrh	r3, [r7, #6]
 80048ba:	6153      	str	r3, [r2, #20]
		HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048bc:	88fb      	ldrh	r3, [r7, #6]
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fe ffcc 	bl	800385c <HAL_GPIO_EXTI_Callback>
	}
}
 80048c4:	bf00      	nop
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40010400 	.word	0x40010400

080048d0 <HAL_PWR_EnableBkUpAccess>:
 *        disabled.
 * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
 *        back-up domain.
 * @retval None
 */
void HAL_PWR_EnableBkUpAccess(void) {
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
	SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048d4:	4b05      	ldr	r3, [pc, #20]	@ (80048ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a04      	ldr	r2, [pc, #16]	@ (80048ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80048da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048de:	6013      	str	r3, [r2, #0]
}
 80048e0:	bf00      	nop
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	40007000 	.word	0x40007000

080048f0 <HAL_PWREx_GetVoltageRange>:
/**
 * @brief Return Voltage Scaling Range.
 * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
 *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
 */
uint32_t HAL_PWREx_GetVoltageRange(void) {
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
	return (PWR->CR1 & PWR_CR1_VOS);
 80048f4:	4b04      	ldr	r3, [pc, #16]	@ (8004908 <HAL_PWREx_GetVoltageRange+0x18>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	40007000 	.word	0x40007000

0800490c <HAL_PWREx_ControlVoltageScaling>:
 * @note  When moving from Range 2 to Range 1, the API waits for VOSF flag to be
 *        cleared before returning the status. If the flag is not cleared within
 *        50 microseconds, HAL_TIMEOUT status is reported.
 * @retval HAL Status
 */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling) {
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  }

#else

	/* If Set Range 1 */
	if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1) {
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800491a:	d130      	bne.n	800497e <HAL_PWREx_ControlVoltageScaling+0x72>
		if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1) {
 800491c:	4b23      	ldr	r3, [pc, #140]	@ (80049ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004928:	d038      	beq.n	800499c <HAL_PWREx_ControlVoltageScaling+0x90>
			/* Set Range 1 */
			MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800492a:	4b20      	ldr	r3, [pc, #128]	@ (80049ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004932:	4a1e      	ldr	r2, [pc, #120]	@ (80049ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004934:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004938:	6013      	str	r3, [r2, #0]

			/* Wait until VOSF is cleared */
			wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800493a:	4b1d      	ldr	r3, [pc, #116]	@ (80049b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2232      	movs	r2, #50	@ 0x32
 8004940:	fb02 f303 	mul.w	r3, r2, r3
 8004944:	4a1b      	ldr	r2, [pc, #108]	@ (80049b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004946:	fba2 2303 	umull	r2, r3, r2, r3
 800494a:	0c9b      	lsrs	r3, r3, #18
 800494c:	3301      	adds	r3, #1
 800494e:	60fb      	str	r3, [r7, #12]
			while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U)) {
 8004950:	e002      	b.n	8004958 <HAL_PWREx_ControlVoltageScaling+0x4c>
				wait_loop_index--;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	3b01      	subs	r3, #1
 8004956:	60fb      	str	r3, [r7, #12]
			while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U)) {
 8004958:	4b14      	ldr	r3, [pc, #80]	@ (80049ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004960:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004964:	d102      	bne.n	800496c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1f2      	bne.n	8004952 <HAL_PWREx_ControlVoltageScaling+0x46>
			}
			if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) {
 800496c:	4b0f      	ldr	r3, [pc, #60]	@ (80049ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004974:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004978:	d110      	bne.n	800499c <HAL_PWREx_ControlVoltageScaling+0x90>
				return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e00f      	b.n	800499e <HAL_PWREx_ControlVoltageScaling+0x92>
			}
		}
	} else {
		if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2) {
 800497e:	4b0b      	ldr	r3, [pc, #44]	@ (80049ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004986:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800498a:	d007      	beq.n	800499c <HAL_PWREx_ControlVoltageScaling+0x90>
			/* Set Range 2 */
			MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800498c:	4b07      	ldr	r3, [pc, #28]	@ (80049ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004994:	4a05      	ldr	r2, [pc, #20]	@ (80049ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004996:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800499a:	6013      	str	r3, [r2, #0]
			/* No need to wait for VOSF to be cleared for this transition */
		}
	}
#endif

	return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40007000 	.word	0x40007000
 80049b0:	20000028 	.word	0x20000028
 80049b4:	431bde83 	.word	0x431bde83

080049b8 <HAL_RCC_OscConfig>:
 * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 *         supported by this macro. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct) {
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b088      	sub	sp, #32
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	HAL_StatusTypeDef status;
	uint32_t sysclk_source, pll_config;

	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d102      	bne.n	80049cc <HAL_RCC_OscConfig+0x14>
		return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	f000 bc02 	b.w	80051d0 <HAL_RCC_OscConfig+0x818>
	}

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

	sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049cc:	4b96      	ldr	r3, [pc, #600]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f003 030c 	and.w	r3, r3, #12
 80049d4:	61bb      	str	r3, [r7, #24]
	pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049d6:	4b94      	ldr	r3, [pc, #592]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f003 0303 	and.w	r3, r3, #3
 80049de:	617b      	str	r3, [r7, #20]

	/*----------------------------- MSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI) {
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0310 	and.w	r3, r3, #16
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 80e4 	beq.w	8004bb6 <HAL_RCC_OscConfig+0x1fe>
		assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
		assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
		assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

		/* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((sysclk_source == RCC_CFGR_SWS_MSI)
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d007      	beq.n	8004a04 <HAL_RCC_OscConfig+0x4c>
				|| ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI))) {
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	2b0c      	cmp	r3, #12
 80049f8:	f040 808b 	bne.w	8004b12 <HAL_RCC_OscConfig+0x15a>
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	f040 8087 	bne.w	8004b12 <HAL_RCC_OscConfig+0x15a>
			if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)) {
 8004a04:	4b88      	ldr	r3, [pc, #544]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <HAL_RCC_OscConfig+0x64>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <HAL_RCC_OscConfig+0x64>
				return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e3d9      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
			/* Otherwise, just the calibration and MSI range change are allowed */
			else {
				/* To correctly read data from FLASH memory, the number of wait states (LATENCY)
				 must be correctly programmed according to the frequency of the CPU clock
				 (HCLK) and the supply voltage of the device. */
				if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE()) {
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a1a      	ldr	r2, [r3, #32]
 8004a20:	4b81      	ldr	r3, [pc, #516]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0308 	and.w	r3, r3, #8
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d004      	beq.n	8004a36 <HAL_RCC_OscConfig+0x7e>
 8004a2c:	4b7e      	ldr	r3, [pc, #504]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a34:	e005      	b.n	8004a42 <HAL_RCC_OscConfig+0x8a>
 8004a36:	4b7c      	ldr	r3, [pc, #496]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a3c:	091b      	lsrs	r3, r3, #4
 8004a3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d223      	bcs.n	8004a8e <HAL_RCC_OscConfig+0xd6>
					/* First increase number of wait states update if necessary */
					if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK) {
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 fd8c 	bl	8005568 <RCC_SetFlashLatencyFromMSIRange>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <HAL_RCC_OscConfig+0xa2>
						return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e3ba      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
					}

					/* Selects the Multiple Speed oscillator (MSI) clock range .*/
					__HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a5a:	4b73      	ldr	r3, [pc, #460]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a72      	ldr	r2, [pc, #456]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a60:	f043 0308 	orr.w	r3, r3, #8
 8004a64:	6013      	str	r3, [r2, #0]
 8004a66:	4b70      	ldr	r3, [pc, #448]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	496d      	ldr	r1, [pc, #436]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	600b      	str	r3, [r1, #0]
					/* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
					__HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a78:	4b6b      	ldr	r3, [pc, #428]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	021b      	lsls	r3, r3, #8
 8004a86:	4968      	ldr	r1, [pc, #416]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	604b      	str	r3, [r1, #4]
 8004a8c:	e025      	b.n	8004ada <HAL_RCC_OscConfig+0x122>
				} else {
					/* Else, keep current flash latency while decreasing applies */
					/* Selects the Multiple Speed oscillator (MSI) clock range .*/
					__HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a8e:	4b66      	ldr	r3, [pc, #408]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a65      	ldr	r2, [pc, #404]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a94:	f043 0308 	orr.w	r3, r3, #8
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	4b63      	ldr	r3, [pc, #396]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	4960      	ldr	r1, [pc, #384]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	600b      	str	r3, [r1, #0]
					/* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
					__HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004aac:	4b5e      	ldr	r3, [pc, #376]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	69db      	ldr	r3, [r3, #28]
 8004ab8:	021b      	lsls	r3, r3, #8
 8004aba:	495b      	ldr	r1, [pc, #364]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	604b      	str	r3, [r1, #4]

					/* Decrease number of wait states update if necessary */
					/* Only possible when MSI is the System clock source  */
					if (sysclk_source == RCC_CFGR_SWS_MSI) {
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d109      	bne.n	8004ada <HAL_RCC_OscConfig+0x122>
						if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK) {
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 fd4c 	bl	8005568 <RCC_SetFlashLatencyFromMSIRange>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <HAL_RCC_OscConfig+0x122>
							return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e37a      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
						}
					}
				}

				/* Update the SystemCoreClock global variable */
				SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8004ada:	f000 fc81 	bl	80053e0 <HAL_RCC_GetSysClockFreq>
 8004ade:	4602      	mov	r2, r0
						>> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ae0:	4b51      	ldr	r3, [pc, #324]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	091b      	lsrs	r3, r3, #4
 8004ae6:	f003 030f 	and.w	r3, r3, #15
 8004aea:	4950      	ldr	r1, [pc, #320]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004aec:	5ccb      	ldrb	r3, [r1, r3]
 8004aee:	f003 031f 	and.w	r3, r3, #31
 8004af2:	fa22 f303 	lsr.w	r3, r2, r3
				SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8004af6:	4a4e      	ldr	r2, [pc, #312]	@ (8004c30 <HAL_RCC_OscConfig+0x278>)
 8004af8:	6013      	str	r3, [r2, #0]

				/* Configure the source of time base considering new system clocks settings*/
				status = HAL_InitTick(uwTickPrio);
 8004afa:	4b4e      	ldr	r3, [pc, #312]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7ff f8ce 	bl	8003ca0 <HAL_InitTick>
 8004b04:	4603      	mov	r3, r0
 8004b06:	73fb      	strb	r3, [r7, #15]
				if (status != HAL_OK) {
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d052      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x1fc>
					return status;
 8004b0e:	7bfb      	ldrb	r3, [r7, #15]
 8004b10:	e35e      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
				}
			}
		} else {
			/* Check the MSI State */
			if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF) {
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d032      	beq.n	8004b80 <HAL_RCC_OscConfig+0x1c8>
				/* Enable the Internal High Speed oscillator (MSI). */
				__HAL_RCC_MSI_ENABLE();
 8004b1a:	4b43      	ldr	r3, [pc, #268]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a42      	ldr	r2, [pc, #264]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b20:	f043 0301 	orr.w	r3, r3, #1
 8004b24:	6013      	str	r3, [r2, #0]

				/* Get timeout */
				tickstart = HAL_GetTick();
 8004b26:	f7ff f90b 	bl	8003d40 <HAL_GetTick>
 8004b2a:	6138      	str	r0, [r7, #16]

				/* Wait till MSI is ready */
				while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U) {
 8004b2c:	e008      	b.n	8004b40 <HAL_RCC_OscConfig+0x188>
					if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE) {
 8004b2e:	f7ff f907 	bl	8003d40 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCC_OscConfig+0x188>
						return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e347      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
				while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U) {
 8004b40:	4b39      	ldr	r3, [pc, #228]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0f0      	beq.n	8004b2e <HAL_RCC_OscConfig+0x176>
					}
				}
				/* Selects the Multiple Speed oscillator (MSI) clock range .*/
				__HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b4c:	4b36      	ldr	r3, [pc, #216]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a35      	ldr	r2, [pc, #212]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b52:	f043 0308 	orr.w	r3, r3, #8
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	4b33      	ldr	r3, [pc, #204]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	4930      	ldr	r1, [pc, #192]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	600b      	str	r3, [r1, #0]
				/* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
				__HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b6a:	4b2f      	ldr	r3, [pc, #188]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	021b      	lsls	r3, r3, #8
 8004b78:	492b      	ldr	r1, [pc, #172]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	604b      	str	r3, [r1, #4]
 8004b7e:	e01a      	b.n	8004bb6 <HAL_RCC_OscConfig+0x1fe>

			} else {
				/* Disable the Internal High Speed oscillator (MSI). */
				__HAL_RCC_MSI_DISABLE();
 8004b80:	4b29      	ldr	r3, [pc, #164]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a28      	ldr	r2, [pc, #160]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b86:	f023 0301 	bic.w	r3, r3, #1
 8004b8a:	6013      	str	r3, [r2, #0]

				/* Get timeout */
				tickstart = HAL_GetTick();
 8004b8c:	f7ff f8d8 	bl	8003d40 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

				/* Wait till MSI is ready */
				while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) {
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x1ee>
					if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE) {
 8004b94:	f7ff f8d4 	bl	8003d40 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x1ee>
						return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e314      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
				while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) {
 8004ba6:	4b20      	ldr	r3, [pc, #128]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f0      	bne.n	8004b94 <HAL_RCC_OscConfig+0x1dc>
 8004bb2:	e000      	b.n	8004bb6 <HAL_RCC_OscConfig+0x1fe>
			if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)) {
 8004bb4:	bf00      	nop
				}
			}
		}
	}
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE) {
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d073      	beq.n	8004caa <HAL_RCC_OscConfig+0x2f2>
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

		/* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
		if ((sysclk_source == RCC_CFGR_SWS_HSE)
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d005      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x21c>
				|| ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE))) {
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	2b0c      	cmp	r3, #12
 8004bcc:	d10e      	bne.n	8004bec <HAL_RCC_OscConfig+0x234>
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d10b      	bne.n	8004bec <HAL_RCC_OscConfig+0x234>
			if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8004bd4:	4b14      	ldr	r3, [pc, #80]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d063      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x2f0>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d15f      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x2f0>
				return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e2f1      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bf4:	d106      	bne.n	8004c04 <HAL_RCC_OscConfig+0x24c>
 8004bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a0b      	ldr	r2, [pc, #44]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004bfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	e025      	b.n	8004c50 <HAL_RCC_OscConfig+0x298>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c0c:	d114      	bne.n	8004c38 <HAL_RCC_OscConfig+0x280>
 8004c0e:	4b06      	ldr	r3, [pc, #24]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a05      	ldr	r2, [pc, #20]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004c14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c18:	6013      	str	r3, [r2, #0]
 8004c1a:	4b03      	ldr	r3, [pc, #12]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a02      	ldr	r2, [pc, #8]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c24:	6013      	str	r3, [r2, #0]
 8004c26:	e013      	b.n	8004c50 <HAL_RCC_OscConfig+0x298>
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	0800fb94 	.word	0x0800fb94
 8004c30:	20000028 	.word	0x20000028
 8004c34:	20000038 	.word	0x20000038
 8004c38:	4ba0      	ldr	r3, [pc, #640]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a9f      	ldr	r2, [pc, #636]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004c3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c42:	6013      	str	r3, [r2, #0]
 8004c44:	4b9d      	ldr	r3, [pc, #628]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a9c      	ldr	r2, [pc, #624]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004c4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c4e:	6013      	str	r3, [r2, #0]

			/* Check the HSE State */
			if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF) {
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d013      	beq.n	8004c80 <HAL_RCC_OscConfig+0x2c8>
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8004c58:	f7ff f872 	bl	8003d40 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is ready */
				while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U) {
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x2ba>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8004c60:	f7ff f86e 	bl	8003d40 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b64      	cmp	r3, #100	@ 0x64
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x2ba>
						return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e2ae      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
				while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U) {
 8004c72:	4b92      	ldr	r3, [pc, #584]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0f0      	beq.n	8004c60 <HAL_RCC_OscConfig+0x2a8>
 8004c7e:	e014      	b.n	8004caa <HAL_RCC_OscConfig+0x2f2>
					}
				}
			} else {
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8004c80:	f7ff f85e 	bl	8003d40 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is disabled */
				while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) {
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x2e2>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8004c88:	f7ff f85a 	bl	8003d40 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b64      	cmp	r3, #100	@ 0x64
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x2e2>
						return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e29a      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
				while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) {
 8004c9a:	4b88      	ldr	r3, [pc, #544]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f0      	bne.n	8004c88 <HAL_RCC_OscConfig+0x2d0>
 8004ca6:	e000      	b.n	8004caa <HAL_RCC_OscConfig+0x2f2>
			if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8004ca8:	bf00      	nop
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI) {
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d060      	beq.n	8004d78 <HAL_RCC_OscConfig+0x3c0>
		/* Check the parameters */
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((sysclk_source == RCC_CFGR_SWS_HSI)
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d005      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x310>
				|| ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI))) {
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	2b0c      	cmp	r3, #12
 8004cc0:	d119      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x33e>
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d116      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x33e>
			/* When HSI is used as system clock it will not be disabled */
			if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)) {
 8004cc8:	4b7c      	ldr	r3, [pc, #496]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d005      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x328>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x328>
				return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e277      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
			}
			/* Otherwise, just the calibration is allowed */
			else {
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ce0:	4b76      	ldr	r3, [pc, #472]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	061b      	lsls	r3, r3, #24
 8004cee:	4973      	ldr	r1, [pc, #460]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	604b      	str	r3, [r1, #4]
			if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)) {
 8004cf4:	e040      	b.n	8004d78 <HAL_RCC_OscConfig+0x3c0>
			}
		} else {
			/* Check the HSI State */
			if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF) {
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d023      	beq.n	8004d46 <HAL_RCC_OscConfig+0x38e>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 8004cfe:	4b6f      	ldr	r3, [pc, #444]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a6e      	ldr	r2, [pc, #440]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d08:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8004d0a:	f7ff f819 	bl	8003d40 <HAL_GetTick>
 8004d0e:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U) {
 8004d10:	e008      	b.n	8004d24 <HAL_RCC_OscConfig+0x36c>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8004d12:	f7ff f815 	bl	8003d40 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0x36c>
						return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e255      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
				while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U) {
 8004d24:	4b65      	ldr	r3, [pc, #404]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0f0      	beq.n	8004d12 <HAL_RCC_OscConfig+0x35a>
					}
				}

				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d30:	4b62      	ldr	r3, [pc, #392]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	061b      	lsls	r3, r3, #24
 8004d3e:	495f      	ldr	r1, [pc, #380]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	604b      	str	r3, [r1, #4]
 8004d44:	e018      	b.n	8004d78 <HAL_RCC_OscConfig+0x3c0>
			} else {
				/* Disable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_DISABLE();
 8004d46:	4b5d      	ldr	r3, [pc, #372]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a5c      	ldr	r2, [pc, #368]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004d4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d50:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8004d52:	f7fe fff5 	bl	8003d40 <HAL_GetTick>
 8004d56:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is disabled */
				while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) {
 8004d58:	e008      	b.n	8004d6c <HAL_RCC_OscConfig+0x3b4>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8004d5a:	f7fe fff1 	bl	8003d40 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x3b4>
						return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e231      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
				while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) {
 8004d6c:	4b53      	ldr	r3, [pc, #332]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1f0      	bne.n	8004d5a <HAL_RCC_OscConfig+0x3a2>
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI) {
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0308 	and.w	r3, r3, #8
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d03c      	beq.n	8004dfe <HAL_RCC_OscConfig+0x446>
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF) {
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d01c      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 8004d8c:	4b4b      	ldr	r3, [pc, #300]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d92:	4a4a      	ldr	r2, [pc, #296]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004d94:	f043 0301 	orr.w	r3, r3, #1
 8004d98:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8004d9c:	f7fe ffd0 	bl	8003d40 <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U) {
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x3fe>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8004da4:	f7fe ffcc 	bl	8003d40 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x3fe>
					return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e20c      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
			while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U) {
 8004db6:	4b41      	ldr	r3, [pc, #260]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0ef      	beq.n	8004da4 <HAL_RCC_OscConfig+0x3ec>
 8004dc4:	e01b      	b.n	8004dfe <HAL_RCC_OscConfig+0x446>
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 8004dc6:	4b3d      	ldr	r3, [pc, #244]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dcc:	4a3b      	ldr	r2, [pc, #236]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004dce:	f023 0301 	bic.w	r3, r3, #1
 8004dd2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8004dd6:	f7fe ffb3 	bl	8003d40 <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is disabled */
			while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U) {
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_OscConfig+0x438>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8004dde:	f7fe ffaf 	bl	8003d40 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x438>
					return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e1ef      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
			while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U) {
 8004df0:	4b32      	ldr	r3, [pc, #200]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1ef      	bne.n	8004dde <HAL_RCC_OscConfig+0x426>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE) {
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0304 	and.w	r3, r3, #4
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f000 80a6 	beq.w	8004f58 <HAL_RCC_OscConfig+0x5a0>
		FlagStatus pwrclkchanged = RESET;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	77fb      	strb	r3, [r7, #31]
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN)) {
 8004e10:	4b2a      	ldr	r3, [pc, #168]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10d      	bne.n	8004e38 <HAL_RCC_OscConfig+0x480>
			__HAL_RCC_PWR_CLK_ENABLE();
 8004e1c:	4b27      	ldr	r3, [pc, #156]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e20:	4a26      	ldr	r2, [pc, #152]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004e22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e26:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e28:	4b24      	ldr	r3, [pc, #144]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e30:	60bb      	str	r3, [r7, #8]
 8004e32:	68bb      	ldr	r3, [r7, #8]
			pwrclkchanged = SET;
 8004e34:	2301      	movs	r3, #1
 8004e36:	77fb      	strb	r3, [r7, #31]
		}

		if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 8004e38:	4b21      	ldr	r3, [pc, #132]	@ (8004ec0 <HAL_RCC_OscConfig+0x508>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d118      	bne.n	8004e76 <HAL_RCC_OscConfig+0x4be>
			/* Enable write access to Backup domain */
			SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e44:	4b1e      	ldr	r3, [pc, #120]	@ (8004ec0 <HAL_RCC_OscConfig+0x508>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a1d      	ldr	r2, [pc, #116]	@ (8004ec0 <HAL_RCC_OscConfig+0x508>)
 8004e4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e4e:	6013      	str	r3, [r2, #0]

			/* Wait for Backup domain Write protection disable */
			tickstart = HAL_GetTick();
 8004e50:	f7fe ff76 	bl	8003d40 <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]

			while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0x4b2>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8004e58:	f7fe ff72 	bl	8003d40 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x4b2>
					return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e1b2      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
			while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 8004e6a:	4b15      	ldr	r3, [pc, #84]	@ (8004ec0 <HAL_RCC_OscConfig+0x508>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0f0      	beq.n	8004e58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d108      	bne.n	8004e90 <HAL_RCC_OscConfig+0x4d8>
 8004e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e84:	4a0d      	ldr	r2, [pc, #52]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004e86:	f043 0301 	orr.w	r3, r3, #1
 8004e8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e8e:	e029      	b.n	8004ee4 <HAL_RCC_OscConfig+0x52c>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	2b05      	cmp	r3, #5
 8004e96:	d115      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x50c>
 8004e98:	4b08      	ldr	r3, [pc, #32]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e9e:	4a07      	ldr	r2, [pc, #28]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004ea0:	f043 0304 	orr.w	r3, r3, #4
 8004ea4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ea8:	4b04      	ldr	r3, [pc, #16]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eae:	4a03      	ldr	r2, [pc, #12]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004eb0:	f043 0301 	orr.w	r3, r3, #1
 8004eb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004eb8:	e014      	b.n	8004ee4 <HAL_RCC_OscConfig+0x52c>
 8004eba:	bf00      	nop
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	40007000 	.word	0x40007000
 8004ec4:	4b9a      	ldr	r3, [pc, #616]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8004ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eca:	4a99      	ldr	r2, [pc, #612]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8004ecc:	f023 0301 	bic.w	r3, r3, #1
 8004ed0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ed4:	4b96      	ldr	r3, [pc, #600]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8004ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eda:	4a95      	ldr	r2, [pc, #596]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8004edc:	f023 0304 	bic.w	r3, r3, #4
 8004ee0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

		/* Check the LSE State */
		if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF) {
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d016      	beq.n	8004f1a <HAL_RCC_OscConfig+0x562>
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8004eec:	f7fe ff28 	bl	8003d40 <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U) {
 8004ef2:	e00a      	b.n	8004f0a <HAL_RCC_OscConfig+0x552>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8004ef4:	f7fe ff24 	bl	8003d40 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x552>
					return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e162      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
			while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U) {
 8004f0a:	4b89      	ldr	r3, [pc, #548]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8004f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0ed      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x53c>
 8004f18:	e015      	b.n	8004f46 <HAL_RCC_OscConfig+0x58e>
				}
			}
		} else {
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8004f1a:	f7fe ff11 	bl	8003d40 <HAL_GetTick>
 8004f1e:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is disabled */
			while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U) {
 8004f20:	e00a      	b.n	8004f38 <HAL_RCC_OscConfig+0x580>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8004f22:	f7fe ff0d 	bl	8003d40 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d901      	bls.n	8004f38 <HAL_RCC_OscConfig+0x580>
					return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e14b      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
			while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U) {
 8004f38:	4b7d      	ldr	r3, [pc, #500]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8004f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1ed      	bne.n	8004f22 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET) {
 8004f46:	7ffb      	ldrb	r3, [r7, #31]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d105      	bne.n	8004f58 <HAL_RCC_OscConfig+0x5a0>
			__HAL_RCC_PWR_CLK_DISABLE();
 8004f4c:	4b78      	ldr	r3, [pc, #480]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8004f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f50:	4a77      	ldr	r2, [pc, #476]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8004f52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f56:	6593      	str	r3, [r2, #88]	@ 0x58
		}
	}
#if defined(RCC_HSI48_SUPPORT)
	/*------------------------------ HSI48 Configuration -----------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48) {
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0320 	and.w	r3, r3, #32
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d03c      	beq.n	8004fde <HAL_RCC_OscConfig+0x626>
		/* Check the parameters */
		assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

		/* Check the LSI State */
		if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF) {
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d01c      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x5ee>
			/* Enable the Internal Low Speed oscillator (HSI48). */
			__HAL_RCC_HSI48_ENABLE();
 8004f6c:	4b70      	ldr	r3, [pc, #448]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8004f6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f72:	4a6f      	ldr	r2, [pc, #444]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8004f74:	f043 0301 	orr.w	r3, r3, #1
 8004f78:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8004f7c:	f7fe fee0 	bl	8003d40 <HAL_GetTick>
 8004f80:	6138      	str	r0, [r7, #16]

			/* Wait till HSI48 is ready */
			while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U) {
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0x5de>
				if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE) {
 8004f84:	f7fe fedc 	bl	8003d40 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x5de>
					return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e11c      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
			while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U) {
 8004f96:	4b66      	ldr	r3, [pc, #408]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8004f98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0ef      	beq.n	8004f84 <HAL_RCC_OscConfig+0x5cc>
 8004fa4:	e01b      	b.n	8004fde <HAL_RCC_OscConfig+0x626>
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (HSI48). */
			__HAL_RCC_HSI48_DISABLE();
 8004fa6:	4b62      	ldr	r3, [pc, #392]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8004fa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fac:	4a60      	ldr	r2, [pc, #384]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8004fae:	f023 0301 	bic.w	r3, r3, #1
 8004fb2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8004fb6:	f7fe fec3 	bl	8003d40 <HAL_GetTick>
 8004fba:	6138      	str	r0, [r7, #16]

			/* Wait till HSI48 is disabled */
			while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U) {
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCC_OscConfig+0x618>
				if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE) {
 8004fbe:	f7fe febf 	bl	8003d40 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCC_OscConfig+0x618>
					return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e0ff      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
			while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U) {
 8004fd0:	4b57      	ldr	r3, [pc, #348]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8004fd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1ef      	bne.n	8004fbe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

	if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE) {
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f000 80f3 	beq.w	80051ce <HAL_RCC_OscConfig+0x816>
		/* PLL On ? */
		if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON) {
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	f040 80c9 	bne.w	8005184 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
			assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
			assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

			/* Do nothing if PLL configuration is the unchanged */
			pll_config = RCC->PLLCFGR;
 8004ff2:	4b4f      	ldr	r3, [pc, #316]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	617b      	str	r3, [r7, #20]
			if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f003 0203 	and.w	r2, r3, #3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005002:	429a      	cmp	r2, r3
 8005004:	d12c      	bne.n	8005060 <HAL_RCC_OscConfig+0x6a8>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f003 0270 	and.w	r2, r3, #112	@ 0x70
							!= ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005010:	3b01      	subs	r3, #1
 8005012:	011b      	lsls	r3, r3, #4
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8005014:	429a      	cmp	r2, r3
 8005016:	d123      	bne.n	8005060 <HAL_RCC_OscConfig+0x6a8>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005022:	021b      	lsls	r3, r3, #8
 8005024:	429a      	cmp	r2, r3
 8005026:	d11b      	bne.n	8005060 <HAL_RCC_OscConfig+0x6a8>
					||
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
					(READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV)
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
							!= (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005032:	06db      	lsls	r3, r3, #27
					||
 8005034:	429a      	cmp	r2, r3
 8005036:	d113      	bne.n	8005060 <HAL_RCC_OscConfig+0x6a8>
					||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
					(READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
							!= ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005042:	085b      	lsrs	r3, r3, #1
 8005044:	3b01      	subs	r3, #1
 8005046:	055b      	lsls	r3, r3, #21
					||
 8005048:	429a      	cmp	r2, r3
 800504a:	d109      	bne.n	8005060 <HAL_RCC_OscConfig+0x6a8>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
							!= ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos))) {
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005056:	085b      	lsrs	r3, r3, #1
 8005058:	3b01      	subs	r3, #1
 800505a:	065b      	lsls	r3, r3, #25
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 800505c:	429a      	cmp	r2, r3
 800505e:	d06b      	beq.n	8005138 <HAL_RCC_OscConfig+0x780>
				/* Check if the PLL is used as system clock or not */
				if (sysclk_source != RCC_CFGR_SWS_PLL) {
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	2b0c      	cmp	r3, #12
 8005064:	d062      	beq.n	800512c <HAL_RCC_OscConfig+0x774>
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
					/* Check if main PLL can be updated */
					/* Not possible if the source is shared by other enabled PLLSAIx */
					if ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005066:	4b32      	ldr	r3, [pc, #200]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
					) {
						return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e0ac      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
					} else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
					{
						/* Disable the main PLL. */
						__HAL_RCC_PLL_DISABLE();
 8005076:	4b2e      	ldr	r3, [pc, #184]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a2d      	ldr	r2, [pc, #180]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 800507c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005080:	6013      	str	r3, [r2, #0]

						/* Get Start Tick*/
						tickstart = HAL_GetTick();
 8005082:	f7fe fe5d 	bl	8003d40 <HAL_GetTick>
 8005086:	6138      	str	r0, [r7, #16]

						/* Wait till PLL is ready */
						while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U) {
 8005088:	e008      	b.n	800509c <HAL_RCC_OscConfig+0x6e4>
							if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 800508a:	f7fe fe59 	bl	8003d40 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x6e4>
								return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e099      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
						while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U) {
 800509c:	4b24      	ldr	r3, [pc, #144]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1f0      	bne.n	800508a <HAL_RCC_OscConfig+0x6d2>
							}
						}

						/* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
						__HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource, RCC_OscInitStruct->PLL.PLLM,
 80050a8:	4b21      	ldr	r3, [pc, #132]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 80050aa:	68da      	ldr	r2, [r3, #12]
 80050ac:	4b21      	ldr	r3, [pc, #132]	@ (8005134 <HAL_RCC_OscConfig+0x77c>)
 80050ae:	4013      	ands	r3, r2
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80050b8:	3a01      	subs	r2, #1
 80050ba:	0112      	lsls	r2, r2, #4
 80050bc:	4311      	orrs	r1, r2
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80050c2:	0212      	lsls	r2, r2, #8
 80050c4:	4311      	orrs	r1, r2
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80050ca:	0852      	lsrs	r2, r2, #1
 80050cc:	3a01      	subs	r2, #1
 80050ce:	0552      	lsls	r2, r2, #21
 80050d0:	4311      	orrs	r1, r2
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80050d6:	0852      	lsrs	r2, r2, #1
 80050d8:	3a01      	subs	r2, #1
 80050da:	0652      	lsls	r2, r2, #25
 80050dc:	4311      	orrs	r1, r2
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80050e2:	06d2      	lsls	r2, r2, #27
 80050e4:	430a      	orrs	r2, r1
 80050e6:	4912      	ldr	r1, [pc, #72]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

						/* Enable the main PLL. */
						__HAL_RCC_PLL_ENABLE();
 80050ec:	4b10      	ldr	r3, [pc, #64]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a0f      	ldr	r2, [pc, #60]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 80050f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050f6:	6013      	str	r3, [r2, #0]

						/* Enable PLL System Clock output. */
						__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050f8:	4b0d      	ldr	r3, [pc, #52]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	4a0c      	ldr	r2, [pc, #48]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 80050fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005102:	60d3      	str	r3, [r2, #12]

						/* Get Start Tick*/
						tickstart = HAL_GetTick();
 8005104:	f7fe fe1c 	bl	8003d40 <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

						/* Wait till PLL is ready */
						while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) {
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x766>
							if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 800510c:	f7fe fe18 	bl	8003d40 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x766>
								return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e058      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
						while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) {
 800511e:	4b04      	ldr	r3, [pc, #16]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0f0      	beq.n	800510c <HAL_RCC_OscConfig+0x754>
				if (sysclk_source != RCC_CFGR_SWS_PLL) {
 800512a:	e050      	b.n	80051ce <HAL_RCC_OscConfig+0x816>
							}
						}
					}
				} else {
					/* PLL is already used as System core clock */
					return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e04f      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
 8005130:	40021000 	.word	0x40021000
 8005134:	019d808c 	.word	0x019d808c
				}
			} else {
				/* PLL configuration is unchanged */
				/* Re-enable PLL if it was disabled (ie. low power mode) */
				if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) {
 8005138:	4b27      	ldr	r3, [pc, #156]	@ (80051d8 <HAL_RCC_OscConfig+0x820>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d144      	bne.n	80051ce <HAL_RCC_OscConfig+0x816>
					/* Enable the main PLL. */
					__HAL_RCC_PLL_ENABLE();
 8005144:	4b24      	ldr	r3, [pc, #144]	@ (80051d8 <HAL_RCC_OscConfig+0x820>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a23      	ldr	r2, [pc, #140]	@ (80051d8 <HAL_RCC_OscConfig+0x820>)
 800514a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800514e:	6013      	str	r3, [r2, #0]

					/* Enable PLL System Clock output. */
					__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005150:	4b21      	ldr	r3, [pc, #132]	@ (80051d8 <HAL_RCC_OscConfig+0x820>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	4a20      	ldr	r2, [pc, #128]	@ (80051d8 <HAL_RCC_OscConfig+0x820>)
 8005156:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800515a:	60d3      	str	r3, [r2, #12]

					/* Get Start Tick*/
					tickstart = HAL_GetTick();
 800515c:	f7fe fdf0 	bl	8003d40 <HAL_GetTick>
 8005160:	6138      	str	r0, [r7, #16]

					/* Wait till PLL is ready */
					while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) {
 8005162:	e008      	b.n	8005176 <HAL_RCC_OscConfig+0x7be>
						if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8005164:	f7fe fdec 	bl	8003d40 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x7be>
							return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e02c      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
					while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) {
 8005176:	4b18      	ldr	r3, [pc, #96]	@ (80051d8 <HAL_RCC_OscConfig+0x820>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0f0      	beq.n	8005164 <HAL_RCC_OscConfig+0x7ac>
 8005182:	e024      	b.n	80051ce <HAL_RCC_OscConfig+0x816>
					}
				}
			}
		} else {
			/* Check that PLL is not used as system clock or not */
			if (sysclk_source != RCC_CFGR_SWS_PLL) {
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	2b0c      	cmp	r3, #12
 8005188:	d01f      	beq.n	80051ca <HAL_RCC_OscConfig+0x812>
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 800518a:	4b13      	ldr	r3, [pc, #76]	@ (80051d8 <HAL_RCC_OscConfig+0x820>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a12      	ldr	r2, [pc, #72]	@ (80051d8 <HAL_RCC_OscConfig+0x820>)
 8005190:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005194:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8005196:	f7fe fdd3 	bl	8003d40 <HAL_GetTick>
 800519a:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is disabled */
				while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U) {
 800519c:	e008      	b.n	80051b0 <HAL_RCC_OscConfig+0x7f8>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 800519e:	f7fe fdcf 	bl	8003d40 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_OscConfig+0x7f8>
						return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e00f      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
				while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U) {
 80051b0:	4b09      	ldr	r3, [pc, #36]	@ (80051d8 <HAL_RCC_OscConfig+0x820>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1f0      	bne.n	800519e <HAL_RCC_OscConfig+0x7e6>
				}
				/* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
				RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80051bc:	4b06      	ldr	r3, [pc, #24]	@ (80051d8 <HAL_RCC_OscConfig+0x820>)
 80051be:	68da      	ldr	r2, [r3, #12]
 80051c0:	4905      	ldr	r1, [pc, #20]	@ (80051d8 <HAL_RCC_OscConfig+0x820>)
 80051c2:	4b06      	ldr	r3, [pc, #24]	@ (80051dc <HAL_RCC_OscConfig+0x824>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	60cb      	str	r3, [r1, #12]
 80051c8:	e001      	b.n	80051ce <HAL_RCC_OscConfig+0x816>
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
			} else {
				/* PLL is already used as System core clock */
				return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e000      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
			}
		}
	}
	return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3720      	adds	r7, #32
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	40021000 	.word	0x40021000
 80051dc:	feeefffc 	.word	0xfeeefffc

080051e0 <HAL_RCC_ClockConfig>:
 * @note   Depending on the device voltage range, the software has to set correctly
 *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 *         (for more details refer to section above "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency) {
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
	HAL_StatusTypeDef status;

	/* Check Null pointer */
	if (RCC_ClkInitStruct == NULL) {
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <HAL_RCC_ClockConfig+0x14>
		return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e0e7      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e4>
	/* To correctly read data from FLASH memory, the number of wait states (LATENCY)
	 must be correctly programmed according to the frequency of the CPU clock
	 (HCLK) and the supply voltage of the device. */

	/* Increasing the number of wait states because of higher CPU frequency */
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 80051f4:	4b75      	ldr	r3, [pc, #468]	@ (80053cc <HAL_RCC_ClockConfig+0x1ec>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	683a      	ldr	r2, [r7, #0]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d910      	bls.n	8005224 <HAL_RCC_ClockConfig+0x44>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8005202:	4b72      	ldr	r3, [pc, #456]	@ (80053cc <HAL_RCC_ClockConfig+0x1ec>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f023 0207 	bic.w	r2, r3, #7
 800520a:	4970      	ldr	r1, [pc, #448]	@ (80053cc <HAL_RCC_ClockConfig+0x1ec>)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	4313      	orrs	r3, r2
 8005210:	600b      	str	r3, [r1, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8005212:	4b6e      	ldr	r3, [pc, #440]	@ (80053cc <HAL_RCC_ClockConfig+0x1ec>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0307 	and.w	r3, r3, #7
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	429a      	cmp	r2, r3
 800521e:	d001      	beq.n	8005224 <HAL_RCC_ClockConfig+0x44>
			return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e0cf      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e4>
		}
	}

	/*----------------- HCLK Configuration prior to SYSCLK----------------------*/
	/* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) {
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d010      	beq.n	8005252 <HAL_RCC_ClockConfig+0x72>
		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

		if (RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE)) {
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	4b66      	ldr	r3, [pc, #408]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800523c:	429a      	cmp	r2, r3
 800523e:	d908      	bls.n	8005252 <HAL_RCC_ClockConfig+0x72>
			MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005240:	4b63      	ldr	r3, [pc, #396]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	4960      	ldr	r1, [pc, #384]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 800524e:	4313      	orrs	r3, r2
 8005250:	608b      	str	r3, [r1, #8]
		}
	}

	/*------------------------- SYSCLK Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK) {
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d04c      	beq.n	80052f8 <HAL_RCC_ClockConfig+0x118>
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

		/* PLL is selected as System Clock Source */
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b03      	cmp	r3, #3
 8005264:	d107      	bne.n	8005276 <HAL_RCC_ClockConfig+0x96>
			/* Check the PLL ready flag */
			if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) {
 8005266:	4b5a      	ldr	r3, [pc, #360]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d121      	bne.n	80052b6 <HAL_RCC_ClockConfig+0xd6>
				return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e0a6      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
#endif
		} else {
			/* HSE is selected as System Clock Source */
			if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2b02      	cmp	r3, #2
 800527c:	d107      	bne.n	800528e <HAL_RCC_ClockConfig+0xae>
				/* Check the HSE ready flag */
				if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U) {
 800527e:	4b54      	ldr	r3, [pc, #336]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d115      	bne.n	80052b6 <HAL_RCC_ClockConfig+0xd6>
					return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e09a      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e4>
				}
			}
			/* MSI is selected as System Clock Source */
			else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI) {
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d107      	bne.n	80052a6 <HAL_RCC_ClockConfig+0xc6>
				/* Check the MSI ready flag */
				if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U) {
 8005296:	4b4e      	ldr	r3, [pc, #312]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d109      	bne.n	80052b6 <HAL_RCC_ClockConfig+0xd6>
					return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e08e      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e4>
				}
			}
			/* HSI is selected as System Clock Source */
			else {
				/* Check the HSI ready flag */
				if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U) {
 80052a6:	4b4a      	ldr	r3, [pc, #296]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_RCC_ClockConfig+0xd6>
					return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e086      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

		}

		MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052b6:	4b46      	ldr	r3, [pc, #280]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f023 0203 	bic.w	r2, r3, #3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	4943      	ldr	r1, [pc, #268]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	608b      	str	r3, [r1, #8]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 80052c8:	f7fe fd3a 	bl	8003d40 <HAL_GetTick>
 80052cc:	60f8      	str	r0, [r7, #12]

		while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 80052ce:	e00a      	b.n	80052e6 <HAL_RCC_ClockConfig+0x106>
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 80052d0:	f7fe fd36 	bl	8003d40 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052de:	4293      	cmp	r3, r2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_ClockConfig+0x106>
				return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e06e      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e4>
		while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 80052e6:	4b3a      	ldr	r3, [pc, #232]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f003 020c 	and.w	r2, r3, #12
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d1eb      	bne.n	80052d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

	/*----------------- HCLK Configuration after SYSCLK-------------------------*/
	/* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) {
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d010      	beq.n	8005326 <HAL_RCC_ClockConfig+0x146>
		if (RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE)) {
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	4b31      	ldr	r3, [pc, #196]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005310:	429a      	cmp	r2, r3
 8005312:	d208      	bcs.n	8005326 <HAL_RCC_ClockConfig+0x146>
			MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005314:	4b2e      	ldr	r3, [pc, #184]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	492b      	ldr	r1, [pc, #172]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005322:	4313      	orrs	r3, r2
 8005324:	608b      	str	r3, [r1, #8]
		}
	}

	/* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 8005326:	4b29      	ldr	r3, [pc, #164]	@ (80053cc <HAL_RCC_ClockConfig+0x1ec>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0307 	and.w	r3, r3, #7
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	429a      	cmp	r2, r3
 8005332:	d210      	bcs.n	8005356 <HAL_RCC_ClockConfig+0x176>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8005334:	4b25      	ldr	r3, [pc, #148]	@ (80053cc <HAL_RCC_ClockConfig+0x1ec>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f023 0207 	bic.w	r2, r3, #7
 800533c:	4923      	ldr	r1, [pc, #140]	@ (80053cc <HAL_RCC_ClockConfig+0x1ec>)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	4313      	orrs	r3, r2
 8005342:	600b      	str	r3, [r1, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8005344:	4b21      	ldr	r3, [pc, #132]	@ (80053cc <HAL_RCC_ClockConfig+0x1ec>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0307 	and.w	r3, r3, #7
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	429a      	cmp	r2, r3
 8005350:	d001      	beq.n	8005356 <HAL_RCC_ClockConfig+0x176>
			return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e036      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e4>
		}
	}

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0304 	and.w	r3, r3, #4
 800535e:	2b00      	cmp	r3, #0
 8005360:	d008      	beq.n	8005374 <HAL_RCC_ClockConfig+0x194>
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005362:	4b1b      	ldr	r3, [pc, #108]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	4918      	ldr	r1, [pc, #96]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005370:	4313      	orrs	r3, r2
 8005372:	608b      	str	r3, [r1, #8]
	}

	/*-------------------------- PCLK2 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0308 	and.w	r3, r3, #8
 800537c:	2b00      	cmp	r3, #0
 800537e:	d009      	beq.n	8005394 <HAL_RCC_ClockConfig+0x1b4>
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005380:	4b13      	ldr	r3, [pc, #76]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	00db      	lsls	r3, r3, #3
 800538e:	4910      	ldr	r1, [pc, #64]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005390:	4313      	orrs	r3, r2
 8005392:	608b      	str	r3, [r1, #8]
	}

	/* Update the SystemCoreClock global variable */
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8005394:	f000 f824 	bl	80053e0 <HAL_RCC_GetSysClockFreq>
 8005398:	4602      	mov	r2, r0
			>> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800539a:	4b0d      	ldr	r3, [pc, #52]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	091b      	lsrs	r3, r3, #4
 80053a0:	f003 030f 	and.w	r3, r3, #15
 80053a4:	490b      	ldr	r1, [pc, #44]	@ (80053d4 <HAL_RCC_ClockConfig+0x1f4>)
 80053a6:	5ccb      	ldrb	r3, [r1, r3]
 80053a8:	f003 031f 	and.w	r3, r3, #31
 80053ac:	fa22 f303 	lsr.w	r3, r2, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 80053b0:	4a09      	ldr	r2, [pc, #36]	@ (80053d8 <HAL_RCC_ClockConfig+0x1f8>)
 80053b2:	6013      	str	r3, [r2, #0]

	/* Configure the source of time base considering new system clocks settings*/
	status = HAL_InitTick(uwTickPrio);
 80053b4:	4b09      	ldr	r3, [pc, #36]	@ (80053dc <HAL_RCC_ClockConfig+0x1fc>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7fe fc71 	bl	8003ca0 <HAL_InitTick>
 80053be:	4603      	mov	r3, r0
 80053c0:	72fb      	strb	r3, [r7, #11]

	return status;
 80053c2:	7afb      	ldrb	r3, [r7, #11]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	40022000 	.word	0x40022000
 80053d0:	40021000 	.word	0x40021000
 80053d4:	0800fb94 	.word	0x0800fb94
 80053d8:	20000028 	.word	0x20000028
 80053dc:	20000038 	.word	0x20000038

080053e0 <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
uint32_t HAL_RCC_GetSysClockFreq(void) {
 80053e0:	b480      	push	{r7}
 80053e2:	b089      	sub	sp, #36	@ 0x24
 80053e4:	af00      	add	r7, sp, #0
	uint32_t msirange = 0U, sysclockfreq = 0U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	61fb      	str	r3, [r7, #28]
 80053ea:	2300      	movs	r3, #0
 80053ec:	61bb      	str	r3, [r7, #24]
	uint32_t pllvco, pllsource, pllr, pllm; /* no init needed */
	uint32_t sysclk_source, pll_oscsource;

	sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053ee:	4b3e      	ldr	r3, [pc, #248]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f003 030c 	and.w	r3, r3, #12
 80053f6:	613b      	str	r3, [r7, #16]
	pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053f8:	4b3b      	ldr	r3, [pc, #236]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	f003 0303 	and.w	r3, r3, #3
 8005400:	60fb      	str	r3, [r7, #12]

	if ((sysclk_source == RCC_CFGR_SWS_MSI)
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d005      	beq.n	8005414 <HAL_RCC_GetSysClockFreq+0x34>
			|| ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI))) {
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	2b0c      	cmp	r3, #12
 800540c:	d121      	bne.n	8005452 <HAL_RCC_GetSysClockFreq+0x72>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d11e      	bne.n	8005452 <HAL_RCC_GetSysClockFreq+0x72>
		/* MSI or PLL with MSI source used as system clock source */

		/* Get SYSCLK source */
		if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U) { /* MSISRANGE from RCC_CSR applies */
 8005414:	4b34      	ldr	r3, [pc, #208]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0308 	and.w	r3, r3, #8
 800541c:	2b00      	cmp	r3, #0
 800541e:	d107      	bne.n	8005430 <HAL_RCC_GetSysClockFreq+0x50>
			msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005420:	4b31      	ldr	r3, [pc, #196]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005422:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005426:	0a1b      	lsrs	r3, r3, #8
 8005428:	f003 030f 	and.w	r3, r3, #15
 800542c:	61fb      	str	r3, [r7, #28]
 800542e:	e005      	b.n	800543c <HAL_RCC_GetSysClockFreq+0x5c>
		} else { /* MSIRANGE from RCC_CR applies */
			msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005430:	4b2d      	ldr	r3, [pc, #180]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	091b      	lsrs	r3, r3, #4
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	61fb      	str	r3, [r7, #28]
		}
		/*MSI frequency range in HZ*/
		msirange = MSIRangeTable[msirange];
 800543c:	4a2b      	ldr	r2, [pc, #172]	@ (80054ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005444:	61fb      	str	r3, [r7, #28]

		if (sysclk_source == RCC_CFGR_SWS_MSI) {
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10d      	bne.n	8005468 <HAL_RCC_GetSysClockFreq+0x88>
			/* MSI used as system clock source */
			sysclockfreq = msirange;
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	61bb      	str	r3, [r7, #24]
		if (sysclk_source == RCC_CFGR_SWS_MSI) {
 8005450:	e00a      	b.n	8005468 <HAL_RCC_GetSysClockFreq+0x88>
		}
	} else if (sysclk_source == RCC_CFGR_SWS_HSI) {
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	2b04      	cmp	r3, #4
 8005456:	d102      	bne.n	800545e <HAL_RCC_GetSysClockFreq+0x7e>
		/* HSI used as system clock source */
		sysclockfreq = HSI_VALUE;
 8005458:	4b25      	ldr	r3, [pc, #148]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800545a:	61bb      	str	r3, [r7, #24]
 800545c:	e004      	b.n	8005468 <HAL_RCC_GetSysClockFreq+0x88>
	} else if (sysclk_source == RCC_CFGR_SWS_HSE) {
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	2b08      	cmp	r3, #8
 8005462:	d101      	bne.n	8005468 <HAL_RCC_GetSysClockFreq+0x88>
		/* HSE used as system clock source */
		sysclockfreq = HSE_VALUE;
 8005464:	4b23      	ldr	r3, [pc, #140]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005466:	61bb      	str	r3, [r7, #24]
	} else {
		/* unexpected case: sysclockfreq at 0 */
	}

	if (sysclk_source == RCC_CFGR_SWS_PLL) {
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	2b0c      	cmp	r3, #12
 800546c:	d134      	bne.n	80054d8 <HAL_RCC_GetSysClockFreq+0xf8>
		/* PLL used as system clock  source */

		/* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
		 SYSCLK = PLL_VCO / PLLR
		 */
		pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800546e:	4b1e      	ldr	r3, [pc, #120]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f003 0303 	and.w	r3, r3, #3
 8005476:	60bb      	str	r3, [r7, #8]

		switch (pllsource) {
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2b02      	cmp	r3, #2
 800547c:	d003      	beq.n	8005486 <HAL_RCC_GetSysClockFreq+0xa6>
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2b03      	cmp	r3, #3
 8005482:	d003      	beq.n	800548c <HAL_RCC_GetSysClockFreq+0xac>
 8005484:	e005      	b.n	8005492 <HAL_RCC_GetSysClockFreq+0xb2>
		case RCC_PLLSOURCE_HSI: /* HSI used as PLL clock source */
			pllvco = HSI_VALUE;
 8005486:	4b1a      	ldr	r3, [pc, #104]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005488:	617b      	str	r3, [r7, #20]
			break;
 800548a:	e005      	b.n	8005498 <HAL_RCC_GetSysClockFreq+0xb8>

		case RCC_PLLSOURCE_HSE: /* HSE used as PLL clock source */
			pllvco = HSE_VALUE;
 800548c:	4b19      	ldr	r3, [pc, #100]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800548e:	617b      	str	r3, [r7, #20]
			break;
 8005490:	e002      	b.n	8005498 <HAL_RCC_GetSysClockFreq+0xb8>

		case RCC_PLLSOURCE_MSI: /* MSI used as PLL clock source */
		default:
			pllvco = msirange;
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	617b      	str	r3, [r7, #20]
			break;
 8005496:	bf00      	nop
		}
		pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8005498:	4b13      	ldr	r3, [pc, #76]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	091b      	lsrs	r3, r3, #4
 800549e:	f003 0307 	and.w	r3, r3, #7
 80054a2:	3301      	adds	r3, #1
 80054a4:	607b      	str	r3, [r7, #4]
		pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80054a6:	4b10      	ldr	r3, [pc, #64]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	0a1b      	lsrs	r3, r3, #8
 80054ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	fb03 f202 	mul.w	r2, r3, r2
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054bc:	617b      	str	r3, [r7, #20]
		pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80054be:	4b0a      	ldr	r3, [pc, #40]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	0e5b      	lsrs	r3, r3, #25
 80054c4:	f003 0303 	and.w	r3, r3, #3
 80054c8:	3301      	adds	r3, #1
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	603b      	str	r3, [r7, #0]
		sysclockfreq = pllvco / pllr;
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d6:	61bb      	str	r3, [r7, #24]
	}

	return sysclockfreq;
 80054d8:	69bb      	ldr	r3, [r7, #24]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3724      	adds	r7, #36	@ 0x24
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	40021000 	.word	0x40021000
 80054ec:	0800fbac 	.word	0x0800fbac
 80054f0:	00f42400 	.word	0x00f42400
 80054f4:	007a1200 	.word	0x007a1200

080054f8 <HAL_RCC_GetHCLKFreq>:
 *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
 * @retval HCLK frequency in Hz
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0
	return SystemCoreClock;
 80054fc:	4b03      	ldr	r3, [pc, #12]	@ (800550c <HAL_RCC_GetHCLKFreq+0x14>)
 80054fe:	681b      	ldr	r3, [r3, #0]
}
 8005500:	4618      	mov	r0, r3
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	20000028 	.word	0x20000028

08005510 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Return the PCLK1 frequency.
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency in Hz
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005514:	f7ff fff0 	bl	80054f8 <HAL_RCC_GetHCLKFreq>
 8005518:	4602      	mov	r2, r0
 800551a:	4b06      	ldr	r3, [pc, #24]	@ (8005534 <HAL_RCC_GetPCLK1Freq+0x24>)
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	0a1b      	lsrs	r3, r3, #8
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	4904      	ldr	r1, [pc, #16]	@ (8005538 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005526:	5ccb      	ldrb	r3, [r1, r3]
 8005528:	f003 031f 	and.w	r3, r3, #31
 800552c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005530:	4618      	mov	r0, r3
 8005532:	bd80      	pop	{r7, pc}
 8005534:	40021000 	.word	0x40021000
 8005538:	0800fba4 	.word	0x0800fba4

0800553c <HAL_RCC_GetPCLK2Freq>:
 * @brief  Return the PCLK2 frequency.
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency in Hz
 */
uint32_t HAL_RCC_GetPCLK2Freq(void) {
 800553c:	b580      	push	{r7, lr}
 800553e:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005540:	f7ff ffda 	bl	80054f8 <HAL_RCC_GetHCLKFreq>
 8005544:	4602      	mov	r2, r0
 8005546:	4b06      	ldr	r3, [pc, #24]	@ (8005560 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	0adb      	lsrs	r3, r3, #11
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	4904      	ldr	r1, [pc, #16]	@ (8005564 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005552:	5ccb      	ldrb	r3, [r1, r3]
 8005554:	f003 031f 	and.w	r3, r3, #31
 8005558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800555c:	4618      	mov	r0, r3
 800555e:	bd80      	pop	{r7, pc}
 8005560:	40021000 	.word	0x40021000
 8005564:	0800fba4 	.word	0x0800fba4

08005568 <RCC_SetFlashLatencyFromMSIRange>:
 * @brief  Update number of Flash wait states in line with MSI range and current
 voltage range.
 * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
 * @retval HAL status
 */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange) {
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
	uint32_t vos;
	uint32_t latency = FLASH_LATENCY_0; /* default value 0WS */
 8005570:	2300      	movs	r3, #0
 8005572:	613b      	str	r3, [r7, #16]

	if (__HAL_RCC_PWR_IS_CLK_ENABLED()) {
 8005574:	4b2a      	ldr	r3, [pc, #168]	@ (8005620 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <RCC_SetFlashLatencyFromMSIRange+0x20>
		vos = HAL_PWREx_GetVoltageRange();
 8005580:	f7ff f9b6 	bl	80048f0 <HAL_PWREx_GetVoltageRange>
 8005584:	6178      	str	r0, [r7, #20]
 8005586:	e014      	b.n	80055b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
	} else {
		__HAL_RCC_PWR_CLK_ENABLE();
 8005588:	4b25      	ldr	r3, [pc, #148]	@ (8005620 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800558a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800558c:	4a24      	ldr	r2, [pc, #144]	@ (8005620 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800558e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005592:	6593      	str	r3, [r2, #88]	@ 0x58
 8005594:	4b22      	ldr	r3, [pc, #136]	@ (8005620 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	68fb      	ldr	r3, [r7, #12]
		vos = HAL_PWREx_GetVoltageRange();
 80055a0:	f7ff f9a6 	bl	80048f0 <HAL_PWREx_GetVoltageRange>
 80055a4:	6178      	str	r0, [r7, #20]
		__HAL_RCC_PWR_CLK_DISABLE();
 80055a6:	4b1e      	ldr	r3, [pc, #120]	@ (8005620 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055aa:	4a1d      	ldr	r2, [pc, #116]	@ (8005620 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055b0:	6593      	str	r3, [r2, #88]	@ 0x58
	}

	if (vos == PWR_REGULATOR_VOLTAGE_SCALE1) {
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055b8:	d10b      	bne.n	80055d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
		if (msirange > RCC_MSIRANGE_8) {
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b80      	cmp	r3, #128	@ 0x80
 80055be:	d919      	bls.n	80055f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
			/* MSI > 16Mhz */
			if (msirange > RCC_MSIRANGE_10) {
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2ba0      	cmp	r3, #160	@ 0xa0
 80055c4:	d902      	bls.n	80055cc <RCC_SetFlashLatencyFromMSIRange+0x64>
				/* MSI 48Mhz */
				latency = FLASH_LATENCY_2; /* 2WS */
 80055c6:	2302      	movs	r3, #2
 80055c8:	613b      	str	r3, [r7, #16]
 80055ca:	e013      	b.n	80055f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
			} else {
				/* MSI 24Mhz or 32Mhz */
				latency = FLASH_LATENCY_1; /* 1WS */
 80055cc:	2301      	movs	r3, #1
 80055ce:	613b      	str	r3, [r7, #16]
 80055d0:	e010      	b.n	80055f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
		if (msirange > RCC_MSIRANGE_8) {
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b80      	cmp	r3, #128	@ 0x80
 80055d6:	d902      	bls.n	80055de <RCC_SetFlashLatencyFromMSIRange+0x76>
			/* MSI > 16Mhz */
			latency = FLASH_LATENCY_3; /* 3WS */
 80055d8:	2303      	movs	r3, #3
 80055da:	613b      	str	r3, [r7, #16]
 80055dc:	e00a      	b.n	80055f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
		} else {
			if (msirange == RCC_MSIRANGE_8) {
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b80      	cmp	r3, #128	@ 0x80
 80055e2:	d102      	bne.n	80055ea <RCC_SetFlashLatencyFromMSIRange+0x82>
				/* MSI 16Mhz */
				latency = FLASH_LATENCY_2; /* 2WS */
 80055e4:	2302      	movs	r3, #2
 80055e6:	613b      	str	r3, [r7, #16]
 80055e8:	e004      	b.n	80055f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
			} else if (msirange == RCC_MSIRANGE_7) {
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b70      	cmp	r3, #112	@ 0x70
 80055ee:	d101      	bne.n	80055f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
				/* MSI 8Mhz */
				latency = FLASH_LATENCY_1; /* 1WS */
 80055f0:	2301      	movs	r3, #1
 80055f2:	613b      	str	r3, [r7, #16]
			/* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
		}
#endif
	}

	__HAL_FLASH_SET_LATENCY(latency);
 80055f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005624 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f023 0207 	bic.w	r2, r3, #7
 80055fc:	4909      	ldr	r1, [pc, #36]	@ (8005624 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	4313      	orrs	r3, r2
 8005602:	600b      	str	r3, [r1, #0]

	/* Check that the new number of wait states is taken into account to access the Flash
	 memory by reading the FLASH_ACR register */
	if (__HAL_FLASH_GET_LATENCY() != latency) {
 8005604:	4b07      	ldr	r3, [pc, #28]	@ (8005624 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0307 	and.w	r3, r3, #7
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	429a      	cmp	r2, r3
 8005610:	d001      	beq.n	8005616 <RCC_SetFlashLatencyFromMSIRange+0xae>
		return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e000      	b.n	8005618 <RCC_SetFlashLatencyFromMSIRange+0xb0>
	}

	return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	40021000 	.word	0x40021000
 8005624:	40022000 	.word	0x40022000

08005628 <HAL_RCCEx_PeriphCLKConfig>:
 * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
 *         the RTC clock source: in this case the access to Backup domain is enabled.
 *
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef *PeriphClkInit) {
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
	uint32_t tmpregister, tickstart; /* no init needed */
	HAL_StatusTypeDef ret = HAL_OK; /* Intermediate status */
 8005630:	2300      	movs	r3, #0
 8005632:	74fb      	strb	r3, [r7, #19]
	HAL_StatusTypeDef status = HAL_OK; /* Final status */
 8005634:	2300      	movs	r3, #0
 8005636:	74bb      	strb	r3, [r7, #18]
	assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

	/*-------------------------- SAI1 clock source configuration ---------------------*/
	if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)) {
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005640:	2b00      	cmp	r3, #0
 8005642:	d031      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
		/* Check the parameters */
		assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

		switch (PeriphClkInit->Sai1ClockSelection) {
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005648:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800564c:	d01a      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800564e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005652:	d814      	bhi.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005654:	2b00      	cmp	r3, #0
 8005656:	d009      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005658:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800565c:	d10f      	bne.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x56>
		case RCC_SAI1CLKSOURCE_PLL: /* PLL is used as clock source for SAI1*/
			/* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
			__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800565e:	4b5d      	ldr	r3, [pc, #372]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	4a5c      	ldr	r2, [pc, #368]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005668:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
			/* SAI1 clock source config set later after clock selection check */
			break;
 800566a:	e00c      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x5e>

		case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1*/
			/* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
			ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	3304      	adds	r3, #4
 8005670:	2100      	movs	r1, #0
 8005672:	4618      	mov	r0, r3
 8005674:	f000 fdbc 	bl	80061f0 <RCCEx_PLLSAI1_Config>
 8005678:	4603      	mov	r3, r0
 800567a:	74fb      	strb	r3, [r7, #19]
			/* SAI1 clock source config set later after clock selection check */
			break;
 800567c:	e003      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
			/* SAI1 clock source config set later after clock selection check */
			break;

		default:
			ret = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	74fb      	strb	r3, [r7, #19]
			break;
 8005682:	e000      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x5e>
			break;
 8005684:	bf00      	nop
		}

		if (ret == HAL_OK) {
 8005686:	7cfb      	ldrb	r3, [r7, #19]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10b      	bne.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
			/* Set the source of SAI1 clock*/
			__HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800568c:	4b51      	ldr	r3, [pc, #324]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800568e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005692:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800569a:	494e      	ldr	r1, [pc, #312]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800569c:	4313      	orrs	r3, r2
 800569e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80056a2:	e001      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
		} else {
			/* set overall return value */
			status = ret;
 80056a4:	7cfb      	ldrb	r3, [r7, #19]
 80056a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

	/*-------------------------- RTC clock source configuration ----------------------*/
	if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) {
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 809e 	beq.w	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
		FlagStatus pwrclkchanged = RESET;
 80056b6:	2300      	movs	r3, #0
 80056b8:	747b      	strb	r3, [r7, #17]

		/* Check for RTC Parameters used to output RTCCLK */
		assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

		/* Enable Power Clock */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U) {
 80056ba:	4b46      	ldr	r3, [pc, #280]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80056c6:	2301      	movs	r3, #1
 80056c8:	e000      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80056ca:	2300      	movs	r3, #0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00d      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xc4>
			__HAL_RCC_PWR_CLK_ENABLE();
 80056d0:	4b40      	ldr	r3, [pc, #256]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056d4:	4a3f      	ldr	r2, [pc, #252]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056da:	6593      	str	r3, [r2, #88]	@ 0x58
 80056dc:	4b3d      	ldr	r3, [pc, #244]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056e4:	60bb      	str	r3, [r7, #8]
 80056e6:	68bb      	ldr	r3, [r7, #8]
			pwrclkchanged = SET;
 80056e8:	2301      	movs	r3, #1
 80056ea:	747b      	strb	r3, [r7, #17]
		}

		/* Enable write access to Backup domain */
		SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056ec:	4b3a      	ldr	r3, [pc, #232]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a39      	ldr	r2, [pc, #228]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80056f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056f6:	6013      	str	r3, [r2, #0]

		/* Wait for Backup domain Write protection disable */
		tickstart = HAL_GetTick();
 80056f8:	f7fe fb22 	bl	8003d40 <HAL_GetTick>
 80056fc:	60f8      	str	r0, [r7, #12]

		while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U) {
 80056fe:	e009      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xec>
			if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8005700:	f7fe fb1e 	bl	8003d40 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d902      	bls.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xec>
				ret = HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	74fb      	strb	r3, [r7, #19]
				break;
 8005712:	e005      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xf8>
		while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U) {
 8005714:	4b30      	ldr	r3, [pc, #192]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800571c:	2b00      	cmp	r3, #0
 800571e:	d0ef      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xd8>
			}
		}

		if (ret == HAL_OK) {
 8005720:	7cfb      	ldrb	r3, [r7, #19]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d15a      	bne.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
			/* Reset the Backup domain only if the RTC Clock source selection is modified from default */
			tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005726:	4b2b      	ldr	r3, [pc, #172]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800572c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005730:	617b      	str	r3, [r7, #20]

			if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection)) {
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d01e      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	429a      	cmp	r2, r3
 8005740:	d019      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x14e>
				/* Store the content of BDCR register before the reset of Backup Domain */
				tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005742:	4b24      	ldr	r3, [pc, #144]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005748:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800574c:	617b      	str	r3, [r7, #20]
				/* RTC Clock selection can be changed only if the Backup Domain is reset */
				__HAL_RCC_BACKUPRESET_FORCE();
 800574e:	4b21      	ldr	r3, [pc, #132]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005754:	4a1f      	ldr	r2, [pc, #124]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005756:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800575a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
				__HAL_RCC_BACKUPRESET_RELEASE();
 800575e:	4b1d      	ldr	r3, [pc, #116]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005764:	4a1b      	ldr	r2, [pc, #108]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005766:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800576a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
				/* Restore the Content of BDCR register */
				RCC->BDCR = tmpregister;
 800576e:	4a19      	ldr	r2, [pc, #100]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
			}

			/* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
			if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON)) {
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	d016      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x186>
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8005780:	f7fe fade 	bl	8003d40 <HAL_GetTick>
 8005784:	60f8      	str	r0, [r7, #12]

				/* Wait till LSE is ready */
				while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U) {
 8005786:	e00b      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
					if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8005788:	f7fe fada 	bl	8003d40 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005796:	4293      	cmp	r3, r2
 8005798:	d902      	bls.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
						ret = HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	74fb      	strb	r3, [r7, #19]
						break;
 800579e:	e006      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x186>
				while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U) {
 80057a0:	4b0c      	ldr	r3, [pc, #48]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0ec      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x160>
					}
				}
			}

			if (ret == HAL_OK) {
 80057ae:	7cfb      	ldrb	r3, [r7, #19]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10b      	bne.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
				/* Apply new RTC clock source selection */
				__HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057b4:	4b07      	ldr	r3, [pc, #28]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057c2:	4904      	ldr	r1, [pc, #16]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80057ca:	e009      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
			} else {
				/* set overall return value */
				status = ret;
 80057cc:	7cfb      	ldrb	r3, [r7, #19]
 80057ce:	74bb      	strb	r3, [r7, #18]
 80057d0:	e006      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80057d2:	bf00      	nop
 80057d4:	40021000 	.word	0x40021000
 80057d8:	40007000 	.word	0x40007000
			}
		} else {
			/* set overall return value */
			status = ret;
 80057dc:	7cfb      	ldrb	r3, [r7, #19]
 80057de:	74bb      	strb	r3, [r7, #18]
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET) {
 80057e0:	7c7b      	ldrb	r3, [r7, #17]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d105      	bne.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
			__HAL_RCC_PWR_CLK_DISABLE();
 80057e6:	4b8a      	ldr	r3, [pc, #552]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057ea:	4a89      	ldr	r2, [pc, #548]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057f0:	6593      	str	r3, [r2, #88]	@ 0x58
		}
	}

	/*-------------------------- USART1 clock source configuration -------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1) {
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
		/* Check the parameters */
		assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

		/* Configure the USART1 clock source */
		__HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057fe:	4b84      	ldr	r3, [pc, #528]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005804:	f023 0203 	bic.w	r2, r3, #3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	4980      	ldr	r1, [pc, #512]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800580e:	4313      	orrs	r3, r2
 8005810:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
	}

	/*-------------------------- USART2 clock source configuration -------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2) {
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00a      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x20e>
		/* Check the parameters */
		assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

		/* Configure the USART2 clock source */
		__HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005820:	4b7b      	ldr	r3, [pc, #492]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005826:	f023 020c 	bic.w	r2, r3, #12
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582e:	4978      	ldr	r1, [pc, #480]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005830:	4313      	orrs	r3, r2
 8005832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

	/*-------------------------- LPUART1 clock source configuration ------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1) {
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0320 	and.w	r3, r3, #32
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x230>
		/* Check the parameters */
		assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

		/* Configure the LPUART1 clock source */
		__HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005842:	4b73      	ldr	r3, [pc, #460]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005848:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005850:	496f      	ldr	r1, [pc, #444]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005852:	4313      	orrs	r3, r2
 8005854:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
	}

	/*-------------------------- LPTIM1 clock source configuration -------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1)) {
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00a      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x252>
		assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
		__HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005864:	4b6a      	ldr	r3, [pc, #424]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800586a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005872:	4967      	ldr	r1, [pc, #412]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005874:	4313      	orrs	r3, r2
 8005876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
	}

	/*-------------------------- LPTIM2 clock source configuration -------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2)) {
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x274>
		assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
		__HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005886:	4b62      	ldr	r3, [pc, #392]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800588c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005894:	495e      	ldr	r1, [pc, #376]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005896:	4313      	orrs	r3, r2
 8005898:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
	}

	/*-------------------------- I2C1 clock source configuration ---------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1) {
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00a      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x296>
		/* Check the parameters */
		assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

		/* Configure the I2C1 clock source */
		__HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058a8:	4b59      	ldr	r3, [pc, #356]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ae:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b6:	4956      	ldr	r1, [pc, #344]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

	/*-------------------------- I2C3 clock source configuration ---------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3) {
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
		/* Check the parameters */
		assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

		/* Configure the I2C3 clock source */
		__HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058ca:	4b51      	ldr	r3, [pc, #324]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d8:	494d      	ldr	r1, [pc, #308]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

	/*-------------------------- USB clock source configuration ----------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB)) {
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d028      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x316>
		assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
		__HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058ec:	4b48      	ldr	r3, [pc, #288]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fa:	4945      	ldr	r1, [pc, #276]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

		if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL) {
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005906:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800590a:	d106      	bne.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
			/* Enable PLL48M1CLK output clock */
			__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800590c:	4b40      	ldr	r3, [pc, #256]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	4a3f      	ldr	r2, [pc, #252]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005912:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005916:	60d3      	str	r3, [r2, #12]
 8005918:	e011      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x316>
		} else {
#if defined(RCC_PLLSAI1_SUPPORT)
			if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1) {
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800591e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005922:	d10c      	bne.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x316>
				/* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
				ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3304      	adds	r3, #4
 8005928:	2101      	movs	r1, #1
 800592a:	4618      	mov	r0, r3
 800592c:	f000 fc60 	bl	80061f0 <RCCEx_PLLSAI1_Config>
 8005930:	4603      	mov	r3, r0
 8005932:	74fb      	strb	r3, [r7, #19]

				if (ret != HAL_OK) {
 8005934:	7cfb      	ldrb	r3, [r7, #19]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x316>
					/* set overall return value */
					status = ret;
 800593a:	7cfb      	ldrb	r3, [r7, #19]
 800593c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

	/*-------------------------- RNG clock source configuration ----------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG)) {
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d028      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x374>
		assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
		__HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800594a:	4b31      	ldr	r3, [pc, #196]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800594c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005950:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005958:	492d      	ldr	r1, [pc, #180]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800595a:	4313      	orrs	r3, r2
 800595c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

		if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL) {
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005964:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005968:	d106      	bne.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x350>
			/* Enable PLL48M1CLK output clock */
			__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800596a:	4b29      	ldr	r3, [pc, #164]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	4a28      	ldr	r2, [pc, #160]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005970:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005974:	60d3      	str	r3, [r2, #12]
 8005976:	e011      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x374>
		}
#if defined(RCC_PLLSAI1_SUPPORT)
		else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1) {
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800597c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005980:	d10c      	bne.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x374>
			/* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
			ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	3304      	adds	r3, #4
 8005986:	2101      	movs	r1, #1
 8005988:	4618      	mov	r0, r3
 800598a:	f000 fc31 	bl	80061f0 <RCCEx_PLLSAI1_Config>
 800598e:	4603      	mov	r3, r0
 8005990:	74fb      	strb	r3, [r7, #19]

			if (ret != HAL_OK) {
 8005992:	7cfb      	ldrb	r3, [r7, #19]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x374>
				/* set overall return value */
				status = ret;
 8005998:	7cfb      	ldrb	r3, [r7, #19]
 800599a:	74bb      	strb	r3, [r7, #18]
		}
	}

	/*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC) {
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d01c      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
		/* Check the parameters */
		assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

		/* Configure the ADC interface clock source */
		__HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059a8:	4b19      	ldr	r3, [pc, #100]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059b6:	4916      	ldr	r1, [pc, #88]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
		if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1) {
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059c6:	d10c      	bne.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
			/* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
			ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	3304      	adds	r3, #4
 80059cc:	2102      	movs	r1, #2
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 fc0e 	bl	80061f0 <RCCEx_PLLSAI1_Config>
 80059d4:	4603      	mov	r3, r0
 80059d6:	74fb      	strb	r3, [r7, #19]

			if (ret != HAL_OK) {
 80059d8:	7cfb      	ldrb	r3, [r7, #19]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
				/* set overall return value */
				status = ret;
 80059de:	7cfb      	ldrb	r3, [r7, #19]
 80059e0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

	/*-------------------------- SWPMI1 clock source configuration -------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1) {
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
		/* Check the parameters */
		assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

		/* Configure the SWPMI1 clock source */
		__HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80059ee:	4b08      	ldr	r3, [pc, #32]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059f4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059fc:	4904      	ldr	r1, [pc, #16]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

	return status;
 8005a04:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3718      	adds	r7, #24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	40021000 	.word	0x40021000

08005a14 <HAL_RCCEx_GetPeriphCLKFreq>:
 *            @arg @ref RCC_PERIPHCLK_DSI  DSI peripheral clock (only for devices with DSI)
 *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
 @endif
 * @retval Frequency in Hz
 */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk) {
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b088      	sub	sp, #32
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
	uint32_t frequency = 0U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	61fb      	str	r3, [r7, #28]
#endif

	/* Check the parameters */
	assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

	if (PeriphClk == RCC_PERIPHCLK_RTC) {
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a26:	d13a      	bne.n	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
		/* Get the current RTC source */
		srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005a28:	4b9a      	ldr	r3, [pc, #616]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a32:	613b      	str	r3, [r7, #16]

		switch (srcclk) {
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a3a:	d025      	beq.n	8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a42:	f200 83b2 	bhi.w	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a4c:	d004      	beq.n	8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a54:	d00c      	beq.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
				frequency = HSE_VALUE / 32U;
			}
			break;
		default:
			/* No clock source, frequency default init at 0 */
			break;
 8005a56:	e3a8      	b.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0x796>
			if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) {
 8005a58:	4b8e      	ldr	r3, [pc, #568]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	f040 83a3 	bne.w	80061ae <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
				frequency = LSE_VALUE;
 8005a68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a6c:	61fb      	str	r3, [r7, #28]
			break;
 8005a6e:	e39e      	b.n	80061ae <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
			if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) {
 8005a70:	4b88      	ldr	r3, [pc, #544]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	f040 8399 	bne.w	80061b2 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
					frequency = LSI_VALUE;
 8005a80:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005a84:	61fb      	str	r3, [r7, #28]
			break;
 8005a86:	e394      	b.n	80061b2 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
			if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) {
 8005a88:	4b82      	ldr	r3, [pc, #520]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a94:	f040 8394 	bne.w	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
				frequency = HSE_VALUE / 32U;
 8005a98:	4b7f      	ldr	r3, [pc, #508]	@ (8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005a9a:	61fb      	str	r3, [r7, #28]
			break;
 8005a9c:	e390      	b.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
		}
	} else {
		/* Other external peripheral clock source than RTC */
		pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a9e:	4b7d      	ldr	r3, [pc, #500]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	617b      	str	r3, [r7, #20]

		/* Compute PLL clock input */
		switch (pll_oscsource) {
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	2b03      	cmp	r3, #3
 8005aac:	d036      	beq.n	8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2b03      	cmp	r3, #3
 8005ab2:	d840      	bhi.n	8005b36 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d003      	beq.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d020      	beq.n	8005b02 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8005ac0:	e039      	b.n	8005b36 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
		case RCC_PLLSOURCE_MSI: /* MSI ? */
			if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY)) {
 8005ac2:	4b74      	ldr	r3, [pc, #464]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d116      	bne.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
				/*MSI frequency range in HZ*/
				pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005ace:	4b71      	ldr	r3, [pc, #452]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0308 	and.w	r3, r3, #8
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d005      	beq.n	8005ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8005ada:	4b6e      	ldr	r3, [pc, #440]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	091b      	lsrs	r3, r3, #4
 8005ae0:	f003 030f 	and.w	r3, r3, #15
 8005ae4:	e005      	b.n	8005af2 <HAL_RCCEx_GetPeriphCLKFreq+0xde>
 8005ae6:	4b6b      	ldr	r3, [pc, #428]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005aec:	0a1b      	lsrs	r3, r3, #8
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	4a6a      	ldr	r2, [pc, #424]	@ (8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005af8:	61bb      	str	r3, [r7, #24]
			} else {
				pllvco = 0U;
			}
			break;
 8005afa:	e01f      	b.n	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
				pllvco = 0U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	61bb      	str	r3, [r7, #24]
			break;
 8005b00:	e01c      	b.n	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
		case RCC_PLLSOURCE_HSI: /* HSI ? */
			if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) {
 8005b02:	4b64      	ldr	r3, [pc, #400]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b0e:	d102      	bne.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
				pllvco = HSI_VALUE;
 8005b10:	4b63      	ldr	r3, [pc, #396]	@ (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005b12:	61bb      	str	r3, [r7, #24]
			} else {
				pllvco = 0U;
			}
			break;
 8005b14:	e012      	b.n	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
				pllvco = 0U;
 8005b16:	2300      	movs	r3, #0
 8005b18:	61bb      	str	r3, [r7, #24]
			break;
 8005b1a:	e00f      	b.n	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
		case RCC_PLLSOURCE_HSE: /* HSE ? */
			if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) {
 8005b1c:	4b5d      	ldr	r3, [pc, #372]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b28:	d102      	bne.n	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
				pllvco = HSE_VALUE;
 8005b2a:	4b5e      	ldr	r3, [pc, #376]	@ (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b2c:	61bb      	str	r3, [r7, #24]
			} else {
				pllvco = 0U;
			}
			break;
 8005b2e:	e005      	b.n	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
				pllvco = 0U;
 8005b30:	2300      	movs	r3, #0
 8005b32:	61bb      	str	r3, [r7, #24]
			break;
 8005b34:	e002      	b.n	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
		default:
			/* No source */
			pllvco = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	61bb      	str	r3, [r7, #24]
			break;
 8005b3a:	bf00      	nop
		}

		switch (PeriphClk) {
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b42:	d068      	beq.n	8005c16 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b4a:	f200 833b 	bhi.w	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b54:	f000 830c 	beq.w	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b5e:	f200 8331 	bhi.w	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b68:	f000 81ce 	beq.w	8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b72:	f200 8327 	bhi.w	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b7c:	d04b      	beq.n	8005c16 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b84:	f200 831e 	bhi.w	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b8e:	d03b      	beq.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b96:	f200 8315 	bhi.w	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ba0:	f000 829c 	beq.w	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005baa:	f200 830b 	bhi.w	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bb4:	f000 8248 	beq.w	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bbe:	f200 8301 	bhi.w	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bc8:	f000 8212 	beq.w	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bd2:	f200 82f7 	bhi.w	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b40      	cmp	r3, #64	@ 0x40
 8005bda:	f000 81dd 	beq.w	8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b40      	cmp	r3, #64	@ 0x40
 8005be2:	f200 82ef 	bhi.w	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b20      	cmp	r3, #32
 8005bea:	f000 814c 	beq.w	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b20      	cmp	r3, #32
 8005bf2:	f200 82e7 	bhi.w	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	f000 80c3 	beq.w	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	f000 80f6 	beq.w	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

		default:
			break;
 8005c06:	e2dd      	b.n	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
			frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005c08:	69b9      	ldr	r1, [r7, #24]
 8005c0a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005c0e:	f000 fbe1 	bl	80063d4 <RCCEx_GetSAIxPeriphCLKFreq>
 8005c12:	61f8      	str	r0, [r7, #28]
			break;
 8005c14:	e2d7      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
			srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005c16:	4b1f      	ldr	r3, [pc, #124]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c1c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005c20:	613b      	str	r3, [r7, #16]
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005c28:	d016      	beq.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005c30:	f200 809e 	bhi.w	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c3a:	d035      	beq.n	8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c42:	f200 8095 	bhi.w	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f000 8087 	beq.w	8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c54:	d055      	beq.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
				break;
 8005c56:	e08b      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
				if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY)) {
 8005c58:	4b0e      	ldr	r3, [pc, #56]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	f040 8087 	bne.w	8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
					frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005c66:	4b0b      	ldr	r3, [pc, #44]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0308 	and.w	r3, r3, #8
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d005      	beq.n	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005c72:	4b08      	ldr	r3, [pc, #32]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	091b      	lsrs	r3, r3, #4
 8005c78:	f003 030f 	and.w	r3, r3, #15
 8005c7c:	e005      	b.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8005c7e:	4b05      	ldr	r3, [pc, #20]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c84:	0a1b      	lsrs	r3, r3, #8
 8005c86:	f003 030f 	and.w	r3, r3, #15
 8005c8a:	4a04      	ldr	r2, [pc, #16]	@ (8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c90:	61fb      	str	r3, [r7, #28]
				break;
 8005c92:	e06f      	b.n	8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8005c94:	40021000 	.word	0x40021000
 8005c98:	0003d090 	.word	0x0003d090
 8005c9c:	0800fbac 	.word	0x0800fbac
 8005ca0:	00f42400 	.word	0x00f42400
 8005ca4:	007a1200 	.word	0x007a1200
				if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)) {
 8005ca8:	4ba0      	ldr	r3, [pc, #640]	@ (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005cb4:	d160      	bne.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
					if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN)) {
 8005cb6:	4b9d      	ldr	r3, [pc, #628]	@ (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005cbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cc2:	d159      	bne.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
						plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005cc4:	4b99      	ldr	r3, [pc, #612]	@ (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	0a1b      	lsrs	r3, r3, #8
 8005cca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cce:	60fb      	str	r3, [r7, #12]
						pllvco = ((pllvco * plln)
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	fb03 f202 	mul.w	r2, r3, r2
								/ ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005cd8:	4b94      	ldr	r3, [pc, #592]	@ (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	091b      	lsrs	r3, r3, #4
 8005cde:	f003 0307 	and.w	r3, r3, #7
 8005ce2:	3301      	adds	r3, #1
						pllvco = ((pllvco * plln)
 8005ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce8:	61bb      	str	r3, [r7, #24]
								/ (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005cea:	4b90      	ldr	r3, [pc, #576]	@ (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	0d5b      	lsrs	r3, r3, #21
 8005cf0:	f003 0303 	and.w	r3, r3, #3
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	005b      	lsls	r3, r3, #1
						frequency = (pllvco
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfe:	61fb      	str	r3, [r7, #28]
				break;
 8005d00:	e03a      	b.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
				if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY)) {
 8005d02:	4b8a      	ldr	r3, [pc, #552]	@ (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d0e:	d135      	bne.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x368>
					if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN)) {
 8005d10:	4b86      	ldr	r3, [pc, #536]	@ (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d1c:	d12e      	bne.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x368>
						plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005d1e:	4b83      	ldr	r3, [pc, #524]	@ (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	0a1b      	lsrs	r3, r3, #8
 8005d24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d28:	60fb      	str	r3, [r7, #12]
						pllvco = ((pllvco * plln)
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	fb03 f202 	mul.w	r2, r3, r2
								/ ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005d32:	4b7e      	ldr	r3, [pc, #504]	@ (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	091b      	lsrs	r3, r3, #4
 8005d38:	f003 0307 	and.w	r3, r3, #7
 8005d3c:	3301      	adds	r3, #1
						pllvco = ((pllvco * plln)
 8005d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d42:	61bb      	str	r3, [r7, #24]
								/ (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q)
 8005d44:	4b79      	ldr	r3, [pc, #484]	@ (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005d46:	691b      	ldr	r3, [r3, #16]
										>> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005d48:	0d5b      	lsrs	r3, r3, #21
 8005d4a:	f003 0303 	and.w	r3, r3, #3
 8005d4e:	3301      	adds	r3, #1
 8005d50:	005b      	lsls	r3, r3, #1
						frequency = (pllvco
 8005d52:	69ba      	ldr	r2, [r7, #24]
 8005d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d58:	61fb      	str	r3, [r7, #28]
				break;
 8005d5a:	e00f      	b.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x368>
				if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005d5c:	4b73      	ldr	r3, [pc, #460]	@ (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005d5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d10a      	bne.n	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
					frequency = HSI48_VALUE;
 8005d6a:	4b71      	ldr	r3, [pc, #452]	@ (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8005d6c:	61fb      	str	r3, [r7, #28]
				break;
 8005d6e:	e007      	b.n	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
				break;
 8005d70:	bf00      	nop
 8005d72:	e228      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 8005d74:	bf00      	nop
 8005d76:	e226      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 8005d78:	bf00      	nop
 8005d7a:	e224      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 8005d7c:	bf00      	nop
 8005d7e:	e222      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 8005d80:	bf00      	nop
			break;
 8005d82:	e220      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
			srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005d84:	4b69      	ldr	r3, [pc, #420]	@ (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d8a:	f003 0303 	and.w	r3, r3, #3
 8005d8e:	613b      	str	r3, [r7, #16]
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	2b03      	cmp	r3, #3
 8005d94:	d827      	bhi.n	8005de6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8005d96:	a201      	add	r2, pc, #4	@ (adr r2, 8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 8005d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9c:	08005dad 	.word	0x08005dad
 8005da0:	08005db5 	.word	0x08005db5
 8005da4:	08005dbd 	.word	0x08005dbd
 8005da8:	08005dd1 	.word	0x08005dd1
				frequency = HAL_RCC_GetPCLK2Freq();
 8005dac:	f7ff fbc6 	bl	800553c <HAL_RCC_GetPCLK2Freq>
 8005db0:	61f8      	str	r0, [r7, #28]
				break;
 8005db2:	e01d      	b.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
				frequency = HAL_RCC_GetSysClockFreq();
 8005db4:	f7ff fb14 	bl	80053e0 <HAL_RCC_GetSysClockFreq>
 8005db8:	61f8      	str	r0, [r7, #28]
				break;
 8005dba:	e019      	b.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
				if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) {
 8005dbc:	4b5b      	ldr	r3, [pc, #364]	@ (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dc8:	d10f      	bne.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
					frequency = HSI_VALUE;
 8005dca:	4b5a      	ldr	r3, [pc, #360]	@ (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8005dcc:	61fb      	str	r3, [r7, #28]
				break;
 8005dce:	e00c      	b.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
				if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) {
 8005dd0:	4b56      	ldr	r3, [pc, #344]	@ (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d107      	bne.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
					frequency = LSE_VALUE;
 8005dde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005de2:	61fb      	str	r3, [r7, #28]
				break;
 8005de4:	e003      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
				break;
 8005de6:	bf00      	nop
 8005de8:	e1ed      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 8005dea:	bf00      	nop
 8005dec:	e1eb      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 8005dee:	bf00      	nop
			break;
 8005df0:	e1e9      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
			srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005df2:	4b4e      	ldr	r3, [pc, #312]	@ (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005df8:	f003 030c 	and.w	r3, r3, #12
 8005dfc:	613b      	str	r3, [r7, #16]
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	2b0c      	cmp	r3, #12
 8005e02:	d83a      	bhi.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005e04:	a201      	add	r2, pc, #4	@ (adr r2, 8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>)
 8005e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0a:	bf00      	nop
 8005e0c:	08005e41 	.word	0x08005e41
 8005e10:	08005e7b 	.word	0x08005e7b
 8005e14:	08005e7b 	.word	0x08005e7b
 8005e18:	08005e7b 	.word	0x08005e7b
 8005e1c:	08005e49 	.word	0x08005e49
 8005e20:	08005e7b 	.word	0x08005e7b
 8005e24:	08005e7b 	.word	0x08005e7b
 8005e28:	08005e7b 	.word	0x08005e7b
 8005e2c:	08005e51 	.word	0x08005e51
 8005e30:	08005e7b 	.word	0x08005e7b
 8005e34:	08005e7b 	.word	0x08005e7b
 8005e38:	08005e7b 	.word	0x08005e7b
 8005e3c:	08005e65 	.word	0x08005e65
				frequency = HAL_RCC_GetPCLK1Freq();
 8005e40:	f7ff fb66 	bl	8005510 <HAL_RCC_GetPCLK1Freq>
 8005e44:	61f8      	str	r0, [r7, #28]
				break;
 8005e46:	e01d      	b.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
				frequency = HAL_RCC_GetSysClockFreq();
 8005e48:	f7ff faca 	bl	80053e0 <HAL_RCC_GetSysClockFreq>
 8005e4c:	61f8      	str	r0, [r7, #28]
				break;
 8005e4e:	e019      	b.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
				if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) {
 8005e50:	4b36      	ldr	r3, [pc, #216]	@ (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e5c:	d10f      	bne.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
					frequency = HSI_VALUE;
 8005e5e:	4b35      	ldr	r3, [pc, #212]	@ (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8005e60:	61fb      	str	r3, [r7, #28]
				break;
 8005e62:	e00c      	b.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
				if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) {
 8005e64:	4b31      	ldr	r3, [pc, #196]	@ (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d107      	bne.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
					frequency = LSE_VALUE;
 8005e72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e76:	61fb      	str	r3, [r7, #28]
				break;
 8005e78:	e003      	b.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
				break;
 8005e7a:	bf00      	nop
 8005e7c:	e1a3      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 8005e7e:	bf00      	nop
 8005e80:	e1a1      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 8005e82:	bf00      	nop
			break;
 8005e84:	e19f      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
			srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005e86:	4b29      	ldr	r3, [pc, #164]	@ (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e8c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e90:	613b      	str	r3, [r7, #16]
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e98:	d025      	beq.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ea0:	d82c      	bhi.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ea8:	d013      	beq.n	8005ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005eb0:	d824      	bhi.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d004      	beq.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ebe:	d004      	beq.n	8005eca <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
				break;
 8005ec0:	e01c      	b.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
				frequency = HAL_RCC_GetPCLK1Freq();
 8005ec2:	f7ff fb25 	bl	8005510 <HAL_RCC_GetPCLK1Freq>
 8005ec6:	61f8      	str	r0, [r7, #28]
				break;
 8005ec8:	e01d      	b.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
				frequency = HAL_RCC_GetSysClockFreq();
 8005eca:	f7ff fa89 	bl	80053e0 <HAL_RCC_GetSysClockFreq>
 8005ece:	61f8      	str	r0, [r7, #28]
				break;
 8005ed0:	e019      	b.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
				if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) {
 8005ed2:	4b16      	ldr	r3, [pc, #88]	@ (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005eda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ede:	d10f      	bne.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
					frequency = HSI_VALUE;
 8005ee0:	4b14      	ldr	r3, [pc, #80]	@ (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8005ee2:	61fb      	str	r3, [r7, #28]
				break;
 8005ee4:	e00c      	b.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
				if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) {
 8005ee6:	4b11      	ldr	r3, [pc, #68]	@ (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eec:	f003 0302 	and.w	r3, r3, #2
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d107      	bne.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
					frequency = LSE_VALUE;
 8005ef4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ef8:	61fb      	str	r3, [r7, #28]
				break;
 8005efa:	e003      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
				break;
 8005efc:	bf00      	nop
 8005efe:	e162      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 8005f00:	bf00      	nop
 8005f02:	e160      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 8005f04:	bf00      	nop
			break;
 8005f06:	e15e      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
			srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005f08:	4b08      	ldr	r3, [pc, #32]	@ (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005f12:	613b      	str	r3, [r7, #16]
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f1a:	d00d      	beq.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005f22:	d135      	bne.n	8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
				frequency = HAL_RCC_GetSysClockFreq();
 8005f24:	f7ff fa5c 	bl	80053e0 <HAL_RCC_GetSysClockFreq>
 8005f28:	61f8      	str	r0, [r7, #28]
				break;
 8005f2a:	e034      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x582>
 8005f2c:	40021000 	.word	0x40021000
 8005f30:	02dc6c00 	.word	0x02dc6c00
 8005f34:	00f42400 	.word	0x00f42400
				if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY)
 8005f38:	4b9f      	ldr	r3, [pc, #636]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f44:	d126      	bne.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
						&& (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)) {
 8005f46:	4b9c      	ldr	r3, [pc, #624]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d020      	beq.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
					plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005f52:	4b99      	ldr	r3, [pc, #612]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	0a1b      	lsrs	r3, r3, #8
 8005f58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f5c:	60fb      	str	r3, [r7, #12]
					pllvco = ((pllvco * plln)
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	fb03 f202 	mul.w	r2, r3, r2
							/ ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005f66:	4b94      	ldr	r3, [pc, #592]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	091b      	lsrs	r3, r3, #4
 8005f6c:	f003 0307 	and.w	r3, r3, #7
 8005f70:	3301      	adds	r3, #1
					pllvco = ((pllvco * plln)
 8005f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f76:	61bb      	str	r3, [r7, #24]
							/ (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos)
 8005f78:	4b8f      	ldr	r3, [pc, #572]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	0e5b      	lsrs	r3, r3, #25
 8005f7e:	f003 0303 	and.w	r3, r3, #3
									+ 1U) << 1U));
 8005f82:	3301      	adds	r3, #1
 8005f84:	005b      	lsls	r3, r3, #1
					frequency = (pllvco
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f8c:	61fb      	str	r3, [r7, #28]
				break;
 8005f8e:	e001      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
				break;
 8005f90:	bf00      	nop
 8005f92:	e118      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 8005f94:	bf00      	nop
			break;
 8005f96:	e116      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
			srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005f98:	4b87      	ldr	r3, [pc, #540]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8005f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f9e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005fa2:	613b      	str	r3, [r7, #16]
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005faa:	d013      	beq.n	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fb2:	d819      	bhi.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d004      	beq.n	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fc0:	d004      	beq.n	8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
				break;
 8005fc2:	e011      	b.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
				frequency = HAL_RCC_GetPCLK1Freq();
 8005fc4:	f7ff faa4 	bl	8005510 <HAL_RCC_GetPCLK1Freq>
 8005fc8:	61f8      	str	r0, [r7, #28]
				break;
 8005fca:	e010      	b.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
				frequency = HAL_RCC_GetSysClockFreq();
 8005fcc:	f7ff fa08 	bl	80053e0 <HAL_RCC_GetSysClockFreq>
 8005fd0:	61f8      	str	r0, [r7, #28]
				break;
 8005fd2:	e00c      	b.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
				if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) {
 8005fd4:	4b78      	ldr	r3, [pc, #480]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fe0:	d104      	bne.n	8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
					frequency = HSI_VALUE;
 8005fe2:	4b76      	ldr	r3, [pc, #472]	@ (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005fe4:	61fb      	str	r3, [r7, #28]
				break;
 8005fe6:	e001      	b.n	8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
				break;
 8005fe8:	bf00      	nop
 8005fea:	e0ec      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 8005fec:	bf00      	nop
			break;
 8005fee:	e0ea      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
			srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005ff0:	4b71      	ldr	r3, [pc, #452]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8005ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ff6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ffa:	613b      	str	r3, [r7, #16]
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006002:	d013      	beq.n	800602c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800600a:	d819      	bhi.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d004      	beq.n	800601c <HAL_RCCEx_GetPeriphCLKFreq+0x608>
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006018:	d004      	beq.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x610>
				break;
 800601a:	e011      	b.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
				frequency = HAL_RCC_GetPCLK1Freq();
 800601c:	f7ff fa78 	bl	8005510 <HAL_RCC_GetPCLK1Freq>
 8006020:	61f8      	str	r0, [r7, #28]
				break;
 8006022:	e010      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x632>
				frequency = HAL_RCC_GetSysClockFreq();
 8006024:	f7ff f9dc 	bl	80053e0 <HAL_RCC_GetSysClockFreq>
 8006028:	61f8      	str	r0, [r7, #28]
				break;
 800602a:	e00c      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x632>
				if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) {
 800602c:	4b62      	ldr	r3, [pc, #392]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006034:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006038:	d104      	bne.n	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
					frequency = HSI_VALUE;
 800603a:	4b60      	ldr	r3, [pc, #384]	@ (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800603c:	61fb      	str	r3, [r7, #28]
				break;
 800603e:	e001      	b.n	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
				break;
 8006040:	bf00      	nop
 8006042:	e0c0      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 8006044:	bf00      	nop
			break;
 8006046:	e0be      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
			srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006048:	4b5b      	ldr	r3, [pc, #364]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800604a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800604e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006052:	613b      	str	r3, [r7, #16]
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800605a:	d02c      	beq.n	80060b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006062:	d833      	bhi.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800606a:	d01a      	beq.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006072:	d82b      	bhi.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d004      	beq.n	8006084 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006080:	d004      	beq.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
				break;
 8006082:	e023      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
				frequency = HAL_RCC_GetPCLK1Freq();
 8006084:	f7ff fa44 	bl	8005510 <HAL_RCC_GetPCLK1Freq>
 8006088:	61f8      	str	r0, [r7, #28]
				break;
 800608a:	e026      	b.n	80060da <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
				if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) {
 800608c:	4b4a      	ldr	r3, [pc, #296]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800608e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006092:	f003 0302 	and.w	r3, r3, #2
 8006096:	2b02      	cmp	r3, #2
 8006098:	d11a      	bne.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
						frequency = LSI_VALUE;
 800609a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800609e:	61fb      	str	r3, [r7, #28]
				break;
 80060a0:	e016      	b.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
				if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) {
 80060a2:	4b45      	ldr	r3, [pc, #276]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060ae:	d111      	bne.n	80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>
					frequency = HSI_VALUE;
 80060b0:	4b42      	ldr	r3, [pc, #264]	@ (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80060b2:	61fb      	str	r3, [r7, #28]
				break;
 80060b4:	e00e      	b.n	80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>
				if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) {
 80060b6:	4b40      	ldr	r3, [pc, #256]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80060b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060bc:	f003 0302 	and.w	r3, r3, #2
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d109      	bne.n	80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
					frequency = LSE_VALUE;
 80060c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060c8:	61fb      	str	r3, [r7, #28]
				break;
 80060ca:	e005      	b.n	80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
				break;
 80060cc:	bf00      	nop
 80060ce:	e07a      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 80060d0:	bf00      	nop
 80060d2:	e078      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 80060d4:	bf00      	nop
 80060d6:	e076      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 80060d8:	bf00      	nop
			break;
 80060da:	e074      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
			srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80060dc:	4b36      	ldr	r3, [pc, #216]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80060de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060e2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80060e6:	613b      	str	r3, [r7, #16]
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80060ee:	d02c      	beq.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0x736>
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80060f6:	d833      	bhi.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060fe:	d01a      	beq.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006106:	d82b      	bhi.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d004      	beq.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006114:	d004      	beq.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
				break;
 8006116:	e023      	b.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
				frequency = HAL_RCC_GetPCLK1Freq();
 8006118:	f7ff f9fa 	bl	8005510 <HAL_RCC_GetPCLK1Freq>
 800611c:	61f8      	str	r0, [r7, #28]
				break;
 800611e:	e026      	b.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
				if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) {
 8006120:	4b25      	ldr	r3, [pc, #148]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8006122:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	2b02      	cmp	r3, #2
 800612c:	d11a      	bne.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
						frequency = LSI_VALUE;
 800612e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006132:	61fb      	str	r3, [r7, #28]
				break;
 8006134:	e016      	b.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
				if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) {
 8006136:	4b20      	ldr	r3, [pc, #128]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800613e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006142:	d111      	bne.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
					frequency = HSI_VALUE;
 8006144:	4b1d      	ldr	r3, [pc, #116]	@ (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006146:	61fb      	str	r3, [r7, #28]
				break;
 8006148:	e00e      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
				if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) {
 800614a:	4b1b      	ldr	r3, [pc, #108]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800614c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b02      	cmp	r3, #2
 8006156:	d109      	bne.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x758>
					frequency = LSE_VALUE;
 8006158:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800615c:	61fb      	str	r3, [r7, #28]
				break;
 800615e:	e005      	b.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x758>
				break;
 8006160:	bf00      	nop
 8006162:	e030      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 8006164:	bf00      	nop
 8006166:	e02e      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 8006168:	bf00      	nop
 800616a:	e02c      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
				break;
 800616c:	bf00      	nop
			break;
 800616e:	e02a      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
			srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8006170:	4b11      	ldr	r3, [pc, #68]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8006172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006176:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800617a:	613b      	str	r3, [r7, #16]
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d004      	beq.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006188:	d004      	beq.n	8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
				break;
 800618a:	e00d      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
				frequency = HAL_RCC_GetPCLK1Freq();
 800618c:	f7ff f9c0 	bl	8005510 <HAL_RCC_GetPCLK1Freq>
 8006190:	61f8      	str	r0, [r7, #28]
				break;
 8006192:	e009      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
				if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) {
 8006194:	4b08      	ldr	r3, [pc, #32]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800619c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061a0:	d101      	bne.n	80061a6 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
					frequency = HSI_VALUE;
 80061a2:	4b06      	ldr	r3, [pc, #24]	@ (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80061a4:	61fb      	str	r3, [r7, #28]
				break;
 80061a6:	bf00      	nop
			break;
 80061a8:	e00d      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
			break;
 80061aa:	bf00      	nop
 80061ac:	e00b      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
			break;
 80061ae:	bf00      	nop
 80061b0:	e009      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
			break;
 80061b2:	bf00      	nop
 80061b4:	e007      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 80061b6:	bf00      	nop
 80061b8:	40021000 	.word	0x40021000
 80061bc:	00f42400 	.word	0x00f42400
			break;
 80061c0:	bf00      	nop
 80061c2:	e000      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
			break;
 80061c4:	bf00      	nop
		}
	}

	return (frequency);
 80061c6:	69fb      	ldr	r3, [r7, #28]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3720      	adds	r7, #32
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <HAL_RCCEx_EnableMSIPLLMode>:
 * @brief  Enable the PLL-mode of the MSI.
 * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
 *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
 * @retval None
 */
void HAL_RCCEx_EnableMSIPLLMode(void) {
 80061d0:	b480      	push	{r7}
 80061d2:	af00      	add	r7, sp, #0
	SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80061d4:	4b05      	ldr	r3, [pc, #20]	@ (80061ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a04      	ldr	r2, [pc, #16]	@ (80061ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80061da:	f043 0304 	orr.w	r3, r3, #4
 80061de:	6013      	str	r3, [r2, #0]
}
 80061e0:	bf00      	nop
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	40021000 	.word	0x40021000

080061f0 <RCCEx_PLLSAI1_Config>:
 *
 * @note   PLLSAI1 is temporary disable to apply new parameters
 *
 * @retval HAL status
 */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider) {
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
	uint32_t tickstart;
	HAL_StatusTypeDef status = HAL_OK;
 80061fa:	2300      	movs	r3, #0
 80061fc:	73fb      	strb	r3, [r7, #15]
	assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
	assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
	assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

	/* Check that PLLSAI1 clock source and divider M can be applied */
	if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE) {
 80061fe:	4b74      	ldr	r3, [pc, #464]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f003 0303 	and.w	r3, r3, #3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d018      	beq.n	800623c <RCCEx_PLLSAI1_Config+0x4c>
		/* PLL clock source and divider M already set, check that no request for change  */
		if ((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source) || (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800620a:	4b71      	ldr	r3, [pc, #452]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	f003 0203 	and.w	r2, r3, #3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	429a      	cmp	r2, r3
 8006218:	d10d      	bne.n	8006236 <RCCEx_PLLSAI1_Config+0x46>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d009      	beq.n	8006236 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
				|| (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006222:	4b6b      	ldr	r3, [pc, #428]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	091b      	lsrs	r3, r3, #4
 8006228:	f003 0307 	and.w	r3, r3, #7
 800622c:	1c5a      	adds	r2, r3, #1
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	429a      	cmp	r2, r3
 8006234:	d047      	beq.n	80062c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
				) {
			status = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	73fb      	strb	r3, [r7, #15]
 800623a:	e044      	b.n	80062c6 <RCCEx_PLLSAI1_Config+0xd6>
		}
	} else {
		/* Check PLLSAI1 clock source availability */
		switch (PllSai1->PLLSAI1Source) {
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2b03      	cmp	r3, #3
 8006242:	d018      	beq.n	8006276 <RCCEx_PLLSAI1_Config+0x86>
 8006244:	2b03      	cmp	r3, #3
 8006246:	d825      	bhi.n	8006294 <RCCEx_PLLSAI1_Config+0xa4>
 8006248:	2b01      	cmp	r3, #1
 800624a:	d002      	beq.n	8006252 <RCCEx_PLLSAI1_Config+0x62>
 800624c:	2b02      	cmp	r3, #2
 800624e:	d009      	beq.n	8006264 <RCCEx_PLLSAI1_Config+0x74>
 8006250:	e020      	b.n	8006294 <RCCEx_PLLSAI1_Config+0xa4>
		case RCC_PLLSOURCE_MSI:
			if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY)) {
 8006252:	4b5f      	ldr	r3, [pc, #380]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d11d      	bne.n	800629a <RCCEx_PLLSAI1_Config+0xaa>
				status = HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8006262:	e01a      	b.n	800629a <RCCEx_PLLSAI1_Config+0xaa>
		case RCC_PLLSOURCE_HSI:
			if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY)) {
 8006264:	4b5a      	ldr	r3, [pc, #360]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800626c:	2b00      	cmp	r3, #0
 800626e:	d116      	bne.n	800629e <RCCEx_PLLSAI1_Config+0xae>
				status = HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8006274:	e013      	b.n	800629e <RCCEx_PLLSAI1_Config+0xae>
		case RCC_PLLSOURCE_HSE:
			if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY)) {
 8006276:	4b56      	ldr	r3, [pc, #344]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10f      	bne.n	80062a2 <RCCEx_PLLSAI1_Config+0xb2>
				if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP)) {
 8006282:	4b53      	ldr	r3, [pc, #332]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d109      	bne.n	80062a2 <RCCEx_PLLSAI1_Config+0xb2>
					status = HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	73fb      	strb	r3, [r7, #15]
				}
			}
			break;
 8006292:	e006      	b.n	80062a2 <RCCEx_PLLSAI1_Config+0xb2>
		default:
			status = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	73fb      	strb	r3, [r7, #15]
			break;
 8006298:	e004      	b.n	80062a4 <RCCEx_PLLSAI1_Config+0xb4>
			break;
 800629a:	bf00      	nop
 800629c:	e002      	b.n	80062a4 <RCCEx_PLLSAI1_Config+0xb4>
			break;
 800629e:	bf00      	nop
 80062a0:	e000      	b.n	80062a4 <RCCEx_PLLSAI1_Config+0xb4>
			break;
 80062a2:	bf00      	nop
		}

		if (status == HAL_OK) {
 80062a4:	7bfb      	ldrb	r3, [r7, #15]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10d      	bne.n	80062c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
			/* Set PLLSAI1 clock source and divider M */
			MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM,
 80062aa:	4b49      	ldr	r3, [pc, #292]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6819      	ldr	r1, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	3b01      	subs	r3, #1
 80062bc:	011b      	lsls	r3, r3, #4
 80062be:	430b      	orrs	r3, r1
 80062c0:	4943      	ldr	r1, [pc, #268]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	60cb      	str	r3, [r1, #12]
					PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
		}
	}

	if (status == HAL_OK) {
 80062c6:	7bfb      	ldrb	r3, [r7, #15]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d17c      	bne.n	80063c6 <RCCEx_PLLSAI1_Config+0x1d6>
		/* Disable the PLLSAI1 */
		__HAL_RCC_PLLSAI1_DISABLE();
 80062cc:	4b40      	ldr	r3, [pc, #256]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a3f      	ldr	r2, [pc, #252]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80062d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80062d6:	6013      	str	r3, [r2, #0]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 80062d8:	f7fd fd32 	bl	8003d40 <HAL_GetTick>
 80062dc:	60b8      	str	r0, [r7, #8]

		/* Wait till PLLSAI1 is ready to be updated */
		while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U) {
 80062de:	e009      	b.n	80062f4 <RCCEx_PLLSAI1_Config+0x104>
			if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE) {
 80062e0:	f7fd fd2e 	bl	8003d40 <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d902      	bls.n	80062f4 <RCCEx_PLLSAI1_Config+0x104>
				status = HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	73fb      	strb	r3, [r7, #15]
				break;
 80062f2:	e005      	b.n	8006300 <RCCEx_PLLSAI1_Config+0x110>
		while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U) {
 80062f4:	4b36      	ldr	r3, [pc, #216]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1ef      	bne.n	80062e0 <RCCEx_PLLSAI1_Config+0xf0>
			}
		}

		if (status == HAL_OK) {
 8006300:	7bfb      	ldrb	r3, [r7, #15]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d15f      	bne.n	80063c6 <RCCEx_PLLSAI1_Config+0x1d6>
			if (Divider == DIVIDER_P_UPDATE) {
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d110      	bne.n	800632e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
				/* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
				MODIFY_REG(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
 800630c:	4b30      	ldr	r3, [pc, #192]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8006314:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	6892      	ldr	r2, [r2, #8]
 800631c:	0211      	lsls	r1, r2, #8
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	68d2      	ldr	r2, [r2, #12]
 8006322:	06d2      	lsls	r2, r2, #27
 8006324:	430a      	orrs	r2, r1
 8006326:	492a      	ldr	r1, [pc, #168]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006328:	4313      	orrs	r3, r2
 800632a:	610b      	str	r3, [r1, #16]
 800632c:	e027      	b.n	800637e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
			} else if (Divider == DIVIDER_Q_UPDATE) {
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d112      	bne.n	800635a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
				/* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
				MODIFY_REG(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1Q,
 8006334:	4b26      	ldr	r3, [pc, #152]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800633c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	6892      	ldr	r2, [r2, #8]
 8006344:	0211      	lsls	r1, r2, #8
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	6912      	ldr	r2, [r2, #16]
 800634a:	0852      	lsrs	r2, r2, #1
 800634c:	3a01      	subs	r2, #1
 800634e:	0552      	lsls	r2, r2, #21
 8006350:	430a      	orrs	r2, r1
 8006352:	491f      	ldr	r1, [pc, #124]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006354:	4313      	orrs	r3, r2
 8006356:	610b      	str	r3, [r1, #16]
 8006358:	e011      	b.n	800637e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
				/* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
				MODIFY_REG(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1R,
 800635a:	4b1d      	ldr	r3, [pc, #116]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006362:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	6892      	ldr	r2, [r2, #8]
 800636a:	0211      	lsls	r1, r2, #8
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	6952      	ldr	r2, [r2, #20]
 8006370:	0852      	lsrs	r2, r2, #1
 8006372:	3a01      	subs	r2, #1
 8006374:	0652      	lsls	r2, r2, #25
 8006376:	430a      	orrs	r2, r1
 8006378:	4915      	ldr	r1, [pc, #84]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800637a:	4313      	orrs	r3, r2
 800637c:	610b      	str	r3, [r1, #16]
						(PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) | (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
			}

			/* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
			__HAL_RCC_PLLSAI1_ENABLE();
 800637e:	4b14      	ldr	r3, [pc, #80]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a13      	ldr	r2, [pc, #76]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006384:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006388:	6013      	str	r3, [r2, #0]

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 800638a:	f7fd fcd9 	bl	8003d40 <HAL_GetTick>
 800638e:	60b8      	str	r0, [r7, #8]

			/* Wait till PLLSAI1 is ready */
			while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U) {
 8006390:	e009      	b.n	80063a6 <RCCEx_PLLSAI1_Config+0x1b6>
				if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE) {
 8006392:	f7fd fcd5 	bl	8003d40 <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	2b02      	cmp	r3, #2
 800639e:	d902      	bls.n	80063a6 <RCCEx_PLLSAI1_Config+0x1b6>
					status = HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	73fb      	strb	r3, [r7, #15]
					break;
 80063a4:	e005      	b.n	80063b2 <RCCEx_PLLSAI1_Config+0x1c2>
			while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U) {
 80063a6:	4b0a      	ldr	r3, [pc, #40]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d0ef      	beq.n	8006392 <RCCEx_PLLSAI1_Config+0x1a2>
				}
			}

			if (status == HAL_OK) {
 80063b2:	7bfb      	ldrb	r3, [r7, #15]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d106      	bne.n	80063c6 <RCCEx_PLLSAI1_Config+0x1d6>
				/* Configure the PLLSAI1 Clock output(s) */
				__HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80063b8:	4b05      	ldr	r3, [pc, #20]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063ba:	691a      	ldr	r2, [r3, #16]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	4903      	ldr	r1, [pc, #12]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	610b      	str	r3, [r1, #16]
			}
		}
	}

	return status;
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	40021000 	.word	0x40021000

080063d4 <RCCEx_GetSAIxPeriphCLKFreq>:

#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency) {
 80063d4:	b480      	push	{r7}
 80063d6:	b089      	sub	sp, #36	@ 0x24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
	uint32_t frequency = 0U;
 80063de:	2300      	movs	r3, #0
 80063e0:	61fb      	str	r3, [r7, #28]
	uint32_t srcclk = 0U;
 80063e2:	2300      	movs	r3, #0
 80063e4:	61bb      	str	r3, [r7, #24]
	uint32_t pllvco, plln; /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
	uint32_t pllp = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

	/* Handle SAIs */
	if (PeriphClk == RCC_PERIPHCLK_SAI1) {
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063f0:	d10b      	bne.n	800640a <RCCEx_GetSAIxPeriphCLKFreq+0x36>
		srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80063f2:	4b53      	ldr	r3, [pc, #332]	@ (8006540 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80063f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063f8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80063fc:	61bb      	str	r3, [r7, #24]
		if (srcclk == RCC_SAI1CLKSOURCE_PIN) {
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006404:	d101      	bne.n	800640a <RCCEx_GetSAIxPeriphCLKFreq+0x36>
			frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006406:	4b4f      	ldr	r3, [pc, #316]	@ (8006544 <RCCEx_GetSAIxPeriphCLKFreq+0x170>)
 8006408:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

	if (frequency == 0U) {
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	2b00      	cmp	r3, #0
 800640e:	f040 8090 	bne.w	8006532 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
		pllvco = InputFrequency;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	613b      	str	r3, [r7, #16]
      }
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

#else
		if (srcclk == RCC_SAI1CLKSOURCE_PLL) {
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800641c:	d143      	bne.n	80064a6 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
			if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI2CLK) != 0U)) {
 800641e:	4b48      	ldr	r3, [pc, #288]	@ (8006540 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006426:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800642a:	d132      	bne.n	8006492 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
 800642c:	4b44      	ldr	r3, [pc, #272]	@ (8006540 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d02c      	beq.n	8006492 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
				/* f(PLL Source) / PLLM */
				pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006438:	4b41      	ldr	r3, [pc, #260]	@ (8006540 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	091b      	lsrs	r3, r3, #4
 800643e:	f003 0307 	and.w	r3, r3, #7
 8006442:	3301      	adds	r3, #1
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	fbb2 f3f3 	udiv	r3, r2, r3
 800644a:	613b      	str	r3, [r7, #16]
				/* f(PLLSAI2CLK) = f(VCO input) * PLLN / PLLP */
				plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800644c:	4b3c      	ldr	r3, [pc, #240]	@ (8006540 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	0a1b      	lsrs	r3, r3, #8
 8006452:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006456:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
				pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006458:	4b39      	ldr	r3, [pc, #228]	@ (8006540 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	0edb      	lsrs	r3, r3, #27
 800645e:	f003 031f 	and.w	r3, r3, #31
 8006462:	617b      	str	r3, [r7, #20]
#endif
				if (pllp == 0U) {
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10a      	bne.n	8006480 <RCCEx_GetSAIxPeriphCLKFreq+0xac>
					if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U) {
 800646a:	4b35      	ldr	r3, [pc, #212]	@ (8006540 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d002      	beq.n	800647c <RCCEx_GetSAIxPeriphCLKFreq+0xa8>
						pllp = 17U;
 8006476:	2311      	movs	r3, #17
 8006478:	617b      	str	r3, [r7, #20]
 800647a:	e001      	b.n	8006480 <RCCEx_GetSAIxPeriphCLKFreq+0xac>
					} else {
						pllp = 7U;
 800647c:	2307      	movs	r3, #7
 800647e:	617b      	str	r3, [r7, #20]
					}
				}
				frequency = (pllvco * plln) / pllp;
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	fb03 f202 	mul.w	r2, r3, r2
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	fbb2 f3f3 	udiv	r3, r2, r3
 800648e:	61fb      	str	r3, [r7, #28]
 8006490:	e04f      	b.n	8006532 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
			} else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) {
 8006492:	4b2b      	ldr	r3, [pc, #172]	@ (8006540 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800649a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800649e:	d148      	bne.n	8006532 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
				/* HSI automatically selected as clock source if PLLs not enabled */
				frequency = HSI_VALUE;
 80064a0:	4b29      	ldr	r3, [pc, #164]	@ (8006548 <RCCEx_GetSAIxPeriphCLKFreq+0x174>)
 80064a2:	61fb      	str	r3, [r7, #28]
 80064a4:	e045      	b.n	8006532 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
			} else {
				/* No clock source, frequency default init at 0 */
			}
		} else if (srcclk == RCC_SAI1CLKSOURCE_PLLSAI1) {
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d142      	bne.n	8006532 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
			if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY)
 80064ac:	4b24      	ldr	r3, [pc, #144]	@ (8006540 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064b8:	d132      	bne.n	8006520 <RCCEx_GetSAIxPeriphCLKFreq+0x14c>
					&& (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)) {
 80064ba:	4b21      	ldr	r3, [pc, #132]	@ (8006540 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d02c      	beq.n	8006520 <RCCEx_GetSAIxPeriphCLKFreq+0x14c>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
				/* f(PLL Source) / PLLM */
				pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80064c6:	4b1e      	ldr	r3, [pc, #120]	@ (8006540 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	091b      	lsrs	r3, r3, #4
 80064cc:	f003 0307 	and.w	r3, r3, #7
 80064d0:	3301      	adds	r3, #1
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d8:	613b      	str	r3, [r7, #16]
#endif
				/* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
				plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80064da:	4b19      	ldr	r3, [pc, #100]	@ (8006540 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	0a1b      	lsrs	r3, r3, #8
 80064e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064e4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
				pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80064e6:	4b16      	ldr	r3, [pc, #88]	@ (8006540 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	0edb      	lsrs	r3, r3, #27
 80064ec:	f003 031f 	and.w	r3, r3, #31
 80064f0:	617b      	str	r3, [r7, #20]
#endif
				if (pllp == 0U) {
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10a      	bne.n	800650e <RCCEx_GetSAIxPeriphCLKFreq+0x13a>
					if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U) {
 80064f8:	4b11      	ldr	r3, [pc, #68]	@ (8006540 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d002      	beq.n	800650a <RCCEx_GetSAIxPeriphCLKFreq+0x136>
						pllp = 17U;
 8006504:	2311      	movs	r3, #17
 8006506:	617b      	str	r3, [r7, #20]
 8006508:	e001      	b.n	800650e <RCCEx_GetSAIxPeriphCLKFreq+0x13a>
					} else {
						pllp = 7U;
 800650a:	2307      	movs	r3, #7
 800650c:	617b      	str	r3, [r7, #20]
					}
				}
				frequency = (pllvco * plln) / pllp;
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	fb03 f202 	mul.w	r2, r3, r2
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	fbb2 f3f3 	udiv	r3, r2, r3
 800651c:	61fb      	str	r3, [r7, #28]
 800651e:	e008      	b.n	8006532 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
			} else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) {
 8006520:	4b07      	ldr	r3, [pc, #28]	@ (8006540 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006528:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800652c:	d101      	bne.n	8006532 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
				/* HSI automatically selected as clock source if PLLs not enabled */
				frequency = HSI_VALUE;
 800652e:	4b06      	ldr	r3, [pc, #24]	@ (8006548 <RCCEx_GetSAIxPeriphCLKFreq+0x174>)
 8006530:	61fb      	str	r3, [r7, #28]
		else {
			/* No clock source, frequency default init at 0 */
		}
	}

	return frequency;
 8006532:	69fb      	ldr	r3, [r7, #28]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3724      	adds	r7, #36	@ 0x24
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	40021000 	.word	0x40021000
 8006544:	001fff68 	.word	0x001fff68
 8006548:	00f42400 	.word	0x00f42400

0800654c <HAL_SAI_InitProtocol>:
 * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
 *                   the configuration information for SAI module.
 * @param  nbslot Number of slot.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot) {
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
 8006558:	603b      	str	r3, [r7, #0]

	/* Check the parameters */
	assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
	assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

	switch (protocol) {
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	2b02      	cmp	r3, #2
 800655e:	d904      	bls.n	800656a <HAL_SAI_InitProtocol+0x1e>
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	3b03      	subs	r3, #3
 8006564:	2b01      	cmp	r3, #1
 8006566:	d812      	bhi.n	800658e <HAL_SAI_InitProtocol+0x42>
 8006568:	e008      	b.n	800657c <HAL_SAI_InitProtocol+0x30>
	case SAI_I2S_STANDARD:
	case SAI_I2S_MSBJUSTIFIED:
	case SAI_I2S_LSBJUSTIFIED:
		status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	68b9      	ldr	r1, [r7, #8]
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f000 fca5 	bl	8006ec0 <SAI_InitI2S>
 8006576:	4603      	mov	r3, r0
 8006578:	75fb      	strb	r3, [r7, #23]
		break;
 800657a:	e00b      	b.n	8006594 <HAL_SAI_InitProtocol+0x48>
	case SAI_PCM_LONG:
	case SAI_PCM_SHORT:
		status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	68b9      	ldr	r1, [r7, #8]
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f000 fd4e 	bl	8007024 <SAI_InitPCM>
 8006588:	4603      	mov	r3, r0
 800658a:	75fb      	strb	r3, [r7, #23]
		break;
 800658c:	e002      	b.n	8006594 <HAL_SAI_InitProtocol+0x48>
	default:
		status = HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	75fb      	strb	r3, [r7, #23]
		break;
 8006592:	bf00      	nop
	}

	if (status == HAL_OK) {
 8006594:	7dfb      	ldrb	r3, [r7, #23]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d104      	bne.n	80065a4 <HAL_SAI_InitProtocol+0x58>
		status = HAL_SAI_Init(hsai);
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f000 f808 	bl	80065b0 <HAL_SAI_Init>
 80065a0:	4603      	mov	r3, r0
 80065a2:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 80065a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3718      	adds	r7, #24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
	...

080065b0 <HAL_SAI_Init>:
 *         in the SAI_InitTypeDef structure and initialize the associated handle.
 * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
 *              the configuration information for SAI module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai) {
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
	uint32_t ckstr_bits;
	uint32_t syncen_bits;

	/* Check the SAI handle allocation */
	if (hsai == NULL) {
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <HAL_SAI_Init+0x12>
		return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e10c      	b.n	80067dc <HAL_SAI_Init+0x22c>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
	/* STM32L4P5xx || STM32L4Q5xx */

	if (hsai->State == HAL_SAI_STATE_RESET) {
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d106      	bne.n	80065dc <HAL_SAI_Init+0x2c>
		/* Allocate lock resource and initialize it */
		hsai->Lock = HAL_UNLOCKED;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
		HAL_SAI_MspInit(hsai);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7fb fe2a 	bl	8002230 <HAL_SAI_MspInit>
#endif
	}

	/* Disable the selected SAI peripheral */
	if (SAI_Disable(hsai) != HAL_OK) {
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fddb 	bl	8007198 <SAI_Disable>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d001      	beq.n	80065ec <HAL_SAI_Init+0x3c>
		return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e0f7      	b.n	80067dc <HAL_SAI_Init+0x22c>
	}

	hsai->State = HAL_SAI_STATE_BUSY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2202      	movs	r2, #2
 80065f0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
      tmpregisterGCR = 0;
      break;
  }
#endif /* SAI2 */

	switch (hsai->Init.Synchro) {
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d002      	beq.n	8006602 <HAL_SAI_Init+0x52>
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d003      	beq.n	8006608 <HAL_SAI_Init+0x58>
 8006600:	e006      	b.n	8006610 <HAL_SAI_Init+0x60>
	case SAI_ASYNCHRONOUS:
		syncen_bits = 0;
 8006602:	2300      	movs	r3, #0
 8006604:	613b      	str	r3, [r7, #16]
		break;
 8006606:	e006      	b.n	8006616 <HAL_SAI_Init+0x66>
	case SAI_SYNCHRONOUS:
		syncen_bits = SAI_xCR1_SYNCEN_0;
 8006608:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800660c:	613b      	str	r3, [r7, #16]
		break;
 800660e:	e002      	b.n	8006616 <HAL_SAI_Init+0x66>
      syncen_bits = SAI_xCR1_SYNCEN_1;
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
      break;
#endif /* SAI2 */
	default:
		syncen_bits = 0;
 8006610:	2300      	movs	r3, #0
 8006612:	613b      	str	r3, [r7, #16]
		break;
 8006614:	bf00      	nop
	else
	{
		SAI2->GCR = tmpregisterGCR;
	}
#else
	SAI1->GCR = 0;
 8006616:	4b73      	ldr	r3, [pc, #460]	@ (80067e4 <HAL_SAI_Init+0x234>)
 8006618:	2200      	movs	r2, #0
 800661a:	601a      	str	r2, [r3, #0]
#endif /* SAI2 */

	if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV) {
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	69db      	ldr	r3, [r3, #28]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d031      	beq.n	8006688 <HAL_SAI_Init+0xd8>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
    }

#else

		freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006624:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8006628:	f7ff f9f4 	bl	8005a14 <HAL_RCCEx_GetPeriphCLKFreq>
 800662c:	60f8      	str	r0, [r7, #12]
		/* Configure Master Clock using the following formula :
		 MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
		 FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
		 MCKDIV[3:0] = SAI_CK_x / FS * 512 */
		/* (freq x 10) to keep Significant digits */
		tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	4613      	mov	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	005b      	lsls	r3, r3, #1
 8006638:	461a      	mov	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	025b      	lsls	r3, r3, #9
 8006640:	fbb2 f3f3 	udiv	r3, r2, r3
 8006644:	60bb      	str	r3, [r7, #8]
		hsai->Init.Mckdiv = tmpval / 10U;
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	4a67      	ldr	r2, [pc, #412]	@ (80067e8 <HAL_SAI_Init+0x238>)
 800664a:	fba2 2303 	umull	r2, r3, r2, r3
 800664e:	08da      	lsrs	r2, r3, #3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	621a      	str	r2, [r3, #32]

		/* Round result to the nearest integer */
		if ((tmpval % 10U) > 8U) {
 8006654:	68b9      	ldr	r1, [r7, #8]
 8006656:	4b64      	ldr	r3, [pc, #400]	@ (80067e8 <HAL_SAI_Init+0x238>)
 8006658:	fba3 2301 	umull	r2, r3, r3, r1
 800665c:	08da      	lsrs	r2, r3, #3
 800665e:	4613      	mov	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4413      	add	r3, r2
 8006664:	005b      	lsls	r3, r3, #1
 8006666:	1aca      	subs	r2, r1, r3
 8006668:	2a08      	cmp	r2, #8
 800666a:	d904      	bls.n	8006676 <HAL_SAI_Init+0xc6>
			hsai->Init.Mckdiv += 1U;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a1b      	ldr	r3, [r3, #32]
 8006670:	1c5a      	adds	r2, r3, #1
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	621a      	str	r2, [r3, #32]
		}
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
		/* STM32L4P5xx || STM32L4Q5xx */

		/* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
		if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL) {
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800667a:	2b04      	cmp	r3, #4
 800667c:	d104      	bne.n	8006688 <HAL_SAI_Init+0xd8>
			hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	085a      	lsrs	r2, r3, #1
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	621a      	str	r2, [r3, #32]
	}
	/* Check the SAI Block master clock divider parameter */
	assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

	/* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
	if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX)) {
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d003      	beq.n	8006698 <HAL_SAI_Init+0xe8>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	2b02      	cmp	r3, #2
 8006696:	d109      	bne.n	80066ac <HAL_SAI_Init+0xfc>
		/* Transmit */
		ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800669c:	2b01      	cmp	r3, #1
 800669e:	d101      	bne.n	80066a4 <HAL_SAI_Init+0xf4>
 80066a0:	2300      	movs	r3, #0
 80066a2:	e001      	b.n	80066a8 <HAL_SAI_Init+0xf8>
 80066a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80066a8:	617b      	str	r3, [r7, #20]
 80066aa:	e008      	b.n	80066be <HAL_SAI_Init+0x10e>
	} else {
		/* Receive */
		ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d102      	bne.n	80066ba <HAL_SAI_Init+0x10a>
 80066b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80066b8:	e000      	b.n	80066bc <HAL_SAI_Init+0x10c>
 80066ba:	2300      	movs	r3, #0
 80066bc:	617b      	str	r3, [r7, #20]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
	hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG | SAI_xCR1_DS |
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6819      	ldr	r1, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	4b48      	ldr	r3, [pc, #288]	@ (80067ec <HAL_SAI_Init+0x23c>)
 80066ca:	400b      	ands	r3, r1
 80066cc:	6013      	str	r3, [r2, #0]
	SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |
	SAI_xCR1_MONO | SAI_xCR1_OUTDRIV | SAI_xCR1_DMAEN |
	SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

	hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol | hsai->Init.DataSize | hsai->Init.FirstBit
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6819      	ldr	r1, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066dc:	431a      	orrs	r2, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066e2:	431a      	orrs	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e8:	431a      	orrs	r2, r3
			| ckstr_bits | syncen_bits | hsai->Init.MonoStereoMode | hsai->Init.OutputDrive | hsai->Init.NoDivider
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	431a      	orrs	r2, r3
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	431a      	orrs	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f6:	431a      	orrs	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	431a      	orrs	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	431a      	orrs	r2, r3
			| (hsai->Init.Mckdiv << 20));
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6a1b      	ldr	r3, [r3, #32]
 8006708:	051b      	lsls	r3, r3, #20
 800670a:	431a      	orrs	r2, r3
	hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol | hsai->Init.DataSize | hsai->Init.FirstBit
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	430a      	orrs	r2, r1
 8006712:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
	/* STM32L4P5xx || STM32L4Q5xx */

	/* SAI CR2 Configuration */
	hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	6812      	ldr	r2, [r2, #0]
 800671e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8006722:	f023 030f 	bic.w	r3, r3, #15
 8006726:	6053      	str	r3, [r2, #4]
	hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6859      	ldr	r1, [r3, #4]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	699a      	ldr	r2, [r3, #24]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006736:	431a      	orrs	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800673c:	431a      	orrs	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	430a      	orrs	r2, r1
 8006744:	605a      	str	r2, [r3, #4]

	/* SAI Frame Configuration -----------------------------------------*/
	hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF |
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	6899      	ldr	r1, [r3, #8]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	4b27      	ldr	r3, [pc, #156]	@ (80067f0 <HAL_SAI_Init+0x240>)
 8006752:	400b      	ands	r3, r1
 8006754:	6093      	str	r3, [r2, #8]
	SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
	hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) | hsai->FrameInit.FSOffset
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	6899      	ldr	r1, [r3, #8]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006760:	1e5a      	subs	r2, r3, #1
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006766:	431a      	orrs	r2, r3
			| hsai->FrameInit.FSDefinition | hsai->FrameInit.FSPolarity
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800676c:	431a      	orrs	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006772:	431a      	orrs	r2, r3
			| ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006778:	3b01      	subs	r3, #1
 800677a:	021b      	lsls	r3, r3, #8
 800677c:	431a      	orrs	r2, r3
	hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) | hsai->FrameInit.FSOffset
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	609a      	str	r2, [r3, #8]

	/* SAI Block_x SLOT Configuration ------------------------------------------*/
	/* This register has no meaning in AC 97 and SPDIF audio protocol */
	hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68d9      	ldr	r1, [r3, #12]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8006794:	400b      	ands	r3, r1
 8006796:	60d3      	str	r3, [r2, #12]
	SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

	hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | (hsai->SlotInit.SlotActive << 16)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68d9      	ldr	r1, [r3, #12]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067a6:	431a      	orrs	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067ac:	041b      	lsls	r3, r3, #16
 80067ae:	431a      	orrs	r2, r3
			| ((hsai->SlotInit.SlotNumber - 1U) << 8);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067b4:	3b01      	subs	r3, #1
 80067b6:	021b      	lsls	r3, r3, #8
 80067b8:	431a      	orrs	r2, r3
	hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | (hsai->SlotInit.SlotActive << 16)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	430a      	orrs	r2, r1
 80067c0:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
	/* STM32L4P5xx || STM32L4Q5xx */

	/* Initialize the error code */
	hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

	/* Initialize the SAI state */
	hsai->State = HAL_SAI_STATE_READY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

	/* Release Lock */
	__HAL_UNLOCK(hsai);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

	return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3718      	adds	r7, #24
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	40015400 	.word	0x40015400
 80067e8:	cccccccd 	.word	0xcccccccd
 80067ec:	ff05c010 	.word	0xff05c010
 80067f0:	fff88000 	.word	0xfff88000

080067f4 <HAL_SAI_Abort>:
 * @brief Abort the current transfer and disable the SAI.
 * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
 *              the configuration information for SAI module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai) {
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 80067fc:	2300      	movs	r3, #0
 80067fe:	73fb      	strb	r3, [r7, #15]

	/* Process Locked */
	__HAL_LOCK(hsai);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8006806:	2b01      	cmp	r3, #1
 8006808:	d101      	bne.n	800680e <HAL_SAI_Abort+0x1a>
 800680a:	2302      	movs	r3, #2
 800680c:	e053      	b.n	80068b6 <HAL_SAI_Abort+0xc2>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

	/* Check SAI DMA is enabled or not */
	if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN) {
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006820:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006824:	d125      	bne.n	8006872 <HAL_SAI_Abort+0x7e>
		/* Disable the SAI DMA request */
		hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006834:	601a      	str	r2, [r3, #0]

		/* Abort the SAI Tx DMA Stream */
		if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL)) {
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b12      	cmp	r3, #18
 8006840:	d108      	bne.n	8006854 <HAL_SAI_Abort+0x60>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006846:	2b00      	cmp	r3, #0
 8006848:	d004      	beq.n	8006854 <HAL_SAI_Abort+0x60>
			/* No need to check the returned value of HAL_DMA_Abort. */
			/* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
			(void) HAL_DMA_Abort(hsai->hdmatx);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800684e:	4618      	mov	r0, r3
 8006850:	f7fd fd2e 	bl	80042b0 <HAL_DMA_Abort>
		}

		/* Abort the SAI Rx DMA Stream */
		if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL)) {
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b22      	cmp	r3, #34	@ 0x22
 800685e:	d108      	bne.n	8006872 <HAL_SAI_Abort+0x7e>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006864:	2b00      	cmp	r3, #0
 8006866:	d004      	beq.n	8006872 <HAL_SAI_Abort+0x7e>
			/* No need to check the returned value of HAL_DMA_Abort. */
			/* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
			(void) HAL_DMA_Abort(hsai->hdmarx);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800686c:	4618      	mov	r0, r3
 800686e:	f7fd fd1f 	bl	80042b0 <HAL_DMA_Abort>
		}
	}

	/* Disabled All interrupt and clear all the flag */
	hsai->Instance->IMR = 0;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2200      	movs	r2, #0
 8006878:	611a      	str	r2, [r3, #16]
	hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f04f 32ff 	mov.w	r2, #4294967295
 8006882:	619a      	str	r2, [r3, #24]

	/* Disable SAI peripheral */
	if (SAI_Disable(hsai) != HAL_OK) {
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fc87 	bl	8007198 <SAI_Disable>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d001      	beq.n	8006894 <HAL_SAI_Abort+0xa0>
		status = HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	73fb      	strb	r3, [r7, #15]
	}

	/* Flush the fifo */
	SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685a      	ldr	r2, [r3, #4]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f042 0208 	orr.w	r2, r2, #8
 80068a2:	605a      	str	r2, [r3, #4]

	/* Set hsai state to ready */
	hsai->State = HAL_SAI_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

	/* Process Unlocked */
	__HAL_UNLOCK(hsai);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

	return status;
 80068b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
	...

080068c0 <HAL_SAI_Transmit_DMA>:
 *              the configuration information for SAI module.
 * @param  pData Pointer to data buffer
 * @param  Size Amount of data to be sent
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size) {
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	4613      	mov	r3, r2
 80068cc:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart = HAL_GetTick();
 80068ce:	f7fd fa37 	bl	8003d40 <HAL_GetTick>
 80068d2:	6178      	str	r0, [r7, #20]

	if ((pData == NULL) || (Size == 0U)) {
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d002      	beq.n	80068e0 <HAL_SAI_Transmit_DMA+0x20>
 80068da:	88fb      	ldrh	r3, [r7, #6]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <HAL_SAI_Transmit_DMA+0x24>
		return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e093      	b.n	8006a0c <HAL_SAI_Transmit_DMA+0x14c>
	}

	if (hsai->State == HAL_SAI_STATE_READY) {
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	f040 808c 	bne.w	8006a0a <HAL_SAI_Transmit_DMA+0x14a>
		/* Process Locked */
		__HAL_LOCK(hsai);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d101      	bne.n	8006900 <HAL_SAI_Transmit_DMA+0x40>
 80068fc:	2302      	movs	r3, #2
 80068fe:	e085      	b.n	8006a0c <HAL_SAI_Transmit_DMA+0x14c>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

		hsai->pBuffPtr = pData;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	68ba      	ldr	r2, [r7, #8]
 800690c:	665a      	str	r2, [r3, #100]	@ 0x64
		hsai->XferSize = Size;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	88fa      	ldrh	r2, [r7, #6]
 8006912:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
		hsai->XferCount = Size;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	88fa      	ldrh	r2, [r7, #6]
 800691a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
		hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
		hsai->State = HAL_SAI_STATE_BUSY_TX;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2212      	movs	r2, #18
 800692a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

		/* Set the SAI Tx DMA Half transfer complete callback */
		hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006932:	4a38      	ldr	r2, [pc, #224]	@ (8006a14 <HAL_SAI_Transmit_DMA+0x154>)
 8006934:	631a      	str	r2, [r3, #48]	@ 0x30

		/* Set the SAI TxDMA transfer complete callback */
		hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800693a:	4a37      	ldr	r2, [pc, #220]	@ (8006a18 <HAL_SAI_Transmit_DMA+0x158>)
 800693c:	62da      	str	r2, [r3, #44]	@ 0x2c

		/* Set the DMA error callback */
		hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006942:	4a36      	ldr	r2, [pc, #216]	@ (8006a1c <HAL_SAI_Transmit_DMA+0x15c>)
 8006944:	635a      	str	r2, [r3, #52]	@ 0x34

		/* Set the DMA Tx abort callback */
		hsai->hdmatx->XferAbortCallback = NULL;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800694a:	2200      	movs	r2, #0
 800694c:	639a      	str	r2, [r3, #56]	@ 0x38

		/* Enable the Tx DMA Stream */
		if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t) hsai->pBuffPtr, (uint32_t) &hsai->Instance->DR, hsai->XferSize)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006956:	4619      	mov	r1, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	331c      	adds	r3, #28
 800695e:	461a      	mov	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006966:	f7fd fc43 	bl	80041f0 <HAL_DMA_Start_IT>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d005      	beq.n	800697c <HAL_SAI_Transmit_DMA+0xbc>
				!= HAL_OK) {
			__HAL_UNLOCK(hsai);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
			return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e047      	b.n	8006a0c <HAL_SAI_Transmit_DMA+0x14c>
		}

		/* Enable the interrupts for error handling */
		__HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800697c:	2100      	movs	r1, #0
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f000 fbd2 	bl	8007128 <SAI_InterruptFlag>
 8006984:	4601      	mov	r1, r0
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	691a      	ldr	r2, [r3, #16]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	430a      	orrs	r2, r1
 8006992:	611a      	str	r2, [r3, #16]

		/* Enable SAI Tx DMA Request */
		hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80069a2:	601a      	str	r2, [r3, #0]

		/* Wait until FIFO is not empty */
		while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY) {
 80069a4:	e015      	b.n	80069d2 <HAL_SAI_Transmit_DMA+0x112>
			/* Check for the Timeout */
			if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT) {
 80069a6:	f7fd f9cb 	bl	8003d40 <HAL_GetTick>
 80069aa:	4602      	mov	r2, r0
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069b4:	d90d      	bls.n	80069d2 <HAL_SAI_Transmit_DMA+0x112>
				/* Update error code */
				hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069bc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

				/* Process Unlocked */
				__HAL_UNLOCK(hsai);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

				return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e01c      	b.n	8006a0c <HAL_SAI_Transmit_DMA+0x14c>
		while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY) {
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d0e2      	beq.n	80069a6 <HAL_SAI_Transmit_DMA+0xe6>
			}
		}

		/* Check if the SAI is already enabled */
		if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U) {
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d107      	bne.n	80069fe <HAL_SAI_Transmit_DMA+0x13e>
			/* Enable SAI peripheral */
			__HAL_SAI_ENABLE(hsai);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80069fc:	601a      	str	r2, [r3, #0]
		}

		/* Process Unlocked */
		__HAL_UNLOCK(hsai);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

		return HAL_OK;
 8006a06:	2300      	movs	r3, #0
 8006a08:	e000      	b.n	8006a0c <HAL_SAI_Transmit_DMA+0x14c>
	} else {
		return HAL_BUSY;
 8006a0a:	2302      	movs	r3, #2
	}
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3718      	adds	r7, #24
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	0800726b 	.word	0x0800726b
 8006a18:	0800720d 	.word	0x0800720d
 8006a1c:	08007301 	.word	0x08007301

08006a20 <HAL_SAI_Receive_DMA>:
 *              the configuration information for SAI module.
 * @param  pData Pointer to data buffer
 * @param  Size Amount of data to be received
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size) {
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	80fb      	strh	r3, [r7, #6]

	if ((pData == NULL) || (Size == 0U)) {
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d002      	beq.n	8006a3a <HAL_SAI_Receive_DMA+0x1a>
 8006a34:	88fb      	ldrh	r3, [r7, #6]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <HAL_SAI_Receive_DMA+0x1e>
		return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e074      	b.n	8006b28 <HAL_SAI_Receive_DMA+0x108>
	}

	if (hsai->State == HAL_SAI_STATE_READY) {
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d16d      	bne.n	8006b26 <HAL_SAI_Receive_DMA+0x106>
		/* Process Locked */
		__HAL_LOCK(hsai);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d101      	bne.n	8006a58 <HAL_SAI_Receive_DMA+0x38>
 8006a54:	2302      	movs	r3, #2
 8006a56:	e067      	b.n	8006b28 <HAL_SAI_Receive_DMA+0x108>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

		hsai->pBuffPtr = pData;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	665a      	str	r2, [r3, #100]	@ 0x64
		hsai->XferSize = Size;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	88fa      	ldrh	r2, [r7, #6]
 8006a6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
		hsai->XferCount = Size;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	88fa      	ldrh	r2, [r7, #6]
 8006a72:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
		hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
		hsai->State = HAL_SAI_STATE_BUSY_RX;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2222      	movs	r2, #34	@ 0x22
 8006a82:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

		/* Set the SAI Rx DMA Half transfer complete callback */
		hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a8a:	4a29      	ldr	r2, [pc, #164]	@ (8006b30 <HAL_SAI_Receive_DMA+0x110>)
 8006a8c:	631a      	str	r2, [r3, #48]	@ 0x30

		/* Set the SAI Rx DMA transfer complete callback */
		hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a92:	4a28      	ldr	r2, [pc, #160]	@ (8006b34 <HAL_SAI_Receive_DMA+0x114>)
 8006a94:	62da      	str	r2, [r3, #44]	@ 0x2c

		/* Set the DMA error callback */
		hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a9a:	4a27      	ldr	r2, [pc, #156]	@ (8006b38 <HAL_SAI_Receive_DMA+0x118>)
 8006a9c:	635a      	str	r2, [r3, #52]	@ 0x34

		/* Set the DMA Rx abort callback */
		hsai->hdmarx->XferAbortCallback = NULL;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	639a      	str	r2, [r3, #56]	@ 0x38

		/* Enable the Rx DMA Stream */
		if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t) &hsai->Instance->DR, (uint32_t) hsai->pBuffPtr, hsai->XferSize)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	331c      	adds	r3, #28
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006abe:	f7fd fb97 	bl	80041f0 <HAL_DMA_Start_IT>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d005      	beq.n	8006ad4 <HAL_SAI_Receive_DMA+0xb4>
				!= HAL_OK) {
			__HAL_UNLOCK(hsai);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
			return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e029      	b.n	8006b28 <HAL_SAI_Receive_DMA+0x108>
		}

		/* Enable the interrupts for error handling */
		__HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f000 fb26 	bl	8007128 <SAI_InterruptFlag>
 8006adc:	4601      	mov	r1, r0
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	691a      	ldr	r2, [r3, #16]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	611a      	str	r2, [r3, #16]

		/* Enable SAI Rx DMA Request */
		hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006afa:	601a      	str	r2, [r3, #0]

		/* Check if the SAI is already enabled */
		if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U) {
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d107      	bne.n	8006b1a <HAL_SAI_Receive_DMA+0xfa>
			/* Enable SAI peripheral */
			__HAL_SAI_ENABLE(hsai);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006b18:	601a      	str	r2, [r3, #0]
		}

		/* Process Unlocked */
		__HAL_UNLOCK(hsai);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

		return HAL_OK;
 8006b22:	2300      	movs	r3, #0
 8006b24:	e000      	b.n	8006b28 <HAL_SAI_Receive_DMA+0x108>
	} else {
		return HAL_BUSY;
 8006b26:	2302      	movs	r3, #2
	}
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	080072e5 	.word	0x080072e5
 8006b34:	08007287 	.word	0x08007287
 8006b38:	08007301 	.word	0x08007301

08006b3c <HAL_SAI_IRQHandler>:
 * @brief  Handle SAI interrupt request.
 * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
 *              the configuration information for SAI module.
 * @retval None
 */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai) {
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
	if (hsai->State != HAL_SAI_STATE_RESET) {
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f000 8192 	beq.w	8006e76 <HAL_SAI_IRQHandler+0x33a>
		uint32_t itflags = hsai->Instance->SR;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	695b      	ldr	r3, [r3, #20]
 8006b58:	617b      	str	r3, [r7, #20]
		uint32_t itsources = hsai->Instance->IMR;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	613b      	str	r3, [r7, #16]
		uint32_t cr1config = hsai->Instance->CR1;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	60fb      	str	r3, [r7, #12]
		uint32_t tmperror;

		/* SAI Fifo request interrupt occurred -----------------------------------*/
		if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ)) {
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f003 0308 	and.w	r3, r3, #8
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d009      	beq.n	8006b88 <HAL_SAI_IRQHandler+0x4c>
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	f003 0308 	and.w	r3, r3, #8
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d004      	beq.n	8006b88 <HAL_SAI_IRQHandler+0x4c>
			hsai->InterruptServiceRoutine(hsai);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	4798      	blx	r3
 8006b86:	e176      	b.n	8006e76 <HAL_SAI_IRQHandler+0x33a>
		}
		/* SAI Overrun error interrupt occurred ----------------------------------*/
		else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR)) {
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d01e      	beq.n	8006bd0 <HAL_SAI_IRQHandler+0x94>
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d019      	beq.n	8006bd0 <HAL_SAI_IRQHandler+0x94>
			/* Clear the SAI Overrun flag */
			__HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	619a      	str	r2, [r3, #24]
			/* Get the SAI error code */
			tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b22      	cmp	r3, #34	@ 0x22
 8006bae:	d101      	bne.n	8006bb4 <HAL_SAI_IRQHandler+0x78>
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e000      	b.n	8006bb6 <HAL_SAI_IRQHandler+0x7a>
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	60bb      	str	r3, [r7, #8]
			/* Change the SAI error code */
			hsai->ErrorCode |= tmperror;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	431a      	orrs	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
			/* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
			HAL_SAI_ErrorCallback(hsai);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 f96f 	bl	8006eac <HAL_SAI_ErrorCallback>
 8006bce:	e152      	b.n	8006e76 <HAL_SAI_IRQHandler+0x33a>
#endif
		}
		/* SAI mutedet interrupt occurred ----------------------------------*/
		else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET)
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	f003 0302 	and.w	r3, r3, #2
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d011      	beq.n	8006bfe <HAL_SAI_IRQHandler+0xc2>
				&& ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET)) {
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	f003 0302 	and.w	r3, r3, #2
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00c      	beq.n	8006bfe <HAL_SAI_IRQHandler+0xc2>
			/* Clear the SAI mutedet flag */
			__HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2202      	movs	r2, #2
 8006bea:	619a      	str	r2, [r3, #24]
			/* call the call back function */
			if (hsai->mutecallback != NULL) {
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 8140 	beq.w	8006e76 <HAL_SAI_IRQHandler+0x33a>
				/* inform the user that an RX mute event has been detected */
				hsai->mutecallback();
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bfa:	4798      	blx	r3
			if (hsai->mutecallback != NULL) {
 8006bfc:	e13b      	b.n	8006e76 <HAL_SAI_IRQHandler+0x33a>
			}
		}
		/* SAI AFSDET interrupt occurred ----------------------------------*/
		else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET)) {
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f003 0320 	and.w	r3, r3, #32
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d055      	beq.n	8006cb4 <HAL_SAI_IRQHandler+0x178>
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	f003 0320 	and.w	r3, r3, #32
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d050      	beq.n	8006cb4 <HAL_SAI_IRQHandler+0x178>
			/* Clear the SAI AFSDET flag */
			__HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2220      	movs	r2, #32
 8006c18:	619a      	str	r2, [r3, #24]

			/* Change the SAI error code */
			hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c20:	f043 0204 	orr.w	r2, r3, #4
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

			/* Check SAI DMA is enabled or not */
			if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN) {
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d038      	beq.n	8006ca6 <HAL_SAI_IRQHandler+0x16a>
				/* Abort the SAI DMA Streams */
				if (hsai->hdmatx != NULL) {
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d016      	beq.n	8006c6a <HAL_SAI_IRQHandler+0x12e>
					/* Set the DMA Tx abort callback */
					hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c40:	4a8f      	ldr	r2, [pc, #572]	@ (8006e80 <HAL_SAI_IRQHandler+0x344>)
 8006c42:	639a      	str	r2, [r3, #56]	@ 0x38

					/* Abort DMA in IT mode */
					if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK) {
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7fd fb6f 	bl	800432c <HAL_DMA_Abort_IT>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00a      	beq.n	8006c6a <HAL_SAI_IRQHandler+0x12e>
						/* Update SAI error code */
						hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c5a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

						/* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
						HAL_SAI_ErrorCallback(hsai);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 f921 	bl	8006eac <HAL_SAI_ErrorCallback>
#endif
					}
				}
				if (hsai->hdmarx != NULL) {
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	f000 80fc 	beq.w	8006e6c <HAL_SAI_IRQHandler+0x330>
					/* Set the DMA Rx abort callback */
					hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c78:	4a81      	ldr	r2, [pc, #516]	@ (8006e80 <HAL_SAI_IRQHandler+0x344>)
 8006c7a:	639a      	str	r2, [r3, #56]	@ 0x38

					/* Abort DMA in IT mode */
					if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK) {
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7fd fb53 	bl	800432c <HAL_DMA_Abort_IT>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 80ef 	beq.w	8006e6c <HAL_SAI_IRQHandler+0x330>
						/* Update SAI error code */
						hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c94:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

						/* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
						HAL_SAI_ErrorCallback(hsai);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f904 	bl	8006eac <HAL_SAI_ErrorCallback>
			if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN) {
 8006ca4:	e0e2      	b.n	8006e6c <HAL_SAI_IRQHandler+0x330>
					}
				}
			} else {
				/* Abort SAI */
				/* No need to check return value because HAL_SAI_ErrorCallback will be called later */
				(void) HAL_SAI_Abort(hsai);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7ff fda4 	bl	80067f4 <HAL_SAI_Abort>

				/* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
				HAL_SAI_ErrorCallback(hsai);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f8fd 	bl	8006eac <HAL_SAI_ErrorCallback>
			if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN) {
 8006cb2:	e0db      	b.n	8006e6c <HAL_SAI_IRQHandler+0x330>
#endif
			}
		}
		/* SAI LFSDET interrupt occurred ----------------------------------*/
		else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET)) {
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d055      	beq.n	8006d6a <HAL_SAI_IRQHandler+0x22e>
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d050      	beq.n	8006d6a <HAL_SAI_IRQHandler+0x22e>
			/* Clear the SAI LFSDET flag */
			__HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2240      	movs	r2, #64	@ 0x40
 8006cce:	619a      	str	r2, [r3, #24]

			/* Change the SAI error code */
			hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cd6:	f043 0208 	orr.w	r2, r3, #8
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

			/* Check SAI DMA is enabled or not */
			if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN) {
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d038      	beq.n	8006d5c <HAL_SAI_IRQHandler+0x220>
				/* Abort the SAI DMA Streams */
				if (hsai->hdmatx != NULL) {
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d016      	beq.n	8006d20 <HAL_SAI_IRQHandler+0x1e4>
					/* Set the DMA Tx abort callback */
					hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cf6:	4a62      	ldr	r2, [pc, #392]	@ (8006e80 <HAL_SAI_IRQHandler+0x344>)
 8006cf8:	639a      	str	r2, [r3, #56]	@ 0x38

					/* Abort DMA in IT mode */
					if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK) {
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7fd fb14 	bl	800432c <HAL_DMA_Abort_IT>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00a      	beq.n	8006d20 <HAL_SAI_IRQHandler+0x1e4>
						/* Update SAI error code */
						hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d10:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

						/* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
						HAL_SAI_ErrorCallback(hsai);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f8c6 	bl	8006eac <HAL_SAI_ErrorCallback>
#endif
					}
				}
				if (hsai->hdmarx != NULL) {
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 80a3 	beq.w	8006e70 <HAL_SAI_IRQHandler+0x334>
					/* Set the DMA Rx abort callback */
					hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d2e:	4a54      	ldr	r2, [pc, #336]	@ (8006e80 <HAL_SAI_IRQHandler+0x344>)
 8006d30:	639a      	str	r2, [r3, #56]	@ 0x38

					/* Abort DMA in IT mode */
					if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK) {
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7fd faf8 	bl	800432c <HAL_DMA_Abort_IT>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	f000 8096 	beq.w	8006e70 <HAL_SAI_IRQHandler+0x334>
						/* Update SAI error code */
						hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d4a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

						/* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
						HAL_SAI_ErrorCallback(hsai);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f8a9 	bl	8006eac <HAL_SAI_ErrorCallback>
			if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN) {
 8006d5a:	e089      	b.n	8006e70 <HAL_SAI_IRQHandler+0x334>
					}
				}
			} else {
				/* Abort SAI */
				/* No need to check return value because HAL_SAI_ErrorCallback will be called later */
				(void) HAL_SAI_Abort(hsai);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7ff fd49 	bl	80067f4 <HAL_SAI_Abort>

				/* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
				HAL_SAI_ErrorCallback(hsai);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f8a2 	bl	8006eac <HAL_SAI_ErrorCallback>
			if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN) {
 8006d68:	e082      	b.n	8006e70 <HAL_SAI_IRQHandler+0x334>
#endif
			}
		}
		/* SAI WCKCFG interrupt occurred ----------------------------------*/
		else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG)) {
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	f003 0304 	and.w	r3, r3, #4
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d061      	beq.n	8006e38 <HAL_SAI_IRQHandler+0x2fc>
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	f003 0304 	and.w	r3, r3, #4
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d05c      	beq.n	8006e38 <HAL_SAI_IRQHandler+0x2fc>
			/* Clear the SAI WCKCFG flag */
			__HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2204      	movs	r2, #4
 8006d84:	619a      	str	r2, [r3, #24]

			/* Change the SAI error code */
			hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d8c:	f043 0220 	orr.w	r2, r3, #32
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

			/* Check SAI DMA is enabled or not */
			if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN) {
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d036      	beq.n	8006e0e <HAL_SAI_IRQHandler+0x2d2>
				/* Abort the SAI DMA Streams */
				if (hsai->hdmatx != NULL) {
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d016      	beq.n	8006dd6 <HAL_SAI_IRQHandler+0x29a>
					/* Set the DMA Tx abort callback */
					hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006dac:	4a34      	ldr	r2, [pc, #208]	@ (8006e80 <HAL_SAI_IRQHandler+0x344>)
 8006dae:	639a      	str	r2, [r3, #56]	@ 0x38

					/* Abort DMA in IT mode */
					if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK) {
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7fd fab9 	bl	800432c <HAL_DMA_Abort_IT>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00a      	beq.n	8006dd6 <HAL_SAI_IRQHandler+0x29a>
						/* Update SAI error code */
						hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dc6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

						/* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
						HAL_SAI_ErrorCallback(hsai);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f86b 	bl	8006eac <HAL_SAI_ErrorCallback>
#endif
					}
				}
				if (hsai->hdmarx != NULL) {
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d04a      	beq.n	8006e74 <HAL_SAI_IRQHandler+0x338>
					/* Set the DMA Rx abort callback */
					hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006de2:	4a27      	ldr	r2, [pc, #156]	@ (8006e80 <HAL_SAI_IRQHandler+0x344>)
 8006de4:	639a      	str	r2, [r3, #56]	@ 0x38

					/* Abort DMA in IT mode */
					if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK) {
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7fd fa9e 	bl	800432c <HAL_DMA_Abort_IT>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d03e      	beq.n	8006e74 <HAL_SAI_IRQHandler+0x338>
						/* Update SAI error code */
						hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dfc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

						/* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
						HAL_SAI_ErrorCallback(hsai);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f850 	bl	8006eac <HAL_SAI_ErrorCallback>
			if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN) {
 8006e0c:	e032      	b.n	8006e74 <HAL_SAI_IRQHandler+0x338>
					}
				}
			} else {
				/* If WCKCFG occurs, SAI audio block is automatically disabled */
				/* Disable all interrupts and clear all flags */
				hsai->Instance->IMR = 0U;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2200      	movs	r2, #0
 8006e14:	611a      	str	r2, [r3, #16]
				hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e1e:	619a      	str	r2, [r3, #24]
				/* Set the SAI state to ready to be able to start again the process */
				hsai->State = HAL_SAI_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

				/* Initialize XferCount */
				hsai->XferCount = 0U;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

				/* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
				HAL_SAI_ErrorCallback(hsai);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 f83b 	bl	8006eac <HAL_SAI_ErrorCallback>
			if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN) {
 8006e36:	e01d      	b.n	8006e74 <HAL_SAI_IRQHandler+0x338>
#endif
			}
		}
		/* SAI CNRDY interrupt occurred ----------------------------------*/
		else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY)) {
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	f003 0310 	and.w	r3, r3, #16
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d019      	beq.n	8006e76 <HAL_SAI_IRQHandler+0x33a>
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	f003 0310 	and.w	r3, r3, #16
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d014      	beq.n	8006e76 <HAL_SAI_IRQHandler+0x33a>
			/* Clear the SAI CNRDY flag */
			__HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2210      	movs	r2, #16
 8006e52:	619a      	str	r2, [r3, #24]
			/* Change the SAI error code */
			hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e5a:	f043 0210 	orr.w	r2, r3, #16
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
			/* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
			HAL_SAI_ErrorCallback(hsai);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f821 	bl	8006eac <HAL_SAI_ErrorCallback>
#endif
		} else {
			/* Nothing to do */
		}
	}
}
 8006e6a:	e004      	b.n	8006e76 <HAL_SAI_IRQHandler+0x33a>
			if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN) {
 8006e6c:	bf00      	nop
 8006e6e:	e002      	b.n	8006e76 <HAL_SAI_IRQHandler+0x33a>
			if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN) {
 8006e70:	bf00      	nop
 8006e72:	e000      	b.n	8006e76 <HAL_SAI_IRQHandler+0x33a>
			if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN) {
 8006e74:	bf00      	nop
}
 8006e76:	bf00      	nop
 8006e78:	3718      	adds	r7, #24
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	08007353 	.word	0x08007353

08006e84 <HAL_SAI_TxCpltCallback>:
 * @brief Tx Transfer completed callback.
 * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
 *              the configuration information for SAI module.
 * @retval None
 */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
	UNUSED(hsai);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_SAI_TxCpltCallback could be implemented in the user file
	 */
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <HAL_SAI_TxHalfCpltCallback>:
 * @brief Tx Transfer Half completed callback.
 * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
 *              the configuration information for SAI module.
 * @retval None
 */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
	UNUSED(hsai);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
	 */
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <HAL_SAI_ErrorCallback>:
 * @brief SAI error callback.
 * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
 *              the configuration information for SAI module.
 * @retval None
 */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai) {
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
	UNUSED(hsai);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_SAI_ErrorCallback could be implemented in the user file
	 */
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <SAI_InitI2S>:
 * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize.
 * @param  nbslot number of slot minimum value is 2 and max is 16.
 *         the value must be a multiple of 2.
 * @retval HAL status
 */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot) {
 8006ec0:	b480      	push	{r7}
 8006ec2:	b087      	sub	sp, #28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]
 8006ecc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	75fb      	strb	r3, [r7, #23]

	hsai->Init.Protocol = SAI_FREE_PROTOCOL;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	631a      	str	r2, [r3, #48]	@ 0x30
	hsai->Init.FirstBit = SAI_FIRSTBIT_MSB;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	639a      	str	r2, [r3, #56]	@ 0x38
	/* Compute ClockStrobing according AudioMode */
	if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX)) {
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d003      	beq.n	8006eee <SAI_InitI2S+0x2e>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d103      	bne.n	8006ef6 <SAI_InitI2S+0x36>
		/* Transmit */
		hsai->Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006ef4:	e002      	b.n	8006efc <SAI_InitI2S+0x3c>
	} else {
		/* Receive */
		hsai->Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	hsai->FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006f02:	649a      	str	r2, [r3, #72]	@ 0x48
	hsai->SlotInit.SlotActive = SAI_SLOTACTIVE_ALL;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006f0a:	661a      	str	r2, [r3, #96]	@ 0x60
	hsai->SlotInit.FirstBitOffset = 0;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	655a      	str	r2, [r3, #84]	@ 0x54
	hsai->SlotInit.SlotNumber = nbslot;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	683a      	ldr	r2, [r7, #0]
 8006f16:	65da      	str	r2, [r3, #92]	@ 0x5c

	/* in IS2 the number of slot must be even */
	if ((nbslot & 0x1U) != 0U) {
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d001      	beq.n	8006f26 <SAI_InitI2S+0x66>
		return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e077      	b.n	8007016 <SAI_InitI2S+0x156>
	}

	if (protocol == SAI_I2S_STANDARD) {
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d107      	bne.n	8006f3c <SAI_InitI2S+0x7c>
		hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	64da      	str	r2, [r3, #76]	@ 0x4c
		hsai->FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8006f38:	651a      	str	r2, [r3, #80]	@ 0x50
 8006f3a:	e006      	b.n	8006f4a <SAI_InitI2S+0x8a>
	} else {
		/* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
		hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006f42:	64da      	str	r2, [r3, #76]	@ 0x4c
		hsai->FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	651a      	str	r2, [r3, #80]	@ 0x50
	}

	/* Frame definition */
	switch (datasize) {
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b03      	cmp	r3, #3
 8006f4e:	d84f      	bhi.n	8006ff0 <SAI_InitI2S+0x130>
 8006f50:	a201      	add	r2, pc, #4	@ (adr r2, 8006f58 <SAI_InitI2S+0x98>)
 8006f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f56:	bf00      	nop
 8006f58:	08006f69 	.word	0x08006f69
 8006f5c:	08006f8b 	.word	0x08006f8b
 8006f60:	08006fad 	.word	0x08006fad
 8006f64:	08006fcf 	.word	0x08006fcf
	case SAI_PROTOCOL_DATASIZE_16BIT:
		hsai->Init.DataSize = SAI_DATASIZE_16;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2280      	movs	r2, #128	@ 0x80
 8006f6c:	635a      	str	r2, [r3, #52]	@ 0x34
		hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	085b      	lsrs	r3, r3, #1
 8006f72:	015a      	lsls	r2, r3, #5
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	641a      	str	r2, [r3, #64]	@ 0x40
		hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	085b      	lsrs	r3, r3, #1
 8006f7c:	011a      	lsls	r2, r3, #4
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	645a      	str	r2, [r3, #68]	@ 0x44
		hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2240      	movs	r2, #64	@ 0x40
 8006f86:	659a      	str	r2, [r3, #88]	@ 0x58
		break;
 8006f88:	e035      	b.n	8006ff6 <SAI_InitI2S+0x136>
	case SAI_PROTOCOL_DATASIZE_16BITEXTENDED:
		hsai->Init.DataSize = SAI_DATASIZE_16;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2280      	movs	r2, #128	@ 0x80
 8006f8e:	635a      	str	r2, [r3, #52]	@ 0x34
		hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	085b      	lsrs	r3, r3, #1
 8006f94:	019a      	lsls	r2, r3, #6
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	641a      	str	r2, [r3, #64]	@ 0x40
		hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	085b      	lsrs	r3, r3, #1
 8006f9e:	015a      	lsls	r2, r3, #5
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	645a      	str	r2, [r3, #68]	@ 0x44
		hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2280      	movs	r2, #128	@ 0x80
 8006fa8:	659a      	str	r2, [r3, #88]	@ 0x58
		break;
 8006faa:	e024      	b.n	8006ff6 <SAI_InitI2S+0x136>
	case SAI_PROTOCOL_DATASIZE_24BIT:
		hsai->Init.DataSize = SAI_DATASIZE_24;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	22c0      	movs	r2, #192	@ 0xc0
 8006fb0:	635a      	str	r2, [r3, #52]	@ 0x34
		hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	085b      	lsrs	r3, r3, #1
 8006fb6:	019a      	lsls	r2, r3, #6
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	641a      	str	r2, [r3, #64]	@ 0x40
		hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	085b      	lsrs	r3, r3, #1
 8006fc0:	015a      	lsls	r2, r3, #5
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	645a      	str	r2, [r3, #68]	@ 0x44
		hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2280      	movs	r2, #128	@ 0x80
 8006fca:	659a      	str	r2, [r3, #88]	@ 0x58
		break;
 8006fcc:	e013      	b.n	8006ff6 <SAI_InitI2S+0x136>
	case SAI_PROTOCOL_DATASIZE_32BIT:
		hsai->Init.DataSize = SAI_DATASIZE_32;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	22e0      	movs	r2, #224	@ 0xe0
 8006fd2:	635a      	str	r2, [r3, #52]	@ 0x34
		hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	085b      	lsrs	r3, r3, #1
 8006fd8:	019a      	lsls	r2, r3, #6
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	641a      	str	r2, [r3, #64]	@ 0x40
		hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	085b      	lsrs	r3, r3, #1
 8006fe2:	015a      	lsls	r2, r3, #5
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	645a      	str	r2, [r3, #68]	@ 0x44
		hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2280      	movs	r2, #128	@ 0x80
 8006fec:	659a      	str	r2, [r3, #88]	@ 0x58
		break;
 8006fee:	e002      	b.n	8006ff6 <SAI_InitI2S+0x136>
	default:
		status = HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	75fb      	strb	r3, [r7, #23]
		break;
 8006ff4:	bf00      	nop
	}
	if (protocol == SAI_I2S_LSBJUSTIFIED) {
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d10b      	bne.n	8007014 <SAI_InitI2S+0x154>
		if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED) {
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d102      	bne.n	8007008 <SAI_InitI2S+0x148>
			hsai->SlotInit.FirstBitOffset = 16;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2210      	movs	r2, #16
 8007006:	655a      	str	r2, [r3, #84]	@ 0x54
		}
		if (datasize == SAI_PROTOCOL_DATASIZE_24BIT) {
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b02      	cmp	r3, #2
 800700c:	d102      	bne.n	8007014 <SAI_InitI2S+0x154>
			hsai->SlotInit.FirstBitOffset = 8;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2208      	movs	r2, #8
 8007012:	655a      	str	r2, [r3, #84]	@ 0x54
		}
	}
	return status;
 8007014:	7dfb      	ldrb	r3, [r7, #23]
}
 8007016:	4618      	mov	r0, r3
 8007018:	371c      	adds	r7, #28
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop

08007024 <SAI_InitPCM>:
 * @param  protocol one of the supported protocol
 * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
 * @param  nbslot number of slot minimum value is 1 and the max is 16.
 * @retval HAL status
 */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot) {
 8007024:	b480      	push	{r7}
 8007026:	b087      	sub	sp, #28
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
 8007030:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8007032:	2300      	movs	r3, #0
 8007034:	75fb      	strb	r3, [r7, #23]

	hsai->Init.Protocol = SAI_FREE_PROTOCOL;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	631a      	str	r2, [r3, #48]	@ 0x30
	hsai->Init.FirstBit = SAI_FIRSTBIT_MSB;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	639a      	str	r2, [r3, #56]	@ 0x38
	/* Compute ClockStrobing according AudioMode */
	if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX)) {
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d003      	beq.n	8007052 <SAI_InitPCM+0x2e>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	2b02      	cmp	r3, #2
 8007050:	d103      	bne.n	800705a <SAI_InitPCM+0x36>
		/* Transmit */
		hsai->Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2201      	movs	r2, #1
 8007056:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007058:	e002      	b.n	8007060 <SAI_InitPCM+0x3c>
	} else {
		/* Receive */
		hsai->Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2200      	movs	r2, #0
 800705e:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	hsai->FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	649a      	str	r2, [r3, #72]	@ 0x48
	hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800706c:	64da      	str	r2, [r3, #76]	@ 0x4c
	hsai->FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8007074:	651a      	str	r2, [r3, #80]	@ 0x50
	hsai->SlotInit.FirstBitOffset = 0;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	655a      	str	r2, [r3, #84]	@ 0x54
	hsai->SlotInit.SlotNumber = nbslot;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	65da      	str	r2, [r3, #92]	@ 0x5c
	hsai->SlotInit.SlotActive = SAI_SLOTACTIVE_ALL;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007088:	661a      	str	r2, [r3, #96]	@ 0x60

	if (protocol == SAI_PCM_SHORT) {
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	2b04      	cmp	r3, #4
 800708e:	d103      	bne.n	8007098 <SAI_InitPCM+0x74>
		hsai->FrameInit.ActiveFrameLength = 1;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2201      	movs	r2, #1
 8007094:	645a      	str	r2, [r3, #68]	@ 0x44
 8007096:	e002      	b.n	800709e <SAI_InitPCM+0x7a>
	} else {
		/* SAI_PCM_LONG */
		hsai->FrameInit.ActiveFrameLength = 13;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	220d      	movs	r2, #13
 800709c:	645a      	str	r2, [r3, #68]	@ 0x44
	}

	switch (datasize) {
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2b03      	cmp	r3, #3
 80070a2:	d837      	bhi.n	8007114 <SAI_InitPCM+0xf0>
 80070a4:	a201      	add	r2, pc, #4	@ (adr r2, 80070ac <SAI_InitPCM+0x88>)
 80070a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070aa:	bf00      	nop
 80070ac:	080070bd 	.word	0x080070bd
 80070b0:	080070d3 	.word	0x080070d3
 80070b4:	080070e9 	.word	0x080070e9
 80070b8:	080070ff 	.word	0x080070ff
	case SAI_PROTOCOL_DATASIZE_16BIT:
		hsai->Init.DataSize = SAI_DATASIZE_16;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2280      	movs	r2, #128	@ 0x80
 80070c0:	635a      	str	r2, [r3, #52]	@ 0x34
		hsai->FrameInit.FrameLength = 16U * nbslot;
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	011a      	lsls	r2, r3, #4
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	641a      	str	r2, [r3, #64]	@ 0x40
		hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2240      	movs	r2, #64	@ 0x40
 80070ce:	659a      	str	r2, [r3, #88]	@ 0x58
		break;
 80070d0:	e023      	b.n	800711a <SAI_InitPCM+0xf6>
	case SAI_PROTOCOL_DATASIZE_16BITEXTENDED:
		hsai->Init.DataSize = SAI_DATASIZE_16;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2280      	movs	r2, #128	@ 0x80
 80070d6:	635a      	str	r2, [r3, #52]	@ 0x34
		hsai->FrameInit.FrameLength = 32U * nbslot;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	015a      	lsls	r2, r3, #5
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	641a      	str	r2, [r3, #64]	@ 0x40
		hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2280      	movs	r2, #128	@ 0x80
 80070e4:	659a      	str	r2, [r3, #88]	@ 0x58
		break;
 80070e6:	e018      	b.n	800711a <SAI_InitPCM+0xf6>
	case SAI_PROTOCOL_DATASIZE_24BIT:
		hsai->Init.DataSize = SAI_DATASIZE_24;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	22c0      	movs	r2, #192	@ 0xc0
 80070ec:	635a      	str	r2, [r3, #52]	@ 0x34
		hsai->FrameInit.FrameLength = 32U * nbslot;
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	015a      	lsls	r2, r3, #5
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	641a      	str	r2, [r3, #64]	@ 0x40
		hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2280      	movs	r2, #128	@ 0x80
 80070fa:	659a      	str	r2, [r3, #88]	@ 0x58
		break;
 80070fc:	e00d      	b.n	800711a <SAI_InitPCM+0xf6>
	case SAI_PROTOCOL_DATASIZE_32BIT:
		hsai->Init.DataSize = SAI_DATASIZE_32;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	22e0      	movs	r2, #224	@ 0xe0
 8007102:	635a      	str	r2, [r3, #52]	@ 0x34
		hsai->FrameInit.FrameLength = 32U * nbslot;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	015a      	lsls	r2, r3, #5
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	641a      	str	r2, [r3, #64]	@ 0x40
		hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2280      	movs	r2, #128	@ 0x80
 8007110:	659a      	str	r2, [r3, #88]	@ 0x58
		break;
 8007112:	e002      	b.n	800711a <SAI_InitPCM+0xf6>
	default:
		status = HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	75fb      	strb	r3, [r7, #23]
		break;
 8007118:	bf00      	nop
	}

	return status;
 800711a:	7dfb      	ldrb	r3, [r7, #23]
}
 800711c:	4618      	mov	r0, r3
 800711e:	371c      	adds	r7, #28
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <SAI_InterruptFlag>:
 * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
 *              the configuration information for SAI module.
 * @param  mode SAI_MODE_DMA or SAI_MODE_IT
 * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode) {
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	460b      	mov	r3, r1
 8007132:	70fb      	strb	r3, [r7, #3]
	uint32_t tmpIT = SAI_IT_OVRUDR;
 8007134:	2301      	movs	r3, #1
 8007136:	60fb      	str	r3, [r7, #12]

	if (mode == SAI_MODE_IT) {
 8007138:	78fb      	ldrb	r3, [r7, #3]
 800713a:	2b01      	cmp	r3, #1
 800713c:	d103      	bne.n	8007146 <SAI_InterruptFlag+0x1e>
		tmpIT |= SAI_IT_FREQ;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f043 0308 	orr.w	r3, r3, #8
 8007144:	60fb      	str	r3, [r7, #12]
	}

	if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800714a:	2b08      	cmp	r3, #8
 800714c:	d10b      	bne.n	8007166 <SAI_InterruptFlag+0x3e>
			&& ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX))) {
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	2b03      	cmp	r3, #3
 8007154:	d003      	beq.n	800715e <SAI_InterruptFlag+0x36>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d103      	bne.n	8007166 <SAI_InterruptFlag+0x3e>
		tmpIT |= SAI_IT_CNRDY;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f043 0310 	orr.w	r3, r3, #16
 8007164:	60fb      	str	r3, [r7, #12]
	}

	if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX)) {
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	2b03      	cmp	r3, #3
 800716c:	d003      	beq.n	8007176 <SAI_InterruptFlag+0x4e>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	2b02      	cmp	r3, #2
 8007174:	d104      	bne.n	8007180 <SAI_InterruptFlag+0x58>
		tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800717c:	60fb      	str	r3, [r7, #12]
 800717e:	e003      	b.n	8007188 <SAI_InterruptFlag+0x60>
	} else {
		/* hsai has been configured in master mode */
		tmpIT |= SAI_IT_WCKCFG;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f043 0304 	orr.w	r3, r3, #4
 8007186:	60fb      	str	r3, [r7, #12]
	}
	return tmpIT;
 8007188:	68fb      	ldr	r3, [r7, #12]
}
 800718a:	4618      	mov	r0, r3
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
	...

08007198 <SAI_Disable>:
 * @brief  Disable the SAI and wait for the disabling.
 * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
 *              the configuration information for SAI module.
 * @retval None
 */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai) {
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
	uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80071a0:	4b18      	ldr	r3, [pc, #96]	@ (8007204 <SAI_Disable+0x6c>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a18      	ldr	r2, [pc, #96]	@ (8007208 <SAI_Disable+0x70>)
 80071a6:	fba2 2303 	umull	r2, r3, r2, r3
 80071aa:	0b1b      	lsrs	r3, r3, #12
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef status = HAL_OK;
 80071b0:	2300      	movs	r3, #0
 80071b2:	72fb      	strb	r3, [r7, #11]

	/* Disable the SAI instance */
	__HAL_SAI_DISABLE(hsai);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80071c2:	601a      	str	r2, [r3, #0]

	do {
		/* Check for the Timeout */
		if (count == 0U) {
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10a      	bne.n	80071e0 <SAI_Disable+0x48>
			/* Update error code */
			hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071d0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
			status = HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	72fb      	strb	r3, [r7, #11]
			break;
 80071de:	e009      	b.n	80071f4 <SAI_Disable+0x5c>
		}
		count--;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	3b01      	subs	r3, #1
 80071e4:	60fb      	str	r3, [r7, #12]
	} while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1e7      	bne.n	80071c4 <SAI_Disable+0x2c>

	return status;
 80071f4:	7afb      	ldrb	r3, [r7, #11]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3714      	adds	r7, #20
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	20000028 	.word	0x20000028
 8007208:	95cbec1b 	.word	0x95cbec1b

0800720c <SAI_DMATxCplt>:
 * @brief  DMA SAI transmit process complete callback.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *              the configuration information for the specified DMA module.
 * @retval None
 */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma) {
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
	SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007218:	60fb      	str	r3, [r7, #12]

	if (hdma->Init.Mode != DMA_CIRCULAR) {
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	2b20      	cmp	r3, #32
 8007220:	d01c      	beq.n	800725c <SAI_DMATxCplt+0x50>
		hsai->XferCount = 0;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

		/* Disable SAI Tx DMA Request */
		hsai->Instance->CR1 &= (uint32_t) (~SAI_xCR1_DMAEN);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007238:	601a      	str	r2, [r3, #0]

		/* Stop the interrupts error handling */
		__HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800723a:	2100      	movs	r1, #0
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f7ff ff73 	bl	8007128 <SAI_InterruptFlag>
 8007242:	4603      	mov	r3, r0
 8007244:	43d9      	mvns	r1, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	691a      	ldr	r2, [r3, #16]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	400a      	ands	r2, r1
 8007252:	611a      	str	r2, [r3, #16]

		hsai->State = HAL_SAI_STATE_READY;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
	}
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
	HAL_SAI_TxCpltCallback(hsai);
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f7ff fe11 	bl	8006e84 <HAL_SAI_TxCpltCallback>
#endif
}
 8007262:	bf00      	nop
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <SAI_DMATxHalfCplt>:
 * @brief  DMA SAI transmit process half complete callback.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *              the configuration information for the specified DMA module.
 * @retval None
 */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma) {
 800726a:	b580      	push	{r7, lr}
 800726c:	b084      	sub	sp, #16
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
	SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007276:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
	HAL_SAI_TxHalfCpltCallback(hsai);
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	f7ff fe0d 	bl	8006e98 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800727e:	bf00      	nop
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <SAI_DMARxCplt>:
 * @brief  DMA SAI receive process complete callback.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *              the configuration information for the specified DMA module.
 * @retval None
 */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma) {
 8007286:	b580      	push	{r7, lr}
 8007288:	b084      	sub	sp, #16
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
	SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007292:	60fb      	str	r3, [r7, #12]

	if (hdma->Init.Mode != DMA_CIRCULAR) {
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	69db      	ldr	r3, [r3, #28]
 8007298:	2b20      	cmp	r3, #32
 800729a:	d01c      	beq.n	80072d6 <SAI_DMARxCplt+0x50>
		/* Disable Rx DMA Request */
		hsai->Instance->CR1 &= (uint32_t) (~SAI_xCR1_DMAEN);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80072aa:	601a      	str	r2, [r3, #0]
		hsai->XferCount = 0;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

		/* Stop the interrupts error handling */
		__HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80072b4:	2100      	movs	r1, #0
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f7ff ff36 	bl	8007128 <SAI_InterruptFlag>
 80072bc:	4603      	mov	r3, r0
 80072be:	43d9      	mvns	r1, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	691a      	ldr	r2, [r3, #16]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	400a      	ands	r2, r1
 80072cc:	611a      	str	r2, [r3, #16]

		hsai->State = HAL_SAI_STATE_READY;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
	}
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
	HAL_SAI_RxCpltCallback(hsai);
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f7fa fdd0 	bl	8001e7c <HAL_SAI_RxCpltCallback>
#endif
}
 80072dc:	bf00      	nop
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <SAI_DMARxHalfCplt>:
 * @brief  DMA SAI receive process half complete callback
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *              the configuration information for the specified DMA module.
 * @retval None
 */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma) {
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
	SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
	HAL_SAI_RxHalfCpltCallback(hsai);
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	f7fa fdd2 	bl	8001e9c <HAL_SAI_RxHalfCpltCallback>
#endif
}
 80072f8:	bf00      	nop
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <SAI_DMAError>:
 * @brief  DMA SAI communication error callback.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *              the configuration information for the specified DMA module.
 * @retval None
 */
static void SAI_DMAError(DMA_HandleTypeDef *hdma) {
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
	SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800730c:	60fb      	str	r3, [r7, #12]

	/* Set SAI error code */
	hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007314:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

	/* Disable the SAI DMA request */
	hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800732c:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral */
	/* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
	(void) SAI_Disable(hsai);
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f7ff ff32 	bl	8007198 <SAI_Disable>

	/* Set the SAI state ready to be able to start again the process */
	hsai->State = HAL_SAI_STATE_READY;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

	/* Initialize XferCount */
	hsai->XferCount = 0U;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2200      	movs	r2, #0
 8007340:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

	/* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
	HAL_SAI_ErrorCallback(hsai);
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f7ff fdb1 	bl	8006eac <HAL_SAI_ErrorCallback>
#endif
}
 800734a:	bf00      	nop
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <SAI_DMAAbort>:
 * @brief  DMA SAI Abort callback.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *              the configuration information for the specified DMA module.
 * @retval None
 */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma) {
 8007352:	b580      	push	{r7, lr}
 8007354:	b084      	sub	sp, #16
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
	SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800735e:	60fb      	str	r3, [r7, #12]

	/* Disable DMA request */
	hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800736e:	601a      	str	r2, [r3, #0]

	/* Disable all interrupts and clear all flags */
	hsai->Instance->IMR = 0U;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2200      	movs	r2, #0
 8007376:	611a      	str	r2, [r3, #16]
	hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f04f 32ff 	mov.w	r2, #4294967295
 8007380:	619a      	str	r2, [r3, #24]

	if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG) {
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007388:	2b20      	cmp	r3, #32
 800738a:	d00a      	beq.n	80073a2 <SAI_DMAAbort+0x50>
		/* Disable SAI peripheral */
		/* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
		(void) SAI_Disable(hsai);
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f7ff ff03 	bl	8007198 <SAI_Disable>

		/* Flush the fifo */
		SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	685a      	ldr	r2, [r3, #4]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f042 0208 	orr.w	r2, r2, #8
 80073a0:	605a      	str	r2, [r3, #4]
	}
	/* Set the SAI state to ready to be able to start again the process */
	hsai->State = HAL_SAI_STATE_READY;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

	/* Initialize XferCount */
	hsai->XferCount = 0U;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

	/* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
	HAL_SAI_ErrorCallback(hsai);
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f7ff fd7a 	bl	8006eac <HAL_SAI_ErrorCallback>
#endif
}
 80073b8:	bf00      	nop
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <HAL_SPI_Init>:
 *         in the SPI_InitTypeDef and initialize the associated handle.
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi) {
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
	uint32_t frxth;

	/* Check the SPI handle allocation */
	if (hspi == NULL) {
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <HAL_SPI_Init+0x12>
		return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e095      	b.n	80074fe <HAL_SPI_Init+0x13e>
	assert_param(IS_SPI_NSS(hspi->Init.NSS));
	assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
	assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
	assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
	assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
	if (hspi->Init.TIMode == SPI_TIMODE_DISABLE) {
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d108      	bne.n	80073ec <HAL_SPI_Init+0x2c>
		assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
		assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

		if (hspi->Init.Mode == SPI_MODE_MASTER) {
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073e2:	d009      	beq.n	80073f8 <HAL_SPI_Init+0x38>
			assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
		} else {
			/* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
			hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	61da      	str	r2, [r3, #28]
 80073ea:	e005      	b.n	80073f8 <HAL_SPI_Init+0x38>
		}
	} else {
		assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

		/* Force polarity and phase to TI protocaol requirements */
		hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	611a      	str	r2, [r3, #16]
		hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

	if (hspi->State == HAL_SPI_STATE_RESET) {
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d106      	bne.n	8007418 <HAL_SPI_Init+0x58>
		/* Allocate lock resource and initialize it */
		hspi->Lock = HAL_UNLOCKED;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC... */
		HAL_SPI_MspInit(hspi);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f7fa fe2a 	bl	800206c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
	}

	hspi->State = HAL_SPI_STATE_BUSY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2202      	movs	r2, #2
 800741c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

	/* Disable the selected SPI peripheral */
	__HAL_SPI_DISABLE(hspi);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800742e:	601a      	str	r2, [r3, #0]

	/* Align by default the rs fifo threshold on the data size */
	if (hspi->Init.DataSize > SPI_DATASIZE_8BIT) {
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007438:	d902      	bls.n	8007440 <HAL_SPI_Init+0x80>
		frxth = SPI_RXFIFO_THRESHOLD_HF;
 800743a:	2300      	movs	r3, #0
 800743c:	60fb      	str	r3, [r7, #12]
 800743e:	e002      	b.n	8007446 <HAL_SPI_Init+0x86>
	} else {
		frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007440:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007444:	60fb      	str	r3, [r7, #12]
	}

	/* CRC calculation is valid only for 16Bit and 8 Bit */
	if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT)) {
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800744e:	d007      	beq.n	8007460 <HAL_SPI_Init+0xa0>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007458:	d002      	beq.n	8007460 <HAL_SPI_Init+0xa0>
		/* CRC must be disabled */
		hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	629a      	str	r2, [r3, #40]	@ 0x28
	}

	/*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
	/* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
	 Communication speed, First bit and CRC calculation state */
	WRITE_REG(hspi->Instance->CR1,
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007470:	431a      	orrs	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	f003 0302 	and.w	r3, r3, #2
 800747a:	431a      	orrs	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	695b      	ldr	r3, [r3, #20]
 8007480:	f003 0301 	and.w	r3, r3, #1
 8007484:	431a      	orrs	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	699b      	ldr	r3, [r3, #24]
 800748a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800748e:	431a      	orrs	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	69db      	ldr	r3, [r3, #28]
 8007494:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007498:	431a      	orrs	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074a2:	ea42 0103 	orr.w	r1, r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074aa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	430a      	orrs	r2, r1
 80074b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

	/* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
	WRITE_REG(hspi->Instance->CR2,
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	0c1b      	lsrs	r3, r3, #16
 80074bc:	f003 0204 	and.w	r2, r3, #4
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074c4:	f003 0310 	and.w	r3, r3, #16
 80074c8:	431a      	orrs	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074ce:	f003 0308 	and.w	r3, r3, #8
 80074d2:	431a      	orrs	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80074dc:	ea42 0103 	orr.w	r1, r2, r3
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	430a      	orrs	r2, r1
 80074ec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	661a      	str	r2, [r3, #96]	@ 0x60
	hspi->State = HAL_SPI_STATE_READY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

	return HAL_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <HAL_SPI_Transmit>:
 * @param  pData pointer to data buffer
 * @param  Size amount of data to be sent
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout) {
 8007506:	b580      	push	{r7, lr}
 8007508:	b088      	sub	sp, #32
 800750a:	af00      	add	r7, sp, #0
 800750c:	60f8      	str	r0, [r7, #12]
 800750e:	60b9      	str	r1, [r7, #8]
 8007510:	603b      	str	r3, [r7, #0]
 8007512:	4613      	mov	r3, r2
 8007514:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	HAL_StatusTypeDef errorcode = HAL_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	77fb      	strb	r3, [r7, #31]

	/* Check Direction parameter */
	assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

	/* Process Locked */
	__HAL_LOCK(hspi);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007520:	2b01      	cmp	r3, #1
 8007522:	d101      	bne.n	8007528 <HAL_SPI_Transmit+0x22>
 8007524:	2302      	movs	r3, #2
 8007526:	e158      	b.n	80077da <HAL_SPI_Transmit+0x2d4>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

	/* Init tickstart for timeout management*/
	tickstart = HAL_GetTick();
 8007530:	f7fc fc06 	bl	8003d40 <HAL_GetTick>
 8007534:	61b8      	str	r0, [r7, #24]
	initial_TxXferCount = Size;
 8007536:	88fb      	ldrh	r3, [r7, #6]
 8007538:	82fb      	strh	r3, [r7, #22]

	if (hspi->State != HAL_SPI_STATE_READY) {
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007540:	b2db      	uxtb	r3, r3
 8007542:	2b01      	cmp	r3, #1
 8007544:	d002      	beq.n	800754c <HAL_SPI_Transmit+0x46>
		errorcode = HAL_BUSY;
 8007546:	2302      	movs	r3, #2
 8007548:	77fb      	strb	r3, [r7, #31]
		goto error;
 800754a:	e13d      	b.n	80077c8 <HAL_SPI_Transmit+0x2c2>
	}

	if ((pData == NULL) || (Size == 0U)) {
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d002      	beq.n	8007558 <HAL_SPI_Transmit+0x52>
 8007552:	88fb      	ldrh	r3, [r7, #6]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d102      	bne.n	800755e <HAL_SPI_Transmit+0x58>
		errorcode = HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	77fb      	strb	r3, [r7, #31]
		goto error;
 800755c:	e134      	b.n	80077c8 <HAL_SPI_Transmit+0x2c2>
	}

	/* Set the transaction information */
	hspi->State = HAL_SPI_STATE_BUSY_TX;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2203      	movs	r2, #3
 8007562:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	661a      	str	r2, [r3, #96]	@ 0x60
	hspi->pTxBuffPtr = (uint8_t*) pData;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi->TxXferSize = Size;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	88fa      	ldrh	r2, [r7, #6]
 8007576:	879a      	strh	r2, [r3, #60]	@ 0x3c
	hspi->TxXferCount = Size;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	88fa      	ldrh	r2, [r7, #6]
 800757c:	87da      	strh	r2, [r3, #62]	@ 0x3e

	/*Init field not used in handle to zero */
	hspi->pRxBuffPtr = (uint8_t*) NULL;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi->RxXferSize = 0U;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	hspi->RxXferCount = 0U;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	hspi->TxISR = NULL;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi->RxISR = NULL;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	64da      	str	r2, [r3, #76]	@ 0x4c

	/* Configure communication direction : 1Line */
	if (hspi->Init.Direction == SPI_DIRECTION_1LINE) {
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075a8:	d10f      	bne.n	80075ca <HAL_SPI_Transmit+0xc4>
		/* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
		__HAL_SPI_DISABLE(hspi);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075b8:	601a      	str	r2, [r3, #0]
		SPI_1LINE_TX(hspi);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80075c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

	/* Check if the SPI is already enabled */
	if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075d4:	2b40      	cmp	r3, #64	@ 0x40
 80075d6:	d007      	beq.n	80075e8 <HAL_SPI_Transmit+0xe2>
		/* Enable SPI peripheral */
		__HAL_SPI_ENABLE(hspi);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075e6:	601a      	str	r2, [r3, #0]
	}

	/* Transmit data in 16 Bit mode */
	if (hspi->Init.DataSize > SPI_DATASIZE_8BIT) {
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80075f0:	d94b      	bls.n	800768a <HAL_SPI_Transmit+0x184>
		if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U)) {
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d002      	beq.n	8007600 <HAL_SPI_Transmit+0xfa>
 80075fa:	8afb      	ldrh	r3, [r7, #22]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d13e      	bne.n	800767e <HAL_SPI_Transmit+0x178>
			hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007604:	881a      	ldrh	r2, [r3, #0]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	60da      	str	r2, [r3, #12]
			hspi->pTxBuffPtr += sizeof(uint16_t);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007610:	1c9a      	adds	r2, r3, #2
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	639a      	str	r2, [r3, #56]	@ 0x38
			hspi->TxXferCount--;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800761a:	b29b      	uxth	r3, r3
 800761c:	3b01      	subs	r3, #1
 800761e:	b29a      	uxth	r2, r3
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	87da      	strh	r2, [r3, #62]	@ 0x3e
		}
		/* Transmit data in 16 Bit mode */
		while (hspi->TxXferCount > 0U) {
 8007624:	e02b      	b.n	800767e <HAL_SPI_Transmit+0x178>
			/* Wait until TXE flag is set to send data */
			if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) {
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f003 0302 	and.w	r3, r3, #2
 8007630:	2b02      	cmp	r3, #2
 8007632:	d112      	bne.n	800765a <HAL_SPI_Transmit+0x154>
				hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007638:	881a      	ldrh	r2, [r3, #0]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	60da      	str	r2, [r3, #12]
				hspi->pTxBuffPtr += sizeof(uint16_t);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007644:	1c9a      	adds	r2, r3, #2
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	639a      	str	r2, [r3, #56]	@ 0x38
				hspi->TxXferCount--;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800764e:	b29b      	uxth	r3, r3
 8007650:	3b01      	subs	r3, #1
 8007652:	b29a      	uxth	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007658:	e011      	b.n	800767e <HAL_SPI_Transmit+0x178>
			} else {
				/* Timeout management */
				if ((((HAL_GetTick() - tickstart) >= Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U)) {
 800765a:	f7fc fb71 	bl	8003d40 <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	683a      	ldr	r2, [r7, #0]
 8007666:	429a      	cmp	r2, r3
 8007668:	d803      	bhi.n	8007672 <HAL_SPI_Transmit+0x16c>
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007670:	d102      	bne.n	8007678 <HAL_SPI_Transmit+0x172>
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d102      	bne.n	800767e <HAL_SPI_Transmit+0x178>
					errorcode = HAL_TIMEOUT;
 8007678:	2303      	movs	r3, #3
 800767a:	77fb      	strb	r3, [r7, #31]
					goto error;
 800767c:	e0a4      	b.n	80077c8 <HAL_SPI_Transmit+0x2c2>
		while (hspi->TxXferCount > 0U) {
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007682:	b29b      	uxth	r3, r3
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1ce      	bne.n	8007626 <HAL_SPI_Transmit+0x120>
 8007688:	e07c      	b.n	8007784 <HAL_SPI_Transmit+0x27e>
			}
		}
	}
	/* Transmit data in 8 Bit mode */
	else {
		if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U)) {
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d002      	beq.n	8007698 <HAL_SPI_Transmit+0x192>
 8007692:	8afb      	ldrh	r3, [r7, #22]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d170      	bne.n	800777a <HAL_SPI_Transmit+0x274>
			if (hspi->TxXferCount > 1U) {
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800769c:	b29b      	uxth	r3, r3
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d912      	bls.n	80076c8 <HAL_SPI_Transmit+0x1c2>
				/* write on the data register in packing mode */
				hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076a6:	881a      	ldrh	r2, [r3, #0]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	60da      	str	r2, [r3, #12]
				hspi->pTxBuffPtr += sizeof(uint16_t);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b2:	1c9a      	adds	r2, r3, #2
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	639a      	str	r2, [r3, #56]	@ 0x38
				hspi->TxXferCount -= 2U;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076bc:	b29b      	uxth	r3, r3
 80076be:	3b02      	subs	r3, #2
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80076c6:	e058      	b.n	800777a <HAL_SPI_Transmit+0x274>
			} else {
				*((__IO uint8_t*) &hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	330c      	adds	r3, #12
 80076d2:	7812      	ldrb	r2, [r2, #0]
 80076d4:	701a      	strb	r2, [r3, #0]
				hspi->pTxBuffPtr++;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076da:	1c5a      	adds	r2, r3, #1
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	639a      	str	r2, [r3, #56]	@ 0x38
				hspi->TxXferCount--;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	3b01      	subs	r3, #1
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
			}
		}
		while (hspi->TxXferCount > 0U) {
 80076ee:	e044      	b.n	800777a <HAL_SPI_Transmit+0x274>
			/* Wait until TXE flag is set to send data */
			if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) {
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f003 0302 	and.w	r3, r3, #2
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d12b      	bne.n	8007756 <HAL_SPI_Transmit+0x250>
				if (hspi->TxXferCount > 1U) {
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007702:	b29b      	uxth	r3, r3
 8007704:	2b01      	cmp	r3, #1
 8007706:	d912      	bls.n	800772e <HAL_SPI_Transmit+0x228>
					/* write on the data register in packing mode */
					hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800770c:	881a      	ldrh	r2, [r3, #0]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	60da      	str	r2, [r3, #12]
					hspi->pTxBuffPtr += sizeof(uint16_t);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007718:	1c9a      	adds	r2, r3, #2
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	639a      	str	r2, [r3, #56]	@ 0x38
					hspi->TxXferCount -= 2U;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007722:	b29b      	uxth	r3, r3
 8007724:	3b02      	subs	r3, #2
 8007726:	b29a      	uxth	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800772c:	e025      	b.n	800777a <HAL_SPI_Transmit+0x274>
				} else {
					*((__IO uint8_t*) &hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	330c      	adds	r3, #12
 8007738:	7812      	ldrb	r2, [r2, #0]
 800773a:	701a      	strb	r2, [r3, #0]
					hspi->pTxBuffPtr++;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007740:	1c5a      	adds	r2, r3, #1
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	639a      	str	r2, [r3, #56]	@ 0x38
					hspi->TxXferCount--;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800774a:	b29b      	uxth	r3, r3
 800774c:	3b01      	subs	r3, #1
 800774e:	b29a      	uxth	r2, r3
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007754:	e011      	b.n	800777a <HAL_SPI_Transmit+0x274>
				}
			} else {
				/* Timeout management */
				if ((((HAL_GetTick() - tickstart) >= Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U)) {
 8007756:	f7fc faf3 	bl	8003d40 <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	683a      	ldr	r2, [r7, #0]
 8007762:	429a      	cmp	r2, r3
 8007764:	d803      	bhi.n	800776e <HAL_SPI_Transmit+0x268>
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800776c:	d102      	bne.n	8007774 <HAL_SPI_Transmit+0x26e>
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d102      	bne.n	800777a <HAL_SPI_Transmit+0x274>
					errorcode = HAL_TIMEOUT;
 8007774:	2303      	movs	r3, #3
 8007776:	77fb      	strb	r3, [r7, #31]
					goto error;
 8007778:	e026      	b.n	80077c8 <HAL_SPI_Transmit+0x2c2>
		while (hspi->TxXferCount > 0U) {
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800777e:	b29b      	uxth	r3, r3
 8007780:	2b00      	cmp	r3, #0
 8007782:	d1b5      	bne.n	80076f0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

	/* Check the end of the transaction */
	if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK) {
 8007784:	69ba      	ldr	r2, [r7, #24]
 8007786:	6839      	ldr	r1, [r7, #0]
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f000 ff6b 	bl	8008664 <SPI_EndRxTxTransaction>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d002      	beq.n	800779a <HAL_SPI_Transmit+0x294>
		hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2220      	movs	r2, #32
 8007798:	661a      	str	r2, [r3, #96]	@ 0x60
	}

	/* Clear overrun flag in 2 Lines communication mode because received is not read */
	if (hspi->Init.Direction == SPI_DIRECTION_2LINES) {
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d10a      	bne.n	80077b8 <HAL_SPI_Transmit+0x2b2>
		__HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077a2:	2300      	movs	r3, #0
 80077a4:	613b      	str	r3, [r7, #16]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	613b      	str	r3, [r7, #16]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	613b      	str	r3, [r7, #16]
 80077b6:	693b      	ldr	r3, [r7, #16]
	}

	if (hspi->ErrorCode != HAL_SPI_ERROR_NONE) {
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d002      	beq.n	80077c6 <HAL_SPI_Transmit+0x2c0>
		errorcode = HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	77fb      	strb	r3, [r7, #31]
 80077c4:	e000      	b.n	80077c8 <HAL_SPI_Transmit+0x2c2>
	}

	error: hspi->State = HAL_SPI_STATE_READY;
 80077c6:	bf00      	nop
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
	/* Process Unlocked */
	__HAL_UNLOCK(hspi);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
	return errorcode;
 80077d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3720      	adds	r7, #32
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <HAL_SPI_Receive>:
 * @param  pData pointer to data buffer
 * @param  Size amount of data to be received
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout) {
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b088      	sub	sp, #32
 80077e6:	af02      	add	r7, sp, #8
 80077e8:	60f8      	str	r0, [r7, #12]
 80077ea:	60b9      	str	r1, [r7, #8]
 80077ec:	603b      	str	r3, [r7, #0]
 80077ee:	4613      	mov	r3, r2
 80077f0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
	uint32_t tickstart;
	HAL_StatusTypeDef errorcode = HAL_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	75fb      	strb	r3, [r7, #23]

	if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES)) {
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077fe:	d112      	bne.n	8007826 <HAL_SPI_Receive+0x44>
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d10e      	bne.n	8007826 <HAL_SPI_Receive+0x44>
		hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2204      	movs	r2, #4
 800780c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
		/* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
		return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007810:	88fa      	ldrh	r2, [r7, #6]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	9300      	str	r3, [sp, #0]
 8007816:	4613      	mov	r3, r2
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	68b9      	ldr	r1, [r7, #8]
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f000 f910 	bl	8007a42 <HAL_SPI_TransmitReceive>
 8007822:	4603      	mov	r3, r0
 8007824:	e109      	b.n	8007a3a <HAL_SPI_Receive+0x258>
	}

	/* Process Locked */
	__HAL_LOCK(hspi);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800782c:	2b01      	cmp	r3, #1
 800782e:	d101      	bne.n	8007834 <HAL_SPI_Receive+0x52>
 8007830:	2302      	movs	r3, #2
 8007832:	e102      	b.n	8007a3a <HAL_SPI_Receive+0x258>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

	/* Init tickstart for timeout management*/
	tickstart = HAL_GetTick();
 800783c:	f7fc fa80 	bl	8003d40 <HAL_GetTick>
 8007840:	6138      	str	r0, [r7, #16]

	if (hspi->State != HAL_SPI_STATE_READY) {
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b01      	cmp	r3, #1
 800784c:	d002      	beq.n	8007854 <HAL_SPI_Receive+0x72>
		errorcode = HAL_BUSY;
 800784e:	2302      	movs	r3, #2
 8007850:	75fb      	strb	r3, [r7, #23]
		goto error;
 8007852:	e0e9      	b.n	8007a28 <HAL_SPI_Receive+0x246>
	}

	if ((pData == NULL) || (Size == 0U)) {
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d002      	beq.n	8007860 <HAL_SPI_Receive+0x7e>
 800785a:	88fb      	ldrh	r3, [r7, #6]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d102      	bne.n	8007866 <HAL_SPI_Receive+0x84>
		errorcode = HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	75fb      	strb	r3, [r7, #23]
		goto error;
 8007864:	e0e0      	b.n	8007a28 <HAL_SPI_Receive+0x246>
	}

	/* Set the transaction information */
	hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2204      	movs	r2, #4
 800786a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	661a      	str	r2, [r3, #96]	@ 0x60
	hspi->pRxBuffPtr = (uint8_t*) pData;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	68ba      	ldr	r2, [r7, #8]
 8007878:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi->RxXferSize = Size;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	88fa      	ldrh	r2, [r7, #6]
 800787e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	hspi->RxXferCount = Size;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	88fa      	ldrh	r2, [r7, #6]
 8007886:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

	/*Init field not used in handle to zero */
	hspi->pTxBuffPtr = (uint8_t*) NULL;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi->TxXferSize = 0U;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	879a      	strh	r2, [r3, #60]	@ 0x3c
	hspi->TxXferCount = 0U;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	87da      	strh	r2, [r3, #62]	@ 0x3e
	hspi->RxISR = NULL;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi->TxISR = NULL;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

	/* Set the Rx Fifo threshold */
	if (hspi->Init.DataSize > SPI_DATASIZE_8BIT) {
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80078b0:	d908      	bls.n	80078c4 <HAL_SPI_Receive+0xe2>
		/* Set RX Fifo threshold according the reception data length: 16bit */
		CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	685a      	ldr	r2, [r3, #4]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80078c0:	605a      	str	r2, [r3, #4]
 80078c2:	e007      	b.n	80078d4 <HAL_SPI_Receive+0xf2>
	} else {
		/* Set RX Fifo threshold according the reception data length: 8bit */
		SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	685a      	ldr	r2, [r3, #4]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80078d2:	605a      	str	r2, [r3, #4]
	}

	/* Configure communication direction: 1Line */
	if (hspi->Init.Direction == SPI_DIRECTION_1LINE) {
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078dc:	d10f      	bne.n	80078fe <HAL_SPI_Receive+0x11c>
		/* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
		__HAL_SPI_DISABLE(hspi);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078ec:	601a      	str	r2, [r3, #0]
		SPI_1LINE_RX(hspi);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80078fc:	601a      	str	r2, [r3, #0]
	}

	/* Check if the SPI is already enabled */
	if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007908:	2b40      	cmp	r3, #64	@ 0x40
 800790a:	d007      	beq.n	800791c <HAL_SPI_Receive+0x13a>
		/* Enable SPI peripheral */
		__HAL_SPI_ENABLE(hspi);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800791a:	601a      	str	r2, [r3, #0]
	}

	/* Receive data in 8 Bit mode */
	if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT) {
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007924:	d867      	bhi.n	80079f6 <HAL_SPI_Receive+0x214>
		/* Transfer loop */
		while (hspi->RxXferCount > 0U) {
 8007926:	e030      	b.n	800798a <HAL_SPI_Receive+0x1a8>
			/* Check the RXNE flag */
			if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) {
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f003 0301 	and.w	r3, r3, #1
 8007932:	2b01      	cmp	r3, #1
 8007934:	d117      	bne.n	8007966 <HAL_SPI_Receive+0x184>
				/* read the received data */
				(*(uint8_t*) hspi->pRxBuffPtr) = *(__IO uint8_t*) &hspi->Instance->DR;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f103 020c 	add.w	r2, r3, #12
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007942:	7812      	ldrb	r2, [r2, #0]
 8007944:	b2d2      	uxtb	r2, r2
 8007946:	701a      	strb	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint8_t);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800794c:	1c5a      	adds	r2, r3, #1
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	641a      	str	r2, [r3, #64]	@ 0x40
				hspi->RxXferCount--;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007958:	b29b      	uxth	r3, r3
 800795a:	3b01      	subs	r3, #1
 800795c:	b29a      	uxth	r2, r3
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8007964:	e011      	b.n	800798a <HAL_SPI_Receive+0x1a8>
			} else {
				/* Timeout management */
				if ((((HAL_GetTick() - tickstart) >= Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U)) {
 8007966:	f7fc f9eb 	bl	8003d40 <HAL_GetTick>
 800796a:	4602      	mov	r2, r0
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	1ad3      	subs	r3, r2, r3
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	429a      	cmp	r2, r3
 8007974:	d803      	bhi.n	800797e <HAL_SPI_Receive+0x19c>
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797c:	d102      	bne.n	8007984 <HAL_SPI_Receive+0x1a2>
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d102      	bne.n	800798a <HAL_SPI_Receive+0x1a8>
					errorcode = HAL_TIMEOUT;
 8007984:	2303      	movs	r3, #3
 8007986:	75fb      	strb	r3, [r7, #23]
					goto error;
 8007988:	e04e      	b.n	8007a28 <HAL_SPI_Receive+0x246>
		while (hspi->RxXferCount > 0U) {
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007990:	b29b      	uxth	r3, r3
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1c8      	bne.n	8007928 <HAL_SPI_Receive+0x146>
 8007996:	e034      	b.n	8007a02 <HAL_SPI_Receive+0x220>
		}
	} else {
		/* Transfer loop */
		while (hspi->RxXferCount > 0U) {
			/* Check the RXNE flag */
			if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) {
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	f003 0301 	and.w	r3, r3, #1
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d115      	bne.n	80079d2 <HAL_SPI_Receive+0x1f0>
				*((uint16_t*) hspi->pRxBuffPtr) = (uint16_t) hspi->Instance->DR;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68da      	ldr	r2, [r3, #12]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079b0:	b292      	uxth	r2, r2
 80079b2:	801a      	strh	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint16_t);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079b8:	1c9a      	adds	r2, r3, #2
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	641a      	str	r2, [r3, #64]	@ 0x40
				hspi->RxXferCount--;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	3b01      	subs	r3, #1
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80079d0:	e011      	b.n	80079f6 <HAL_SPI_Receive+0x214>
			} else {
				/* Timeout management */
				if ((((HAL_GetTick() - tickstart) >= Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U)) {
 80079d2:	f7fc f9b5 	bl	8003d40 <HAL_GetTick>
 80079d6:	4602      	mov	r2, r0
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d803      	bhi.n	80079ea <HAL_SPI_Receive+0x208>
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e8:	d102      	bne.n	80079f0 <HAL_SPI_Receive+0x20e>
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d102      	bne.n	80079f6 <HAL_SPI_Receive+0x214>
					errorcode = HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	75fb      	strb	r3, [r7, #23]
					goto error;
 80079f4:	e018      	b.n	8007a28 <HAL_SPI_Receive+0x246>
		while (hspi->RxXferCount > 0U) {
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1ca      	bne.n	8007998 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

	/* Check the end of the transaction */
	if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK) {
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	6839      	ldr	r1, [r7, #0]
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f000 fdd4 	bl	80085b4 <SPI_EndRxTransaction>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d002      	beq.n	8007a18 <HAL_SPI_Receive+0x236>
		hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2220      	movs	r2, #32
 8007a16:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

	if (hspi->ErrorCode != HAL_SPI_ERROR_NONE) {
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d002      	beq.n	8007a26 <HAL_SPI_Receive+0x244>
		errorcode = HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	75fb      	strb	r3, [r7, #23]
 8007a24:	e000      	b.n	8007a28 <HAL_SPI_Receive+0x246>
	}

	error: hspi->State = HAL_SPI_STATE_READY;
 8007a26:	bf00      	nop
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
	__HAL_UNLOCK(hspi);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
	return errorcode;
 8007a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3718      	adds	r7, #24
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <HAL_SPI_TransmitReceive>:
 * @param  Size amount of data to be sent and received
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
		uint32_t Timeout) {
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b08a      	sub	sp, #40	@ 0x28
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	60f8      	str	r0, [r7, #12]
 8007a4a:	60b9      	str	r1, [r7, #8]
 8007a4c:	607a      	str	r2, [r7, #4]
 8007a4e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

	/* Variable used to alternate Rx and Tx during transfer */
	uint32_t txallowed = 1U;
 8007a50:	2301      	movs	r3, #1
 8007a52:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_StatusTypeDef errorcode = HAL_OK;
 8007a54:	2300      	movs	r3, #0
 8007a56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	/* Check Direction parameter */
	assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

	/* Process Locked */
	__HAL_LOCK(hspi);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d101      	bne.n	8007a68 <HAL_SPI_TransmitReceive+0x26>
 8007a64:	2302      	movs	r3, #2
 8007a66:	e1fb      	b.n	8007e60 <HAL_SPI_TransmitReceive+0x41e>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

	/* Init tickstart for timeout management*/
	tickstart = HAL_GetTick();
 8007a70:	f7fc f966 	bl	8003d40 <HAL_GetTick>
 8007a74:	61f8      	str	r0, [r7, #28]

	/* Init temporary variables */
	tmp_state = hspi->State;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007a7c:	76fb      	strb	r3, [r7, #27]
	tmp_mode = hspi->Init.Mode;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	617b      	str	r3, [r7, #20]
	initial_TxXferCount = Size;
 8007a84:	887b      	ldrh	r3, [r7, #2]
 8007a86:	827b      	strh	r3, [r7, #18]
	initial_RxXferCount = Size;
 8007a88:	887b      	ldrh	r3, [r7, #2]
 8007a8a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

	if (!((tmp_state == HAL_SPI_STATE_READY)
 8007a8c:	7efb      	ldrb	r3, [r7, #27]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d00e      	beq.n	8007ab0 <HAL_SPI_TransmitReceive+0x6e>
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a98:	d106      	bne.n	8007aa8 <HAL_SPI_TransmitReceive+0x66>
			|| ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d102      	bne.n	8007aa8 <HAL_SPI_TransmitReceive+0x66>
					&& (tmp_state == HAL_SPI_STATE_BUSY_RX)))) {
 8007aa2:	7efb      	ldrb	r3, [r7, #27]
 8007aa4:	2b04      	cmp	r3, #4
 8007aa6:	d003      	beq.n	8007ab0 <HAL_SPI_TransmitReceive+0x6e>
		errorcode = HAL_BUSY;
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		goto error;
 8007aae:	e1cd      	b.n	8007e4c <HAL_SPI_TransmitReceive+0x40a>
	}

	if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U)) {
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d005      	beq.n	8007ac2 <HAL_SPI_TransmitReceive+0x80>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d002      	beq.n	8007ac2 <HAL_SPI_TransmitReceive+0x80>
 8007abc:	887b      	ldrh	r3, [r7, #2]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d103      	bne.n	8007aca <HAL_SPI_TransmitReceive+0x88>
		errorcode = HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		goto error;
 8007ac8:	e1c0      	b.n	8007e4c <HAL_SPI_TransmitReceive+0x40a>
	}

	/* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
	if (hspi->State != HAL_SPI_STATE_BUSY_RX) {
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	2b04      	cmp	r3, #4
 8007ad4:	d003      	beq.n	8007ade <HAL_SPI_TransmitReceive+0x9c>
		hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2205      	movs	r2, #5
 8007ada:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
	}

	/* Set the transaction information */
	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	661a      	str	r2, [r3, #96]	@ 0x60
	hspi->pRxBuffPtr = (uint8_t*) pRxData;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi->RxXferCount = Size;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	887a      	ldrh	r2, [r7, #2]
 8007aee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	hspi->RxXferSize = Size;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	887a      	ldrh	r2, [r7, #2]
 8007af6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	hspi->pTxBuffPtr = (uint8_t*) pTxData;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	68ba      	ldr	r2, [r7, #8]
 8007afe:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi->TxXferCount = Size;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	887a      	ldrh	r2, [r7, #2]
 8007b04:	87da      	strh	r2, [r3, #62]	@ 0x3e
	hspi->TxXferSize = Size;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	887a      	ldrh	r2, [r7, #2]
 8007b0a:	879a      	strh	r2, [r3, #60]	@ 0x3c

	/*Init field not used in handle to zero */
	hspi->RxISR = NULL;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi->TxISR = NULL;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2200      	movs	r2, #0
 8007b16:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

	/* Set the Rx Fifo threshold */
	if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U)) {
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007b20:	d802      	bhi.n	8007b28 <HAL_SPI_TransmitReceive+0xe6>
 8007b22:	8a3b      	ldrh	r3, [r7, #16]
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d908      	bls.n	8007b3a <HAL_SPI_TransmitReceive+0xf8>
		/* Set fiforxthreshold according the reception data length: 16bit */
		CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	685a      	ldr	r2, [r3, #4]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007b36:	605a      	str	r2, [r3, #4]
 8007b38:	e007      	b.n	8007b4a <HAL_SPI_TransmitReceive+0x108>
	} else {
		/* Set fiforxthreshold according the reception data length: 8bit */
		SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	685a      	ldr	r2, [r3, #4]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007b48:	605a      	str	r2, [r3, #4]
	}

	/* Check if the SPI is already enabled */
	if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b54:	2b40      	cmp	r3, #64	@ 0x40
 8007b56:	d007      	beq.n	8007b68 <HAL_SPI_TransmitReceive+0x126>
		/* Enable SPI peripheral */
		__HAL_SPI_ENABLE(hspi);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b66:	601a      	str	r2, [r3, #0]
	}

	/* Transmit and Receive data in 16 Bit mode */
	if (hspi->Init.DataSize > SPI_DATASIZE_8BIT) {
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007b70:	d97c      	bls.n	8007c6c <HAL_SPI_TransmitReceive+0x22a>
		if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U)) {
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d002      	beq.n	8007b80 <HAL_SPI_TransmitReceive+0x13e>
 8007b7a:	8a7b      	ldrh	r3, [r7, #18]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d169      	bne.n	8007c54 <HAL_SPI_TransmitReceive+0x212>
			hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b84:	881a      	ldrh	r2, [r3, #0]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	60da      	str	r2, [r3, #12]
			hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b90:	1c9a      	adds	r2, r3, #2
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	639a      	str	r2, [r3, #56]	@ 0x38
			hspi->TxXferCount--;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	3b01      	subs	r3, #1
 8007b9e:	b29a      	uxth	r2, r3
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	87da      	strh	r2, [r3, #62]	@ 0x3e
		}
		while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8007ba4:	e056      	b.n	8007c54 <HAL_SPI_TransmitReceive+0x212>
			/* Check TXE flag */
			if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U)) {
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	f003 0302 	and.w	r3, r3, #2
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d11b      	bne.n	8007bec <HAL_SPI_TransmitReceive+0x1aa>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d016      	beq.n	8007bec <HAL_SPI_TransmitReceive+0x1aa>
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d113      	bne.n	8007bec <HAL_SPI_TransmitReceive+0x1aa>
				hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bc8:	881a      	ldrh	r2, [r3, #0]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	60da      	str	r2, [r3, #12]
				hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd4:	1c9a      	adds	r2, r3, #2
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	639a      	str	r2, [r3, #56]	@ 0x38
				hspi->TxXferCount--;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	3b01      	subs	r3, #1
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	87da      	strh	r2, [r3, #62]	@ 0x3e
				/* Next Data is a reception (Rx). Tx not allowed */
				txallowed = 0U;
 8007be8:	2300      	movs	r3, #0
 8007bea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
			}

			/* Check RXNE flag */
			if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U)) {
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f003 0301 	and.w	r3, r3, #1
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d11c      	bne.n	8007c34 <HAL_SPI_TransmitReceive+0x1f2>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d016      	beq.n	8007c34 <HAL_SPI_TransmitReceive+0x1f2>
				*((uint16_t*) hspi->pRxBuffPtr) = (uint16_t) hspi->Instance->DR;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68da      	ldr	r2, [r3, #12]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c10:	b292      	uxth	r2, r2
 8007c12:	801a      	strh	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c18:	1c9a      	adds	r2, r3, #2
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	641a      	str	r2, [r3, #64]	@ 0x40
				hspi->RxXferCount--;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	3b01      	subs	r3, #1
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
				/* Next Data is a Transmission (Tx). Tx is allowed */
				txallowed = 1U;
 8007c30:	2301      	movs	r3, #1
 8007c32:	627b      	str	r3, [r7, #36]	@ 0x24
			}
			if (((HAL_GetTick() - tickstart) >= Timeout) && (Timeout != HAL_MAX_DELAY)) {
 8007c34:	f7fc f884 	bl	8003d40 <HAL_GetTick>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	1ad3      	subs	r3, r2, r3
 8007c3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d807      	bhi.n	8007c54 <HAL_SPI_TransmitReceive+0x212>
 8007c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c4a:	d003      	beq.n	8007c54 <HAL_SPI_TransmitReceive+0x212>
				errorcode = HAL_TIMEOUT;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
				goto error;
 8007c52:	e0fb      	b.n	8007e4c <HAL_SPI_TransmitReceive+0x40a>
		while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d1a3      	bne.n	8007ba6 <HAL_SPI_TransmitReceive+0x164>
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d19d      	bne.n	8007ba6 <HAL_SPI_TransmitReceive+0x164>
 8007c6a:	e0df      	b.n	8007e2c <HAL_SPI_TransmitReceive+0x3ea>
			}
		}
	}
	/* Transmit and Receive data in 8 Bit mode */
	else {
		if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U)) {
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d003      	beq.n	8007c7c <HAL_SPI_TransmitReceive+0x23a>
 8007c74:	8a7b      	ldrh	r3, [r7, #18]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	f040 80cb 	bne.w	8007e12 <HAL_SPI_TransmitReceive+0x3d0>
			if (hspi->TxXferCount > 1U) {
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d912      	bls.n	8007cac <HAL_SPI_TransmitReceive+0x26a>
				hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c8a:	881a      	ldrh	r2, [r3, #0]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	60da      	str	r2, [r3, #12]
				hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c96:	1c9a      	adds	r2, r3, #2
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	639a      	str	r2, [r3, #56]	@ 0x38
				hspi->TxXferCount -= 2U;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	3b02      	subs	r3, #2
 8007ca4:	b29a      	uxth	r2, r3
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007caa:	e0b2      	b.n	8007e12 <HAL_SPI_TransmitReceive+0x3d0>
			} else {
				*(__IO uint8_t*) &hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	330c      	adds	r3, #12
 8007cb6:	7812      	ldrb	r2, [r2, #0]
 8007cb8:	701a      	strb	r2, [r3, #0]
				hspi->pTxBuffPtr++;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cbe:	1c5a      	adds	r2, r3, #1
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	639a      	str	r2, [r3, #56]	@ 0x38
				hspi->TxXferCount--;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
			}
		}
		while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8007cd2:	e09e      	b.n	8007e12 <HAL_SPI_TransmitReceive+0x3d0>
			/* Check TXE flag */
			if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U)) {
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f003 0302 	and.w	r3, r3, #2
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d134      	bne.n	8007d4c <HAL_SPI_TransmitReceive+0x30a>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d02f      	beq.n	8007d4c <HAL_SPI_TransmitReceive+0x30a>
 8007cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d12c      	bne.n	8007d4c <HAL_SPI_TransmitReceive+0x30a>
				if (hspi->TxXferCount > 1U) {
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d912      	bls.n	8007d22 <HAL_SPI_TransmitReceive+0x2e0>
					hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d00:	881a      	ldrh	r2, [r3, #0]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	60da      	str	r2, [r3, #12]
					hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d0c:	1c9a      	adds	r2, r3, #2
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	639a      	str	r2, [r3, #56]	@ 0x38
					hspi->TxXferCount -= 2U;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	3b02      	subs	r3, #2
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007d20:	e012      	b.n	8007d48 <HAL_SPI_TransmitReceive+0x306>
				} else {
					*(__IO uint8_t*) &hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	330c      	adds	r3, #12
 8007d2c:	7812      	ldrb	r2, [r2, #0]
 8007d2e:	701a      	strb	r2, [r3, #0]
					hspi->pTxBuffPtr++;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d34:	1c5a      	adds	r2, r3, #1
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	639a      	str	r2, [r3, #56]	@ 0x38
					hspi->TxXferCount--;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	3b01      	subs	r3, #1
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	87da      	strh	r2, [r3, #62]	@ 0x3e
				}
				/* Next Data is a reception (Rx). Tx not allowed */
				txallowed = 0U;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
			}

			/* Wait until RXNE flag is reset */
			if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U)) {
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d148      	bne.n	8007dec <HAL_SPI_TransmitReceive+0x3aa>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d042      	beq.n	8007dec <HAL_SPI_TransmitReceive+0x3aa>
				if (hspi->RxXferCount > 1U) {
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d923      	bls.n	8007dba <HAL_SPI_TransmitReceive+0x378>
					*((uint16_t*) hspi->pRxBuffPtr) = (uint16_t) hspi->Instance->DR;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68da      	ldr	r2, [r3, #12]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d7c:	b292      	uxth	r2, r2
 8007d7e:	801a      	strh	r2, [r3, #0]
					hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d84:	1c9a      	adds	r2, r3, #2
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	641a      	str	r2, [r3, #64]	@ 0x40
					hspi->RxXferCount -= 2U;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	3b02      	subs	r3, #2
 8007d94:	b29a      	uxth	r2, r3
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
					if (hspi->RxXferCount <= 1U) {
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d81f      	bhi.n	8007de8 <HAL_SPI_TransmitReceive+0x3a6>
						/* Set RX Fifo threshold before to switch on 8 bit data size */
						SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	685a      	ldr	r2, [r3, #4]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007db6:	605a      	str	r2, [r3, #4]
 8007db8:	e016      	b.n	8007de8 <HAL_SPI_TransmitReceive+0x3a6>
					}
				} else {
					(*(uint8_t*) hspi->pRxBuffPtr) = *(__IO uint8_t*) &hspi->Instance->DR;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f103 020c 	add.w	r2, r3, #12
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dc6:	7812      	ldrb	r2, [r2, #0]
 8007dc8:	b2d2      	uxtb	r2, r2
 8007dca:	701a      	strb	r2, [r3, #0]
					hspi->pRxBuffPtr++;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dd0:	1c5a      	adds	r2, r3, #1
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	641a      	str	r2, [r3, #64]	@ 0x40
					hspi->RxXferCount--;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	3b01      	subs	r3, #1
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
				}
				/* Next Data is a Transmission (Tx). Tx is allowed */
				txallowed = 1U;
 8007de8:	2301      	movs	r3, #1
 8007dea:	627b      	str	r3, [r7, #36]	@ 0x24
			}
			if ((((HAL_GetTick() - tickstart) >= Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U)) {
 8007dec:	f7fb ffa8 	bl	8003d40 <HAL_GetTick>
 8007df0:	4602      	mov	r2, r0
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d803      	bhi.n	8007e04 <HAL_SPI_TransmitReceive+0x3c2>
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e02:	d102      	bne.n	8007e0a <HAL_SPI_TransmitReceive+0x3c8>
 8007e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d103      	bne.n	8007e12 <HAL_SPI_TransmitReceive+0x3d0>
				errorcode = HAL_TIMEOUT;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
				goto error;
 8007e10:	e01c      	b.n	8007e4c <HAL_SPI_TransmitReceive+0x40a>
		while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f47f af5b 	bne.w	8007cd4 <HAL_SPI_TransmitReceive+0x292>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f47f af54 	bne.w	8007cd4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

	/* Check the end of the transaction */
	if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK) {
 8007e2c:	69fa      	ldr	r2, [r7, #28]
 8007e2e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f000 fc17 	bl	8008664 <SPI_EndRxTxTransaction>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d006      	beq.n	8007e4a <HAL_SPI_TransmitReceive+0x408>
		errorcode = HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2220      	movs	r2, #32
 8007e46:	661a      	str	r2, [r3, #96]	@ 0x60
 8007e48:	e000      	b.n	8007e4c <HAL_SPI_TransmitReceive+0x40a>
	}

	error: hspi->State = HAL_SPI_STATE_READY;
 8007e4a:	bf00      	nop
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
	__HAL_UNLOCK(hspi);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
	return errorcode;
 8007e5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3728      	adds	r7, #40	@ 0x28
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <HAL_SPI_Transmit_DMA>:
 *               the configuration information for SPI module.
 * @param  pData pointer to data buffer
 * @param  Size amount of data to be sent
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size) {
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	4613      	mov	r3, r2
 8007e74:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef errorcode = HAL_OK;
 8007e76:	2300      	movs	r3, #0
 8007e78:	75fb      	strb	r3, [r7, #23]

	/* Check Direction parameter */
	assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

	/* Process Locked */
	__HAL_LOCK(hspi);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d101      	bne.n	8007e88 <HAL_SPI_Transmit_DMA+0x20>
 8007e84:	2302      	movs	r3, #2
 8007e86:	e0d8      	b.n	800803a <HAL_SPI_Transmit_DMA+0x1d2>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

	if (hspi->State != HAL_SPI_STATE_READY) {
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d002      	beq.n	8007ea2 <HAL_SPI_Transmit_DMA+0x3a>
		errorcode = HAL_BUSY;
 8007e9c:	2302      	movs	r3, #2
 8007e9e:	75fb      	strb	r3, [r7, #23]
		goto error;
 8007ea0:	e0c6      	b.n	8008030 <HAL_SPI_Transmit_DMA+0x1c8>
	}

	if ((pData == NULL) || (Size == 0U)) {
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d002      	beq.n	8007eae <HAL_SPI_Transmit_DMA+0x46>
 8007ea8:	88fb      	ldrh	r3, [r7, #6]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d102      	bne.n	8007eb4 <HAL_SPI_Transmit_DMA+0x4c>
		errorcode = HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	75fb      	strb	r3, [r7, #23]
		goto error;
 8007eb2:	e0bd      	b.n	8008030 <HAL_SPI_Transmit_DMA+0x1c8>
	}

	/* Set the transaction information */
	hspi->State = HAL_SPI_STATE_BUSY_TX;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2203      	movs	r2, #3
 8007eb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	661a      	str	r2, [r3, #96]	@ 0x60
	hspi->pTxBuffPtr = (uint8_t*) pData;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	68ba      	ldr	r2, [r7, #8]
 8007ec6:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi->TxXferSize = Size;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	88fa      	ldrh	r2, [r7, #6]
 8007ecc:	879a      	strh	r2, [r3, #60]	@ 0x3c
	hspi->TxXferCount = Size;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	88fa      	ldrh	r2, [r7, #6]
 8007ed2:	87da      	strh	r2, [r3, #62]	@ 0x3e

	/* Init field not used in handle to zero */
	hspi->pRxBuffPtr = (uint8_t*) NULL;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi->TxISR = NULL;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi->RxISR = NULL;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi->RxXferSize = 0U;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	hspi->RxXferCount = 0U;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

	/* Configure communication direction : 1Line */
	if (hspi->Init.Direction == SPI_DIRECTION_1LINE) {
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007efe:	d10f      	bne.n	8007f20 <HAL_SPI_Transmit_DMA+0xb8>
		/* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
		__HAL_SPI_DISABLE(hspi);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f0e:	601a      	str	r2, [r3, #0]
		SPI_1LINE_TX(hspi);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f1e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

	/* Set the SPI TxDMA Half transfer complete callback */
	hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f24:	4a47      	ldr	r2, [pc, #284]	@ (8008044 <HAL_SPI_Transmit_DMA+0x1dc>)
 8007f26:	631a      	str	r2, [r3, #48]	@ 0x30

	/* Set the SPI TxDMA transfer complete callback */
	hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f2c:	4a46      	ldr	r2, [pc, #280]	@ (8008048 <HAL_SPI_Transmit_DMA+0x1e0>)
 8007f2e:	62da      	str	r2, [r3, #44]	@ 0x2c

	/* Set the DMA error callback */
	hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f34:	4a45      	ldr	r2, [pc, #276]	@ (800804c <HAL_SPI_Transmit_DMA+0x1e4>)
 8007f36:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Set the DMA AbortCpltCallback */
	hspi->hdmatx->XferAbortCallback = NULL;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	639a      	str	r2, [r3, #56]	@ 0x38

	CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	685a      	ldr	r2, [r3, #4]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007f4e:	605a      	str	r2, [r3, #4]
	/* Packing mode is enabled only if the DMA setting is HALWORD */
	if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007f58:	d82d      	bhi.n	8007fb6 <HAL_SPI_Transmit_DMA+0x14e>
			&& (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)) {
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f5e:	699b      	ldr	r3, [r3, #24]
 8007f60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f64:	d127      	bne.n	8007fb6 <HAL_SPI_Transmit_DMA+0x14e>
		/* Check the even/odd of the data size + crc if enabled */
		if ((hspi->TxXferCount & 0x1U) == 0U) {
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	f003 0301 	and.w	r3, r3, #1
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d10f      	bne.n	8007f94 <HAL_SPI_Transmit_DMA+0x12c>
			CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	685a      	ldr	r2, [r3, #4]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007f82:	605a      	str	r2, [r3, #4]
			hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	085b      	lsrs	r3, r3, #1
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007f92:	e010      	b.n	8007fb6 <HAL_SPI_Transmit_DMA+0x14e>
		} else {
			SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	685a      	ldr	r2, [r3, #4]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007fa2:	605a      	str	r2, [r3, #4]
			hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	085b      	lsrs	r3, r3, #1
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	3301      	adds	r3, #1
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
		}
	}

	/* Enable the Tx DMA Stream/Channel */
	if (HAL_OK
			!= HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t) hspi->pTxBuffPtr, (uint32_t) &hspi->Instance->DR,
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	330c      	adds	r3, #12
 8007fc6:	461a      	mov	r2, r3
					hspi->TxXferCount)) {
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fcc:	b29b      	uxth	r3, r3
			!= HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t) hspi->pTxBuffPtr, (uint32_t) &hspi->Instance->DR,
 8007fce:	f7fc f90f 	bl	80041f0 <HAL_DMA_Start_IT>
 8007fd2:	4603      	mov	r3, r0
	if (HAL_OK
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00c      	beq.n	8007ff2 <HAL_SPI_Transmit_DMA+0x18a>
		/* Update SPI error code */
		SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fdc:	f043 0210 	orr.w	r2, r3, #16
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	661a      	str	r2, [r3, #96]	@ 0x60
		errorcode = HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	75fb      	strb	r3, [r7, #23]

		hspi->State = HAL_SPI_STATE_READY;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
		goto error;
 8007ff0:	e01e      	b.n	8008030 <HAL_SPI_Transmit_DMA+0x1c8>
	}

	/* Check if the SPI is already enabled */
	if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ffc:	2b40      	cmp	r3, #64	@ 0x40
 8007ffe:	d007      	beq.n	8008010 <HAL_SPI_Transmit_DMA+0x1a8>
		/* Enable SPI peripheral */
		__HAL_SPI_ENABLE(hspi);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800800e:	601a      	str	r2, [r3, #0]
	}

	/* Enable the SPI Error Interrupt Bit */
	__HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	685a      	ldr	r2, [r3, #4]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f042 0220 	orr.w	r2, r2, #32
 800801e:	605a      	str	r2, [r3, #4]

	/* Enable Tx DMA Request */
	SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	685a      	ldr	r2, [r3, #4]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f042 0202 	orr.w	r2, r2, #2
 800802e:	605a      	str	r2, [r3, #4]

	error:
	/* Process Unlocked */
	__HAL_UNLOCK(hspi);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2200      	movs	r2, #0
 8008034:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
	return errorcode;
 8008038:	7dfb      	ldrb	r3, [r7, #23]
}
 800803a:	4618      	mov	r0, r3
 800803c:	3718      	adds	r7, #24
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	080082f3 	.word	0x080082f3
 8008048:	0800824d 	.word	0x0800824d
 800804c:	0800830f 	.word	0x0800830f

08008050 <HAL_SPI_IRQHandler>:
 * @brief  Handle SPI interrupt request.
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for the specified SPI module.
 * @retval None
 */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi) {
 8008050:	b580      	push	{r7, lr}
 8008052:	b088      	sub	sp, #32
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
	uint32_t itsource = hspi->Instance->CR2;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	61fb      	str	r3, [r7, #28]
	uint32_t itflag = hspi->Instance->SR;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	61bb      	str	r3, [r7, #24]

	/* SPI in mode Receiver ----------------------------------------------------*/
	if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) && (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET)
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800806e:	2b00      	cmp	r3, #0
 8008070:	d10e      	bne.n	8008090 <HAL_SPI_IRQHandler+0x40>
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	f003 0301 	and.w	r3, r3, #1
 8008078:	2b00      	cmp	r3, #0
 800807a:	d009      	beq.n	8008090 <HAL_SPI_IRQHandler+0x40>
			&& (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET)) {
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008082:	2b00      	cmp	r3, #0
 8008084:	d004      	beq.n	8008090 <HAL_SPI_IRQHandler+0x40>
		hspi->RxISR(hspi);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	4798      	blx	r3
		return;
 800808e:	e0ce      	b.n	800822e <HAL_SPI_IRQHandler+0x1de>
	}

	/* SPI in mode Transmitter -------------------------------------------------*/
	if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET)) {
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	f003 0302 	and.w	r3, r3, #2
 8008096:	2b00      	cmp	r3, #0
 8008098:	d009      	beq.n	80080ae <HAL_SPI_IRQHandler+0x5e>
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d004      	beq.n	80080ae <HAL_SPI_IRQHandler+0x5e>
		hspi->TxISR(hspi);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	4798      	blx	r3
		return;
 80080ac:	e0bf      	b.n	800822e <HAL_SPI_IRQHandler+0x1de>
	}

	/* SPI in Error Treatment --------------------------------------------------*/
	if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	f003 0320 	and.w	r3, r3, #32
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10a      	bne.n	80080ce <HAL_SPI_IRQHandler+0x7e>
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d105      	bne.n	80080ce <HAL_SPI_IRQHandler+0x7e>
			|| (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET))
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f000 80b0 	beq.w	800822e <HAL_SPI_IRQHandler+0x1de>
			&& (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET)) {
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	f003 0320 	and.w	r3, r3, #32
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f000 80aa 	beq.w	800822e <HAL_SPI_IRQHandler+0x1de>
		/* SPI Overrun error interrupt occurred ----------------------------------*/
		if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) {
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d023      	beq.n	800812c <HAL_SPI_IRQHandler+0xdc>
			if (hspi->State != HAL_SPI_STATE_BUSY_TX) {
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	2b03      	cmp	r3, #3
 80080ee:	d011      	beq.n	8008114 <HAL_SPI_IRQHandler+0xc4>
				SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080f4:	f043 0204 	orr.w	r2, r3, #4
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	661a      	str	r2, [r3, #96]	@ 0x60
				__HAL_SPI_CLEAR_OVRFLAG(hspi);
 80080fc:	2300      	movs	r3, #0
 80080fe:	617b      	str	r3, [r7, #20]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	617b      	str	r3, [r7, #20]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	617b      	str	r3, [r7, #20]
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	e00b      	b.n	800812c <HAL_SPI_IRQHandler+0xdc>
			} else {
				__HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008114:	2300      	movs	r3, #0
 8008116:	613b      	str	r3, [r7, #16]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	613b      	str	r3, [r7, #16]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	613b      	str	r3, [r7, #16]
 8008128:	693b      	ldr	r3, [r7, #16]
				return;
 800812a:	e080      	b.n	800822e <HAL_SPI_IRQHandler+0x1de>
			}
		}

		/* SPI Mode Fault error interrupt occurred -------------------------------*/
		if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) {
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	f003 0320 	and.w	r3, r3, #32
 8008132:	2b00      	cmp	r3, #0
 8008134:	d014      	beq.n	8008160 <HAL_SPI_IRQHandler+0x110>
			SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800813a:	f043 0201 	orr.w	r2, r3, #1
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	661a      	str	r2, [r3, #96]	@ 0x60
			__HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008142:	2300      	movs	r3, #0
 8008144:	60fb      	str	r3, [r7, #12]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	60fb      	str	r3, [r7, #12]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800815c:	601a      	str	r2, [r3, #0]
 800815e:	68fb      	ldr	r3, [r7, #12]
		}

		/* SPI Frame error interrupt occurred ------------------------------------*/
		if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET) {
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008166:	2b00      	cmp	r3, #0
 8008168:	d00c      	beq.n	8008184 <HAL_SPI_IRQHandler+0x134>
			SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800816e:	f043 0208 	orr.w	r2, r3, #8
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	661a      	str	r2, [r3, #96]	@ 0x60
			__HAL_SPI_CLEAR_FREFLAG(hspi);
 8008176:	2300      	movs	r3, #0
 8008178:	60bb      	str	r3, [r7, #8]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	60bb      	str	r3, [r7, #8]
 8008182:	68bb      	ldr	r3, [r7, #8]
		}

		if (hspi->ErrorCode != HAL_SPI_ERROR_NONE) {
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008188:	2b00      	cmp	r3, #0
 800818a:	d04f      	beq.n	800822c <HAL_SPI_IRQHandler+0x1dc>
			/* Disable all interrupts */
			__HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	685a      	ldr	r2, [r3, #4]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800819a:	605a      	str	r2, [r3, #4]

			hspi->State = HAL_SPI_STATE_READY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
			/* Disable the SPI DMA requests if enabled */
			if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN))) {
 80081a4:	69fb      	ldr	r3, [r7, #28]
 80081a6:	f003 0302 	and.w	r3, r3, #2
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d104      	bne.n	80081b8 <HAL_SPI_IRQHandler+0x168>
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	f003 0301 	and.w	r3, r3, #1
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d034      	beq.n	8008222 <HAL_SPI_IRQHandler+0x1d2>
				CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	685a      	ldr	r2, [r3, #4]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f022 0203 	bic.w	r2, r2, #3
 80081c6:	605a      	str	r2, [r3, #4]

				/* Abort the SPI DMA Rx channel */
				if (hspi->hdmarx != NULL) {
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d011      	beq.n	80081f4 <HAL_SPI_IRQHandler+0x1a4>
					/* Set the SPI DMA Abort callback :
					 will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
					hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081d4:	4a17      	ldr	r2, [pc, #92]	@ (8008234 <HAL_SPI_IRQHandler+0x1e4>)
 80081d6:	639a      	str	r2, [r3, #56]	@ 0x38
					if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx)) {
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081dc:	4618      	mov	r0, r3
 80081de:	f7fc f8a5 	bl	800432c <HAL_DMA_Abort_IT>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d005      	beq.n	80081f4 <HAL_SPI_IRQHandler+0x1a4>
						SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081ec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	661a      	str	r2, [r3, #96]	@ 0x60
					}
				}
				/* Abort the SPI DMA Tx channel */
				if (hspi->hdmatx != NULL) {
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d016      	beq.n	800822a <HAL_SPI_IRQHandler+0x1da>
					/* Set the SPI DMA Abort callback :
					 will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
					hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008200:	4a0c      	ldr	r2, [pc, #48]	@ (8008234 <HAL_SPI_IRQHandler+0x1e4>)
 8008202:	639a      	str	r2, [r3, #56]	@ 0x38
					if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx)) {
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008208:	4618      	mov	r0, r3
 800820a:	f7fc f88f 	bl	800432c <HAL_DMA_Abort_IT>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00a      	beq.n	800822a <HAL_SPI_IRQHandler+0x1da>
						SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008218:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	661a      	str	r2, [r3, #96]	@ 0x60
				if (hspi->hdmatx != NULL) {
 8008220:	e003      	b.n	800822a <HAL_SPI_IRQHandler+0x1da>
			} else {
				/* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
				HAL_SPI_ErrorCallback(hspi);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7fa fd06 	bl	8002c34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
			}
		}
		return;
 8008228:	e000      	b.n	800822c <HAL_SPI_IRQHandler+0x1dc>
				if (hspi->hdmatx != NULL) {
 800822a:	bf00      	nop
		return;
 800822c:	bf00      	nop
	}
}
 800822e:	3720      	adds	r7, #32
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	0800834f 	.word	0x0800834f

08008238 <HAL_SPI_TxHalfCpltCallback>:
 * @brief  Tx Half Transfer completed callback.
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval None
 */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) {
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
	UNUSED(hspi);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
	 */
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <SPI_DMATransmitCplt>:
 * @brief  DMA SPI transmit process complete callback.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA module.
 * @retval None
 */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma) {
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
	SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef*) (((DMA_HandleTypeDef*) hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008258:	617b      	str	r3, [r7, #20]
	uint32_t tickstart;

	/* Init tickstart for timeout management*/
	tickstart = HAL_GetTick();
 800825a:	f7fb fd71 	bl	8003d40 <HAL_GetTick>
 800825e:	6138      	str	r0, [r7, #16]

	/* DMA Normal Mode */
	if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC) {
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 0320 	and.w	r3, r3, #32
 800826a:	2b20      	cmp	r3, #32
 800826c:	d03b      	beq.n	80082e6 <SPI_DMATransmitCplt+0x9a>
		/* Disable ERR interrupt */
		__HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	685a      	ldr	r2, [r3, #4]
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f022 0220 	bic.w	r2, r2, #32
 800827c:	605a      	str	r2, [r3, #4]

		/* Disable Tx DMA Request */
		CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	685a      	ldr	r2, [r3, #4]
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f022 0202 	bic.w	r2, r2, #2
 800828c:	605a      	str	r2, [r3, #4]

		/* Check the end of the transaction */
		if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK) {
 800828e:	693a      	ldr	r2, [r7, #16]
 8008290:	2164      	movs	r1, #100	@ 0x64
 8008292:	6978      	ldr	r0, [r7, #20]
 8008294:	f000 f9e6 	bl	8008664 <SPI_EndRxTxTransaction>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d005      	beq.n	80082aa <SPI_DMATransmitCplt+0x5e>
			SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082a2:	f043 0220 	orr.w	r2, r3, #32
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	661a      	str	r2, [r3, #96]	@ 0x60
		}

		/* Clear overrun flag in 2 Lines communication mode because received data is not read */
		if (hspi->Init.Direction == SPI_DIRECTION_2LINES) {
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d10a      	bne.n	80082c8 <SPI_DMATransmitCplt+0x7c>
			__HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082b2:	2300      	movs	r3, #0
 80082b4:	60fb      	str	r3, [r7, #12]
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	60fb      	str	r3, [r7, #12]
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	60fb      	str	r3, [r7, #12]
 80082c6:	68fb      	ldr	r3, [r7, #12]
		}

		hspi->TxXferCount = 0U;
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	2200      	movs	r2, #0
 80082cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
		hspi->State = HAL_SPI_STATE_READY;
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

		if (hspi->ErrorCode != HAL_SPI_ERROR_NONE) {
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d003      	beq.n	80082e6 <SPI_DMATransmitCplt+0x9a>
			/* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
			HAL_SPI_ErrorCallback(hspi);
 80082de:	6978      	ldr	r0, [r7, #20]
 80082e0:	f7fa fca8 	bl	8002c34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
			return;
 80082e4:	e002      	b.n	80082ec <SPI_DMATransmitCplt+0xa0>
	}
	/* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
	HAL_SPI_TxCpltCallback(hspi);
 80082e6:	6978      	ldr	r0, [r7, #20]
 80082e8:	f7fa fcba 	bl	8002c60 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80082ec:	3718      	adds	r7, #24
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <SPI_DMAHalfTransmitCplt>:
 * @brief  DMA SPI half transmit process complete callback.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA module.
 * @retval None
 */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) {
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b084      	sub	sp, #16
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
	SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef*) (((DMA_HandleTypeDef*) hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082fe:	60fb      	str	r3, [r7, #12]

	/* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
	HAL_SPI_TxHalfCpltCallback(hspi);
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f7ff ff99 	bl	8008238 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008306:	bf00      	nop
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <SPI_DMAError>:
 * @brief  DMA SPI communication error callback.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA module.
 * @retval None
 */
static void SPI_DMAError(DMA_HandleTypeDef *hdma) {
 800830e:	b580      	push	{r7, lr}
 8008310:	b084      	sub	sp, #16
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
	SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef*) (((DMA_HandleTypeDef*) hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800831a:	60fb      	str	r3, [r7, #12]

	/* Stop the disable DMA transfer on SPI side */
	CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	685a      	ldr	r2, [r3, #4]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f022 0203 	bic.w	r2, r2, #3
 800832a:	605a      	str	r2, [r3, #4]

	SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008330:	f043 0210 	orr.w	r2, r3, #16
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	661a      	str	r2, [r3, #96]	@ 0x60
	hspi->State = HAL_SPI_STATE_READY;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
	/* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
	HAL_SPI_ErrorCallback(hspi);
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	f7fa fc77 	bl	8002c34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008346:	bf00      	nop
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <SPI_DMAAbortOnError>:
 * @brief  DMA SPI communication abort callback, when initiated by HAL services on Error
 *         (To be called at end of DMA Abort procedure following error occurrence).
 * @param  hdma DMA handle.
 * @retval None
 */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma) {
 800834e:	b580      	push	{r7, lr}
 8008350:	b084      	sub	sp, #16
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
	SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef*) (((DMA_HandleTypeDef*) hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800835a:	60fb      	str	r3, [r7, #12]
	hspi->RxXferCount = 0U;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2200      	movs	r2, #0
 8008360:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	hspi->TxXferCount = 0U;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2200      	movs	r2, #0
 8008368:	87da      	strh	r2, [r3, #62]	@ 0x3e

	/* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
	HAL_SPI_ErrorCallback(hspi);
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f7fa fc62 	bl	8002c34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008370:	bf00      	nop
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <SPI_WaitFlagStateUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
		uint32_t Timeout, uint32_t Tickstart) {
 8008378:	b580      	push	{r7, lr}
 800837a:	b088      	sub	sp, #32
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	603b      	str	r3, [r7, #0]
 8008384:	4613      	mov	r3, r2
 8008386:	71fb      	strb	r3, [r7, #7]
	__IO uint32_t count;
	uint32_t tmp_timeout;
	uint32_t tmp_tickstart;

	/* Adjust Timeout value  in case of end of transfer */
	tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008388:	f7fb fcda 	bl	8003d40 <HAL_GetTick>
 800838c:	4602      	mov	r2, r0
 800838e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008390:	1a9b      	subs	r3, r3, r2
 8008392:	683a      	ldr	r2, [r7, #0]
 8008394:	4413      	add	r3, r2
 8008396:	61fb      	str	r3, [r7, #28]
	tmp_tickstart = HAL_GetTick();
 8008398:	f7fb fcd2 	bl	8003d40 <HAL_GetTick>
 800839c:	61b8      	str	r0, [r7, #24]

	/* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
	count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800839e:	4b39      	ldr	r3, [pc, #228]	@ (8008484 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	015b      	lsls	r3, r3, #5
 80083a4:	0d1b      	lsrs	r3, r3, #20
 80083a6:	69fa      	ldr	r2, [r7, #28]
 80083a8:	fb02 f303 	mul.w	r3, r2, r3
 80083ac:	617b      	str	r3, [r7, #20]

	while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State) {
 80083ae:	e054      	b.n	800845a <SPI_WaitFlagStateUntilTimeout+0xe2>
		if (Timeout != HAL_MAX_DELAY) {
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083b6:	d050      	beq.n	800845a <SPI_WaitFlagStateUntilTimeout+0xe2>
			if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U)) {
 80083b8:	f7fb fcc2 	bl	8003d40 <HAL_GetTick>
 80083bc:	4602      	mov	r2, r0
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	69fa      	ldr	r2, [r7, #28]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d902      	bls.n	80083ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d13d      	bne.n	800844a <SPI_WaitFlagStateUntilTimeout+0xd2>
				/* Disable the SPI and reset the CRC: the CRC value should be cleared
				 on both master and slave sides in order to resynchronize the master
				 and slave for their respective CRC calculation */

				/* Disable TXE, RXNE and ERR interrupts for the interrupt process */
				__HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	685a      	ldr	r2, [r3, #4]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80083dc:	605a      	str	r2, [r3, #4]

				if ((hspi->Init.Mode == SPI_MODE_MASTER)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80083e6:	d111      	bne.n	800840c <SPI_WaitFlagStateUntilTimeout+0x94>
						&& ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083f0:	d004      	beq.n	80083fc <SPI_WaitFlagStateUntilTimeout+0x84>
								|| (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))) {
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083fa:	d107      	bne.n	800840c <SPI_WaitFlagStateUntilTimeout+0x94>
					/* Disable SPI peripheral */
					__HAL_SPI_DISABLE(hspi);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800840a:	601a      	str	r2, [r3, #0]
				}

				/* Reset CRC Calculation */
				if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) {
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008410:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008414:	d10f      	bne.n	8008436 <SPI_WaitFlagStateUntilTimeout+0xbe>
					SPI_RESET_CRC(hspi);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008434:	601a      	str	r2, [r3, #0]
				}

				hspi->State = HAL_SPI_STATE_READY;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2201      	movs	r2, #1
 800843a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

				/* Process Unlocked */
				__HAL_UNLOCK(hspi);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

				return HAL_TIMEOUT;
 8008446:	2303      	movs	r3, #3
 8008448:	e017      	b.n	800847a <SPI_WaitFlagStateUntilTimeout+0x102>
			}
			/* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
			if (count == 0U) {
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d101      	bne.n	8008454 <SPI_WaitFlagStateUntilTimeout+0xdc>
				tmp_timeout = 0U;
 8008450:	2300      	movs	r3, #0
 8008452:	61fb      	str	r3, [r7, #28]
			}
			count--;
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	3b01      	subs	r3, #1
 8008458:	617b      	str	r3, [r7, #20]
	while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State) {
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	689a      	ldr	r2, [r3, #8]
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	4013      	ands	r3, r2
 8008464:	68ba      	ldr	r2, [r7, #8]
 8008466:	429a      	cmp	r2, r3
 8008468:	bf0c      	ite	eq
 800846a:	2301      	moveq	r3, #1
 800846c:	2300      	movne	r3, #0
 800846e:	b2db      	uxtb	r3, r3
 8008470:	461a      	mov	r2, r3
 8008472:	79fb      	ldrb	r3, [r7, #7]
 8008474:	429a      	cmp	r2, r3
 8008476:	d19b      	bne.n	80083b0 <SPI_WaitFlagStateUntilTimeout+0x38>
		}
	}

	return HAL_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3720      	adds	r7, #32
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	20000028 	.word	0x20000028

08008488 <SPI_WaitFifoStateUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
		uint32_t Timeout, uint32_t Tickstart) {
 8008488:	b580      	push	{r7, lr}
 800848a:	b08a      	sub	sp, #40	@ 0x28
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
 8008494:	603b      	str	r3, [r7, #0]
	__IO uint32_t count;
	uint32_t tmp_timeout;
	uint32_t tmp_tickstart;
	__IO uint8_t *ptmpreg8;
	__IO uint8_t tmpreg8 = 0;
 8008496:	2300      	movs	r3, #0
 8008498:	75fb      	strb	r3, [r7, #23]

	/* Adjust Timeout value  in case of end of transfer */
	tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800849a:	f7fb fc51 	bl	8003d40 <HAL_GetTick>
 800849e:	4602      	mov	r2, r0
 80084a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a2:	1a9b      	subs	r3, r3, r2
 80084a4:	683a      	ldr	r2, [r7, #0]
 80084a6:	4413      	add	r3, r2
 80084a8:	627b      	str	r3, [r7, #36]	@ 0x24
	tmp_tickstart = HAL_GetTick();
 80084aa:	f7fb fc49 	bl	8003d40 <HAL_GetTick>
 80084ae:	6238      	str	r0, [r7, #32]

	/* Initialize the 8bit temporary pointer */
	ptmpreg8 = (__IO uint8_t*) &hspi->Instance->DR;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	330c      	adds	r3, #12
 80084b6:	61fb      	str	r3, [r7, #28]

	/* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
	count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80084b8:	4b3d      	ldr	r3, [pc, #244]	@ (80085b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	4613      	mov	r3, r2
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	4413      	add	r3, r2
 80084c2:	00da      	lsls	r2, r3, #3
 80084c4:	1ad3      	subs	r3, r2, r3
 80084c6:	0d1b      	lsrs	r3, r3, #20
 80084c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084ca:	fb02 f303 	mul.w	r3, r2, r3
 80084ce:	61bb      	str	r3, [r7, #24]

	while ((hspi->Instance->SR & Fifo) != State) {
 80084d0:	e060      	b.n	8008594 <SPI_WaitFifoStateUntilTimeout+0x10c>
		if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY)) {
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80084d8:	d107      	bne.n	80084ea <SPI_WaitFifoStateUntilTimeout+0x62>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d104      	bne.n	80084ea <SPI_WaitFifoStateUntilTimeout+0x62>
			/* Flush Data Register by a blank read */
			tmpreg8 = *ptmpreg8;
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	75fb      	strb	r3, [r7, #23]
			/* To avoid GCC warning */
			UNUSED(tmpreg8);
 80084e8:	7dfb      	ldrb	r3, [r7, #23]
		}

		if (Timeout != HAL_MAX_DELAY) {
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f0:	d050      	beq.n	8008594 <SPI_WaitFifoStateUntilTimeout+0x10c>
			if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U)) {
 80084f2:	f7fb fc25 	bl	8003d40 <HAL_GetTick>
 80084f6:	4602      	mov	r2, r0
 80084f8:	6a3b      	ldr	r3, [r7, #32]
 80084fa:	1ad3      	subs	r3, r2, r3
 80084fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084fe:	429a      	cmp	r2, r3
 8008500:	d902      	bls.n	8008508 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008504:	2b00      	cmp	r3, #0
 8008506:	d13d      	bne.n	8008584 <SPI_WaitFifoStateUntilTimeout+0xfc>
				/* Disable the SPI and reset the CRC: the CRC value should be cleared
				 on both master and slave sides in order to resynchronize the master
				 and slave for their respective CRC calculation */

				/* Disable TXE, RXNE and ERR interrupts for the interrupt process */
				__HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	685a      	ldr	r2, [r3, #4]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008516:	605a      	str	r2, [r3, #4]

				if ((hspi->Init.Mode == SPI_MODE_MASTER)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008520:	d111      	bne.n	8008546 <SPI_WaitFifoStateUntilTimeout+0xbe>
						&& ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800852a:	d004      	beq.n	8008536 <SPI_WaitFifoStateUntilTimeout+0xae>
								|| (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))) {
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008534:	d107      	bne.n	8008546 <SPI_WaitFifoStateUntilTimeout+0xbe>
					/* Disable SPI peripheral */
					__HAL_SPI_DISABLE(hspi);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008544:	601a      	str	r2, [r3, #0]
				}

				/* Reset CRC Calculation */
				if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) {
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800854a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800854e:	d10f      	bne.n	8008570 <SPI_WaitFifoStateUntilTimeout+0xe8>
					SPI_RESET_CRC(hspi);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800855e:	601a      	str	r2, [r3, #0]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800856e:	601a      	str	r2, [r3, #0]
				}

				hspi->State = HAL_SPI_STATE_READY;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

				/* Process Unlocked */
				__HAL_UNLOCK(hspi);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2200      	movs	r2, #0
 800857c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

				return HAL_TIMEOUT;
 8008580:	2303      	movs	r3, #3
 8008582:	e010      	b.n	80085a6 <SPI_WaitFifoStateUntilTimeout+0x11e>
			}
			/* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
			if (count == 0U) {
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d101      	bne.n	800858e <SPI_WaitFifoStateUntilTimeout+0x106>
				tmp_timeout = 0U;
 800858a:	2300      	movs	r3, #0
 800858c:	627b      	str	r3, [r7, #36]	@ 0x24
			}
			count--;
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	3b01      	subs	r3, #1
 8008592:	61bb      	str	r3, [r7, #24]
	while ((hspi->Instance->SR & Fifo) != State) {
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	689a      	ldr	r2, [r3, #8]
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	4013      	ands	r3, r2
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d196      	bne.n	80084d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
		}
	}

	return HAL_OK;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3728      	adds	r7, #40	@ 0x28
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	20000028 	.word	0x20000028

080085b4 <SPI_EndRxTransaction>:
 *               the configuration information for SPI module.
 * @param  Timeout Timeout duration
 * @param  Tickstart tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart) {
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af02      	add	r7, sp, #8
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]
	if ((hspi->Init.Mode == SPI_MODE_MASTER)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80085c8:	d111      	bne.n	80085ee <SPI_EndRxTransaction+0x3a>
			&& ((hspi->Init.Direction == SPI_DIRECTION_1LINE) || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))) {
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085d2:	d004      	beq.n	80085de <SPI_EndRxTransaction+0x2a>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085dc:	d107      	bne.n	80085ee <SPI_EndRxTransaction+0x3a>
		/* Disable SPI peripheral */
		__HAL_SPI_DISABLE(hspi);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80085ec:	601a      	str	r2, [r3, #0]
	}

	/* Control the BSY flag */
	if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK) {
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	9300      	str	r3, [sp, #0]
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	2200      	movs	r2, #0
 80085f6:	2180      	movs	r1, #128	@ 0x80
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f7ff febd 	bl	8008378 <SPI_WaitFlagStateUntilTimeout>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d007      	beq.n	8008614 <SPI_EndRxTransaction+0x60>
		SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008608:	f043 0220 	orr.w	r2, r3, #32
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	661a      	str	r2, [r3, #96]	@ 0x60
		return HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	e023      	b.n	800865c <SPI_EndRxTransaction+0xa8>
	}

	if ((hspi->Init.Mode == SPI_MODE_MASTER)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800861c:	d11d      	bne.n	800865a <SPI_EndRxTransaction+0xa6>
			&& ((hspi->Init.Direction == SPI_DIRECTION_1LINE) || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))) {
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008626:	d004      	beq.n	8008632 <SPI_EndRxTransaction+0x7e>
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008630:	d113      	bne.n	800865a <SPI_EndRxTransaction+0xa6>
		/* Empty the FRLVL fifo */
		if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK) {
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	9300      	str	r3, [sp, #0]
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	2200      	movs	r2, #0
 800863a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f7ff ff22 	bl	8008488 <SPI_WaitFifoStateUntilTimeout>
 8008644:	4603      	mov	r3, r0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d007      	beq.n	800865a <SPI_EndRxTransaction+0xa6>
			SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800864e:	f043 0220 	orr.w	r2, r3, #32
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	661a      	str	r2, [r3, #96]	@ 0x60
			return HAL_TIMEOUT;
 8008656:	2303      	movs	r3, #3
 8008658:	e000      	b.n	800865c <SPI_EndRxTransaction+0xa8>
		}
	}
	return HAL_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <SPI_EndRxTxTransaction>:
 * @param  hspi SPI handle
 * @param  Timeout Timeout duration
 * @param  Tickstart tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart) {
 8008664:	b580      	push	{r7, lr}
 8008666:	b086      	sub	sp, #24
 8008668:	af02      	add	r7, sp, #8
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	607a      	str	r2, [r7, #4]
	/* Control if the TX fifo is empty */
	if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK) {
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	2200      	movs	r2, #0
 8008678:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f7ff ff03 	bl	8008488 <SPI_WaitFifoStateUntilTimeout>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d007      	beq.n	8008698 <SPI_EndRxTxTransaction+0x34>
		SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800868c:	f043 0220 	orr.w	r2, r3, #32
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	661a      	str	r2, [r3, #96]	@ 0x60
		return HAL_TIMEOUT;
 8008694:	2303      	movs	r3, #3
 8008696:	e027      	b.n	80086e8 <SPI_EndRxTxTransaction+0x84>
	}

	/* Control the BSY flag */
	if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK) {
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	9300      	str	r3, [sp, #0]
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	2200      	movs	r2, #0
 80086a0:	2180      	movs	r1, #128	@ 0x80
 80086a2:	68f8      	ldr	r0, [r7, #12]
 80086a4:	f7ff fe68 	bl	8008378 <SPI_WaitFlagStateUntilTimeout>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d007      	beq.n	80086be <SPI_EndRxTxTransaction+0x5a>
		SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086b2:	f043 0220 	orr.w	r2, r3, #32
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	661a      	str	r2, [r3, #96]	@ 0x60
		return HAL_TIMEOUT;
 80086ba:	2303      	movs	r3, #3
 80086bc:	e014      	b.n	80086e8 <SPI_EndRxTxTransaction+0x84>
	}

	/* Control if the RX fifo is empty */
	if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK) {
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	9300      	str	r3, [sp, #0]
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f7ff fedc 	bl	8008488 <SPI_WaitFifoStateUntilTimeout>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d007      	beq.n	80086e6 <SPI_EndRxTxTransaction+0x82>
		SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086da:	f043 0220 	orr.w	r2, r3, #32
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	661a      	str	r2, [r3, #96]	@ 0x60
		return HAL_TIMEOUT;
 80086e2:	2303      	movs	r3, #3
 80086e4:	e000      	b.n	80086e8 <SPI_EndRxTxTransaction+0x84>
	}

	return HAL_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3710      	adds	r7, #16
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <HAL_UART_Init>:
 * @brief Initialize the UART mode according to the specified
 *        parameters in the UART_InitTypeDef and initialize the associated handle.
 * @param huart UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart) {
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
	/* Check the UART handle allocation */
	if (huart == NULL) {
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d101      	bne.n	8008702 <HAL_UART_Init+0x12>
		return HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	e040      	b.n	8008784 <HAL_UART_Init+0x94>
	} else {
		/* Check the parameters */
		assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
	}

	if (huart->gState == HAL_UART_STATE_RESET) {
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008706:	2b00      	cmp	r3, #0
 8008708:	d106      	bne.n	8008718 <HAL_UART_Init+0x28>
		/* Allocate lock resource and initialize it */
		huart->Lock = HAL_UNLOCKED;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
		/* Init the low level hardware : GPIO, CLOCK */
		HAL_UART_MspInit(huart);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f7f9 fd22 	bl	800215c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
	}

	huart->gState = HAL_UART_STATE_BUSY;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2224      	movs	r2, #36	@ 0x24
 800871c:	679a      	str	r2, [r3, #120]	@ 0x78

	__HAL_UART_DISABLE(huart);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f022 0201 	bic.w	r2, r2, #1
 800872c:	601a      	str	r2, [r3, #0]

	/* Set the UART Communication parameters */
	if (UART_SetConfig(huart) == HAL_ERROR) {
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 f82c 	bl	800878c <UART_SetConfig>
 8008734:	4603      	mov	r3, r0
 8008736:	2b01      	cmp	r3, #1
 8008738:	d101      	bne.n	800873e <HAL_UART_Init+0x4e>
		return HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	e022      	b.n	8008784 <HAL_UART_Init+0x94>
	}

	if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT) {
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008742:	2b00      	cmp	r3, #0
 8008744:	d002      	beq.n	800874c <HAL_UART_Init+0x5c>
		UART_AdvFeatureConfig(huart);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 fa4c 	bl	8008be4 <UART_AdvFeatureConfig>
	}

	/* In asynchronous mode, the following bits must be kept cleared:
	 - LINEN and CLKEN bits in the USART_CR2 register,
	 - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
	CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	685a      	ldr	r2, [r3, #4]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800875a:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	689a      	ldr	r2, [r3, #8]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800876a:	609a      	str	r2, [r3, #8]

	__HAL_UART_ENABLE(huart);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f042 0201 	orr.w	r2, r2, #1
 800877a:	601a      	str	r2, [r3, #0]

	/* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
	return (UART_CheckIdleState(huart));
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 fad3 	bl	8008d28 <UART_CheckIdleState>
 8008782:	4603      	mov	r3, r0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <UART_SetConfig>:
/**
 * @brief Configure the UART peripheral.
 * @param huart UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart) {
 800878c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008790:	b08a      	sub	sp, #40	@ 0x28
 8008792:	af00      	add	r7, sp, #0
 8008794:	60f8      	str	r0, [r7, #12]
	uint32_t tmpreg;
	uint16_t brrtemp;
	UART_ClockSourceTypeDef clocksource;
	uint32_t usartdiv;
	HAL_StatusTypeDef ret = HAL_OK;
 8008796:	2300      	movs	r3, #0
 8008798:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	 *  the UART Word Length, Parity, Mode and oversampling:
	 *  set the M bits according to huart->Init.WordLength value
	 *  set PCE and PS bits according to huart->Init.Parity value
	 *  set TE and RE bits according to huart->Init.Mode value
	 *  set OVER8 bit according to huart->Init.OverSampling value */
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	689a      	ldr	r2, [r3, #8]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	431a      	orrs	r2, r3
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	431a      	orrs	r2, r3
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	69db      	ldr	r3, [r3, #28]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	627b      	str	r3, [r7, #36]	@ 0x24
	MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	4bb4      	ldr	r3, [pc, #720]	@ (8008a8c <UART_SetConfig+0x300>)
 80087bc:	4013      	ands	r3, r2
 80087be:	68fa      	ldr	r2, [r7, #12]
 80087c0:	6812      	ldr	r2, [r2, #0]
 80087c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80087c4:	430b      	orrs	r3, r1
 80087c6:	6013      	str	r3, [r2, #0]

	/*-------------------------- USART CR2 Configuration -----------------------*/
	/* Configure the UART Stop Bits: Set STOP[13:12] bits according
	 * to huart->Init.StopBits value */
	MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	68da      	ldr	r2, [r3, #12]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	430a      	orrs	r2, r1
 80087dc:	605a      	str	r2, [r3, #4]
	/* Configure
	 * - UART HardWare Flow Control: set CTSE and RTSE bits according
	 *   to huart->Init.HwFlowCtl value
	 * - one-bit sampling method versus three samples' majority rule according
	 *   to huart->Init.OneBitSampling (not applicable to LPUART) */
	tmpreg = (uint32_t) huart->Init.HwFlowCtl;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	627b      	str	r3, [r7, #36]	@ 0x24

	if (!(UART_INSTANCE_LOWPOWER(huart))) {
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4aa9      	ldr	r2, [pc, #676]	@ (8008a90 <UART_SetConfig+0x304>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d004      	beq.n	80087f8 <UART_SetConfig+0x6c>
		tmpreg |= huart->Init.OneBitSampling;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	6a1b      	ldr	r3, [r3, #32]
 80087f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087f4:	4313      	orrs	r3, r2
 80087f6:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008808:	430a      	orrs	r2, r1
 800880a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

	/*-------------------------- USART BRR Configuration -----------------------*/
	UART_GETCLOCKSOURCE(huart, clocksource);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4aa0      	ldr	r2, [pc, #640]	@ (8008a94 <UART_SetConfig+0x308>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d126      	bne.n	8008864 <UART_SetConfig+0xd8>
 8008816:	4ba0      	ldr	r3, [pc, #640]	@ (8008a98 <UART_SetConfig+0x30c>)
 8008818:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800881c:	f003 0303 	and.w	r3, r3, #3
 8008820:	2b03      	cmp	r3, #3
 8008822:	d81b      	bhi.n	800885c <UART_SetConfig+0xd0>
 8008824:	a201      	add	r2, pc, #4	@ (adr r2, 800882c <UART_SetConfig+0xa0>)
 8008826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882a:	bf00      	nop
 800882c:	0800883d 	.word	0x0800883d
 8008830:	0800884d 	.word	0x0800884d
 8008834:	08008845 	.word	0x08008845
 8008838:	08008855 	.word	0x08008855
 800883c:	2301      	movs	r3, #1
 800883e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008842:	e080      	b.n	8008946 <UART_SetConfig+0x1ba>
 8008844:	2302      	movs	r3, #2
 8008846:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800884a:	e07c      	b.n	8008946 <UART_SetConfig+0x1ba>
 800884c:	2304      	movs	r3, #4
 800884e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008852:	e078      	b.n	8008946 <UART_SetConfig+0x1ba>
 8008854:	2308      	movs	r3, #8
 8008856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800885a:	e074      	b.n	8008946 <UART_SetConfig+0x1ba>
 800885c:	2310      	movs	r3, #16
 800885e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008862:	e070      	b.n	8008946 <UART_SetConfig+0x1ba>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a8c      	ldr	r2, [pc, #560]	@ (8008a9c <UART_SetConfig+0x310>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d138      	bne.n	80088e0 <UART_SetConfig+0x154>
 800886e:	4b8a      	ldr	r3, [pc, #552]	@ (8008a98 <UART_SetConfig+0x30c>)
 8008870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008874:	f003 030c 	and.w	r3, r3, #12
 8008878:	2b0c      	cmp	r3, #12
 800887a:	d82d      	bhi.n	80088d8 <UART_SetConfig+0x14c>
 800887c:	a201      	add	r2, pc, #4	@ (adr r2, 8008884 <UART_SetConfig+0xf8>)
 800887e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008882:	bf00      	nop
 8008884:	080088b9 	.word	0x080088b9
 8008888:	080088d9 	.word	0x080088d9
 800888c:	080088d9 	.word	0x080088d9
 8008890:	080088d9 	.word	0x080088d9
 8008894:	080088c9 	.word	0x080088c9
 8008898:	080088d9 	.word	0x080088d9
 800889c:	080088d9 	.word	0x080088d9
 80088a0:	080088d9 	.word	0x080088d9
 80088a4:	080088c1 	.word	0x080088c1
 80088a8:	080088d9 	.word	0x080088d9
 80088ac:	080088d9 	.word	0x080088d9
 80088b0:	080088d9 	.word	0x080088d9
 80088b4:	080088d1 	.word	0x080088d1
 80088b8:	2300      	movs	r3, #0
 80088ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088be:	e042      	b.n	8008946 <UART_SetConfig+0x1ba>
 80088c0:	2302      	movs	r3, #2
 80088c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088c6:	e03e      	b.n	8008946 <UART_SetConfig+0x1ba>
 80088c8:	2304      	movs	r3, #4
 80088ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088ce:	e03a      	b.n	8008946 <UART_SetConfig+0x1ba>
 80088d0:	2308      	movs	r3, #8
 80088d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088d6:	e036      	b.n	8008946 <UART_SetConfig+0x1ba>
 80088d8:	2310      	movs	r3, #16
 80088da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088de:	e032      	b.n	8008946 <UART_SetConfig+0x1ba>
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a6a      	ldr	r2, [pc, #424]	@ (8008a90 <UART_SetConfig+0x304>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d12a      	bne.n	8008940 <UART_SetConfig+0x1b4>
 80088ea:	4b6b      	ldr	r3, [pc, #428]	@ (8008a98 <UART_SetConfig+0x30c>)
 80088ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80088f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80088f8:	d01a      	beq.n	8008930 <UART_SetConfig+0x1a4>
 80088fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80088fe:	d81b      	bhi.n	8008938 <UART_SetConfig+0x1ac>
 8008900:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008904:	d00c      	beq.n	8008920 <UART_SetConfig+0x194>
 8008906:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800890a:	d815      	bhi.n	8008938 <UART_SetConfig+0x1ac>
 800890c:	2b00      	cmp	r3, #0
 800890e:	d003      	beq.n	8008918 <UART_SetConfig+0x18c>
 8008910:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008914:	d008      	beq.n	8008928 <UART_SetConfig+0x19c>
 8008916:	e00f      	b.n	8008938 <UART_SetConfig+0x1ac>
 8008918:	2300      	movs	r3, #0
 800891a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800891e:	e012      	b.n	8008946 <UART_SetConfig+0x1ba>
 8008920:	2302      	movs	r3, #2
 8008922:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008926:	e00e      	b.n	8008946 <UART_SetConfig+0x1ba>
 8008928:	2304      	movs	r3, #4
 800892a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800892e:	e00a      	b.n	8008946 <UART_SetConfig+0x1ba>
 8008930:	2308      	movs	r3, #8
 8008932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008936:	e006      	b.n	8008946 <UART_SetConfig+0x1ba>
 8008938:	2310      	movs	r3, #16
 800893a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800893e:	e002      	b.n	8008946 <UART_SetConfig+0x1ba>
 8008940:	2310      	movs	r3, #16
 8008942:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	/* Check LPUART instance */
	if (UART_INSTANCE_LOWPOWER(huart)) {
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a51      	ldr	r2, [pc, #324]	@ (8008a90 <UART_SetConfig+0x304>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d17a      	bne.n	8008a46 <UART_SetConfig+0x2ba>
		/* Retrieve frequency clock */
		switch (clocksource) {
 8008950:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008954:	2b08      	cmp	r3, #8
 8008956:	d824      	bhi.n	80089a2 <UART_SetConfig+0x216>
 8008958:	a201      	add	r2, pc, #4	@ (adr r2, 8008960 <UART_SetConfig+0x1d4>)
 800895a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800895e:	bf00      	nop
 8008960:	08008985 	.word	0x08008985
 8008964:	080089a3 	.word	0x080089a3
 8008968:	0800898d 	.word	0x0800898d
 800896c:	080089a3 	.word	0x080089a3
 8008970:	08008993 	.word	0x08008993
 8008974:	080089a3 	.word	0x080089a3
 8008978:	080089a3 	.word	0x080089a3
 800897c:	080089a3 	.word	0x080089a3
 8008980:	0800899b 	.word	0x0800899b
		case UART_CLOCKSOURCE_PCLK1:
			pclk = HAL_RCC_GetPCLK1Freq();
 8008984:	f7fc fdc4 	bl	8005510 <HAL_RCC_GetPCLK1Freq>
 8008988:	61f8      	str	r0, [r7, #28]
			break;
 800898a:	e010      	b.n	80089ae <UART_SetConfig+0x222>
		case UART_CLOCKSOURCE_HSI:
			pclk = (uint32_t) HSI_VALUE;
 800898c:	4b44      	ldr	r3, [pc, #272]	@ (8008aa0 <UART_SetConfig+0x314>)
 800898e:	61fb      	str	r3, [r7, #28]
			break;
 8008990:	e00d      	b.n	80089ae <UART_SetConfig+0x222>
		case UART_CLOCKSOURCE_SYSCLK:
			pclk = HAL_RCC_GetSysClockFreq();
 8008992:	f7fc fd25 	bl	80053e0 <HAL_RCC_GetSysClockFreq>
 8008996:	61f8      	str	r0, [r7, #28]
			break;
 8008998:	e009      	b.n	80089ae <UART_SetConfig+0x222>
		case UART_CLOCKSOURCE_LSE:
			pclk = (uint32_t) LSE_VALUE;
 800899a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800899e:	61fb      	str	r3, [r7, #28]
			break;
 80089a0:	e005      	b.n	80089ae <UART_SetConfig+0x222>
		default:
			pclk = 0U;
 80089a2:	2300      	movs	r3, #0
 80089a4:	61fb      	str	r3, [r7, #28]
			ret = HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			break;
 80089ac:	bf00      	nop
		}

		/* If proper clock source reported */
		if (pclk != 0U) {
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f000 8107 	beq.w	8008bc4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
			/* No Prescaler applicable */
			/* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
			if ((pclk < (3U * huart->Init.BaudRate)) || (pclk > (4096U * huart->Init.BaudRate))) {
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	685a      	ldr	r2, [r3, #4]
 80089ba:	4613      	mov	r3, r2
 80089bc:	005b      	lsls	r3, r3, #1
 80089be:	4413      	add	r3, r2
 80089c0:	69fa      	ldr	r2, [r7, #28]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d305      	bcc.n	80089d2 <UART_SetConfig+0x246>
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	031b      	lsls	r3, r3, #12
 80089cc:	69fa      	ldr	r2, [r7, #28]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d903      	bls.n	80089da <UART_SetConfig+0x24e>
				ret = HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80089d8:	e0f4      	b.n	8008bc4 <UART_SetConfig+0x438>
			} else {
				usartdiv = (uint32_t) (UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	2200      	movs	r2, #0
 80089de:	461c      	mov	r4, r3
 80089e0:	4615      	mov	r5, r2
 80089e2:	f04f 0200 	mov.w	r2, #0
 80089e6:	f04f 0300 	mov.w	r3, #0
 80089ea:	022b      	lsls	r3, r5, #8
 80089ec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80089f0:	0222      	lsls	r2, r4, #8
 80089f2:	68f9      	ldr	r1, [r7, #12]
 80089f4:	6849      	ldr	r1, [r1, #4]
 80089f6:	0849      	lsrs	r1, r1, #1
 80089f8:	2000      	movs	r0, #0
 80089fa:	4688      	mov	r8, r1
 80089fc:	4681      	mov	r9, r0
 80089fe:	eb12 0a08 	adds.w	sl, r2, r8
 8008a02:	eb43 0b09 	adc.w	fp, r3, r9
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	603b      	str	r3, [r7, #0]
 8008a0e:	607a      	str	r2, [r7, #4]
 8008a10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a14:	4650      	mov	r0, sl
 8008a16:	4659      	mov	r1, fp
 8008a18:	f7f8 f916 	bl	8000c48 <__aeabi_uldivmod>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	460b      	mov	r3, r1
 8008a20:	4613      	mov	r3, r2
 8008a22:	61bb      	str	r3, [r7, #24]
				if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX)) {
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a2a:	d308      	bcc.n	8008a3e <UART_SetConfig+0x2b2>
 8008a2c:	69bb      	ldr	r3, [r7, #24]
 8008a2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a32:	d204      	bcs.n	8008a3e <UART_SetConfig+0x2b2>
					huart->Instance->BRR = usartdiv;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	69ba      	ldr	r2, [r7, #24]
 8008a3a:	60da      	str	r2, [r3, #12]
 8008a3c:	e0c2      	b.n	8008bc4 <UART_SetConfig+0x438>
				} else {
					ret = HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008a44:	e0be      	b.n	8008bc4 <UART_SetConfig+0x438>
			} /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
		} /* if (pclk != 0) */
	}
	/* Check UART Over Sampling to set Baud Rate Register */
	else if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	69db      	ldr	r3, [r3, #28]
 8008a4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a4e:	d16a      	bne.n	8008b26 <UART_SetConfig+0x39a>
		switch (clocksource) {
 8008a50:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008a54:	2b08      	cmp	r3, #8
 8008a56:	d834      	bhi.n	8008ac2 <UART_SetConfig+0x336>
 8008a58:	a201      	add	r2, pc, #4	@ (adr r2, 8008a60 <UART_SetConfig+0x2d4>)
 8008a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5e:	bf00      	nop
 8008a60:	08008a85 	.word	0x08008a85
 8008a64:	08008aa5 	.word	0x08008aa5
 8008a68:	08008aad 	.word	0x08008aad
 8008a6c:	08008ac3 	.word	0x08008ac3
 8008a70:	08008ab3 	.word	0x08008ab3
 8008a74:	08008ac3 	.word	0x08008ac3
 8008a78:	08008ac3 	.word	0x08008ac3
 8008a7c:	08008ac3 	.word	0x08008ac3
 8008a80:	08008abb 	.word	0x08008abb
		case UART_CLOCKSOURCE_PCLK1:
			pclk = HAL_RCC_GetPCLK1Freq();
 8008a84:	f7fc fd44 	bl	8005510 <HAL_RCC_GetPCLK1Freq>
 8008a88:	61f8      	str	r0, [r7, #28]
			break;
 8008a8a:	e020      	b.n	8008ace <UART_SetConfig+0x342>
 8008a8c:	efff69f3 	.word	0xefff69f3
 8008a90:	40008000 	.word	0x40008000
 8008a94:	40013800 	.word	0x40013800
 8008a98:	40021000 	.word	0x40021000
 8008a9c:	40004400 	.word	0x40004400
 8008aa0:	00f42400 	.word	0x00f42400
		case UART_CLOCKSOURCE_PCLK2:
			pclk = HAL_RCC_GetPCLK2Freq();
 8008aa4:	f7fc fd4a 	bl	800553c <HAL_RCC_GetPCLK2Freq>
 8008aa8:	61f8      	str	r0, [r7, #28]
			break;
 8008aaa:	e010      	b.n	8008ace <UART_SetConfig+0x342>
		case UART_CLOCKSOURCE_HSI:
			pclk = (uint32_t) HSI_VALUE;
 8008aac:	4b4c      	ldr	r3, [pc, #304]	@ (8008be0 <UART_SetConfig+0x454>)
 8008aae:	61fb      	str	r3, [r7, #28]
			break;
 8008ab0:	e00d      	b.n	8008ace <UART_SetConfig+0x342>
		case UART_CLOCKSOURCE_SYSCLK:
			pclk = HAL_RCC_GetSysClockFreq();
 8008ab2:	f7fc fc95 	bl	80053e0 <HAL_RCC_GetSysClockFreq>
 8008ab6:	61f8      	str	r0, [r7, #28]
			break;
 8008ab8:	e009      	b.n	8008ace <UART_SetConfig+0x342>
		case UART_CLOCKSOURCE_LSE:
			pclk = (uint32_t) LSE_VALUE;
 8008aba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008abe:	61fb      	str	r3, [r7, #28]
			break;
 8008ac0:	e005      	b.n	8008ace <UART_SetConfig+0x342>
		default:
			pclk = 0U;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	61fb      	str	r3, [r7, #28]
			ret = HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			break;
 8008acc:	bf00      	nop
		}

		/* USARTDIV must be greater than or equal to 0d16 */
		if (pclk != 0U) {
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d077      	beq.n	8008bc4 <UART_SetConfig+0x438>
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
			usartdiv = (uint32_t) (UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	005a      	lsls	r2, r3, #1
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	085b      	lsrs	r3, r3, #1
 8008ade:	441a      	add	r2, r3
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ae8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	2b0f      	cmp	r3, #15
 8008aee:	d916      	bls.n	8008b1e <UART_SetConfig+0x392>
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008af6:	d212      	bcs.n	8008b1e <UART_SetConfig+0x392>
				brrtemp = (uint16_t) (usartdiv & 0xFFF0U);
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	f023 030f 	bic.w	r3, r3, #15
 8008b00:	82fb      	strh	r3, [r7, #22]
				brrtemp |= (uint16_t) ((usartdiv & (uint16_t) 0x000FU) >> 1U);
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	085b      	lsrs	r3, r3, #1
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	f003 0307 	and.w	r3, r3, #7
 8008b0c:	b29a      	uxth	r2, r3
 8008b0e:	8afb      	ldrh	r3, [r7, #22]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	82fb      	strh	r3, [r7, #22]
				huart->Instance->BRR = brrtemp;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	8afa      	ldrh	r2, [r7, #22]
 8008b1a:	60da      	str	r2, [r3, #12]
 8008b1c:	e052      	b.n	8008bc4 <UART_SetConfig+0x438>
			} else {
				ret = HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008b24:	e04e      	b.n	8008bc4 <UART_SetConfig+0x438>
			}
		}
	} else {
		switch (clocksource) {
 8008b26:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008b2a:	2b08      	cmp	r3, #8
 8008b2c:	d827      	bhi.n	8008b7e <UART_SetConfig+0x3f2>
 8008b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b34 <UART_SetConfig+0x3a8>)
 8008b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b34:	08008b59 	.word	0x08008b59
 8008b38:	08008b61 	.word	0x08008b61
 8008b3c:	08008b69 	.word	0x08008b69
 8008b40:	08008b7f 	.word	0x08008b7f
 8008b44:	08008b6f 	.word	0x08008b6f
 8008b48:	08008b7f 	.word	0x08008b7f
 8008b4c:	08008b7f 	.word	0x08008b7f
 8008b50:	08008b7f 	.word	0x08008b7f
 8008b54:	08008b77 	.word	0x08008b77
		case UART_CLOCKSOURCE_PCLK1:
			pclk = HAL_RCC_GetPCLK1Freq();
 8008b58:	f7fc fcda 	bl	8005510 <HAL_RCC_GetPCLK1Freq>
 8008b5c:	61f8      	str	r0, [r7, #28]
			break;
 8008b5e:	e014      	b.n	8008b8a <UART_SetConfig+0x3fe>
		case UART_CLOCKSOURCE_PCLK2:
			pclk = HAL_RCC_GetPCLK2Freq();
 8008b60:	f7fc fcec 	bl	800553c <HAL_RCC_GetPCLK2Freq>
 8008b64:	61f8      	str	r0, [r7, #28]
			break;
 8008b66:	e010      	b.n	8008b8a <UART_SetConfig+0x3fe>
		case UART_CLOCKSOURCE_HSI:
			pclk = (uint32_t) HSI_VALUE;
 8008b68:	4b1d      	ldr	r3, [pc, #116]	@ (8008be0 <UART_SetConfig+0x454>)
 8008b6a:	61fb      	str	r3, [r7, #28]
			break;
 8008b6c:	e00d      	b.n	8008b8a <UART_SetConfig+0x3fe>
		case UART_CLOCKSOURCE_SYSCLK:
			pclk = HAL_RCC_GetSysClockFreq();
 8008b6e:	f7fc fc37 	bl	80053e0 <HAL_RCC_GetSysClockFreq>
 8008b72:	61f8      	str	r0, [r7, #28]
			break;
 8008b74:	e009      	b.n	8008b8a <UART_SetConfig+0x3fe>
		case UART_CLOCKSOURCE_LSE:
			pclk = (uint32_t) LSE_VALUE;
 8008b76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b7a:	61fb      	str	r3, [r7, #28]
			break;
 8008b7c:	e005      	b.n	8008b8a <UART_SetConfig+0x3fe>
		default:
			pclk = 0U;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	61fb      	str	r3, [r7, #28]
			ret = HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			break;
 8008b88:	bf00      	nop
		}

		if (pclk != 0U) {
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d019      	beq.n	8008bc4 <UART_SetConfig+0x438>
			/* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
			usartdiv = (uint32_t) (UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	085a      	lsrs	r2, r3, #1
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	441a      	add	r2, r3
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ba2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	2b0f      	cmp	r3, #15
 8008ba8:	d909      	bls.n	8008bbe <UART_SetConfig+0x432>
 8008baa:	69bb      	ldr	r3, [r7, #24]
 8008bac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bb0:	d205      	bcs.n	8008bbe <UART_SetConfig+0x432>
				huart->Instance->BRR = (uint16_t) usartdiv;
 8008bb2:	69bb      	ldr	r3, [r7, #24]
 8008bb4:	b29a      	uxth	r2, r3
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	60da      	str	r2, [r3, #12]
 8008bbc:	e002      	b.n	8008bc4 <UART_SetConfig+0x438>
			} else {
				ret = HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

	/* Clear ISR function pointers */
	huart->RxISR = NULL;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	665a      	str	r2, [r3, #100]	@ 0x64
	huart->TxISR = NULL;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	669a      	str	r2, [r3, #104]	@ 0x68

	return ret;
 8008bd0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3728      	adds	r7, #40	@ 0x28
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bde:	bf00      	nop
 8008be0:	00f42400 	.word	0x00f42400

08008be4 <UART_AdvFeatureConfig>:
/**
 * @brief Configure the UART peripheral advanced features.
 * @param huart UART handle.
 * @retval None
 */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart) {
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
	/* Check whether the set of advanced features to configure is properly set */
	assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

	/* if required, configure TX pin active level inversion */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT)) {
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bf0:	f003 0301 	and.w	r3, r3, #1
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d00a      	beq.n	8008c0e <UART_AdvFeatureConfig+0x2a>
		assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	430a      	orrs	r2, r1
 8008c0c:	605a      	str	r2, [r3, #4]
	}

	/* if required, configure RX pin active level inversion */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT)) {
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c12:	f003 0302 	and.w	r3, r3, #2
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00a      	beq.n	8008c30 <UART_AdvFeatureConfig+0x4c>
		assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	430a      	orrs	r2, r1
 8008c2e:	605a      	str	r2, [r3, #4]
	}

	/* if required, configure data inversion */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT)) {
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c34:	f003 0304 	and.w	r3, r3, #4
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d00a      	beq.n	8008c52 <UART_AdvFeatureConfig+0x6e>
		assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	430a      	orrs	r2, r1
 8008c50:	605a      	str	r2, [r3, #4]
	}

	/* if required, configure RX/TX pins swap */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT)) {
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c56:	f003 0308 	and.w	r3, r3, #8
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00a      	beq.n	8008c74 <UART_AdvFeatureConfig+0x90>
		assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	430a      	orrs	r2, r1
 8008c72:	605a      	str	r2, [r3, #4]
	}

	/* if required, configure RX overrun detection disabling */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT)) {
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c78:	f003 0310 	and.w	r3, r3, #16
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d00a      	beq.n	8008c96 <UART_AdvFeatureConfig+0xb2>
		assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
		MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	430a      	orrs	r2, r1
 8008c94:	609a      	str	r2, [r3, #8]
	}

	/* if required, configure DMA disabling on reception error */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT)) {
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c9a:	f003 0320 	and.w	r3, r3, #32
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00a      	beq.n	8008cb8 <UART_AdvFeatureConfig+0xd4>
		assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
		MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	430a      	orrs	r2, r1
 8008cb6:	609a      	str	r2, [r3, #8]
	}

	/* if required, configure auto Baud rate detection scheme */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT)) {
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d01a      	beq.n	8008cfa <UART_AdvFeatureConfig+0x116>
		assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
		assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	430a      	orrs	r2, r1
 8008cd8:	605a      	str	r2, [r3, #4]
		/* set auto Baudrate detection parameters if detection is enabled */
		if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE) {
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ce2:	d10a      	bne.n	8008cfa <UART_AdvFeatureConfig+0x116>
			assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
			MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	430a      	orrs	r2, r1
 8008cf8:	605a      	str	r2, [r3, #4]
		}
	}

	/* if required, configure MSB first on communication line */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT)) {
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d00a      	beq.n	8008d1c <UART_AdvFeatureConfig+0x138>
		assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	430a      	orrs	r2, r1
 8008d1a:	605a      	str	r2, [r3, #4]
	}
}
 8008d1c:	bf00      	nop
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <UART_CheckIdleState>:
/**
 * @brief Check the UART Idle State.
 * @param huart UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart) {
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b086      	sub	sp, #24
 8008d2c:	af02      	add	r7, sp, #8
 8008d2e:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;

	/* Initialize the UART ErrorCode */
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

	/* Init tickstart for timeout management */
	tickstart = HAL_GetTick();
 8008d38:	f7fb f802 	bl	8003d40 <HAL_GetTick>
 8008d3c:	60f8      	str	r0, [r7, #12]

	/* Check if the Transmitter is enabled */
	if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE) {
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f003 0308 	and.w	r3, r3, #8
 8008d48:	2b08      	cmp	r3, #8
 8008d4a:	d10e      	bne.n	8008d6a <UART_CheckIdleState+0x42>
		/* Wait until TEACK flag is set */
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK) {
 8008d4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d50:	9300      	str	r3, [sp, #0]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 f82d 	bl	8008dba <UART_WaitOnFlagUntilTimeout>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d001      	beq.n	8008d6a <UART_CheckIdleState+0x42>
			/* Timeout occurred */
			return HAL_TIMEOUT;
 8008d66:	2303      	movs	r3, #3
 8008d68:	e023      	b.n	8008db2 <UART_CheckIdleState+0x8a>
		}
	}

	/* Check if the Receiver is enabled */
	if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE) {
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f003 0304 	and.w	r3, r3, #4
 8008d74:	2b04      	cmp	r3, #4
 8008d76:	d10e      	bne.n	8008d96 <UART_CheckIdleState+0x6e>
		/* Wait until REACK flag is set */
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK) {
 8008d78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d7c:	9300      	str	r3, [sp, #0]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f817 	bl	8008dba <UART_WaitOnFlagUntilTimeout>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d001      	beq.n	8008d96 <UART_CheckIdleState+0x6e>
			/* Timeout occurred */
			return HAL_TIMEOUT;
 8008d92:	2303      	movs	r3, #3
 8008d94:	e00d      	b.n	8008db2 <UART_CheckIdleState+0x8a>
		}
	}

	/* Initialize the UART State */
	huart->gState = HAL_UART_STATE_READY;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2220      	movs	r2, #32
 8008d9a:	679a      	str	r2, [r3, #120]	@ 0x78
	huart->RxState = HAL_UART_STATE_READY;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2220      	movs	r2, #32
 8008da0:	67da      	str	r2, [r3, #124]	@ 0x7c
	huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	661a      	str	r2, [r3, #96]	@ 0x60

	__HAL_UNLOCK(huart);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

	return HAL_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3710      	adds	r7, #16
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <UART_WaitOnFlagUntilTimeout>:
 * @param Tickstart Tick start value
 * @param Timeout   Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
		uint32_t Tickstart, uint32_t Timeout) {
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b09c      	sub	sp, #112	@ 0x70
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	60f8      	str	r0, [r7, #12]
 8008dc2:	60b9      	str	r1, [r7, #8]
 8008dc4:	603b      	str	r3, [r7, #0]
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	71fb      	strb	r3, [r7, #7]
	/* Wait until flag is set */
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 8008dca:	e0a5      	b.n	8008f18 <UART_WaitOnFlagUntilTimeout+0x15e>
		/* Check for the Timeout */
		if (Timeout != HAL_MAX_DELAY) {
 8008dcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dd2:	f000 80a1 	beq.w	8008f18 <UART_WaitOnFlagUntilTimeout+0x15e>
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8008dd6:	f7fa ffb3 	bl	8003d40 <HAL_GetTick>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	1ad3      	subs	r3, r2, r3
 8008de0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d302      	bcc.n	8008dec <UART_WaitOnFlagUntilTimeout+0x32>
 8008de6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d13e      	bne.n	8008e6a <UART_WaitOnFlagUntilTimeout+0xb0>
				 interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
				ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	653b      	str	r3, [r7, #80]	@ 0x50
 \return        value of type uint32_t at (*ptr)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr) {
	uint32_t result;

	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008df4:	e853 3f00 	ldrex	r3, [r3]
 8008df8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	return (result);
 8008dfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008dfc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008e00:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e0c:	65ba      	str	r2, [r7, #88]	@ 0x58
 \return          1  Function failed
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr) {
	uint32_t result;

	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008e10:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008e12:	e841 2300 	strex	r3, r2, [r1]
 8008e16:	657b      	str	r3, [r7, #84]	@ 0x54
	return (result);
 8008e18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1e6      	bne.n	8008dec <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
				ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	3308      	adds	r3, #8
 8008e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e28:	e853 3f00 	ldrex	r3, [r3]
 8008e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
	return (result);
 8008e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e30:	f023 0301 	bic.w	r3, r3, #1
 8008e34:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	3308      	adds	r3, #8
 8008e3c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008e3e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008e40:	647b      	str	r3, [r7, #68]	@ 0x44
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e42:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008e44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e46:	e841 2300 	strex	r3, r2, [r1]
 8008e4a:	643b      	str	r3, [r7, #64]	@ 0x40
	return (result);
 8008e4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1e5      	bne.n	8008e1e <UART_WaitOnFlagUntilTimeout+0x64>

				huart->gState = HAL_UART_STATE_READY;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2220      	movs	r2, #32
 8008e56:	679a      	str	r2, [r3, #120]	@ 0x78
				huart->RxState = HAL_UART_STATE_READY;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2220      	movs	r2, #32
 8008e5c:	67da      	str	r2, [r3, #124]	@ 0x7c

				__HAL_UNLOCK(huart);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

				return HAL_TIMEOUT;
 8008e66:	2303      	movs	r3, #3
 8008e68:	e067      	b.n	8008f3a <UART_WaitOnFlagUntilTimeout+0x180>
			}

			if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) {
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f003 0304 	and.w	r3, r3, #4
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d04f      	beq.n	8008f18 <UART_WaitOnFlagUntilTimeout+0x15e>
				if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET) {
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	69db      	ldr	r3, [r3, #28]
 8008e7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e86:	d147      	bne.n	8008f18 <UART_WaitOnFlagUntilTimeout+0x15e>
					/* Clear Receiver Timeout flag*/
					__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e90:	621a      	str	r2, [r3, #32]
					 interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
					ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	62bb      	str	r3, [r7, #40]	@ 0x28
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e9a:	e853 3f00 	ldrex	r3, [r3]
 8008e9e:	627b      	str	r3, [r7, #36]	@ 0x24
	return (result);
 8008ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008ea6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	461a      	mov	r2, r3
 8008eae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008eb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008eb2:	633a      	str	r2, [r7, #48]	@ 0x30
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008eb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008eb8:	e841 2300 	strex	r3, r2, [r1]
 8008ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	return (result);
 8008ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d1e6      	bne.n	8008e92 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	3308      	adds	r3, #8
 8008eca:	617b      	str	r3, [r7, #20]
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	e853 3f00 	ldrex	r3, [r3]
 8008ed2:	613b      	str	r3, [r7, #16]
	return (result);
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	f023 0301 	bic.w	r3, r3, #1
 8008eda:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	3308      	adds	r3, #8
 8008ee2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008ee4:	623a      	str	r2, [r7, #32]
 8008ee6:	61fb      	str	r3, [r7, #28]
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee8:	69f9      	ldr	r1, [r7, #28]
 8008eea:	6a3a      	ldr	r2, [r7, #32]
 8008eec:	e841 2300 	strex	r3, r2, [r1]
 8008ef0:	61bb      	str	r3, [r7, #24]
	return (result);
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d1e5      	bne.n	8008ec4 <UART_WaitOnFlagUntilTimeout+0x10a>

					huart->gState = HAL_UART_STATE_READY;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2220      	movs	r2, #32
 8008efc:	679a      	str	r2, [r3, #120]	@ 0x78
					huart->RxState = HAL_UART_STATE_READY;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2220      	movs	r2, #32
 8008f02:	67da      	str	r2, [r3, #124]	@ 0x7c
					huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2220      	movs	r2, #32
 8008f08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

					/* Process Unlocked */
					__HAL_UNLOCK(huart);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

					return HAL_TIMEOUT;
 8008f14:	2303      	movs	r3, #3
 8008f16:	e010      	b.n	8008f3a <UART_WaitOnFlagUntilTimeout+0x180>
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	69da      	ldr	r2, [r3, #28]
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	4013      	ands	r3, r2
 8008f22:	68ba      	ldr	r2, [r7, #8]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	bf0c      	ite	eq
 8008f28:	2301      	moveq	r3, #1
 8008f2a:	2300      	movne	r3, #0
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	461a      	mov	r2, r3
 8008f30:	79fb      	ldrb	r3, [r7, #7]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	f43f af4a 	beq.w	8008dcc <UART_WaitOnFlagUntilTimeout+0x12>
				}
			}
		}
	}
	return HAL_OK;
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3770      	adds	r7, #112	@ 0x70
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
	...

08008f44 <arm_q15_to_float>:
 8008f44:	b470      	push	{r4, r5, r6}
 8008f46:	0896      	lsrs	r6, r2, #2
 8008f48:	d038      	beq.n	8008fbc <arm_q15_to_float+0x78>
 8008f4a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8009010 <arm_q15_to_float+0xcc>
 8008f4e:	f100 0408 	add.w	r4, r0, #8
 8008f52:	f101 0310 	add.w	r3, r1, #16
 8008f56:	4635      	mov	r5, r6
 8008f58:	f934 cc08 	ldrsh.w	ip, [r4, #-8]
 8008f5c:	ee07 ca90 	vmov	s15, ip
 8008f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f64:	3d01      	subs	r5, #1
 8008f66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f6a:	f104 0408 	add.w	r4, r4, #8
 8008f6e:	ed43 7a04 	vstr	s15, [r3, #-16]
 8008f72:	f934 cc0e 	ldrsh.w	ip, [r4, #-14]
 8008f76:	ee07 ca90 	vmov	s15, ip
 8008f7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f7e:	f103 0310 	add.w	r3, r3, #16
 8008f82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f86:	ed43 7a07 	vstr	s15, [r3, #-28]	@ 0xffffffe4
 8008f8a:	f934 cc0c 	ldrsh.w	ip, [r4, #-12]
 8008f8e:	ee07 ca90 	vmov	s15, ip
 8008f92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f9a:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 8008f9e:	f934 cc0a 	ldrsh.w	ip, [r4, #-10]
 8008fa2:	ee07 ca90 	vmov	s15, ip
 8008fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008faa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008fae:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8008fb2:	d1d1      	bne.n	8008f58 <arm_q15_to_float+0x14>
 8008fb4:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 8008fb8:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8008fbc:	f012 0203 	ands.w	r2, r2, #3
 8008fc0:	d023      	beq.n	800900a <arm_q15_to_float+0xc6>
 8008fc2:	f9b0 3000 	ldrsh.w	r3, [r0]
 8008fc6:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8009010 <arm_q15_to_float+0xcc>
 8008fca:	ee07 3a90 	vmov	s15, r3
 8008fce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fd2:	3a01      	subs	r2, #1
 8008fd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008fd8:	edc1 7a00 	vstr	s15, [r1]
 8008fdc:	d015      	beq.n	800900a <arm_q15_to_float+0xc6>
 8008fde:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8008fe2:	ee07 3a90 	vmov	s15, r3
 8008fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fea:	2a01      	cmp	r2, #1
 8008fec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ff0:	edc1 7a01 	vstr	s15, [r1, #4]
 8008ff4:	d009      	beq.n	800900a <arm_q15_to_float+0xc6>
 8008ff6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8008ffa:	ee07 3a90 	vmov	s15, r3
 8008ffe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009002:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009006:	edc1 7a02 	vstr	s15, [r1, #8]
 800900a:	bc70      	pop	{r4, r5, r6}
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	38000000 	.word	0x38000000

08009014 <arm_copy_q15>:
 8009014:	ea5f 0c92 	movs.w	ip, r2, lsr #2
 8009018:	d046      	beq.n	80090a8 <arm_copy_q15+0x94>
 800901a:	f101 0308 	add.w	r3, r1, #8
 800901e:	b4f0      	push	{r4, r5, r6, r7}
 8009020:	f100 0608 	add.w	r6, r0, #8
 8009024:	461c      	mov	r4, r3
 8009026:	42b1      	cmp	r1, r6
 8009028:	bf38      	it	cc
 800902a:	42a0      	cmpcc	r0, r4
 800902c:	ea41 0500 	orr.w	r5, r1, r0
 8009030:	4633      	mov	r3, r6
 8009032:	bf2c      	ite	cs
 8009034:	2301      	movcs	r3, #1
 8009036:	2300      	movcc	r3, #0
 8009038:	f015 0f07 	tst.w	r5, #7
 800903c:	bf18      	it	ne
 800903e:	2300      	movne	r3, #0
 8009040:	b323      	cbz	r3, 800908c <arm_copy_q15+0x78>
 8009042:	f10c 33ff 	add.w	r3, ip, #4294967295
 8009046:	2b04      	cmp	r3, #4
 8009048:	d920      	bls.n	800908c <arm_copy_q15+0x78>
 800904a:	f1a0 0508 	sub.w	r5, r0, #8
 800904e:	460c      	mov	r4, r1
 8009050:	2300      	movs	r3, #0
 8009052:	e9f5 6702 	ldrd	r6, r7, [r5, #8]!
 8009056:	3301      	adds	r3, #1
 8009058:	459c      	cmp	ip, r3
 800905a:	e8e4 6702 	strd	r6, r7, [r4], #8
 800905e:	d1f8      	bne.n	8009052 <arm_copy_q15+0x3e>
 8009060:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8009064:	f012 0203 	ands.w	r2, r2, #3
 8009068:	4460      	add	r0, ip
 800906a:	4461      	add	r1, ip
 800906c:	d00c      	beq.n	8009088 <arm_copy_q15+0x74>
 800906e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8009072:	800b      	strh	r3, [r1, #0]
 8009074:	3a01      	subs	r2, #1
 8009076:	d007      	beq.n	8009088 <arm_copy_q15+0x74>
 8009078:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800907c:	804b      	strh	r3, [r1, #2]
 800907e:	2a01      	cmp	r2, #1
 8009080:	bf1c      	itt	ne
 8009082:	f9b0 3004 	ldrshne.w	r3, [r0, #4]
 8009086:	808b      	strhne	r3, [r1, #4]
 8009088:	bcf0      	pop	{r4, r5, r6, r7}
 800908a:	4770      	bx	lr
 800908c:	460c      	mov	r4, r1
 800908e:	4603      	mov	r3, r0
 8009090:	4665      	mov	r5, ip
 8009092:	681e      	ldr	r6, [r3, #0]
 8009094:	6026      	str	r6, [r4, #0]
 8009096:	685e      	ldr	r6, [r3, #4]
 8009098:	6066      	str	r6, [r4, #4]
 800909a:	3d01      	subs	r5, #1
 800909c:	f103 0308 	add.w	r3, r3, #8
 80090a0:	f104 0408 	add.w	r4, r4, #8
 80090a4:	d1f5      	bne.n	8009092 <arm_copy_q15+0x7e>
 80090a6:	e7db      	b.n	8009060 <arm_copy_q15+0x4c>
 80090a8:	f012 0203 	ands.w	r2, r2, #3
 80090ac:	d00d      	beq.n	80090ca <arm_copy_q15+0xb6>
 80090ae:	f9b0 3000 	ldrsh.w	r3, [r0]
 80090b2:	800b      	strh	r3, [r1, #0]
 80090b4:	3a01      	subs	r2, #1
 80090b6:	d008      	beq.n	80090ca <arm_copy_q15+0xb6>
 80090b8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80090bc:	804b      	strh	r3, [r1, #2]
 80090be:	2a01      	cmp	r2, #1
 80090c0:	d003      	beq.n	80090ca <arm_copy_q15+0xb6>
 80090c2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80090c6:	808b      	strh	r3, [r1, #4]
 80090c8:	4770      	bx	lr
 80090ca:	4770      	bx	lr

080090cc <arm_rfft_32_fast_init_f32>:
 80090cc:	b178      	cbz	r0, 80090ee <arm_rfft_32_fast_init_f32+0x22>
 80090ce:	b430      	push	{r4, r5}
 80090d0:	4908      	ldr	r1, [pc, #32]	@ (80090f4 <arm_rfft_32_fast_init_f32+0x28>)
 80090d2:	4a09      	ldr	r2, [pc, #36]	@ (80090f8 <arm_rfft_32_fast_init_f32+0x2c>)
 80090d4:	2310      	movs	r3, #16
 80090d6:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80090da:	8003      	strh	r3, [r0, #0]
 80090dc:	2520      	movs	r5, #32
 80090de:	2414      	movs	r4, #20
 80090e0:	4b06      	ldr	r3, [pc, #24]	@ (80090fc <arm_rfft_32_fast_init_f32+0x30>)
 80090e2:	8205      	strh	r5, [r0, #16]
 80090e4:	8184      	strh	r4, [r0, #12]
 80090e6:	6143      	str	r3, [r0, #20]
 80090e8:	bc30      	pop	{r4, r5}
 80090ea:	2000      	movs	r0, #0
 80090ec:	4770      	bx	lr
 80090ee:	f04f 30ff 	mov.w	r0, #4294967295
 80090f2:	4770      	bx	lr
 80090f4:	080149c8 	.word	0x080149c8
 80090f8:	08019300 	.word	0x08019300
 80090fc:	08022080 	.word	0x08022080

08009100 <arm_rfft_64_fast_init_f32>:
 8009100:	b178      	cbz	r0, 8009122 <arm_rfft_64_fast_init_f32+0x22>
 8009102:	b430      	push	{r4, r5}
 8009104:	4908      	ldr	r1, [pc, #32]	@ (8009128 <arm_rfft_64_fast_init_f32+0x28>)
 8009106:	4a09      	ldr	r2, [pc, #36]	@ (800912c <arm_rfft_64_fast_init_f32+0x2c>)
 8009108:	2320      	movs	r3, #32
 800910a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800910e:	8003      	strh	r3, [r0, #0]
 8009110:	2540      	movs	r5, #64	@ 0x40
 8009112:	2430      	movs	r4, #48	@ 0x30
 8009114:	4b06      	ldr	r3, [pc, #24]	@ (8009130 <arm_rfft_64_fast_init_f32+0x30>)
 8009116:	8205      	strh	r5, [r0, #16]
 8009118:	8184      	strh	r4, [r0, #12]
 800911a:	6143      	str	r3, [r0, #20]
 800911c:	bc30      	pop	{r4, r5}
 800911e:	2000      	movs	r0, #0
 8009120:	4770      	bx	lr
 8009122:	f04f 30ff 	mov.w	r0, #4294967295
 8009126:	4770      	bx	lr
 8009128:	08016b20 	.word	0x08016b20
 800912c:	0801db80 	.word	0x0801db80
 8009130:	08026900 	.word	0x08026900

08009134 <arm_rfft_256_fast_init_f32>:
 8009134:	b180      	cbz	r0, 8009158 <arm_rfft_256_fast_init_f32+0x24>
 8009136:	b430      	push	{r4, r5}
 8009138:	4909      	ldr	r1, [pc, #36]	@ (8009160 <arm_rfft_256_fast_init_f32+0x2c>)
 800913a:	4a0a      	ldr	r2, [pc, #40]	@ (8009164 <arm_rfft_256_fast_init_f32+0x30>)
 800913c:	2380      	movs	r3, #128	@ 0x80
 800913e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009142:	8003      	strh	r3, [r0, #0]
 8009144:	f44f 7580 	mov.w	r5, #256	@ 0x100
 8009148:	24d0      	movs	r4, #208	@ 0xd0
 800914a:	4b07      	ldr	r3, [pc, #28]	@ (8009168 <arm_rfft_256_fast_init_f32+0x34>)
 800914c:	8205      	strh	r5, [r0, #16]
 800914e:	8184      	strh	r4, [r0, #12]
 8009150:	6143      	str	r3, [r0, #20]
 8009152:	bc30      	pop	{r4, r5}
 8009154:	2000      	movs	r0, #0
 8009156:	4770      	bx	lr
 8009158:	f04f 30ff 	mov.w	r0, #4294967295
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	08014828 	.word	0x08014828
 8009164:	08018f00 	.word	0x08018f00
 8009168:	08021c80 	.word	0x08021c80

0800916c <arm_rfft_512_fast_init_f32>:
 800916c:	b190      	cbz	r0, 8009194 <arm_rfft_512_fast_init_f32+0x28>
 800916e:	b430      	push	{r4, r5}
 8009170:	490a      	ldr	r1, [pc, #40]	@ (800919c <arm_rfft_512_fast_init_f32+0x30>)
 8009172:	4a0b      	ldr	r2, [pc, #44]	@ (80091a0 <arm_rfft_512_fast_init_f32+0x34>)
 8009174:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009178:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800917c:	8003      	strh	r3, [r0, #0]
 800917e:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8009182:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 8009186:	4b07      	ldr	r3, [pc, #28]	@ (80091a4 <arm_rfft_512_fast_init_f32+0x38>)
 8009188:	8205      	strh	r5, [r0, #16]
 800918a:	8184      	strh	r4, [r0, #12]
 800918c:	6143      	str	r3, [r0, #20]
 800918e:	bc30      	pop	{r4, r5}
 8009190:	2000      	movs	r0, #0
 8009192:	4770      	bx	lr
 8009194:	f04f 30ff 	mov.w	r0, #4294967295
 8009198:	4770      	bx	lr
 800919a:	bf00      	nop
 800919c:	080167b0 	.word	0x080167b0
 80091a0:	0801d380 	.word	0x0801d380
 80091a4:	08026100 	.word	0x08026100

080091a8 <arm_rfft_1024_fast_init_f32>:
 80091a8:	b190      	cbz	r0, 80091d0 <arm_rfft_1024_fast_init_f32+0x28>
 80091aa:	b430      	push	{r4, r5}
 80091ac:	490a      	ldr	r1, [pc, #40]	@ (80091d8 <arm_rfft_1024_fast_init_f32+0x30>)
 80091ae:	4a0b      	ldr	r2, [pc, #44]	@ (80091dc <arm_rfft_1024_fast_init_f32+0x34>)
 80091b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80091b4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80091b8:	8003      	strh	r3, [r0, #0]
 80091ba:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 80091be:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 80091c2:	4b07      	ldr	r3, [pc, #28]	@ (80091e0 <arm_rfft_1024_fast_init_f32+0x38>)
 80091c4:	8205      	strh	r5, [r0, #16]
 80091c6:	8184      	strh	r4, [r0, #12]
 80091c8:	6143      	str	r3, [r0, #20]
 80091ca:	bc30      	pop	{r4, r5}
 80091cc:	2000      	movs	r0, #0
 80091ce:	4770      	bx	lr
 80091d0:	f04f 30ff 	mov.w	r0, #4294967295
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	08016b80 	.word	0x08016b80
 80091dc:	0801dc80 	.word	0x0801dc80
 80091e0:	0801ec80 	.word	0x0801ec80

080091e4 <arm_rfft_2048_fast_init_f32>:
 80091e4:	b190      	cbz	r0, 800920c <arm_rfft_2048_fast_init_f32+0x28>
 80091e6:	b430      	push	{r4, r5}
 80091e8:	490a      	ldr	r1, [pc, #40]	@ (8009214 <arm_rfft_2048_fast_init_f32+0x30>)
 80091ea:	4a0b      	ldr	r2, [pc, #44]	@ (8009218 <arm_rfft_2048_fast_init_f32+0x34>)
 80091ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80091f0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80091f4:	8003      	strh	r3, [r0, #0]
 80091f6:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 80091fa:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 80091fe:	4b07      	ldr	r3, [pc, #28]	@ (800921c <arm_rfft_2048_fast_init_f32+0x38>)
 8009200:	8205      	strh	r5, [r0, #16]
 8009202:	8184      	strh	r4, [r0, #12]
 8009204:	6143      	str	r3, [r0, #20]
 8009206:	bc30      	pop	{r4, r5}
 8009208:	2000      	movs	r0, #0
 800920a:	4770      	bx	lr
 800920c:	f04f 30ff 	mov.w	r0, #4294967295
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	08013a18 	.word	0x08013a18
 8009218:	08016f00 	.word	0x08016f00
 800921c:	0801fc80 	.word	0x0801fc80

08009220 <arm_rfft_4096_fast_init_f32>:
 8009220:	b190      	cbz	r0, 8009248 <arm_rfft_4096_fast_init_f32+0x28>
 8009222:	b430      	push	{r4, r5}
 8009224:	490a      	ldr	r1, [pc, #40]	@ (8009250 <arm_rfft_4096_fast_init_f32+0x30>)
 8009226:	4a0b      	ldr	r2, [pc, #44]	@ (8009254 <arm_rfft_4096_fast_init_f32+0x34>)
 8009228:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800922c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009230:	8003      	strh	r3, [r0, #0]
 8009232:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8009236:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 800923a:	4b07      	ldr	r3, [pc, #28]	@ (8009258 <arm_rfft_4096_fast_init_f32+0x38>)
 800923c:	8205      	strh	r5, [r0, #16]
 800923e:	8184      	strh	r4, [r0, #12]
 8009240:	6143      	str	r3, [r0, #20]
 8009242:	bc30      	pop	{r4, r5}
 8009244:	2000      	movs	r0, #0
 8009246:	4770      	bx	lr
 8009248:	f04f 30ff 	mov.w	r0, #4294967295
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop
 8009250:	080149f0 	.word	0x080149f0
 8009254:	08019380 	.word	0x08019380
 8009258:	08022100 	.word	0x08022100

0800925c <arm_rfft_fast_init_f32>:
 800925c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009260:	d01f      	beq.n	80092a2 <arm_rfft_fast_init_f32+0x46>
 8009262:	d90b      	bls.n	800927c <arm_rfft_fast_init_f32+0x20>
 8009264:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8009268:	d019      	beq.n	800929e <arm_rfft_fast_init_f32+0x42>
 800926a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800926e:	d012      	beq.n	8009296 <arm_rfft_fast_init_f32+0x3a>
 8009270:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009274:	d00d      	beq.n	8009292 <arm_rfft_fast_init_f32+0x36>
 8009276:	f04f 30ff 	mov.w	r0, #4294967295
 800927a:	4770      	bx	lr
 800927c:	2940      	cmp	r1, #64	@ 0x40
 800927e:	d00c      	beq.n	800929a <arm_rfft_fast_init_f32+0x3e>
 8009280:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8009284:	d003      	beq.n	800928e <arm_rfft_fast_init_f32+0x32>
 8009286:	2920      	cmp	r1, #32
 8009288:	d1f5      	bne.n	8009276 <arm_rfft_fast_init_f32+0x1a>
 800928a:	4b07      	ldr	r3, [pc, #28]	@ (80092a8 <arm_rfft_fast_init_f32+0x4c>)
 800928c:	4718      	bx	r3
 800928e:	4b07      	ldr	r3, [pc, #28]	@ (80092ac <arm_rfft_fast_init_f32+0x50>)
 8009290:	4718      	bx	r3
 8009292:	4b07      	ldr	r3, [pc, #28]	@ (80092b0 <arm_rfft_fast_init_f32+0x54>)
 8009294:	4718      	bx	r3
 8009296:	4b07      	ldr	r3, [pc, #28]	@ (80092b4 <arm_rfft_fast_init_f32+0x58>)
 8009298:	4718      	bx	r3
 800929a:	4b07      	ldr	r3, [pc, #28]	@ (80092b8 <arm_rfft_fast_init_f32+0x5c>)
 800929c:	e7f6      	b.n	800928c <arm_rfft_fast_init_f32+0x30>
 800929e:	4b07      	ldr	r3, [pc, #28]	@ (80092bc <arm_rfft_fast_init_f32+0x60>)
 80092a0:	e7f4      	b.n	800928c <arm_rfft_fast_init_f32+0x30>
 80092a2:	4b07      	ldr	r3, [pc, #28]	@ (80092c0 <arm_rfft_fast_init_f32+0x64>)
 80092a4:	e7f2      	b.n	800928c <arm_rfft_fast_init_f32+0x30>
 80092a6:	bf00      	nop
 80092a8:	080090cd 	.word	0x080090cd
 80092ac:	08009135 	.word	0x08009135
 80092b0:	080091a9 	.word	0x080091a9
 80092b4:	08009221 	.word	0x08009221
 80092b8:	08009101 	.word	0x08009101
 80092bc:	080091e5 	.word	0x080091e5
 80092c0:	0800916d 	.word	0x0800916d

080092c4 <stage_rfft_f32>:
 80092c4:	b410      	push	{r4}
 80092c6:	edd1 7a00 	vldr	s15, [r1]
 80092ca:	ed91 7a01 	vldr	s14, [r1, #4]
 80092ce:	8804      	ldrh	r4, [r0, #0]
 80092d0:	6940      	ldr	r0, [r0, #20]
 80092d2:	ee37 7a07 	vadd.f32	s14, s14, s14
 80092d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80092da:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 80092de:	ee77 6a87 	vadd.f32	s13, s15, s14
 80092e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80092e6:	3c01      	subs	r4, #1
 80092e8:	ee26 7a84 	vmul.f32	s14, s13, s8
 80092ec:	ee67 7a84 	vmul.f32	s15, s15, s8
 80092f0:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 80092f4:	ed82 7a00 	vstr	s14, [r2]
 80092f8:	edc2 7a01 	vstr	s15, [r2, #4]
 80092fc:	3010      	adds	r0, #16
 80092fe:	3210      	adds	r2, #16
 8009300:	3b08      	subs	r3, #8
 8009302:	3110      	adds	r1, #16
 8009304:	ed11 5a02 	vldr	s10, [r1, #-8]
 8009308:	ed93 7a02 	vldr	s14, [r3, #8]
 800930c:	ed50 6a02 	vldr	s13, [r0, #-8]
 8009310:	edd3 4a03 	vldr	s9, [r3, #12]
 8009314:	ed51 7a01 	vldr	s15, [r1, #-4]
 8009318:	ed10 6a01 	vldr	s12, [r0, #-4]
 800931c:	ee77 5a45 	vsub.f32	s11, s14, s10
 8009320:	ee37 7a05 	vadd.f32	s14, s14, s10
 8009324:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8009328:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800932c:	ee66 5a25 	vmul.f32	s11, s12, s11
 8009330:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8009334:	ee37 7a23 	vadd.f32	s14, s14, s7
 8009338:	ee66 6a85 	vmul.f32	s13, s13, s10
 800933c:	ee26 6a05 	vmul.f32	s12, s12, s10
 8009340:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8009344:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009348:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800934c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8009350:	ee67 7a84 	vmul.f32	s15, s15, s8
 8009354:	3c01      	subs	r4, #1
 8009356:	ed02 7a02 	vstr	s14, [r2, #-8]
 800935a:	ed42 7a01 	vstr	s15, [r2, #-4]
 800935e:	f1a3 0308 	sub.w	r3, r3, #8
 8009362:	f101 0108 	add.w	r1, r1, #8
 8009366:	f100 0008 	add.w	r0, r0, #8
 800936a:	f102 0208 	add.w	r2, r2, #8
 800936e:	d1c9      	bne.n	8009304 <stage_rfft_f32+0x40>
 8009370:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop

08009378 <merge_rfft_f32>:
 8009378:	b410      	push	{r4}
 800937a:	edd1 7a00 	vldr	s15, [r1]
 800937e:	edd1 6a01 	vldr	s13, [r1, #4]
 8009382:	8804      	ldrh	r4, [r0, #0]
 8009384:	6940      	ldr	r0, [r0, #20]
 8009386:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800938a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800938e:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8009392:	ee27 7a04 	vmul.f32	s14, s14, s8
 8009396:	ee67 7a84 	vmul.f32	s15, s15, s8
 800939a:	3c01      	subs	r4, #1
 800939c:	ed82 7a00 	vstr	s14, [r2]
 80093a0:	edc2 7a01 	vstr	s15, [r2, #4]
 80093a4:	b3dc      	cbz	r4, 800941e <merge_rfft_f32+0xa6>
 80093a6:	00e3      	lsls	r3, r4, #3
 80093a8:	3b08      	subs	r3, #8
 80093aa:	440b      	add	r3, r1
 80093ac:	3010      	adds	r0, #16
 80093ae:	3210      	adds	r2, #16
 80093b0:	3110      	adds	r1, #16
 80093b2:	ed11 5a02 	vldr	s10, [r1, #-8]
 80093b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80093ba:	ed50 6a02 	vldr	s13, [r0, #-8]
 80093be:	edd3 4a03 	vldr	s9, [r3, #12]
 80093c2:	ed51 7a01 	vldr	s15, [r1, #-4]
 80093c6:	ed10 6a01 	vldr	s12, [r0, #-4]
 80093ca:	ee75 5a47 	vsub.f32	s11, s10, s14
 80093ce:	ee37 7a05 	vadd.f32	s14, s14, s10
 80093d2:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80093d6:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80093da:	ee66 5a25 	vmul.f32	s11, s12, s11
 80093de:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80093e2:	ee37 7a63 	vsub.f32	s14, s14, s7
 80093e6:	ee66 6a85 	vmul.f32	s13, s13, s10
 80093ea:	ee26 6a05 	vmul.f32	s12, s12, s10
 80093ee:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80093f2:	ee37 7a46 	vsub.f32	s14, s14, s12
 80093f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80093fa:	ee27 7a04 	vmul.f32	s14, s14, s8
 80093fe:	ee67 7a84 	vmul.f32	s15, s15, s8
 8009402:	3c01      	subs	r4, #1
 8009404:	ed02 7a02 	vstr	s14, [r2, #-8]
 8009408:	ed42 7a01 	vstr	s15, [r2, #-4]
 800940c:	f1a3 0308 	sub.w	r3, r3, #8
 8009410:	f101 0108 	add.w	r1, r1, #8
 8009414:	f100 0008 	add.w	r0, r0, #8
 8009418:	f102 0208 	add.w	r2, r2, #8
 800941c:	d1c9      	bne.n	80093b2 <merge_rfft_f32+0x3a>
 800941e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009422:	4770      	bx	lr

08009424 <arm_rfft_fast_f32>:
 8009424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009428:	8a05      	ldrh	r5, [r0, #16]
 800942a:	086d      	lsrs	r5, r5, #1
 800942c:	8005      	strh	r5, [r0, #0]
 800942e:	4604      	mov	r4, r0
 8009430:	4616      	mov	r6, r2
 8009432:	461d      	mov	r5, r3
 8009434:	b14b      	cbz	r3, 800944a <arm_rfft_fast_f32+0x26>
 8009436:	f7ff ff9f 	bl	8009378 <merge_rfft_f32>
 800943a:	462a      	mov	r2, r5
 800943c:	4631      	mov	r1, r6
 800943e:	4620      	mov	r0, r4
 8009440:	2301      	movs	r3, #1
 8009442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009446:	f000 bb33 	b.w	8009ab0 <arm_cfft_f32>
 800944a:	460f      	mov	r7, r1
 800944c:	461a      	mov	r2, r3
 800944e:	2301      	movs	r3, #1
 8009450:	f000 fb2e 	bl	8009ab0 <arm_cfft_f32>
 8009454:	4632      	mov	r2, r6
 8009456:	4639      	mov	r1, r7
 8009458:	4620      	mov	r0, r4
 800945a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800945e:	f7ff bf31 	b.w	80092c4 <stage_rfft_f32>
 8009462:	bf00      	nop

08009464 <arm_cfft_radix8by2_f32>:
 8009464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009468:	ed2d 8b08 	vpush	{d8-d11}
 800946c:	4607      	mov	r7, r0
 800946e:	4608      	mov	r0, r1
 8009470:	f8b7 c000 	ldrh.w	ip, [r7]
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800947a:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800947e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8009482:	f000 80b0 	beq.w	80095e6 <arm_cfft_radix8by2_f32+0x182>
 8009486:	008c      	lsls	r4, r1, #2
 8009488:	3410      	adds	r4, #16
 800948a:	f100 0310 	add.w	r3, r0, #16
 800948e:	1906      	adds	r6, r0, r4
 8009490:	3210      	adds	r2, #16
 8009492:	4444      	add	r4, r8
 8009494:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8009498:	f108 0510 	add.w	r5, r8, #16
 800949c:	ed15 2a04 	vldr	s4, [r5, #-16]
 80094a0:	ed55 2a03 	vldr	s5, [r5, #-12]
 80094a4:	ed54 4a04 	vldr	s9, [r4, #-16]
 80094a8:	ed14 4a03 	vldr	s8, [r4, #-12]
 80094ac:	ed14 6a02 	vldr	s12, [r4, #-8]
 80094b0:	ed54 5a01 	vldr	s11, [r4, #-4]
 80094b4:	ed53 3a04 	vldr	s7, [r3, #-16]
 80094b8:	ed15 0a02 	vldr	s0, [r5, #-8]
 80094bc:	ed55 0a01 	vldr	s1, [r5, #-4]
 80094c0:	ed56 6a04 	vldr	s13, [r6, #-16]
 80094c4:	ed16 3a03 	vldr	s6, [r6, #-12]
 80094c8:	ed13 7a03 	vldr	s14, [r3, #-12]
 80094cc:	ed13 5a02 	vldr	s10, [r3, #-8]
 80094d0:	ed53 7a01 	vldr	s15, [r3, #-4]
 80094d4:	ed16 1a02 	vldr	s2, [r6, #-8]
 80094d8:	ed56 1a01 	vldr	s3, [r6, #-4]
 80094dc:	ee73 ba82 	vadd.f32	s23, s7, s4
 80094e0:	ee37 ba22 	vadd.f32	s22, s14, s5
 80094e4:	ee76 9aa4 	vadd.f32	s19, s13, s9
 80094e8:	ee33 9a04 	vadd.f32	s18, s6, s8
 80094ec:	ee31 8aa5 	vadd.f32	s16, s3, s11
 80094f0:	ee75 aa00 	vadd.f32	s21, s10, s0
 80094f4:	ee37 aaa0 	vadd.f32	s20, s15, s1
 80094f8:	ee71 8a06 	vadd.f32	s17, s2, s12
 80094fc:	ed43 ba04 	vstr	s23, [r3, #-16]
 8009500:	ed03 ba03 	vstr	s22, [r3, #-12]
 8009504:	ed43 aa02 	vstr	s21, [r3, #-8]
 8009508:	ed03 aa01 	vstr	s20, [r3, #-4]
 800950c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8009510:	ed46 9a04 	vstr	s19, [r6, #-16]
 8009514:	ed06 9a03 	vstr	s18, [r6, #-12]
 8009518:	ed46 8a02 	vstr	s17, [r6, #-8]
 800951c:	ee37 7a62 	vsub.f32	s14, s14, s5
 8009520:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8009524:	ee34 4a43 	vsub.f32	s8, s8, s6
 8009528:	ed52 6a03 	vldr	s13, [r2, #-12]
 800952c:	ed12 3a04 	vldr	s6, [r2, #-16]
 8009530:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8009534:	ee27 8a26 	vmul.f32	s16, s14, s13
 8009538:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800953c:	ee23 2a83 	vmul.f32	s4, s7, s6
 8009540:	ee64 4a83 	vmul.f32	s9, s9, s6
 8009544:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8009548:	ee27 7a03 	vmul.f32	s14, s14, s6
 800954c:	ee64 6a26 	vmul.f32	s13, s8, s13
 8009550:	ee24 4a03 	vmul.f32	s8, s8, s6
 8009554:	ee37 7a63 	vsub.f32	s14, s14, s7
 8009558:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800955c:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8009560:	ee32 3a08 	vadd.f32	s6, s4, s16
 8009564:	ed05 7a03 	vstr	s14, [r5, #-12]
 8009568:	ed05 3a04 	vstr	s6, [r5, #-16]
 800956c:	ed04 4a04 	vstr	s8, [r4, #-16]
 8009570:	ed44 6a03 	vstr	s13, [r4, #-12]
 8009574:	ed12 7a01 	vldr	s14, [r2, #-4]
 8009578:	ee76 6a41 	vsub.f32	s13, s12, s2
 800957c:	ee35 5a40 	vsub.f32	s10, s10, s0
 8009580:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8009584:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8009588:	ed52 5a02 	vldr	s11, [r2, #-8]
 800958c:	ee67 3a87 	vmul.f32	s7, s15, s14
 8009590:	ee66 4a87 	vmul.f32	s9, s13, s14
 8009594:	ee25 4a25 	vmul.f32	s8, s10, s11
 8009598:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800959c:	ee25 5a07 	vmul.f32	s10, s10, s14
 80095a0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80095a4:	ee26 7a07 	vmul.f32	s14, s12, s14
 80095a8:	ee26 6a25 	vmul.f32	s12, s12, s11
 80095ac:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80095b0:	ee74 5a23 	vadd.f32	s11, s8, s7
 80095b4:	ee34 6ac6 	vsub.f32	s12, s9, s12
 80095b8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80095bc:	3310      	adds	r3, #16
 80095be:	4563      	cmp	r3, ip
 80095c0:	ed45 5a02 	vstr	s11, [r5, #-8]
 80095c4:	f106 0610 	add.w	r6, r6, #16
 80095c8:	ed45 7a01 	vstr	s15, [r5, #-4]
 80095cc:	f102 0210 	add.w	r2, r2, #16
 80095d0:	ed04 6a02 	vstr	s12, [r4, #-8]
 80095d4:	ed04 7a01 	vstr	s14, [r4, #-4]
 80095d8:	f105 0510 	add.w	r5, r5, #16
 80095dc:	f104 0410 	add.w	r4, r4, #16
 80095e0:	f47f af5c 	bne.w	800949c <arm_cfft_radix8by2_f32+0x38>
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	b28c      	uxth	r4, r1
 80095e8:	4621      	mov	r1, r4
 80095ea:	2302      	movs	r3, #2
 80095ec:	f000 fd1c 	bl	800a028 <arm_radix8_butterfly_f32>
 80095f0:	ecbd 8b08 	vpop	{d8-d11}
 80095f4:	4621      	mov	r1, r4
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	4640      	mov	r0, r8
 80095fa:	2302      	movs	r3, #2
 80095fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009600:	f000 bd12 	b.w	800a028 <arm_radix8_butterfly_f32>

08009604 <arm_cfft_radix8by4_f32>:
 8009604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009608:	ed2d 8b0a 	vpush	{d8-d12}
 800960c:	b08d      	sub	sp, #52	@ 0x34
 800960e:	460d      	mov	r5, r1
 8009610:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009612:	8801      	ldrh	r1, [r0, #0]
 8009614:	6842      	ldr	r2, [r0, #4]
 8009616:	900a      	str	r0, [sp, #40]	@ 0x28
 8009618:	0849      	lsrs	r1, r1, #1
 800961a:	008b      	lsls	r3, r1, #2
 800961c:	18ee      	adds	r6, r5, r3
 800961e:	18f0      	adds	r0, r6, r3
 8009620:	edd0 5a00 	vldr	s11, [r0]
 8009624:	edd5 7a00 	vldr	s15, [r5]
 8009628:	ed96 7a00 	vldr	s14, [r6]
 800962c:	edd0 3a01 	vldr	s7, [r0, #4]
 8009630:	ed96 4a01 	vldr	s8, [r6, #4]
 8009634:	ed95 5a01 	vldr	s10, [r5, #4]
 8009638:	9008      	str	r0, [sp, #32]
 800963a:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800963e:	18c7      	adds	r7, r0, r3
 8009640:	edd7 4a00 	vldr	s9, [r7]
 8009644:	ed97 3a01 	vldr	s6, [r7, #4]
 8009648:	9701      	str	r7, [sp, #4]
 800964a:	ee77 6a06 	vadd.f32	s13, s14, s12
 800964e:	462c      	mov	r4, r5
 8009650:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009654:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009658:	ee16 ca90 	vmov	ip, s13
 800965c:	f844 cb08 	str.w	ip, [r4], #8
 8009660:	ee75 6a23 	vadd.f32	s13, s10, s7
 8009664:	edd6 5a01 	vldr	s11, [r6, #4]
 8009668:	edd7 2a01 	vldr	s5, [r7, #4]
 800966c:	9404      	str	r4, [sp, #16]
 800966e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8009672:	ee74 3a27 	vadd.f32	s7, s8, s15
 8009676:	ee36 6a47 	vsub.f32	s12, s12, s14
 800967a:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800967e:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8009682:	0849      	lsrs	r1, r1, #1
 8009684:	f102 0e08 	add.w	lr, r2, #8
 8009688:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800968c:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8009690:	9109      	str	r1, [sp, #36]	@ 0x24
 8009692:	ee35 4a47 	vsub.f32	s8, s10, s14
 8009696:	f1a1 0902 	sub.w	r9, r1, #2
 800969a:	f8cd e00c 	str.w	lr, [sp, #12]
 800969e:	4631      	mov	r1, r6
 80096a0:	ee13 ea90 	vmov	lr, s7
 80096a4:	ee36 6a64 	vsub.f32	s12, s12, s9
 80096a8:	ee75 5aa2 	vadd.f32	s11, s11, s5
 80096ac:	4604      	mov	r4, r0
 80096ae:	edc5 5a01 	vstr	s11, [r5, #4]
 80096b2:	ee37 7a05 	vadd.f32	s14, s14, s10
 80096b6:	f841 eb08 	str.w	lr, [r1], #8
 80096ba:	ee34 5a24 	vadd.f32	s10, s8, s9
 80096be:	ee16 ea10 	vmov	lr, s12
 80096c2:	ed86 5a01 	vstr	s10, [r6, #4]
 80096c6:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80096ca:	f844 eb08 	str.w	lr, [r4], #8
 80096ce:	ee77 7a83 	vadd.f32	s15, s15, s6
 80096d2:	edc0 6a01 	vstr	s13, [r0, #4]
 80096d6:	9405      	str	r4, [sp, #20]
 80096d8:	4604      	mov	r4, r0
 80096da:	ee17 0a90 	vmov	r0, s15
 80096de:	9106      	str	r1, [sp, #24]
 80096e0:	ee37 7a64 	vsub.f32	s14, s14, s9
 80096e4:	f102 0110 	add.w	r1, r2, #16
 80096e8:	46bc      	mov	ip, r7
 80096ea:	9100      	str	r1, [sp, #0]
 80096ec:	f847 0b08 	str.w	r0, [r7], #8
 80096f0:	f102 0118 	add.w	r1, r2, #24
 80096f4:	ea5f 0059 	movs.w	r0, r9, lsr #1
 80096f8:	9102      	str	r1, [sp, #8]
 80096fa:	ed8c 7a01 	vstr	s14, [ip, #4]
 80096fe:	9007      	str	r0, [sp, #28]
 8009700:	f000 8134 	beq.w	800996c <arm_cfft_radix8by4_f32+0x368>
 8009704:	f102 0920 	add.w	r9, r2, #32
 8009708:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 800970c:	9a01      	ldr	r2, [sp, #4]
 800970e:	f8dd a000 	ldr.w	sl, [sp]
 8009712:	3b0c      	subs	r3, #12
 8009714:	4683      	mov	fp, r0
 8009716:	4463      	add	r3, ip
 8009718:	f105 0e10 	add.w	lr, r5, #16
 800971c:	f1a4 010c 	sub.w	r1, r4, #12
 8009720:	f104 0510 	add.w	r5, r4, #16
 8009724:	f1a6 0c0c 	sub.w	ip, r6, #12
 8009728:	f1a2 040c 	sub.w	r4, r2, #12
 800972c:	f106 0010 	add.w	r0, r6, #16
 8009730:	3210      	adds	r2, #16
 8009732:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8009736:	ed55 5a02 	vldr	s11, [r5, #-8]
 800973a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800973e:	ed52 1a02 	vldr	s3, [r2, #-8]
 8009742:	ed55 6a01 	vldr	s13, [r5, #-4]
 8009746:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800974a:	ed12 1a01 	vldr	s2, [r2, #-4]
 800974e:	ed10 8a01 	vldr	s16, [r0, #-4]
 8009752:	ee35 4a25 	vadd.f32	s8, s10, s11
 8009756:	ee30 6a26 	vadd.f32	s12, s0, s13
 800975a:	ee37 7a84 	vadd.f32	s14, s15, s8
 800975e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8009762:	ee37 7a21 	vadd.f32	s14, s14, s3
 8009766:	ee75 5a65 	vsub.f32	s11, s10, s11
 800976a:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800976e:	ed10 7a01 	vldr	s14, [r0, #-4]
 8009772:	ed52 6a01 	vldr	s13, [r2, #-4]
 8009776:	ee36 7a07 	vadd.f32	s14, s12, s14
 800977a:	ee78 aa25 	vadd.f32	s21, s16, s11
 800977e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009782:	ee70 3a67 	vsub.f32	s7, s0, s15
 8009786:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800978a:	ed94 7a02 	vldr	s14, [r4, #8]
 800978e:	ed9c 2a02 	vldr	s4, [ip, #8]
 8009792:	ed91 ba02 	vldr	s22, [r1, #8]
 8009796:	edd3 9a02 	vldr	s19, [r3, #8]
 800979a:	edd4 2a01 	vldr	s5, [r4, #4]
 800979e:	ed9c 9a01 	vldr	s18, [ip, #4]
 80097a2:	ed93 5a01 	vldr	s10, [r3, #4]
 80097a6:	edd1 0a01 	vldr	s1, [r1, #4]
 80097aa:	ee72 6a07 	vadd.f32	s13, s4, s14
 80097ae:	ee32 2a47 	vsub.f32	s4, s4, s14
 80097b2:	ee7b 8a26 	vadd.f32	s17, s22, s13
 80097b6:	ee79 4a22 	vadd.f32	s9, s18, s5
 80097ba:	ee38 7aa9 	vadd.f32	s14, s17, s19
 80097be:	ee79 2a62 	vsub.f32	s5, s18, s5
 80097c2:	ed8c 7a02 	vstr	s14, [ip, #8]
 80097c6:	ed91 7a01 	vldr	s14, [r1, #4]
 80097ca:	edd3 8a01 	vldr	s17, [r3, #4]
 80097ce:	ee34 7a87 	vadd.f32	s14, s9, s14
 80097d2:	ee3b 3a69 	vsub.f32	s6, s22, s19
 80097d6:	ee37 7a28 	vadd.f32	s14, s14, s17
 80097da:	ee32 9a60 	vsub.f32	s18, s4, s1
 80097de:	ed8c 7a01 	vstr	s14, [ip, #4]
 80097e2:	ed1a 7a01 	vldr	s14, [sl, #-4]
 80097e6:	ed1a aa02 	vldr	s20, [sl, #-8]
 80097ea:	ee73 8a22 	vadd.f32	s17, s6, s5
 80097ee:	ee39 9a05 	vadd.f32	s18, s18, s10
 80097f2:	ee7a aac1 	vsub.f32	s21, s21, s2
 80097f6:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80097fa:	ee2a ca8a 	vmul.f32	s24, s21, s20
 80097fe:	ee69 ba07 	vmul.f32	s23, s18, s14
 8009802:	ee6a aa87 	vmul.f32	s21, s21, s14
 8009806:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800980a:	ee63 ca87 	vmul.f32	s25, s7, s14
 800980e:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8009812:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8009816:	ee68 8a87 	vmul.f32	s17, s17, s14
 800981a:	ee73 3aea 	vsub.f32	s7, s7, s21
 800981e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8009822:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8009826:	ee3b aaca 	vsub.f32	s20, s23, s20
 800982a:	ee34 4a67 	vsub.f32	s8, s8, s15
 800982e:	ee76 6acb 	vsub.f32	s13, s13, s22
 8009832:	ee36 6a48 	vsub.f32	s12, s12, s16
 8009836:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800983a:	ed00 7a02 	vstr	s14, [r0, #-8]
 800983e:	ed40 3a01 	vstr	s7, [r0, #-4]
 8009842:	edc1 8a01 	vstr	s17, [r1, #4]
 8009846:	ed81 aa02 	vstr	s20, [r1, #8]
 800984a:	ed59 3a04 	vldr	s7, [r9, #-16]
 800984e:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8009852:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8009856:	ed59 6a03 	vldr	s13, [r9, #-12]
 800985a:	ee34 4a61 	vsub.f32	s8, s8, s3
 800985e:	ee36 6a41 	vsub.f32	s12, s12, s2
 8009862:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8009866:	ee66 9a26 	vmul.f32	s19, s12, s13
 800986a:	ee24 9a23 	vmul.f32	s18, s8, s7
 800986e:	ee26 6a23 	vmul.f32	s12, s12, s7
 8009872:	ee24 4a26 	vmul.f32	s8, s8, s13
 8009876:	ee27 7a26 	vmul.f32	s14, s14, s13
 800987a:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800987e:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8009882:	ee36 6a44 	vsub.f32	s12, s12, s8
 8009886:	ee37 7a64 	vsub.f32	s14, s14, s9
 800988a:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800988e:	ee79 3a29 	vadd.f32	s7, s18, s19
 8009892:	ee75 6a60 	vsub.f32	s13, s10, s1
 8009896:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800989a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800989e:	ed45 3a02 	vstr	s7, [r5, #-8]
 80098a2:	ed05 6a01 	vstr	s12, [r5, #-4]
 80098a6:	ed84 7a01 	vstr	s14, [r4, #4]
 80098aa:	ed84 4a02 	vstr	s8, [r4, #8]
 80098ae:	ee35 6a81 	vadd.f32	s12, s11, s2
 80098b2:	ee36 7ac2 	vsub.f32	s14, s13, s4
 80098b6:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 80098ba:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 80098be:	ee33 3a62 	vsub.f32	s6, s6, s5
 80098c2:	ee77 7ae1 	vsub.f32	s15, s15, s3
 80098c6:	ee67 2a26 	vmul.f32	s5, s14, s13
 80098ca:	ee67 4aa6 	vmul.f32	s9, s15, s13
 80098ce:	ee26 5a25 	vmul.f32	s10, s12, s11
 80098d2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80098d6:	ee26 6a26 	vmul.f32	s12, s12, s13
 80098da:	ee27 7a25 	vmul.f32	s14, s14, s11
 80098de:	ee63 6a26 	vmul.f32	s13, s6, s13
 80098e2:	ee23 3a25 	vmul.f32	s6, s6, s11
 80098e6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80098ea:	ee75 5a24 	vadd.f32	s11, s10, s9
 80098ee:	ee32 3ac3 	vsub.f32	s6, s5, s6
 80098f2:	ee36 7a87 	vadd.f32	s14, s13, s14
 80098f6:	f1bb 0b01 	subs.w	fp, fp, #1
 80098fa:	ed42 5a02 	vstr	s11, [r2, #-8]
 80098fe:	ed42 7a01 	vstr	s15, [r2, #-4]
 8009902:	f10e 0e08 	add.w	lr, lr, #8
 8009906:	ed83 3a02 	vstr	s6, [r3, #8]
 800990a:	ed83 7a01 	vstr	s14, [r3, #4]
 800990e:	f1ac 0c08 	sub.w	ip, ip, #8
 8009912:	f10a 0a08 	add.w	sl, sl, #8
 8009916:	f100 0008 	add.w	r0, r0, #8
 800991a:	f1a1 0108 	sub.w	r1, r1, #8
 800991e:	f109 0910 	add.w	r9, r9, #16
 8009922:	f105 0508 	add.w	r5, r5, #8
 8009926:	f1a4 0408 	sub.w	r4, r4, #8
 800992a:	f108 0818 	add.w	r8, r8, #24
 800992e:	f102 0208 	add.w	r2, r2, #8
 8009932:	f1a3 0308 	sub.w	r3, r3, #8
 8009936:	f47f aefc 	bne.w	8009732 <arm_cfft_radix8by4_f32+0x12e>
 800993a:	9907      	ldr	r1, [sp, #28]
 800993c:	9800      	ldr	r0, [sp, #0]
 800993e:	00cb      	lsls	r3, r1, #3
 8009940:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8009944:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009948:	9100      	str	r1, [sp, #0]
 800994a:	9904      	ldr	r1, [sp, #16]
 800994c:	4419      	add	r1, r3
 800994e:	9104      	str	r1, [sp, #16]
 8009950:	9903      	ldr	r1, [sp, #12]
 8009952:	4419      	add	r1, r3
 8009954:	9103      	str	r1, [sp, #12]
 8009956:	9906      	ldr	r1, [sp, #24]
 8009958:	4419      	add	r1, r3
 800995a:	9106      	str	r1, [sp, #24]
 800995c:	9905      	ldr	r1, [sp, #20]
 800995e:	441f      	add	r7, r3
 8009960:	4419      	add	r1, r3
 8009962:	9b02      	ldr	r3, [sp, #8]
 8009964:	9105      	str	r1, [sp, #20]
 8009966:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800996a:	9302      	str	r3, [sp, #8]
 800996c:	9904      	ldr	r1, [sp, #16]
 800996e:	9805      	ldr	r0, [sp, #20]
 8009970:	ed91 4a00 	vldr	s8, [r1]
 8009974:	edd0 6a00 	vldr	s13, [r0]
 8009978:	9b06      	ldr	r3, [sp, #24]
 800997a:	ed97 3a00 	vldr	s6, [r7]
 800997e:	edd3 7a00 	vldr	s15, [r3]
 8009982:	edd0 4a01 	vldr	s9, [r0, #4]
 8009986:	edd1 3a01 	vldr	s7, [r1, #4]
 800998a:	ed97 2a01 	vldr	s4, [r7, #4]
 800998e:	ed93 7a01 	vldr	s14, [r3, #4]
 8009992:	9a03      	ldr	r2, [sp, #12]
 8009994:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8009998:	ee34 6a26 	vadd.f32	s12, s8, s13
 800999c:	ee73 5aa4 	vadd.f32	s11, s7, s9
 80099a0:	ee37 5a86 	vadd.f32	s10, s15, s12
 80099a4:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80099a8:	ee35 5a03 	vadd.f32	s10, s10, s6
 80099ac:	ee74 6a66 	vsub.f32	s13, s8, s13
 80099b0:	ed81 5a00 	vstr	s10, [r1]
 80099b4:	ed93 5a01 	vldr	s10, [r3, #4]
 80099b8:	edd7 4a01 	vldr	s9, [r7, #4]
 80099bc:	ee35 5a85 	vadd.f32	s10, s11, s10
 80099c0:	ee37 4a26 	vadd.f32	s8, s14, s13
 80099c4:	ee35 5a24 	vadd.f32	s10, s10, s9
 80099c8:	ee73 4ae7 	vsub.f32	s9, s7, s15
 80099cc:	ed81 5a01 	vstr	s10, [r1, #4]
 80099d0:	edd2 1a00 	vldr	s3, [r2]
 80099d4:	edd2 2a01 	vldr	s5, [r2, #4]
 80099d8:	ee34 5a83 	vadd.f32	s10, s9, s6
 80099dc:	ee34 4a42 	vsub.f32	s8, s8, s4
 80099e0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80099e4:	ee64 4a21 	vmul.f32	s9, s8, s3
 80099e8:	ee24 4a22 	vmul.f32	s8, s8, s5
 80099ec:	ee65 2a22 	vmul.f32	s5, s10, s5
 80099f0:	ee25 5a21 	vmul.f32	s10, s10, s3
 80099f4:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80099f8:	ee35 5a44 	vsub.f32	s10, s10, s8
 80099fc:	edc3 2a00 	vstr	s5, [r3]
 8009a00:	ed83 5a01 	vstr	s10, [r3, #4]
 8009a04:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8009a08:	9b00      	ldr	r3, [sp, #0]
 8009a0a:	ee36 6a43 	vsub.f32	s12, s12, s6
 8009a0e:	ed93 4a01 	vldr	s8, [r3, #4]
 8009a12:	ed93 5a00 	vldr	s10, [r3]
 8009a16:	9b02      	ldr	r3, [sp, #8]
 8009a18:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8009a1c:	ee66 4a05 	vmul.f32	s9, s12, s10
 8009a20:	ee25 5a85 	vmul.f32	s10, s11, s10
 8009a24:	ee26 6a04 	vmul.f32	s12, s12, s8
 8009a28:	ee65 5a84 	vmul.f32	s11, s11, s8
 8009a2c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8009a30:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8009a34:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8009a38:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009a3c:	ed80 6a01 	vstr	s12, [r0, #4]
 8009a40:	edc0 5a00 	vstr	s11, [r0]
 8009a44:	edd3 5a01 	vldr	s11, [r3, #4]
 8009a48:	edd3 6a00 	vldr	s13, [r3]
 8009a4c:	ee37 7a02 	vadd.f32	s14, s14, s4
 8009a50:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8009a54:	ee27 6a26 	vmul.f32	s12, s14, s13
 8009a58:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8009a5c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8009a60:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009a64:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009a68:	ee76 7a27 	vadd.f32	s15, s12, s15
 8009a6c:	ed87 7a01 	vstr	s14, [r7, #4]
 8009a70:	edc7 7a00 	vstr	s15, [r7]
 8009a74:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 8009a78:	4621      	mov	r1, r4
 8009a7a:	686a      	ldr	r2, [r5, #4]
 8009a7c:	2304      	movs	r3, #4
 8009a7e:	f000 fad3 	bl	800a028 <arm_radix8_butterfly_f32>
 8009a82:	4630      	mov	r0, r6
 8009a84:	4621      	mov	r1, r4
 8009a86:	686a      	ldr	r2, [r5, #4]
 8009a88:	2304      	movs	r3, #4
 8009a8a:	f000 facd 	bl	800a028 <arm_radix8_butterfly_f32>
 8009a8e:	9808      	ldr	r0, [sp, #32]
 8009a90:	686a      	ldr	r2, [r5, #4]
 8009a92:	4621      	mov	r1, r4
 8009a94:	2304      	movs	r3, #4
 8009a96:	f000 fac7 	bl	800a028 <arm_radix8_butterfly_f32>
 8009a9a:	686a      	ldr	r2, [r5, #4]
 8009a9c:	9801      	ldr	r0, [sp, #4]
 8009a9e:	4621      	mov	r1, r4
 8009aa0:	2304      	movs	r3, #4
 8009aa2:	b00d      	add	sp, #52	@ 0x34
 8009aa4:	ecbd 8b0a 	vpop	{d8-d12}
 8009aa8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aac:	f000 babc 	b.w	800a028 <arm_radix8_butterfly_f32>

08009ab0 <arm_cfft_f32>:
 8009ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ab4:	2a01      	cmp	r2, #1
 8009ab6:	4606      	mov	r6, r0
 8009ab8:	4617      	mov	r7, r2
 8009aba:	460c      	mov	r4, r1
 8009abc:	4698      	mov	r8, r3
 8009abe:	8805      	ldrh	r5, [r0, #0]
 8009ac0:	d056      	beq.n	8009b70 <arm_cfft_f32+0xc0>
 8009ac2:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8009ac6:	d063      	beq.n	8009b90 <arm_cfft_f32+0xe0>
 8009ac8:	d916      	bls.n	8009af8 <arm_cfft_f32+0x48>
 8009aca:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8009ace:	d01a      	beq.n	8009b06 <arm_cfft_f32+0x56>
 8009ad0:	d947      	bls.n	8009b62 <arm_cfft_f32+0xb2>
 8009ad2:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8009ad6:	d05b      	beq.n	8009b90 <arm_cfft_f32+0xe0>
 8009ad8:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8009adc:	d105      	bne.n	8009aea <arm_cfft_f32+0x3a>
 8009ade:	2301      	movs	r3, #1
 8009ae0:	6872      	ldr	r2, [r6, #4]
 8009ae2:	4629      	mov	r1, r5
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	f000 fa9f 	bl	800a028 <arm_radix8_butterfly_f32>
 8009aea:	f1b8 0f00 	cmp.w	r8, #0
 8009aee:	d111      	bne.n	8009b14 <arm_cfft_f32+0x64>
 8009af0:	2f01      	cmp	r7, #1
 8009af2:	d016      	beq.n	8009b22 <arm_cfft_f32+0x72>
 8009af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009af8:	2d20      	cmp	r5, #32
 8009afa:	d049      	beq.n	8009b90 <arm_cfft_f32+0xe0>
 8009afc:	d935      	bls.n	8009b6a <arm_cfft_f32+0xba>
 8009afe:	2d40      	cmp	r5, #64	@ 0x40
 8009b00:	d0ed      	beq.n	8009ade <arm_cfft_f32+0x2e>
 8009b02:	2d80      	cmp	r5, #128	@ 0x80
 8009b04:	d1f1      	bne.n	8009aea <arm_cfft_f32+0x3a>
 8009b06:	4621      	mov	r1, r4
 8009b08:	4630      	mov	r0, r6
 8009b0a:	f7ff fcab 	bl	8009464 <arm_cfft_radix8by2_f32>
 8009b0e:	f1b8 0f00 	cmp.w	r8, #0
 8009b12:	d0ed      	beq.n	8009af0 <arm_cfft_f32+0x40>
 8009b14:	68b2      	ldr	r2, [r6, #8]
 8009b16:	89b1      	ldrh	r1, [r6, #12]
 8009b18:	4620      	mov	r0, r4
 8009b1a:	f000 f841 	bl	8009ba0 <arm_bitreversal_32>
 8009b1e:	2f01      	cmp	r7, #1
 8009b20:	d1e8      	bne.n	8009af4 <arm_cfft_f32+0x44>
 8009b22:	ee07 5a90 	vmov	s15, r5
 8009b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009b2e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009b32:	2d00      	cmp	r5, #0
 8009b34:	d0de      	beq.n	8009af4 <arm_cfft_f32+0x44>
 8009b36:	f104 0108 	add.w	r1, r4, #8
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	429d      	cmp	r5, r3
 8009b40:	f101 0108 	add.w	r1, r1, #8
 8009b44:	ed11 7a04 	vldr	s14, [r1, #-16]
 8009b48:	ed51 7a03 	vldr	s15, [r1, #-12]
 8009b4c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009b50:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009b54:	ed01 7a04 	vstr	s14, [r1, #-16]
 8009b58:	ed41 7a03 	vstr	s15, [r1, #-12]
 8009b5c:	d1ee      	bne.n	8009b3c <arm_cfft_f32+0x8c>
 8009b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b62:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8009b66:	d0ba      	beq.n	8009ade <arm_cfft_f32+0x2e>
 8009b68:	e7bf      	b.n	8009aea <arm_cfft_f32+0x3a>
 8009b6a:	2d10      	cmp	r5, #16
 8009b6c:	d0cb      	beq.n	8009b06 <arm_cfft_f32+0x56>
 8009b6e:	e7bc      	b.n	8009aea <arm_cfft_f32+0x3a>
 8009b70:	b19d      	cbz	r5, 8009b9a <arm_cfft_f32+0xea>
 8009b72:	f101 030c 	add.w	r3, r1, #12
 8009b76:	2200      	movs	r2, #0
 8009b78:	ed53 7a02 	vldr	s15, [r3, #-8]
 8009b7c:	3201      	adds	r2, #1
 8009b7e:	eef1 7a67 	vneg.f32	s15, s15
 8009b82:	4295      	cmp	r5, r2
 8009b84:	ed43 7a02 	vstr	s15, [r3, #-8]
 8009b88:	f103 0308 	add.w	r3, r3, #8
 8009b8c:	d1f4      	bne.n	8009b78 <arm_cfft_f32+0xc8>
 8009b8e:	e798      	b.n	8009ac2 <arm_cfft_f32+0x12>
 8009b90:	4621      	mov	r1, r4
 8009b92:	4630      	mov	r0, r6
 8009b94:	f7ff fd36 	bl	8009604 <arm_cfft_radix8by4_f32>
 8009b98:	e7a7      	b.n	8009aea <arm_cfft_f32+0x3a>
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d0aa      	beq.n	8009af4 <arm_cfft_f32+0x44>
 8009b9e:	e7b9      	b.n	8009b14 <arm_cfft_f32+0x64>

08009ba0 <arm_bitreversal_32>:
 8009ba0:	b1e9      	cbz	r1, 8009bde <arm_bitreversal_32+0x3e>
 8009ba2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ba4:	2500      	movs	r5, #0
 8009ba6:	f102 0e02 	add.w	lr, r2, #2
 8009baa:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8009bae:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8009bb2:	08a4      	lsrs	r4, r4, #2
 8009bb4:	089b      	lsrs	r3, r3, #2
 8009bb6:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8009bba:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8009bbe:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8009bc2:	00a6      	lsls	r6, r4, #2
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8009bca:	3304      	adds	r3, #4
 8009bcc:	1d34      	adds	r4, r6, #4
 8009bce:	3502      	adds	r5, #2
 8009bd0:	58c6      	ldr	r6, [r0, r3]
 8009bd2:	5907      	ldr	r7, [r0, r4]
 8009bd4:	50c7      	str	r7, [r0, r3]
 8009bd6:	428d      	cmp	r5, r1
 8009bd8:	5106      	str	r6, [r0, r4]
 8009bda:	d3e6      	bcc.n	8009baa <arm_bitreversal_32+0xa>
 8009bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bde:	4770      	bx	lr

08009be0 <arm_cmplx_mag_f32>:
 8009be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009be4:	ed2d 8b02 	vpush	{d8}
 8009be8:	0897      	lsrs	r7, r2, #2
 8009bea:	b084      	sub	sp, #16
 8009bec:	d077      	beq.n	8009cde <arm_cmplx_mag_f32+0xfe>
 8009bee:	f04f 0800 	mov.w	r8, #0
 8009bf2:	f100 0420 	add.w	r4, r0, #32
 8009bf6:	f101 0510 	add.w	r5, r1, #16
 8009bfa:	463e      	mov	r6, r7
 8009bfc:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 8009c00:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 8009c04:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009c08:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009c0c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009c10:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c18:	f2c0 80c5 	blt.w	8009da6 <arm_cmplx_mag_f32+0x1c6>
 8009c1c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c24:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009c28:	f100 80cb 	bmi.w	8009dc2 <arm_cmplx_mag_f32+0x1e2>
 8009c2c:	ed05 8a04 	vstr	s16, [r5, #-16]
 8009c30:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 8009c34:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 8009c38:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009c3c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009c40:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009c44:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c4c:	f2c0 80a8 	blt.w	8009da0 <arm_cmplx_mag_f32+0x1c0>
 8009c50:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c58:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009c5c:	f100 80a8 	bmi.w	8009db0 <arm_cmplx_mag_f32+0x1d0>
 8009c60:	ed05 8a03 	vstr	s16, [r5, #-12]
 8009c64:	ed14 0a04 	vldr	s0, [r4, #-16]
 8009c68:	ed54 7a03 	vldr	s15, [r4, #-12]
 8009c6c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009c70:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009c74:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009c78:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c80:	f2c0 808b 	blt.w	8009d9a <arm_cmplx_mag_f32+0x1ba>
 8009c84:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c8c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009c90:	f100 80a9 	bmi.w	8009de6 <arm_cmplx_mag_f32+0x206>
 8009c94:	ed05 8a02 	vstr	s16, [r5, #-8]
 8009c98:	ed14 0a02 	vldr	s0, [r4, #-8]
 8009c9c:	ed54 7a01 	vldr	s15, [r4, #-4]
 8009ca0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009ca4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009ca8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009cac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cb4:	db6e      	blt.n	8009d94 <arm_cmplx_mag_f32+0x1b4>
 8009cb6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cbe:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009cc2:	f100 8087 	bmi.w	8009dd4 <arm_cmplx_mag_f32+0x1f4>
 8009cc6:	ed05 8a01 	vstr	s16, [r5, #-4]
 8009cca:	3e01      	subs	r6, #1
 8009ccc:	f104 0420 	add.w	r4, r4, #32
 8009cd0:	f105 0510 	add.w	r5, r5, #16
 8009cd4:	d192      	bne.n	8009bfc <arm_cmplx_mag_f32+0x1c>
 8009cd6:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8009cda:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8009cde:	f012 0203 	ands.w	r2, r2, #3
 8009ce2:	d052      	beq.n	8009d8a <arm_cmplx_mag_f32+0x1aa>
 8009ce4:	ed90 0a00 	vldr	s0, [r0]
 8009ce8:	edd0 7a01 	vldr	s15, [r0, #4]
 8009cec:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009cf0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009cfa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d02:	bfb8      	it	lt
 8009d04:	600b      	strlt	r3, [r1, #0]
 8009d06:	db08      	blt.n	8009d1a <arm_cmplx_mag_f32+0x13a>
 8009d08:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d10:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009d14:	d479      	bmi.n	8009e0a <arm_cmplx_mag_f32+0x22a>
 8009d16:	ed81 8a00 	vstr	s16, [r1]
 8009d1a:	3a01      	subs	r2, #1
 8009d1c:	d035      	beq.n	8009d8a <arm_cmplx_mag_f32+0x1aa>
 8009d1e:	ed90 0a02 	vldr	s0, [r0, #8]
 8009d22:	edd0 7a03 	vldr	s15, [r0, #12]
 8009d26:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009d2a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009d2e:	2300      	movs	r3, #0
 8009d30:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009d34:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d3c:	bfb8      	it	lt
 8009d3e:	604b      	strlt	r3, [r1, #4]
 8009d40:	db08      	blt.n	8009d54 <arm_cmplx_mag_f32+0x174>
 8009d42:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d4a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009d4e:	d453      	bmi.n	8009df8 <arm_cmplx_mag_f32+0x218>
 8009d50:	ed81 8a01 	vstr	s16, [r1, #4]
 8009d54:	2a01      	cmp	r2, #1
 8009d56:	d018      	beq.n	8009d8a <arm_cmplx_mag_f32+0x1aa>
 8009d58:	ed90 0a04 	vldr	s0, [r0, #16]
 8009d5c:	edd0 7a05 	vldr	s15, [r0, #20]
 8009d60:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009d64:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009d68:	2300      	movs	r3, #0
 8009d6a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009d6e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d76:	db19      	blt.n	8009dac <arm_cmplx_mag_f32+0x1cc>
 8009d78:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d80:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009d84:	d44a      	bmi.n	8009e1c <arm_cmplx_mag_f32+0x23c>
 8009d86:	ed81 8a02 	vstr	s16, [r1, #8]
 8009d8a:	b004      	add	sp, #16
 8009d8c:	ecbd 8b02 	vpop	{d8}
 8009d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d94:	f845 8c04 	str.w	r8, [r5, #-4]
 8009d98:	e797      	b.n	8009cca <arm_cmplx_mag_f32+0xea>
 8009d9a:	f845 8c08 	str.w	r8, [r5, #-8]
 8009d9e:	e77b      	b.n	8009c98 <arm_cmplx_mag_f32+0xb8>
 8009da0:	f845 8c0c 	str.w	r8, [r5, #-12]
 8009da4:	e75e      	b.n	8009c64 <arm_cmplx_mag_f32+0x84>
 8009da6:	f845 8c10 	str.w	r8, [r5, #-16]
 8009daa:	e741      	b.n	8009c30 <arm_cmplx_mag_f32+0x50>
 8009dac:	608b      	str	r3, [r1, #8]
 8009dae:	e7ec      	b.n	8009d8a <arm_cmplx_mag_f32+0x1aa>
 8009db0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009db4:	9001      	str	r0, [sp, #4]
 8009db6:	f003 f95f 	bl	800d078 <sqrtf>
 8009dba:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009dbe:	9801      	ldr	r0, [sp, #4]
 8009dc0:	e74e      	b.n	8009c60 <arm_cmplx_mag_f32+0x80>
 8009dc2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009dc6:	9001      	str	r0, [sp, #4]
 8009dc8:	f003 f956 	bl	800d078 <sqrtf>
 8009dcc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009dd0:	9801      	ldr	r0, [sp, #4]
 8009dd2:	e72b      	b.n	8009c2c <arm_cmplx_mag_f32+0x4c>
 8009dd4:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009dd8:	9001      	str	r0, [sp, #4]
 8009dda:	f003 f94d 	bl	800d078 <sqrtf>
 8009dde:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009de2:	9801      	ldr	r0, [sp, #4]
 8009de4:	e76f      	b.n	8009cc6 <arm_cmplx_mag_f32+0xe6>
 8009de6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009dea:	9001      	str	r0, [sp, #4]
 8009dec:	f003 f944 	bl	800d078 <sqrtf>
 8009df0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009df4:	9801      	ldr	r0, [sp, #4]
 8009df6:	e74d      	b.n	8009c94 <arm_cmplx_mag_f32+0xb4>
 8009df8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dfc:	9201      	str	r2, [sp, #4]
 8009dfe:	f003 f93b 	bl	800d078 <sqrtf>
 8009e02:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8009e06:	9903      	ldr	r1, [sp, #12]
 8009e08:	e7a2      	b.n	8009d50 <arm_cmplx_mag_f32+0x170>
 8009e0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e0e:	9201      	str	r2, [sp, #4]
 8009e10:	f003 f932 	bl	800d078 <sqrtf>
 8009e14:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8009e18:	9903      	ldr	r1, [sp, #12]
 8009e1a:	e77c      	b.n	8009d16 <arm_cmplx_mag_f32+0x136>
 8009e1c:	9101      	str	r1, [sp, #4]
 8009e1e:	f003 f92b 	bl	800d078 <sqrtf>
 8009e22:	9901      	ldr	r1, [sp, #4]
 8009e24:	e7af      	b.n	8009d86 <arm_cmplx_mag_f32+0x1a6>
 8009e26:	bf00      	nop

08009e28 <arm_sqrt_q15>:
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	dd5c      	ble.n	8009ee6 <arm_sqrt_q15+0xbe>
 8009e2c:	fab0 f280 	clz	r2, r0
 8009e30:	3a11      	subs	r2, #17
 8009e32:	b292      	uxth	r2, r2
 8009e34:	b470      	push	{r4, r5, r6}
 8009e36:	f012 0401 	ands.w	r4, r2, #1
 8009e3a:	bf1a      	itte	ne
 8009e3c:	f102 33ff 	addne.w	r3, r2, #4294967295
 8009e40:	4098      	lslne	r0, r3
 8009e42:	4090      	lsleq	r0, r2
 8009e44:	b200      	sxth	r0, r0
 8009e46:	ee07 0a90 	vmov	s15, r0
 8009e4a:	eefa 7ae8 	vcvt.f32.s32	s15, s15, #15
 8009e4e:	4b28      	ldr	r3, [pc, #160]	@ (8009ef0 <arm_sqrt_q15+0xc8>)
 8009e50:	ee17 5a90 	vmov	r5, s15
 8009e54:	eba3 0365 	sub.w	r3, r3, r5, asr #1
 8009e58:	ee07 3a90 	vmov	s15, r3
 8009e5c:	eefe 7ac9 	vcvt.s32.f32	s15, s15, #14
 8009e60:	1046      	asrs	r6, r0, #1
 8009e62:	ee17 3a90 	vmov	r3, s15
 8009e66:	b21b      	sxth	r3, r3
 8009e68:	fb03 f503 	mul.w	r5, r3, r3
 8009e6c:	13ed      	asrs	r5, r5, #15
 8009e6e:	fb15 f506 	smulbb	r5, r5, r6
 8009e72:	13ed      	asrs	r5, r5, #15
 8009e74:	f5c5 5540 	rsb	r5, r5, #12288	@ 0x3000
 8009e78:	fb03 f305 	mul.w	r3, r3, r5
 8009e7c:	f343 334f 	sbfx	r3, r3, #13, #16
 8009e80:	f023 0303 	bic.w	r3, r3, #3
 8009e84:	fb03 f503 	mul.w	r5, r3, r3
 8009e88:	13ed      	asrs	r5, r5, #15
 8009e8a:	fb15 f506 	smulbb	r5, r5, r6
 8009e8e:	13ed      	asrs	r5, r5, #15
 8009e90:	f5c5 5540 	rsb	r5, r5, #12288	@ 0x3000
 8009e94:	fb03 f305 	mul.w	r3, r3, r5
 8009e98:	f343 334f 	sbfx	r3, r3, #13, #16
 8009e9c:	f023 0303 	bic.w	r3, r3, #3
 8009ea0:	fb03 f503 	mul.w	r5, r3, r3
 8009ea4:	13ed      	asrs	r5, r5, #15
 8009ea6:	fb15 f506 	smulbb	r5, r5, r6
 8009eaa:	13ed      	asrs	r5, r5, #15
 8009eac:	f5c5 5540 	rsb	r5, r5, #12288	@ 0x3000
 8009eb0:	fb03 f305 	mul.w	r3, r3, r5
 8009eb4:	13db      	asrs	r3, r3, #15
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	fb13 f300 	smulbb	r3, r3, r0
 8009ebc:	f343 338f 	sbfx	r3, r3, #14, #16
 8009ec0:	f023 0301 	bic.w	r3, r3, #1
 8009ec4:	b13c      	cbz	r4, 8009ed6 <arm_sqrt_q15+0xae>
 8009ec6:	3a01      	subs	r2, #1
 8009ec8:	1052      	asrs	r2, r2, #1
 8009eca:	4113      	asrs	r3, r2
 8009ecc:	b21b      	sxth	r3, r3
 8009ece:	2000      	movs	r0, #0
 8009ed0:	800b      	strh	r3, [r1, #0]
 8009ed2:	bc70      	pop	{r4, r5, r6}
 8009ed4:	4770      	bx	lr
 8009ed6:	f342 024e 	sbfx	r2, r2, #1, #15
 8009eda:	4113      	asrs	r3, r2
 8009edc:	b21b      	sxth	r3, r3
 8009ede:	2000      	movs	r0, #0
 8009ee0:	800b      	strh	r3, [r1, #0]
 8009ee2:	bc70      	pop	{r4, r5, r6}
 8009ee4:	4770      	bx	lr
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	800b      	strh	r3, [r1, #0]
 8009eea:	f04f 30ff 	mov.w	r0, #4294967295
 8009eee:	4770      	bx	lr
 8009ef0:	5f3759df 	.word	0x5f3759df

08009ef4 <arm_mult_f32>:
 8009ef4:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8009ef8:	b4f0      	push	{r4, r5, r6, r7}
 8009efa:	d033      	beq.n	8009f64 <arm_mult_f32+0x70>
 8009efc:	f100 0610 	add.w	r6, r0, #16
 8009f00:	f101 0510 	add.w	r5, r1, #16
 8009f04:	f102 0410 	add.w	r4, r2, #16
 8009f08:	4667      	mov	r7, ip
 8009f0a:	ed15 7a04 	vldr	s14, [r5, #-16]
 8009f0e:	ed56 7a04 	vldr	s15, [r6, #-16]
 8009f12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f16:	3f01      	subs	r7, #1
 8009f18:	ed44 7a04 	vstr	s15, [r4, #-16]
 8009f1c:	ed15 7a03 	vldr	s14, [r5, #-12]
 8009f20:	ed56 7a03 	vldr	s15, [r6, #-12]
 8009f24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f28:	f106 0610 	add.w	r6, r6, #16
 8009f2c:	ed44 7a03 	vstr	s15, [r4, #-12]
 8009f30:	ed15 7a02 	vldr	s14, [r5, #-8]
 8009f34:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 8009f38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f3c:	f105 0510 	add.w	r5, r5, #16
 8009f40:	ed44 7a02 	vstr	s15, [r4, #-8]
 8009f44:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 8009f48:	ed15 7a05 	vldr	s14, [r5, #-20]	@ 0xffffffec
 8009f4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f50:	f104 0410 	add.w	r4, r4, #16
 8009f54:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 8009f58:	d1d7      	bne.n	8009f0a <arm_mult_f32+0x16>
 8009f5a:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8009f5e:	4420      	add	r0, r4
 8009f60:	4421      	add	r1, r4
 8009f62:	4422      	add	r2, r4
 8009f64:	f013 0303 	ands.w	r3, r3, #3
 8009f68:	d01b      	beq.n	8009fa2 <arm_mult_f32+0xae>
 8009f6a:	edd1 7a00 	vldr	s15, [r1]
 8009f6e:	ed90 7a00 	vldr	s14, [r0]
 8009f72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f76:	3b01      	subs	r3, #1
 8009f78:	edc2 7a00 	vstr	s15, [r2]
 8009f7c:	d011      	beq.n	8009fa2 <arm_mult_f32+0xae>
 8009f7e:	edd0 7a01 	vldr	s15, [r0, #4]
 8009f82:	ed91 7a01 	vldr	s14, [r1, #4]
 8009f86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	edc2 7a01 	vstr	s15, [r2, #4]
 8009f90:	d007      	beq.n	8009fa2 <arm_mult_f32+0xae>
 8009f92:	edd0 7a02 	vldr	s15, [r0, #8]
 8009f96:	ed91 7a02 	vldr	s14, [r1, #8]
 8009f9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f9e:	edc2 7a02 	vstr	s15, [r2, #8]
 8009fa2:	bcf0      	pop	{r4, r5, r6, r7}
 8009fa4:	4770      	bx	lr
 8009fa6:	bf00      	nop

08009fa8 <arm_dot_prod_q15>:
 8009fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fac:	ea5f 0992 	movs.w	r9, r2, lsr #2
 8009fb0:	d036      	beq.n	800a020 <arm_dot_prod_q15+0x78>
 8009fb2:	468e      	mov	lr, r1
 8009fb4:	4684      	mov	ip, r0
 8009fb6:	46c8      	mov	r8, r9
 8009fb8:	2600      	movs	r6, #0
 8009fba:	2700      	movs	r7, #0
 8009fbc:	f8dc a000 	ldr.w	sl, [ip]
 8009fc0:	f8de b000 	ldr.w	fp, [lr]
 8009fc4:	4635      	mov	r5, r6
 8009fc6:	463c      	mov	r4, r7
 8009fc8:	fbca 54cb 	smlald	r5, r4, sl, fp
 8009fcc:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8009fd0:	f8de 7004 	ldr.w	r7, [lr, #4]
 8009fd4:	f10c 0c08 	add.w	ip, ip, #8
 8009fd8:	f10e 0e08 	add.w	lr, lr, #8
 8009fdc:	fbc6 54c7 	smlald	r5, r4, r6, r7
 8009fe0:	f1b8 0801 	subs.w	r8, r8, #1
 8009fe4:	462e      	mov	r6, r5
 8009fe6:	4627      	mov	r7, r4
 8009fe8:	d1e8      	bne.n	8009fbc <arm_dot_prod_q15+0x14>
 8009fea:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8009fee:	4449      	add	r1, r9
 8009ff0:	4448      	add	r0, r9
 8009ff2:	f012 0203 	ands.w	r2, r2, #3
 8009ff6:	d00f      	beq.n	800a018 <arm_dot_prod_q15+0x70>
 8009ff8:	880d      	ldrh	r5, [r1, #0]
 8009ffa:	8804      	ldrh	r4, [r0, #0]
 8009ffc:	3a01      	subs	r2, #1
 8009ffe:	fbc5 6784 	smlalbb	r6, r7, r5, r4
 800a002:	d009      	beq.n	800a018 <arm_dot_prod_q15+0x70>
 800a004:	8845      	ldrh	r5, [r0, #2]
 800a006:	884c      	ldrh	r4, [r1, #2]
 800a008:	2a01      	cmp	r2, #1
 800a00a:	fbc5 6784 	smlalbb	r6, r7, r5, r4
 800a00e:	d003      	beq.n	800a018 <arm_dot_prod_q15+0x70>
 800a010:	8880      	ldrh	r0, [r0, #4]
 800a012:	888a      	ldrh	r2, [r1, #4]
 800a014:	fbc0 6782 	smlalbb	r6, r7, r0, r2
 800a018:	e9c3 6700 	strd	r6, r7, [r3]
 800a01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a020:	2600      	movs	r6, #0
 800a022:	2700      	movs	r7, #0
 800a024:	e7e5      	b.n	8009ff2 <arm_dot_prod_q15+0x4a>
 800a026:	bf00      	nop

0800a028 <arm_radix8_butterfly_f32>:
 800a028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02c:	ed2d 8b10 	vpush	{d8-d15}
 800a030:	b095      	sub	sp, #84	@ 0x54
 800a032:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 800a036:	4603      	mov	r3, r0
 800a038:	3304      	adds	r3, #4
 800a03a:	ed9f bab9 	vldr	s22, [pc, #740]	@ 800a320 <arm_radix8_butterfly_f32+0x2f8>
 800a03e:	9012      	str	r0, [sp, #72]	@ 0x48
 800a040:	468b      	mov	fp, r1
 800a042:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a044:	4689      	mov	r9, r1
 800a046:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800a04a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a04c:	960f      	str	r6, [sp, #60]	@ 0x3c
 800a04e:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800a052:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800a056:	eb03 0508 	add.w	r5, r3, r8
 800a05a:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800a05e:	eb05 040e 	add.w	r4, r5, lr
 800a062:	0137      	lsls	r7, r6, #4
 800a064:	eba6 030a 	sub.w	r3, r6, sl
 800a068:	eb04 000e 	add.w	r0, r4, lr
 800a06c:	44b2      	add	sl, r6
 800a06e:	1d3a      	adds	r2, r7, #4
 800a070:	9702      	str	r7, [sp, #8]
 800a072:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800a076:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800a07a:	ebae 0c06 	sub.w	ip, lr, r6
 800a07e:	9703      	str	r7, [sp, #12]
 800a080:	eb03 0708 	add.w	r7, r3, r8
 800a084:	9701      	str	r7, [sp, #4]
 800a086:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800a08a:	9706      	str	r7, [sp, #24]
 800a08c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800a08e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800a092:	f10e 0104 	add.w	r1, lr, #4
 800a096:	4439      	add	r1, r7
 800a098:	443a      	add	r2, r7
 800a09a:	0137      	lsls	r7, r6, #4
 800a09c:	00f6      	lsls	r6, r6, #3
 800a09e:	9704      	str	r7, [sp, #16]
 800a0a0:	9605      	str	r6, [sp, #20]
 800a0a2:	9f01      	ldr	r7, [sp, #4]
 800a0a4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a0a6:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800a0aa:	f04f 0c00 	mov.w	ip, #0
 800a0ae:	edd4 6a00 	vldr	s13, [r4]
 800a0b2:	edd7 1a00 	vldr	s3, [r7]
 800a0b6:	ed16 aa01 	vldr	s20, [r6, #-4]
 800a0ba:	edd5 5a00 	vldr	s11, [r5]
 800a0be:	ed52 9a01 	vldr	s19, [r2, #-4]
 800a0c2:	ed90 6a00 	vldr	s12, [r0]
 800a0c6:	ed51 7a01 	vldr	s15, [r1, #-4]
 800a0ca:	ed93 3a00 	vldr	s6, [r3]
 800a0ce:	ee39 0a86 	vadd.f32	s0, s19, s12
 800a0d2:	ee33 2a21 	vadd.f32	s4, s6, s3
 800a0d6:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800a0da:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800a0de:	ee35 7a02 	vadd.f32	s14, s10, s4
 800a0e2:	ee34 4a80 	vadd.f32	s8, s9, s0
 800a0e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a0ea:	ee74 6a07 	vadd.f32	s13, s8, s14
 800a0ee:	ee34 4a47 	vsub.f32	s8, s8, s14
 800a0f2:	ed46 6a01 	vstr	s13, [r6, #-4]
 800a0f6:	ed85 4a00 	vstr	s8, [r5]
 800a0fa:	edd1 6a00 	vldr	s13, [r1]
 800a0fe:	ed94 9a01 	vldr	s18, [r4, #4]
 800a102:	edd3 2a01 	vldr	s5, [r3, #4]
 800a106:	edd7 8a01 	vldr	s17, [r7, #4]
 800a10a:	edd6 0a00 	vldr	s1, [r6]
 800a10e:	edd5 3a01 	vldr	s7, [r5, #4]
 800a112:	ed90 8a01 	vldr	s16, [r0, #4]
 800a116:	ed92 7a00 	vldr	s14, [r2]
 800a11a:	ee33 3a61 	vsub.f32	s6, s6, s3
 800a11e:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800a122:	ee72 aae8 	vsub.f32	s21, s5, s17
 800a126:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800a12a:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800a12e:	ee77 7a83 	vadd.f32	s15, s15, s6
 800a132:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800a136:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800a13a:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800a13e:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800a142:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800a146:	ee77 0a08 	vadd.f32	s1, s14, s16
 800a14a:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800a14e:	ee37 7a48 	vsub.f32	s14, s14, s16
 800a152:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800a156:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800a15a:	ee76 6a89 	vadd.f32	s13, s13, s18
 800a15e:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800a162:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800a166:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800a16a:	ee35 5a42 	vsub.f32	s10, s10, s4
 800a16e:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800a172:	ee33 2a20 	vadd.f32	s4, s6, s1
 800a176:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800a17a:	ee33 3a60 	vsub.f32	s6, s6, s1
 800a17e:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800a182:	ee77 0a01 	vadd.f32	s1, s14, s2
 800a186:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800a18a:	ee37 7a41 	vsub.f32	s14, s14, s2
 800a18e:	ee73 1a84 	vadd.f32	s3, s7, s8
 800a192:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800a196:	ee76 3a27 	vadd.f32	s7, s12, s15
 800a19a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a19e:	ee32 8a00 	vadd.f32	s16, s4, s0
 800a1a2:	ee33 1a45 	vsub.f32	s2, s6, s10
 800a1a6:	ee32 2a40 	vsub.f32	s4, s4, s0
 800a1aa:	ee35 5a03 	vadd.f32	s10, s10, s6
 800a1ae:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800a1b2:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800a1b6:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800a1ba:	ee34 6a67 	vsub.f32	s12, s8, s15
 800a1be:	ee75 4a87 	vadd.f32	s9, s11, s14
 800a1c2:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800a1c6:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800a1ca:	ee77 7a84 	vadd.f32	s15, s15, s8
 800a1ce:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800a1d2:	44dc      	add	ip, fp
 800a1d4:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800a1d8:	45e1      	cmp	r9, ip
 800a1da:	ed86 8a00 	vstr	s16, [r6]
 800a1de:	ed85 2a01 	vstr	s4, [r5, #4]
 800a1e2:	4456      	add	r6, sl
 800a1e4:	ed02 0a01 	vstr	s0, [r2, #-4]
 800a1e8:	4455      	add	r5, sl
 800a1ea:	edc0 6a00 	vstr	s13, [r0]
 800a1ee:	ed82 1a00 	vstr	s2, [r2]
 800a1f2:	ed80 5a01 	vstr	s10, [r0, #4]
 800a1f6:	4452      	add	r2, sl
 800a1f8:	ed01 3a01 	vstr	s6, [r1, #-4]
 800a1fc:	4450      	add	r0, sl
 800a1fe:	edc7 2a00 	vstr	s5, [r7]
 800a202:	edc4 4a00 	vstr	s9, [r4]
 800a206:	ed83 7a00 	vstr	s14, [r3]
 800a20a:	edc1 5a00 	vstr	s11, [r1]
 800a20e:	edc7 3a01 	vstr	s7, [r7, #4]
 800a212:	4451      	add	r1, sl
 800a214:	ed84 6a01 	vstr	s12, [r4, #4]
 800a218:	4457      	add	r7, sl
 800a21a:	edc3 7a01 	vstr	s15, [r3, #4]
 800a21e:	4454      	add	r4, sl
 800a220:	4453      	add	r3, sl
 800a222:	f63f af44 	bhi.w	800a0ae <arm_radix8_butterfly_f32+0x86>
 800a226:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a228:	2b07      	cmp	r3, #7
 800a22a:	f240 81b7 	bls.w	800a59c <arm_radix8_butterfly_f32+0x574>
 800a22e:	9b06      	ldr	r3, [sp, #24]
 800a230:	9903      	ldr	r1, [sp, #12]
 800a232:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a234:	9e05      	ldr	r6, [sp, #20]
 800a236:	9a04      	ldr	r2, [sp, #16]
 800a238:	f103 0c08 	add.w	ip, r3, #8
 800a23c:	9b02      	ldr	r3, [sp, #8]
 800a23e:	3108      	adds	r1, #8
 800a240:	f108 0808 	add.w	r8, r8, #8
 800a244:	1841      	adds	r1, r0, r1
 800a246:	3608      	adds	r6, #8
 800a248:	330c      	adds	r3, #12
 800a24a:	4604      	mov	r4, r0
 800a24c:	4444      	add	r4, r8
 800a24e:	18c3      	adds	r3, r0, r3
 800a250:	9109      	str	r1, [sp, #36]	@ 0x24
 800a252:	1981      	adds	r1, r0, r6
 800a254:	f10e 0e08 	add.w	lr, lr, #8
 800a258:	3208      	adds	r2, #8
 800a25a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a25c:	9107      	str	r1, [sp, #28]
 800a25e:	4604      	mov	r4, r0
 800a260:	4601      	mov	r1, r0
 800a262:	9304      	str	r3, [sp, #16]
 800a264:	f100 030c 	add.w	r3, r0, #12
 800a268:	4474      	add	r4, lr
 800a26a:	f04f 0801 	mov.w	r8, #1
 800a26e:	1882      	adds	r2, r0, r2
 800a270:	4461      	add	r1, ip
 800a272:	9305      	str	r3, [sp, #20]
 800a274:	464b      	mov	r3, r9
 800a276:	940a      	str	r4, [sp, #40]	@ 0x28
 800a278:	46c1      	mov	r9, r8
 800a27a:	9208      	str	r2, [sp, #32]
 800a27c:	46d8      	mov	r8, fp
 800a27e:	9106      	str	r1, [sp, #24]
 800a280:	f04f 0e00 	mov.w	lr, #0
 800a284:	469b      	mov	fp, r3
 800a286:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a288:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a28a:	449e      	add	lr, r3
 800a28c:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800a290:	441a      	add	r2, r3
 800a292:	920e      	str	r2, [sp, #56]	@ 0x38
 800a294:	441a      	add	r2, r3
 800a296:	18d4      	adds	r4, r2, r3
 800a298:	18e5      	adds	r5, r4, r3
 800a29a:	18ee      	adds	r6, r5, r3
 800a29c:	18f7      	adds	r7, r6, r3
 800a29e:	eb07 0c03 	add.w	ip, r7, r3
 800a2a2:	920d      	str	r2, [sp, #52]	@ 0x34
 800a2a4:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800a2a8:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800a2ac:	910c      	str	r1, [sp, #48]	@ 0x30
 800a2ae:	4419      	add	r1, r3
 800a2b0:	9103      	str	r1, [sp, #12]
 800a2b2:	4419      	add	r1, r3
 800a2b4:	18ca      	adds	r2, r1, r3
 800a2b6:	9202      	str	r2, [sp, #8]
 800a2b8:	441a      	add	r2, r3
 800a2ba:	18d0      	adds	r0, r2, r3
 800a2bc:	ed92 ea01 	vldr	s28, [r2, #4]
 800a2c0:	9a02      	ldr	r2, [sp, #8]
 800a2c2:	edd4 7a00 	vldr	s15, [r4]
 800a2c6:	edd2 da01 	vldr	s27, [r2, #4]
 800a2ca:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a2cc:	ed91 da01 	vldr	s26, [r1, #4]
 800a2d0:	ed92 ca01 	vldr	s24, [r2, #4]
 800a2d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a2d6:	9903      	ldr	r1, [sp, #12]
 800a2d8:	edcd 7a03 	vstr	s15, [sp, #12]
 800a2dc:	edd2 7a00 	vldr	s15, [r2]
 800a2e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2e2:	edcd 7a02 	vstr	s15, [sp, #8]
 800a2e6:	edd2 7a00 	vldr	s15, [r2]
 800a2ea:	edd0 ea01 	vldr	s29, [r0, #4]
 800a2ee:	edd1 ca01 	vldr	s25, [r1, #4]
 800a2f2:	eddc ba00 	vldr	s23, [ip]
 800a2f6:	edd7 aa00 	vldr	s21, [r7]
 800a2fa:	ed96 aa00 	vldr	s20, [r6]
 800a2fe:	edd5 9a00 	vldr	s19, [r5]
 800a302:	edcd 7a01 	vstr	s15, [sp, #4]
 800a306:	4403      	add	r3, r0
 800a308:	ed93 fa01 	vldr	s30, [r3, #4]
 800a30c:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800a310:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800a314:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a318:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800a31c:	46cc      	mov	ip, r9
 800a31e:	e001      	b.n	800a324 <arm_radix8_butterfly_f32+0x2fc>
 800a320:	3f3504f3 	.word	0x3f3504f3
 800a324:	ed91 6a00 	vldr	s12, [r1]
 800a328:	ed93 5a00 	vldr	s10, [r3]
 800a32c:	edd0 fa00 	vldr	s31, [r0]
 800a330:	edd4 7a00 	vldr	s15, [r4]
 800a334:	ed95 7a00 	vldr	s14, [r5]
 800a338:	ed56 3a01 	vldr	s7, [r6, #-4]
 800a33c:	ed17 3a01 	vldr	s6, [r7, #-4]
 800a340:	ed92 2a00 	vldr	s4, [r2]
 800a344:	ed96 0a00 	vldr	s0, [r6]
 800a348:	ee33 8a85 	vadd.f32	s16, s7, s10
 800a34c:	ee32 1a06 	vadd.f32	s2, s4, s12
 800a350:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800a354:	ee77 4a87 	vadd.f32	s9, s15, s14
 800a358:	ee78 1a04 	vadd.f32	s3, s16, s8
 800a35c:	ee71 6a24 	vadd.f32	s13, s2, s9
 800a360:	ee32 2a46 	vsub.f32	s4, s4, s12
 800a364:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800a368:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a36c:	ed06 6a01 	vstr	s12, [r6, #-4]
 800a370:	edd4 8a01 	vldr	s17, [r4, #4]
 800a374:	ed92 9a01 	vldr	s18, [r2, #4]
 800a378:	edd7 0a00 	vldr	s1, [r7]
 800a37c:	edd1 2a01 	vldr	s5, [r1, #4]
 800a380:	ed95 7a01 	vldr	s14, [r5, #4]
 800a384:	ed93 6a01 	vldr	s12, [r3, #4]
 800a388:	edd0 5a01 	vldr	s11, [r0, #4]
 800a38c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800a390:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800a394:	ee39 5a62 	vsub.f32	s10, s18, s5
 800a398:	ee78 fac7 	vsub.f32	s31, s17, s14
 800a39c:	ee38 4a44 	vsub.f32	s8, s16, s8
 800a3a0:	ee38 7a87 	vadd.f32	s14, s17, s14
 800a3a4:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800a3a8:	ee79 2a22 	vadd.f32	s5, s18, s5
 800a3ac:	ee32 9a27 	vadd.f32	s18, s4, s15
 800a3b0:	ee72 7a67 	vsub.f32	s15, s4, s15
 800a3b4:	ee30 2a06 	vadd.f32	s4, s0, s12
 800a3b8:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800a3bc:	ee71 4a64 	vsub.f32	s9, s2, s9
 800a3c0:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800a3c4:	ee32 1a08 	vadd.f32	s2, s4, s16
 800a3c8:	ee72 fa87 	vadd.f32	s31, s5, s14
 800a3cc:	ee32 2a48 	vsub.f32	s4, s4, s16
 800a3d0:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800a3d4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800a3d8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800a3dc:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800a3e0:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800a3e4:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800a3e8:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800a3ec:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800a3f0:	ee30 6a46 	vsub.f32	s12, s0, s12
 800a3f4:	ee74 0a22 	vadd.f32	s1, s8, s5
 800a3f8:	ee36 0a28 	vadd.f32	s0, s12, s17
 800a3fc:	ee74 2a62 	vsub.f32	s5, s8, s5
 800a400:	ee36 6a68 	vsub.f32	s12, s12, s17
 800a404:	ee32 4a64 	vsub.f32	s8, s4, s9
 800a408:	ee73 8a09 	vadd.f32	s17, s6, s18
 800a40c:	ee74 4a82 	vadd.f32	s9, s9, s4
 800a410:	ee33 9a49 	vsub.f32	s18, s6, s18
 800a414:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800a418:	ee35 3a85 	vadd.f32	s6, s11, s10
 800a41c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800a420:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800a424:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800a428:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800a42c:	ee30 7a68 	vsub.f32	s14, s0, s17
 800a430:	ee35 8a03 	vadd.f32	s16, s10, s6
 800a434:	ee38 0a80 	vadd.f32	s0, s17, s0
 800a438:	ee73 3a82 	vadd.f32	s7, s7, s4
 800a43c:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800a440:	ed9d 2a01 	vldr	s4, [sp, #4]
 800a444:	eddd 1a02 	vldr	s3, [sp, #8]
 800a448:	ee35 5a43 	vsub.f32	s10, s10, s6
 800a44c:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800a450:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800a454:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800a458:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a45c:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800a460:	ee76 5a49 	vsub.f32	s11, s12, s18
 800a464:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800a468:	ee39 6a06 	vadd.f32	s12, s18, s12
 800a46c:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800a470:	ee21 4a84 	vmul.f32	s8, s3, s8
 800a474:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800a478:	ee22 7a07 	vmul.f32	s14, s4, s14
 800a47c:	ee22 2a08 	vmul.f32	s4, s4, s16
 800a480:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800a484:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800a488:	ee31 1a09 	vadd.f32	s2, s2, s18
 800a48c:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800a490:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800a494:	ee74 0a60 	vsub.f32	s1, s8, s1
 800a498:	ee37 7a48 	vsub.f32	s14, s14, s16
 800a49c:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800a4a0:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800a4a4:	ee72 1a21 	vadd.f32	s3, s4, s3
 800a4a8:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800a4ac:	ee38 2a89 	vadd.f32	s4, s17, s18
 800a4b0:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800a4b4:	ee38 8a04 	vadd.f32	s16, s16, s8
 800a4b8:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800a4bc:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800a4c0:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800a4c4:	eddd 5a03 	vldr	s11, [sp, #12]
 800a4c8:	edc6 fa00 	vstr	s31, [r6]
 800a4cc:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800a4d0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800a4d4:	ee30 0a45 	vsub.f32	s0, s0, s10
 800a4d8:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800a4dc:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800a4e0:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800a4e4:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800a4e8:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800a4ec:	ee25 6a86 	vmul.f32	s12, s11, s12
 800a4f0:	ee74 4a89 	vadd.f32	s9, s9, s18
 800a4f4:	ee34 3a43 	vsub.f32	s6, s8, s6
 800a4f8:	ee78 8a85 	vadd.f32	s17, s17, s10
 800a4fc:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a500:	44c4      	add	ip, r8
 800a502:	45e3      	cmp	fp, ip
 800a504:	edc3 3a00 	vstr	s7, [r3]
 800a508:	edc3 6a01 	vstr	s13, [r3, #4]
 800a50c:	4456      	add	r6, sl
 800a50e:	ed07 1a01 	vstr	s2, [r7, #-4]
 800a512:	edc7 0a00 	vstr	s1, [r7]
 800a516:	4453      	add	r3, sl
 800a518:	ed80 2a00 	vstr	s4, [r0]
 800a51c:	edc0 2a01 	vstr	s5, [r0, #4]
 800a520:	4457      	add	r7, sl
 800a522:	edc2 1a00 	vstr	s3, [r2]
 800a526:	ed82 7a01 	vstr	s14, [r2, #4]
 800a52a:	4450      	add	r0, sl
 800a52c:	ed85 8a00 	vstr	s16, [r5]
 800a530:	ed85 0a01 	vstr	s0, [r5, #4]
 800a534:	4452      	add	r2, sl
 800a536:	edc1 4a00 	vstr	s9, [r1]
 800a53a:	4455      	add	r5, sl
 800a53c:	ed81 3a01 	vstr	s6, [r1, #4]
 800a540:	edc4 8a00 	vstr	s17, [r4]
 800a544:	ed84 6a01 	vstr	s12, [r4, #4]
 800a548:	4451      	add	r1, sl
 800a54a:	4454      	add	r4, sl
 800a54c:	f63f aeea 	bhi.w	800a324 <arm_radix8_butterfly_f32+0x2fc>
 800a550:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a552:	3308      	adds	r3, #8
 800a554:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a556:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a558:	3308      	adds	r3, #8
 800a55a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a55c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a55e:	3308      	adds	r3, #8
 800a560:	9309      	str	r3, [sp, #36]	@ 0x24
 800a562:	9b08      	ldr	r3, [sp, #32]
 800a564:	3308      	adds	r3, #8
 800a566:	9308      	str	r3, [sp, #32]
 800a568:	9b07      	ldr	r3, [sp, #28]
 800a56a:	3308      	adds	r3, #8
 800a56c:	9307      	str	r3, [sp, #28]
 800a56e:	9b06      	ldr	r3, [sp, #24]
 800a570:	3308      	adds	r3, #8
 800a572:	9306      	str	r3, [sp, #24]
 800a574:	9b05      	ldr	r3, [sp, #20]
 800a576:	3308      	adds	r3, #8
 800a578:	9305      	str	r3, [sp, #20]
 800a57a:	9b04      	ldr	r3, [sp, #16]
 800a57c:	3308      	adds	r3, #8
 800a57e:	9304      	str	r3, [sp, #16]
 800a580:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a582:	f109 0901 	add.w	r9, r9, #1
 800a586:	454b      	cmp	r3, r9
 800a588:	f47f ae7d 	bne.w	800a286 <arm_radix8_butterfly_f32+0x25e>
 800a58c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a58e:	00db      	lsls	r3, r3, #3
 800a590:	b29b      	uxth	r3, r3
 800a592:	46d9      	mov	r9, fp
 800a594:	9310      	str	r3, [sp, #64]	@ 0x40
 800a596:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800a59a:	e554      	b.n	800a046 <arm_radix8_butterfly_f32+0x1e>
 800a59c:	b015      	add	sp, #84	@ 0x54
 800a59e:	ecbd 8b10 	vpop	{d8-d15}
 800a5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5a6:	bf00      	nop

0800a5a8 <__cvt>:
 800a5a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5ac:	ec57 6b10 	vmov	r6, r7, d0
 800a5b0:	2f00      	cmp	r7, #0
 800a5b2:	460c      	mov	r4, r1
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	463b      	mov	r3, r7
 800a5b8:	bfbb      	ittet	lt
 800a5ba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a5be:	461f      	movlt	r7, r3
 800a5c0:	2300      	movge	r3, #0
 800a5c2:	232d      	movlt	r3, #45	@ 0x2d
 800a5c4:	700b      	strb	r3, [r1, #0]
 800a5c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a5c8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a5cc:	4691      	mov	r9, r2
 800a5ce:	f023 0820 	bic.w	r8, r3, #32
 800a5d2:	bfbc      	itt	lt
 800a5d4:	4632      	movlt	r2, r6
 800a5d6:	4616      	movlt	r6, r2
 800a5d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a5dc:	d005      	beq.n	800a5ea <__cvt+0x42>
 800a5de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a5e2:	d100      	bne.n	800a5e6 <__cvt+0x3e>
 800a5e4:	3401      	adds	r4, #1
 800a5e6:	2102      	movs	r1, #2
 800a5e8:	e000      	b.n	800a5ec <__cvt+0x44>
 800a5ea:	2103      	movs	r1, #3
 800a5ec:	ab03      	add	r3, sp, #12
 800a5ee:	9301      	str	r3, [sp, #4]
 800a5f0:	ab02      	add	r3, sp, #8
 800a5f2:	9300      	str	r3, [sp, #0]
 800a5f4:	ec47 6b10 	vmov	d0, r6, r7
 800a5f8:	4653      	mov	r3, sl
 800a5fa:	4622      	mov	r2, r4
 800a5fc:	f000 fe58 	bl	800b2b0 <_dtoa_r>
 800a600:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a604:	4605      	mov	r5, r0
 800a606:	d119      	bne.n	800a63c <__cvt+0x94>
 800a608:	f019 0f01 	tst.w	r9, #1
 800a60c:	d00e      	beq.n	800a62c <__cvt+0x84>
 800a60e:	eb00 0904 	add.w	r9, r0, r4
 800a612:	2200      	movs	r2, #0
 800a614:	2300      	movs	r3, #0
 800a616:	4630      	mov	r0, r6
 800a618:	4639      	mov	r1, r7
 800a61a:	f7f6 fa55 	bl	8000ac8 <__aeabi_dcmpeq>
 800a61e:	b108      	cbz	r0, 800a624 <__cvt+0x7c>
 800a620:	f8cd 900c 	str.w	r9, [sp, #12]
 800a624:	2230      	movs	r2, #48	@ 0x30
 800a626:	9b03      	ldr	r3, [sp, #12]
 800a628:	454b      	cmp	r3, r9
 800a62a:	d31e      	bcc.n	800a66a <__cvt+0xc2>
 800a62c:	9b03      	ldr	r3, [sp, #12]
 800a62e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a630:	1b5b      	subs	r3, r3, r5
 800a632:	4628      	mov	r0, r5
 800a634:	6013      	str	r3, [r2, #0]
 800a636:	b004      	add	sp, #16
 800a638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a63c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a640:	eb00 0904 	add.w	r9, r0, r4
 800a644:	d1e5      	bne.n	800a612 <__cvt+0x6a>
 800a646:	7803      	ldrb	r3, [r0, #0]
 800a648:	2b30      	cmp	r3, #48	@ 0x30
 800a64a:	d10a      	bne.n	800a662 <__cvt+0xba>
 800a64c:	2200      	movs	r2, #0
 800a64e:	2300      	movs	r3, #0
 800a650:	4630      	mov	r0, r6
 800a652:	4639      	mov	r1, r7
 800a654:	f7f6 fa38 	bl	8000ac8 <__aeabi_dcmpeq>
 800a658:	b918      	cbnz	r0, 800a662 <__cvt+0xba>
 800a65a:	f1c4 0401 	rsb	r4, r4, #1
 800a65e:	f8ca 4000 	str.w	r4, [sl]
 800a662:	f8da 3000 	ldr.w	r3, [sl]
 800a666:	4499      	add	r9, r3
 800a668:	e7d3      	b.n	800a612 <__cvt+0x6a>
 800a66a:	1c59      	adds	r1, r3, #1
 800a66c:	9103      	str	r1, [sp, #12]
 800a66e:	701a      	strb	r2, [r3, #0]
 800a670:	e7d9      	b.n	800a626 <__cvt+0x7e>

0800a672 <__exponent>:
 800a672:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a674:	2900      	cmp	r1, #0
 800a676:	bfba      	itte	lt
 800a678:	4249      	neglt	r1, r1
 800a67a:	232d      	movlt	r3, #45	@ 0x2d
 800a67c:	232b      	movge	r3, #43	@ 0x2b
 800a67e:	2909      	cmp	r1, #9
 800a680:	7002      	strb	r2, [r0, #0]
 800a682:	7043      	strb	r3, [r0, #1]
 800a684:	dd29      	ble.n	800a6da <__exponent+0x68>
 800a686:	f10d 0307 	add.w	r3, sp, #7
 800a68a:	461d      	mov	r5, r3
 800a68c:	270a      	movs	r7, #10
 800a68e:	461a      	mov	r2, r3
 800a690:	fbb1 f6f7 	udiv	r6, r1, r7
 800a694:	fb07 1416 	mls	r4, r7, r6, r1
 800a698:	3430      	adds	r4, #48	@ 0x30
 800a69a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a69e:	460c      	mov	r4, r1
 800a6a0:	2c63      	cmp	r4, #99	@ 0x63
 800a6a2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a6a6:	4631      	mov	r1, r6
 800a6a8:	dcf1      	bgt.n	800a68e <__exponent+0x1c>
 800a6aa:	3130      	adds	r1, #48	@ 0x30
 800a6ac:	1e94      	subs	r4, r2, #2
 800a6ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a6b2:	1c41      	adds	r1, r0, #1
 800a6b4:	4623      	mov	r3, r4
 800a6b6:	42ab      	cmp	r3, r5
 800a6b8:	d30a      	bcc.n	800a6d0 <__exponent+0x5e>
 800a6ba:	f10d 0309 	add.w	r3, sp, #9
 800a6be:	1a9b      	subs	r3, r3, r2
 800a6c0:	42ac      	cmp	r4, r5
 800a6c2:	bf88      	it	hi
 800a6c4:	2300      	movhi	r3, #0
 800a6c6:	3302      	adds	r3, #2
 800a6c8:	4403      	add	r3, r0
 800a6ca:	1a18      	subs	r0, r3, r0
 800a6cc:	b003      	add	sp, #12
 800a6ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6d0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a6d4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a6d8:	e7ed      	b.n	800a6b6 <__exponent+0x44>
 800a6da:	2330      	movs	r3, #48	@ 0x30
 800a6dc:	3130      	adds	r1, #48	@ 0x30
 800a6de:	7083      	strb	r3, [r0, #2]
 800a6e0:	70c1      	strb	r1, [r0, #3]
 800a6e2:	1d03      	adds	r3, r0, #4
 800a6e4:	e7f1      	b.n	800a6ca <__exponent+0x58>
	...

0800a6e8 <_printf_float>:
 800a6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ec:	b08d      	sub	sp, #52	@ 0x34
 800a6ee:	460c      	mov	r4, r1
 800a6f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a6f4:	4616      	mov	r6, r2
 800a6f6:	461f      	mov	r7, r3
 800a6f8:	4605      	mov	r5, r0
 800a6fa:	f000 fcbb 	bl	800b074 <_localeconv_r>
 800a6fe:	6803      	ldr	r3, [r0, #0]
 800a700:	9304      	str	r3, [sp, #16]
 800a702:	4618      	mov	r0, r3
 800a704:	f7f5 fdb4 	bl	8000270 <strlen>
 800a708:	2300      	movs	r3, #0
 800a70a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a70c:	f8d8 3000 	ldr.w	r3, [r8]
 800a710:	9005      	str	r0, [sp, #20]
 800a712:	3307      	adds	r3, #7
 800a714:	f023 0307 	bic.w	r3, r3, #7
 800a718:	f103 0208 	add.w	r2, r3, #8
 800a71c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a720:	f8d4 b000 	ldr.w	fp, [r4]
 800a724:	f8c8 2000 	str.w	r2, [r8]
 800a728:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a72c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a730:	9307      	str	r3, [sp, #28]
 800a732:	f8cd 8018 	str.w	r8, [sp, #24]
 800a736:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a73a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a73e:	4b9c      	ldr	r3, [pc, #624]	@ (800a9b0 <_printf_float+0x2c8>)
 800a740:	f04f 32ff 	mov.w	r2, #4294967295
 800a744:	f7f6 f9f2 	bl	8000b2c <__aeabi_dcmpun>
 800a748:	bb70      	cbnz	r0, 800a7a8 <_printf_float+0xc0>
 800a74a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a74e:	4b98      	ldr	r3, [pc, #608]	@ (800a9b0 <_printf_float+0x2c8>)
 800a750:	f04f 32ff 	mov.w	r2, #4294967295
 800a754:	f7f6 f9cc 	bl	8000af0 <__aeabi_dcmple>
 800a758:	bb30      	cbnz	r0, 800a7a8 <_printf_float+0xc0>
 800a75a:	2200      	movs	r2, #0
 800a75c:	2300      	movs	r3, #0
 800a75e:	4640      	mov	r0, r8
 800a760:	4649      	mov	r1, r9
 800a762:	f7f6 f9bb 	bl	8000adc <__aeabi_dcmplt>
 800a766:	b110      	cbz	r0, 800a76e <_printf_float+0x86>
 800a768:	232d      	movs	r3, #45	@ 0x2d
 800a76a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a76e:	4a91      	ldr	r2, [pc, #580]	@ (800a9b4 <_printf_float+0x2cc>)
 800a770:	4b91      	ldr	r3, [pc, #580]	@ (800a9b8 <_printf_float+0x2d0>)
 800a772:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a776:	bf94      	ite	ls
 800a778:	4690      	movls	r8, r2
 800a77a:	4698      	movhi	r8, r3
 800a77c:	2303      	movs	r3, #3
 800a77e:	6123      	str	r3, [r4, #16]
 800a780:	f02b 0304 	bic.w	r3, fp, #4
 800a784:	6023      	str	r3, [r4, #0]
 800a786:	f04f 0900 	mov.w	r9, #0
 800a78a:	9700      	str	r7, [sp, #0]
 800a78c:	4633      	mov	r3, r6
 800a78e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a790:	4621      	mov	r1, r4
 800a792:	4628      	mov	r0, r5
 800a794:	f000 f9d2 	bl	800ab3c <_printf_common>
 800a798:	3001      	adds	r0, #1
 800a79a:	f040 808d 	bne.w	800a8b8 <_printf_float+0x1d0>
 800a79e:	f04f 30ff 	mov.w	r0, #4294967295
 800a7a2:	b00d      	add	sp, #52	@ 0x34
 800a7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7a8:	4642      	mov	r2, r8
 800a7aa:	464b      	mov	r3, r9
 800a7ac:	4640      	mov	r0, r8
 800a7ae:	4649      	mov	r1, r9
 800a7b0:	f7f6 f9bc 	bl	8000b2c <__aeabi_dcmpun>
 800a7b4:	b140      	cbz	r0, 800a7c8 <_printf_float+0xe0>
 800a7b6:	464b      	mov	r3, r9
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	bfbc      	itt	lt
 800a7bc:	232d      	movlt	r3, #45	@ 0x2d
 800a7be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a7c2:	4a7e      	ldr	r2, [pc, #504]	@ (800a9bc <_printf_float+0x2d4>)
 800a7c4:	4b7e      	ldr	r3, [pc, #504]	@ (800a9c0 <_printf_float+0x2d8>)
 800a7c6:	e7d4      	b.n	800a772 <_printf_float+0x8a>
 800a7c8:	6863      	ldr	r3, [r4, #4]
 800a7ca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a7ce:	9206      	str	r2, [sp, #24]
 800a7d0:	1c5a      	adds	r2, r3, #1
 800a7d2:	d13b      	bne.n	800a84c <_printf_float+0x164>
 800a7d4:	2306      	movs	r3, #6
 800a7d6:	6063      	str	r3, [r4, #4]
 800a7d8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a7dc:	2300      	movs	r3, #0
 800a7de:	6022      	str	r2, [r4, #0]
 800a7e0:	9303      	str	r3, [sp, #12]
 800a7e2:	ab0a      	add	r3, sp, #40	@ 0x28
 800a7e4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a7e8:	ab09      	add	r3, sp, #36	@ 0x24
 800a7ea:	9300      	str	r3, [sp, #0]
 800a7ec:	6861      	ldr	r1, [r4, #4]
 800a7ee:	ec49 8b10 	vmov	d0, r8, r9
 800a7f2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a7f6:	4628      	mov	r0, r5
 800a7f8:	f7ff fed6 	bl	800a5a8 <__cvt>
 800a7fc:	9b06      	ldr	r3, [sp, #24]
 800a7fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a800:	2b47      	cmp	r3, #71	@ 0x47
 800a802:	4680      	mov	r8, r0
 800a804:	d129      	bne.n	800a85a <_printf_float+0x172>
 800a806:	1cc8      	adds	r0, r1, #3
 800a808:	db02      	blt.n	800a810 <_printf_float+0x128>
 800a80a:	6863      	ldr	r3, [r4, #4]
 800a80c:	4299      	cmp	r1, r3
 800a80e:	dd41      	ble.n	800a894 <_printf_float+0x1ac>
 800a810:	f1aa 0a02 	sub.w	sl, sl, #2
 800a814:	fa5f fa8a 	uxtb.w	sl, sl
 800a818:	3901      	subs	r1, #1
 800a81a:	4652      	mov	r2, sl
 800a81c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a820:	9109      	str	r1, [sp, #36]	@ 0x24
 800a822:	f7ff ff26 	bl	800a672 <__exponent>
 800a826:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a828:	1813      	adds	r3, r2, r0
 800a82a:	2a01      	cmp	r2, #1
 800a82c:	4681      	mov	r9, r0
 800a82e:	6123      	str	r3, [r4, #16]
 800a830:	dc02      	bgt.n	800a838 <_printf_float+0x150>
 800a832:	6822      	ldr	r2, [r4, #0]
 800a834:	07d2      	lsls	r2, r2, #31
 800a836:	d501      	bpl.n	800a83c <_printf_float+0x154>
 800a838:	3301      	adds	r3, #1
 800a83a:	6123      	str	r3, [r4, #16]
 800a83c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a840:	2b00      	cmp	r3, #0
 800a842:	d0a2      	beq.n	800a78a <_printf_float+0xa2>
 800a844:	232d      	movs	r3, #45	@ 0x2d
 800a846:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a84a:	e79e      	b.n	800a78a <_printf_float+0xa2>
 800a84c:	9a06      	ldr	r2, [sp, #24]
 800a84e:	2a47      	cmp	r2, #71	@ 0x47
 800a850:	d1c2      	bne.n	800a7d8 <_printf_float+0xf0>
 800a852:	2b00      	cmp	r3, #0
 800a854:	d1c0      	bne.n	800a7d8 <_printf_float+0xf0>
 800a856:	2301      	movs	r3, #1
 800a858:	e7bd      	b.n	800a7d6 <_printf_float+0xee>
 800a85a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a85e:	d9db      	bls.n	800a818 <_printf_float+0x130>
 800a860:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a864:	d118      	bne.n	800a898 <_printf_float+0x1b0>
 800a866:	2900      	cmp	r1, #0
 800a868:	6863      	ldr	r3, [r4, #4]
 800a86a:	dd0b      	ble.n	800a884 <_printf_float+0x19c>
 800a86c:	6121      	str	r1, [r4, #16]
 800a86e:	b913      	cbnz	r3, 800a876 <_printf_float+0x18e>
 800a870:	6822      	ldr	r2, [r4, #0]
 800a872:	07d0      	lsls	r0, r2, #31
 800a874:	d502      	bpl.n	800a87c <_printf_float+0x194>
 800a876:	3301      	adds	r3, #1
 800a878:	440b      	add	r3, r1
 800a87a:	6123      	str	r3, [r4, #16]
 800a87c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a87e:	f04f 0900 	mov.w	r9, #0
 800a882:	e7db      	b.n	800a83c <_printf_float+0x154>
 800a884:	b913      	cbnz	r3, 800a88c <_printf_float+0x1a4>
 800a886:	6822      	ldr	r2, [r4, #0]
 800a888:	07d2      	lsls	r2, r2, #31
 800a88a:	d501      	bpl.n	800a890 <_printf_float+0x1a8>
 800a88c:	3302      	adds	r3, #2
 800a88e:	e7f4      	b.n	800a87a <_printf_float+0x192>
 800a890:	2301      	movs	r3, #1
 800a892:	e7f2      	b.n	800a87a <_printf_float+0x192>
 800a894:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a898:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a89a:	4299      	cmp	r1, r3
 800a89c:	db05      	blt.n	800a8aa <_printf_float+0x1c2>
 800a89e:	6823      	ldr	r3, [r4, #0]
 800a8a0:	6121      	str	r1, [r4, #16]
 800a8a2:	07d8      	lsls	r0, r3, #31
 800a8a4:	d5ea      	bpl.n	800a87c <_printf_float+0x194>
 800a8a6:	1c4b      	adds	r3, r1, #1
 800a8a8:	e7e7      	b.n	800a87a <_printf_float+0x192>
 800a8aa:	2900      	cmp	r1, #0
 800a8ac:	bfd4      	ite	le
 800a8ae:	f1c1 0202 	rsble	r2, r1, #2
 800a8b2:	2201      	movgt	r2, #1
 800a8b4:	4413      	add	r3, r2
 800a8b6:	e7e0      	b.n	800a87a <_printf_float+0x192>
 800a8b8:	6823      	ldr	r3, [r4, #0]
 800a8ba:	055a      	lsls	r2, r3, #21
 800a8bc:	d407      	bmi.n	800a8ce <_printf_float+0x1e6>
 800a8be:	6923      	ldr	r3, [r4, #16]
 800a8c0:	4642      	mov	r2, r8
 800a8c2:	4631      	mov	r1, r6
 800a8c4:	4628      	mov	r0, r5
 800a8c6:	47b8      	blx	r7
 800a8c8:	3001      	adds	r0, #1
 800a8ca:	d12b      	bne.n	800a924 <_printf_float+0x23c>
 800a8cc:	e767      	b.n	800a79e <_printf_float+0xb6>
 800a8ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a8d2:	f240 80dd 	bls.w	800aa90 <_printf_float+0x3a8>
 800a8d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a8da:	2200      	movs	r2, #0
 800a8dc:	2300      	movs	r3, #0
 800a8de:	f7f6 f8f3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8e2:	2800      	cmp	r0, #0
 800a8e4:	d033      	beq.n	800a94e <_printf_float+0x266>
 800a8e6:	4a37      	ldr	r2, [pc, #220]	@ (800a9c4 <_printf_float+0x2dc>)
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	4631      	mov	r1, r6
 800a8ec:	4628      	mov	r0, r5
 800a8ee:	47b8      	blx	r7
 800a8f0:	3001      	adds	r0, #1
 800a8f2:	f43f af54 	beq.w	800a79e <_printf_float+0xb6>
 800a8f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a8fa:	4543      	cmp	r3, r8
 800a8fc:	db02      	blt.n	800a904 <_printf_float+0x21c>
 800a8fe:	6823      	ldr	r3, [r4, #0]
 800a900:	07d8      	lsls	r0, r3, #31
 800a902:	d50f      	bpl.n	800a924 <_printf_float+0x23c>
 800a904:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a908:	4631      	mov	r1, r6
 800a90a:	4628      	mov	r0, r5
 800a90c:	47b8      	blx	r7
 800a90e:	3001      	adds	r0, #1
 800a910:	f43f af45 	beq.w	800a79e <_printf_float+0xb6>
 800a914:	f04f 0900 	mov.w	r9, #0
 800a918:	f108 38ff 	add.w	r8, r8, #4294967295
 800a91c:	f104 0a1a 	add.w	sl, r4, #26
 800a920:	45c8      	cmp	r8, r9
 800a922:	dc09      	bgt.n	800a938 <_printf_float+0x250>
 800a924:	6823      	ldr	r3, [r4, #0]
 800a926:	079b      	lsls	r3, r3, #30
 800a928:	f100 8103 	bmi.w	800ab32 <_printf_float+0x44a>
 800a92c:	68e0      	ldr	r0, [r4, #12]
 800a92e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a930:	4298      	cmp	r0, r3
 800a932:	bfb8      	it	lt
 800a934:	4618      	movlt	r0, r3
 800a936:	e734      	b.n	800a7a2 <_printf_float+0xba>
 800a938:	2301      	movs	r3, #1
 800a93a:	4652      	mov	r2, sl
 800a93c:	4631      	mov	r1, r6
 800a93e:	4628      	mov	r0, r5
 800a940:	47b8      	blx	r7
 800a942:	3001      	adds	r0, #1
 800a944:	f43f af2b 	beq.w	800a79e <_printf_float+0xb6>
 800a948:	f109 0901 	add.w	r9, r9, #1
 800a94c:	e7e8      	b.n	800a920 <_printf_float+0x238>
 800a94e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a950:	2b00      	cmp	r3, #0
 800a952:	dc39      	bgt.n	800a9c8 <_printf_float+0x2e0>
 800a954:	4a1b      	ldr	r2, [pc, #108]	@ (800a9c4 <_printf_float+0x2dc>)
 800a956:	2301      	movs	r3, #1
 800a958:	4631      	mov	r1, r6
 800a95a:	4628      	mov	r0, r5
 800a95c:	47b8      	blx	r7
 800a95e:	3001      	adds	r0, #1
 800a960:	f43f af1d 	beq.w	800a79e <_printf_float+0xb6>
 800a964:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a968:	ea59 0303 	orrs.w	r3, r9, r3
 800a96c:	d102      	bne.n	800a974 <_printf_float+0x28c>
 800a96e:	6823      	ldr	r3, [r4, #0]
 800a970:	07d9      	lsls	r1, r3, #31
 800a972:	d5d7      	bpl.n	800a924 <_printf_float+0x23c>
 800a974:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a978:	4631      	mov	r1, r6
 800a97a:	4628      	mov	r0, r5
 800a97c:	47b8      	blx	r7
 800a97e:	3001      	adds	r0, #1
 800a980:	f43f af0d 	beq.w	800a79e <_printf_float+0xb6>
 800a984:	f04f 0a00 	mov.w	sl, #0
 800a988:	f104 0b1a 	add.w	fp, r4, #26
 800a98c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a98e:	425b      	negs	r3, r3
 800a990:	4553      	cmp	r3, sl
 800a992:	dc01      	bgt.n	800a998 <_printf_float+0x2b0>
 800a994:	464b      	mov	r3, r9
 800a996:	e793      	b.n	800a8c0 <_printf_float+0x1d8>
 800a998:	2301      	movs	r3, #1
 800a99a:	465a      	mov	r2, fp
 800a99c:	4631      	mov	r1, r6
 800a99e:	4628      	mov	r0, r5
 800a9a0:	47b8      	blx	r7
 800a9a2:	3001      	adds	r0, #1
 800a9a4:	f43f aefb 	beq.w	800a79e <_printf_float+0xb6>
 800a9a8:	f10a 0a01 	add.w	sl, sl, #1
 800a9ac:	e7ee      	b.n	800a98c <_printf_float+0x2a4>
 800a9ae:	bf00      	nop
 800a9b0:	7fefffff 	.word	0x7fefffff
 800a9b4:	08026a00 	.word	0x08026a00
 800a9b8:	08026a04 	.word	0x08026a04
 800a9bc:	08026a08 	.word	0x08026a08
 800a9c0:	08026a0c 	.word	0x08026a0c
 800a9c4:	08026a10 	.word	0x08026a10
 800a9c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a9ca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a9ce:	4553      	cmp	r3, sl
 800a9d0:	bfa8      	it	ge
 800a9d2:	4653      	movge	r3, sl
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	4699      	mov	r9, r3
 800a9d8:	dc36      	bgt.n	800aa48 <_printf_float+0x360>
 800a9da:	f04f 0b00 	mov.w	fp, #0
 800a9de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a9e2:	f104 021a 	add.w	r2, r4, #26
 800a9e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a9e8:	9306      	str	r3, [sp, #24]
 800a9ea:	eba3 0309 	sub.w	r3, r3, r9
 800a9ee:	455b      	cmp	r3, fp
 800a9f0:	dc31      	bgt.n	800aa56 <_printf_float+0x36e>
 800a9f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9f4:	459a      	cmp	sl, r3
 800a9f6:	dc3a      	bgt.n	800aa6e <_printf_float+0x386>
 800a9f8:	6823      	ldr	r3, [r4, #0]
 800a9fa:	07da      	lsls	r2, r3, #31
 800a9fc:	d437      	bmi.n	800aa6e <_printf_float+0x386>
 800a9fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa00:	ebaa 0903 	sub.w	r9, sl, r3
 800aa04:	9b06      	ldr	r3, [sp, #24]
 800aa06:	ebaa 0303 	sub.w	r3, sl, r3
 800aa0a:	4599      	cmp	r9, r3
 800aa0c:	bfa8      	it	ge
 800aa0e:	4699      	movge	r9, r3
 800aa10:	f1b9 0f00 	cmp.w	r9, #0
 800aa14:	dc33      	bgt.n	800aa7e <_printf_float+0x396>
 800aa16:	f04f 0800 	mov.w	r8, #0
 800aa1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa1e:	f104 0b1a 	add.w	fp, r4, #26
 800aa22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa24:	ebaa 0303 	sub.w	r3, sl, r3
 800aa28:	eba3 0309 	sub.w	r3, r3, r9
 800aa2c:	4543      	cmp	r3, r8
 800aa2e:	f77f af79 	ble.w	800a924 <_printf_float+0x23c>
 800aa32:	2301      	movs	r3, #1
 800aa34:	465a      	mov	r2, fp
 800aa36:	4631      	mov	r1, r6
 800aa38:	4628      	mov	r0, r5
 800aa3a:	47b8      	blx	r7
 800aa3c:	3001      	adds	r0, #1
 800aa3e:	f43f aeae 	beq.w	800a79e <_printf_float+0xb6>
 800aa42:	f108 0801 	add.w	r8, r8, #1
 800aa46:	e7ec      	b.n	800aa22 <_printf_float+0x33a>
 800aa48:	4642      	mov	r2, r8
 800aa4a:	4631      	mov	r1, r6
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	47b8      	blx	r7
 800aa50:	3001      	adds	r0, #1
 800aa52:	d1c2      	bne.n	800a9da <_printf_float+0x2f2>
 800aa54:	e6a3      	b.n	800a79e <_printf_float+0xb6>
 800aa56:	2301      	movs	r3, #1
 800aa58:	4631      	mov	r1, r6
 800aa5a:	4628      	mov	r0, r5
 800aa5c:	9206      	str	r2, [sp, #24]
 800aa5e:	47b8      	blx	r7
 800aa60:	3001      	adds	r0, #1
 800aa62:	f43f ae9c 	beq.w	800a79e <_printf_float+0xb6>
 800aa66:	9a06      	ldr	r2, [sp, #24]
 800aa68:	f10b 0b01 	add.w	fp, fp, #1
 800aa6c:	e7bb      	b.n	800a9e6 <_printf_float+0x2fe>
 800aa6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa72:	4631      	mov	r1, r6
 800aa74:	4628      	mov	r0, r5
 800aa76:	47b8      	blx	r7
 800aa78:	3001      	adds	r0, #1
 800aa7a:	d1c0      	bne.n	800a9fe <_printf_float+0x316>
 800aa7c:	e68f      	b.n	800a79e <_printf_float+0xb6>
 800aa7e:	9a06      	ldr	r2, [sp, #24]
 800aa80:	464b      	mov	r3, r9
 800aa82:	4442      	add	r2, r8
 800aa84:	4631      	mov	r1, r6
 800aa86:	4628      	mov	r0, r5
 800aa88:	47b8      	blx	r7
 800aa8a:	3001      	adds	r0, #1
 800aa8c:	d1c3      	bne.n	800aa16 <_printf_float+0x32e>
 800aa8e:	e686      	b.n	800a79e <_printf_float+0xb6>
 800aa90:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aa94:	f1ba 0f01 	cmp.w	sl, #1
 800aa98:	dc01      	bgt.n	800aa9e <_printf_float+0x3b6>
 800aa9a:	07db      	lsls	r3, r3, #31
 800aa9c:	d536      	bpl.n	800ab0c <_printf_float+0x424>
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	4642      	mov	r2, r8
 800aaa2:	4631      	mov	r1, r6
 800aaa4:	4628      	mov	r0, r5
 800aaa6:	47b8      	blx	r7
 800aaa8:	3001      	adds	r0, #1
 800aaaa:	f43f ae78 	beq.w	800a79e <_printf_float+0xb6>
 800aaae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aab2:	4631      	mov	r1, r6
 800aab4:	4628      	mov	r0, r5
 800aab6:	47b8      	blx	r7
 800aab8:	3001      	adds	r0, #1
 800aaba:	f43f ae70 	beq.w	800a79e <_printf_float+0xb6>
 800aabe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aac2:	2200      	movs	r2, #0
 800aac4:	2300      	movs	r3, #0
 800aac6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aaca:	f7f5 fffd 	bl	8000ac8 <__aeabi_dcmpeq>
 800aace:	b9c0      	cbnz	r0, 800ab02 <_printf_float+0x41a>
 800aad0:	4653      	mov	r3, sl
 800aad2:	f108 0201 	add.w	r2, r8, #1
 800aad6:	4631      	mov	r1, r6
 800aad8:	4628      	mov	r0, r5
 800aada:	47b8      	blx	r7
 800aadc:	3001      	adds	r0, #1
 800aade:	d10c      	bne.n	800aafa <_printf_float+0x412>
 800aae0:	e65d      	b.n	800a79e <_printf_float+0xb6>
 800aae2:	2301      	movs	r3, #1
 800aae4:	465a      	mov	r2, fp
 800aae6:	4631      	mov	r1, r6
 800aae8:	4628      	mov	r0, r5
 800aaea:	47b8      	blx	r7
 800aaec:	3001      	adds	r0, #1
 800aaee:	f43f ae56 	beq.w	800a79e <_printf_float+0xb6>
 800aaf2:	f108 0801 	add.w	r8, r8, #1
 800aaf6:	45d0      	cmp	r8, sl
 800aaf8:	dbf3      	blt.n	800aae2 <_printf_float+0x3fa>
 800aafa:	464b      	mov	r3, r9
 800aafc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ab00:	e6df      	b.n	800a8c2 <_printf_float+0x1da>
 800ab02:	f04f 0800 	mov.w	r8, #0
 800ab06:	f104 0b1a 	add.w	fp, r4, #26
 800ab0a:	e7f4      	b.n	800aaf6 <_printf_float+0x40e>
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	4642      	mov	r2, r8
 800ab10:	e7e1      	b.n	800aad6 <_printf_float+0x3ee>
 800ab12:	2301      	movs	r3, #1
 800ab14:	464a      	mov	r2, r9
 800ab16:	4631      	mov	r1, r6
 800ab18:	4628      	mov	r0, r5
 800ab1a:	47b8      	blx	r7
 800ab1c:	3001      	adds	r0, #1
 800ab1e:	f43f ae3e 	beq.w	800a79e <_printf_float+0xb6>
 800ab22:	f108 0801 	add.w	r8, r8, #1
 800ab26:	68e3      	ldr	r3, [r4, #12]
 800ab28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab2a:	1a5b      	subs	r3, r3, r1
 800ab2c:	4543      	cmp	r3, r8
 800ab2e:	dcf0      	bgt.n	800ab12 <_printf_float+0x42a>
 800ab30:	e6fc      	b.n	800a92c <_printf_float+0x244>
 800ab32:	f04f 0800 	mov.w	r8, #0
 800ab36:	f104 0919 	add.w	r9, r4, #25
 800ab3a:	e7f4      	b.n	800ab26 <_printf_float+0x43e>

0800ab3c <_printf_common>:
 800ab3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab40:	4616      	mov	r6, r2
 800ab42:	4698      	mov	r8, r3
 800ab44:	688a      	ldr	r2, [r1, #8]
 800ab46:	690b      	ldr	r3, [r1, #16]
 800ab48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	bfb8      	it	lt
 800ab50:	4613      	movlt	r3, r2
 800ab52:	6033      	str	r3, [r6, #0]
 800ab54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ab58:	4607      	mov	r7, r0
 800ab5a:	460c      	mov	r4, r1
 800ab5c:	b10a      	cbz	r2, 800ab62 <_printf_common+0x26>
 800ab5e:	3301      	adds	r3, #1
 800ab60:	6033      	str	r3, [r6, #0]
 800ab62:	6823      	ldr	r3, [r4, #0]
 800ab64:	0699      	lsls	r1, r3, #26
 800ab66:	bf42      	ittt	mi
 800ab68:	6833      	ldrmi	r3, [r6, #0]
 800ab6a:	3302      	addmi	r3, #2
 800ab6c:	6033      	strmi	r3, [r6, #0]
 800ab6e:	6825      	ldr	r5, [r4, #0]
 800ab70:	f015 0506 	ands.w	r5, r5, #6
 800ab74:	d106      	bne.n	800ab84 <_printf_common+0x48>
 800ab76:	f104 0a19 	add.w	sl, r4, #25
 800ab7a:	68e3      	ldr	r3, [r4, #12]
 800ab7c:	6832      	ldr	r2, [r6, #0]
 800ab7e:	1a9b      	subs	r3, r3, r2
 800ab80:	42ab      	cmp	r3, r5
 800ab82:	dc26      	bgt.n	800abd2 <_printf_common+0x96>
 800ab84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ab88:	6822      	ldr	r2, [r4, #0]
 800ab8a:	3b00      	subs	r3, #0
 800ab8c:	bf18      	it	ne
 800ab8e:	2301      	movne	r3, #1
 800ab90:	0692      	lsls	r2, r2, #26
 800ab92:	d42b      	bmi.n	800abec <_printf_common+0xb0>
 800ab94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ab98:	4641      	mov	r1, r8
 800ab9a:	4638      	mov	r0, r7
 800ab9c:	47c8      	blx	r9
 800ab9e:	3001      	adds	r0, #1
 800aba0:	d01e      	beq.n	800abe0 <_printf_common+0xa4>
 800aba2:	6823      	ldr	r3, [r4, #0]
 800aba4:	6922      	ldr	r2, [r4, #16]
 800aba6:	f003 0306 	and.w	r3, r3, #6
 800abaa:	2b04      	cmp	r3, #4
 800abac:	bf02      	ittt	eq
 800abae:	68e5      	ldreq	r5, [r4, #12]
 800abb0:	6833      	ldreq	r3, [r6, #0]
 800abb2:	1aed      	subeq	r5, r5, r3
 800abb4:	68a3      	ldr	r3, [r4, #8]
 800abb6:	bf0c      	ite	eq
 800abb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abbc:	2500      	movne	r5, #0
 800abbe:	4293      	cmp	r3, r2
 800abc0:	bfc4      	itt	gt
 800abc2:	1a9b      	subgt	r3, r3, r2
 800abc4:	18ed      	addgt	r5, r5, r3
 800abc6:	2600      	movs	r6, #0
 800abc8:	341a      	adds	r4, #26
 800abca:	42b5      	cmp	r5, r6
 800abcc:	d11a      	bne.n	800ac04 <_printf_common+0xc8>
 800abce:	2000      	movs	r0, #0
 800abd0:	e008      	b.n	800abe4 <_printf_common+0xa8>
 800abd2:	2301      	movs	r3, #1
 800abd4:	4652      	mov	r2, sl
 800abd6:	4641      	mov	r1, r8
 800abd8:	4638      	mov	r0, r7
 800abda:	47c8      	blx	r9
 800abdc:	3001      	adds	r0, #1
 800abde:	d103      	bne.n	800abe8 <_printf_common+0xac>
 800abe0:	f04f 30ff 	mov.w	r0, #4294967295
 800abe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abe8:	3501      	adds	r5, #1
 800abea:	e7c6      	b.n	800ab7a <_printf_common+0x3e>
 800abec:	18e1      	adds	r1, r4, r3
 800abee:	1c5a      	adds	r2, r3, #1
 800abf0:	2030      	movs	r0, #48	@ 0x30
 800abf2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800abf6:	4422      	add	r2, r4
 800abf8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800abfc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ac00:	3302      	adds	r3, #2
 800ac02:	e7c7      	b.n	800ab94 <_printf_common+0x58>
 800ac04:	2301      	movs	r3, #1
 800ac06:	4622      	mov	r2, r4
 800ac08:	4641      	mov	r1, r8
 800ac0a:	4638      	mov	r0, r7
 800ac0c:	47c8      	blx	r9
 800ac0e:	3001      	adds	r0, #1
 800ac10:	d0e6      	beq.n	800abe0 <_printf_common+0xa4>
 800ac12:	3601      	adds	r6, #1
 800ac14:	e7d9      	b.n	800abca <_printf_common+0x8e>
	...

0800ac18 <_printf_i>:
 800ac18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac1c:	7e0f      	ldrb	r7, [r1, #24]
 800ac1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ac20:	2f78      	cmp	r7, #120	@ 0x78
 800ac22:	4691      	mov	r9, r2
 800ac24:	4680      	mov	r8, r0
 800ac26:	460c      	mov	r4, r1
 800ac28:	469a      	mov	sl, r3
 800ac2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac2e:	d807      	bhi.n	800ac40 <_printf_i+0x28>
 800ac30:	2f62      	cmp	r7, #98	@ 0x62
 800ac32:	d80a      	bhi.n	800ac4a <_printf_i+0x32>
 800ac34:	2f00      	cmp	r7, #0
 800ac36:	f000 80d2 	beq.w	800adde <_printf_i+0x1c6>
 800ac3a:	2f58      	cmp	r7, #88	@ 0x58
 800ac3c:	f000 80b9 	beq.w	800adb2 <_printf_i+0x19a>
 800ac40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ac48:	e03a      	b.n	800acc0 <_printf_i+0xa8>
 800ac4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ac4e:	2b15      	cmp	r3, #21
 800ac50:	d8f6      	bhi.n	800ac40 <_printf_i+0x28>
 800ac52:	a101      	add	r1, pc, #4	@ (adr r1, 800ac58 <_printf_i+0x40>)
 800ac54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac58:	0800acb1 	.word	0x0800acb1
 800ac5c:	0800acc5 	.word	0x0800acc5
 800ac60:	0800ac41 	.word	0x0800ac41
 800ac64:	0800ac41 	.word	0x0800ac41
 800ac68:	0800ac41 	.word	0x0800ac41
 800ac6c:	0800ac41 	.word	0x0800ac41
 800ac70:	0800acc5 	.word	0x0800acc5
 800ac74:	0800ac41 	.word	0x0800ac41
 800ac78:	0800ac41 	.word	0x0800ac41
 800ac7c:	0800ac41 	.word	0x0800ac41
 800ac80:	0800ac41 	.word	0x0800ac41
 800ac84:	0800adc5 	.word	0x0800adc5
 800ac88:	0800acef 	.word	0x0800acef
 800ac8c:	0800ad7f 	.word	0x0800ad7f
 800ac90:	0800ac41 	.word	0x0800ac41
 800ac94:	0800ac41 	.word	0x0800ac41
 800ac98:	0800ade7 	.word	0x0800ade7
 800ac9c:	0800ac41 	.word	0x0800ac41
 800aca0:	0800acef 	.word	0x0800acef
 800aca4:	0800ac41 	.word	0x0800ac41
 800aca8:	0800ac41 	.word	0x0800ac41
 800acac:	0800ad87 	.word	0x0800ad87
 800acb0:	6833      	ldr	r3, [r6, #0]
 800acb2:	1d1a      	adds	r2, r3, #4
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	6032      	str	r2, [r6, #0]
 800acb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800acbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800acc0:	2301      	movs	r3, #1
 800acc2:	e09d      	b.n	800ae00 <_printf_i+0x1e8>
 800acc4:	6833      	ldr	r3, [r6, #0]
 800acc6:	6820      	ldr	r0, [r4, #0]
 800acc8:	1d19      	adds	r1, r3, #4
 800acca:	6031      	str	r1, [r6, #0]
 800accc:	0606      	lsls	r6, r0, #24
 800acce:	d501      	bpl.n	800acd4 <_printf_i+0xbc>
 800acd0:	681d      	ldr	r5, [r3, #0]
 800acd2:	e003      	b.n	800acdc <_printf_i+0xc4>
 800acd4:	0645      	lsls	r5, r0, #25
 800acd6:	d5fb      	bpl.n	800acd0 <_printf_i+0xb8>
 800acd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800acdc:	2d00      	cmp	r5, #0
 800acde:	da03      	bge.n	800ace8 <_printf_i+0xd0>
 800ace0:	232d      	movs	r3, #45	@ 0x2d
 800ace2:	426d      	negs	r5, r5
 800ace4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ace8:	4859      	ldr	r0, [pc, #356]	@ (800ae50 <_printf_i+0x238>)
 800acea:	230a      	movs	r3, #10
 800acec:	e011      	b.n	800ad12 <_printf_i+0xfa>
 800acee:	6821      	ldr	r1, [r4, #0]
 800acf0:	6833      	ldr	r3, [r6, #0]
 800acf2:	0608      	lsls	r0, r1, #24
 800acf4:	f853 5b04 	ldr.w	r5, [r3], #4
 800acf8:	d402      	bmi.n	800ad00 <_printf_i+0xe8>
 800acfa:	0649      	lsls	r1, r1, #25
 800acfc:	bf48      	it	mi
 800acfe:	b2ad      	uxthmi	r5, r5
 800ad00:	2f6f      	cmp	r7, #111	@ 0x6f
 800ad02:	4853      	ldr	r0, [pc, #332]	@ (800ae50 <_printf_i+0x238>)
 800ad04:	6033      	str	r3, [r6, #0]
 800ad06:	bf14      	ite	ne
 800ad08:	230a      	movne	r3, #10
 800ad0a:	2308      	moveq	r3, #8
 800ad0c:	2100      	movs	r1, #0
 800ad0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad12:	6866      	ldr	r6, [r4, #4]
 800ad14:	60a6      	str	r6, [r4, #8]
 800ad16:	2e00      	cmp	r6, #0
 800ad18:	bfa2      	ittt	ge
 800ad1a:	6821      	ldrge	r1, [r4, #0]
 800ad1c:	f021 0104 	bicge.w	r1, r1, #4
 800ad20:	6021      	strge	r1, [r4, #0]
 800ad22:	b90d      	cbnz	r5, 800ad28 <_printf_i+0x110>
 800ad24:	2e00      	cmp	r6, #0
 800ad26:	d04b      	beq.n	800adc0 <_printf_i+0x1a8>
 800ad28:	4616      	mov	r6, r2
 800ad2a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad2e:	fb03 5711 	mls	r7, r3, r1, r5
 800ad32:	5dc7      	ldrb	r7, [r0, r7]
 800ad34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad38:	462f      	mov	r7, r5
 800ad3a:	42bb      	cmp	r3, r7
 800ad3c:	460d      	mov	r5, r1
 800ad3e:	d9f4      	bls.n	800ad2a <_printf_i+0x112>
 800ad40:	2b08      	cmp	r3, #8
 800ad42:	d10b      	bne.n	800ad5c <_printf_i+0x144>
 800ad44:	6823      	ldr	r3, [r4, #0]
 800ad46:	07df      	lsls	r7, r3, #31
 800ad48:	d508      	bpl.n	800ad5c <_printf_i+0x144>
 800ad4a:	6923      	ldr	r3, [r4, #16]
 800ad4c:	6861      	ldr	r1, [r4, #4]
 800ad4e:	4299      	cmp	r1, r3
 800ad50:	bfde      	ittt	le
 800ad52:	2330      	movle	r3, #48	@ 0x30
 800ad54:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad58:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad5c:	1b92      	subs	r2, r2, r6
 800ad5e:	6122      	str	r2, [r4, #16]
 800ad60:	f8cd a000 	str.w	sl, [sp]
 800ad64:	464b      	mov	r3, r9
 800ad66:	aa03      	add	r2, sp, #12
 800ad68:	4621      	mov	r1, r4
 800ad6a:	4640      	mov	r0, r8
 800ad6c:	f7ff fee6 	bl	800ab3c <_printf_common>
 800ad70:	3001      	adds	r0, #1
 800ad72:	d14a      	bne.n	800ae0a <_printf_i+0x1f2>
 800ad74:	f04f 30ff 	mov.w	r0, #4294967295
 800ad78:	b004      	add	sp, #16
 800ad7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad7e:	6823      	ldr	r3, [r4, #0]
 800ad80:	f043 0320 	orr.w	r3, r3, #32
 800ad84:	6023      	str	r3, [r4, #0]
 800ad86:	4833      	ldr	r0, [pc, #204]	@ (800ae54 <_printf_i+0x23c>)
 800ad88:	2778      	movs	r7, #120	@ 0x78
 800ad8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ad8e:	6823      	ldr	r3, [r4, #0]
 800ad90:	6831      	ldr	r1, [r6, #0]
 800ad92:	061f      	lsls	r7, r3, #24
 800ad94:	f851 5b04 	ldr.w	r5, [r1], #4
 800ad98:	d402      	bmi.n	800ada0 <_printf_i+0x188>
 800ad9a:	065f      	lsls	r7, r3, #25
 800ad9c:	bf48      	it	mi
 800ad9e:	b2ad      	uxthmi	r5, r5
 800ada0:	6031      	str	r1, [r6, #0]
 800ada2:	07d9      	lsls	r1, r3, #31
 800ada4:	bf44      	itt	mi
 800ada6:	f043 0320 	orrmi.w	r3, r3, #32
 800adaa:	6023      	strmi	r3, [r4, #0]
 800adac:	b11d      	cbz	r5, 800adb6 <_printf_i+0x19e>
 800adae:	2310      	movs	r3, #16
 800adb0:	e7ac      	b.n	800ad0c <_printf_i+0xf4>
 800adb2:	4827      	ldr	r0, [pc, #156]	@ (800ae50 <_printf_i+0x238>)
 800adb4:	e7e9      	b.n	800ad8a <_printf_i+0x172>
 800adb6:	6823      	ldr	r3, [r4, #0]
 800adb8:	f023 0320 	bic.w	r3, r3, #32
 800adbc:	6023      	str	r3, [r4, #0]
 800adbe:	e7f6      	b.n	800adae <_printf_i+0x196>
 800adc0:	4616      	mov	r6, r2
 800adc2:	e7bd      	b.n	800ad40 <_printf_i+0x128>
 800adc4:	6833      	ldr	r3, [r6, #0]
 800adc6:	6825      	ldr	r5, [r4, #0]
 800adc8:	6961      	ldr	r1, [r4, #20]
 800adca:	1d18      	adds	r0, r3, #4
 800adcc:	6030      	str	r0, [r6, #0]
 800adce:	062e      	lsls	r6, r5, #24
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	d501      	bpl.n	800add8 <_printf_i+0x1c0>
 800add4:	6019      	str	r1, [r3, #0]
 800add6:	e002      	b.n	800adde <_printf_i+0x1c6>
 800add8:	0668      	lsls	r0, r5, #25
 800adda:	d5fb      	bpl.n	800add4 <_printf_i+0x1bc>
 800addc:	8019      	strh	r1, [r3, #0]
 800adde:	2300      	movs	r3, #0
 800ade0:	6123      	str	r3, [r4, #16]
 800ade2:	4616      	mov	r6, r2
 800ade4:	e7bc      	b.n	800ad60 <_printf_i+0x148>
 800ade6:	6833      	ldr	r3, [r6, #0]
 800ade8:	1d1a      	adds	r2, r3, #4
 800adea:	6032      	str	r2, [r6, #0]
 800adec:	681e      	ldr	r6, [r3, #0]
 800adee:	6862      	ldr	r2, [r4, #4]
 800adf0:	2100      	movs	r1, #0
 800adf2:	4630      	mov	r0, r6
 800adf4:	f7f5 f9ec 	bl	80001d0 <memchr>
 800adf8:	b108      	cbz	r0, 800adfe <_printf_i+0x1e6>
 800adfa:	1b80      	subs	r0, r0, r6
 800adfc:	6060      	str	r0, [r4, #4]
 800adfe:	6863      	ldr	r3, [r4, #4]
 800ae00:	6123      	str	r3, [r4, #16]
 800ae02:	2300      	movs	r3, #0
 800ae04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae08:	e7aa      	b.n	800ad60 <_printf_i+0x148>
 800ae0a:	6923      	ldr	r3, [r4, #16]
 800ae0c:	4632      	mov	r2, r6
 800ae0e:	4649      	mov	r1, r9
 800ae10:	4640      	mov	r0, r8
 800ae12:	47d0      	blx	sl
 800ae14:	3001      	adds	r0, #1
 800ae16:	d0ad      	beq.n	800ad74 <_printf_i+0x15c>
 800ae18:	6823      	ldr	r3, [r4, #0]
 800ae1a:	079b      	lsls	r3, r3, #30
 800ae1c:	d413      	bmi.n	800ae46 <_printf_i+0x22e>
 800ae1e:	68e0      	ldr	r0, [r4, #12]
 800ae20:	9b03      	ldr	r3, [sp, #12]
 800ae22:	4298      	cmp	r0, r3
 800ae24:	bfb8      	it	lt
 800ae26:	4618      	movlt	r0, r3
 800ae28:	e7a6      	b.n	800ad78 <_printf_i+0x160>
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	4632      	mov	r2, r6
 800ae2e:	4649      	mov	r1, r9
 800ae30:	4640      	mov	r0, r8
 800ae32:	47d0      	blx	sl
 800ae34:	3001      	adds	r0, #1
 800ae36:	d09d      	beq.n	800ad74 <_printf_i+0x15c>
 800ae38:	3501      	adds	r5, #1
 800ae3a:	68e3      	ldr	r3, [r4, #12]
 800ae3c:	9903      	ldr	r1, [sp, #12]
 800ae3e:	1a5b      	subs	r3, r3, r1
 800ae40:	42ab      	cmp	r3, r5
 800ae42:	dcf2      	bgt.n	800ae2a <_printf_i+0x212>
 800ae44:	e7eb      	b.n	800ae1e <_printf_i+0x206>
 800ae46:	2500      	movs	r5, #0
 800ae48:	f104 0619 	add.w	r6, r4, #25
 800ae4c:	e7f5      	b.n	800ae3a <_printf_i+0x222>
 800ae4e:	bf00      	nop
 800ae50:	08026a12 	.word	0x08026a12
 800ae54:	08026a23 	.word	0x08026a23

0800ae58 <std>:
 800ae58:	2300      	movs	r3, #0
 800ae5a:	b510      	push	{r4, lr}
 800ae5c:	4604      	mov	r4, r0
 800ae5e:	e9c0 3300 	strd	r3, r3, [r0]
 800ae62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae66:	6083      	str	r3, [r0, #8]
 800ae68:	8181      	strh	r1, [r0, #12]
 800ae6a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ae6c:	81c2      	strh	r2, [r0, #14]
 800ae6e:	6183      	str	r3, [r0, #24]
 800ae70:	4619      	mov	r1, r3
 800ae72:	2208      	movs	r2, #8
 800ae74:	305c      	adds	r0, #92	@ 0x5c
 800ae76:	f000 f8f4 	bl	800b062 <memset>
 800ae7a:	4b0d      	ldr	r3, [pc, #52]	@ (800aeb0 <std+0x58>)
 800ae7c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ae7e:	4b0d      	ldr	r3, [pc, #52]	@ (800aeb4 <std+0x5c>)
 800ae80:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ae82:	4b0d      	ldr	r3, [pc, #52]	@ (800aeb8 <std+0x60>)
 800ae84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ae86:	4b0d      	ldr	r3, [pc, #52]	@ (800aebc <std+0x64>)
 800ae88:	6323      	str	r3, [r4, #48]	@ 0x30
 800ae8a:	4b0d      	ldr	r3, [pc, #52]	@ (800aec0 <std+0x68>)
 800ae8c:	6224      	str	r4, [r4, #32]
 800ae8e:	429c      	cmp	r4, r3
 800ae90:	d006      	beq.n	800aea0 <std+0x48>
 800ae92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ae96:	4294      	cmp	r4, r2
 800ae98:	d002      	beq.n	800aea0 <std+0x48>
 800ae9a:	33d0      	adds	r3, #208	@ 0xd0
 800ae9c:	429c      	cmp	r4, r3
 800ae9e:	d105      	bne.n	800aeac <std+0x54>
 800aea0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aea8:	f000 b958 	b.w	800b15c <__retarget_lock_init_recursive>
 800aeac:	bd10      	pop	{r4, pc}
 800aeae:	bf00      	nop
 800aeb0:	0800afdd 	.word	0x0800afdd
 800aeb4:	0800afff 	.word	0x0800afff
 800aeb8:	0800b037 	.word	0x0800b037
 800aebc:	0800b05b 	.word	0x0800b05b
 800aec0:	2000a99c 	.word	0x2000a99c

0800aec4 <stdio_exit_handler>:
 800aec4:	4a02      	ldr	r2, [pc, #8]	@ (800aed0 <stdio_exit_handler+0xc>)
 800aec6:	4903      	ldr	r1, [pc, #12]	@ (800aed4 <stdio_exit_handler+0x10>)
 800aec8:	4803      	ldr	r0, [pc, #12]	@ (800aed8 <stdio_exit_handler+0x14>)
 800aeca:	f000 b869 	b.w	800afa0 <_fwalk_sglue>
 800aece:	bf00      	nop
 800aed0:	20000040 	.word	0x20000040
 800aed4:	0800c845 	.word	0x0800c845
 800aed8:	20000050 	.word	0x20000050

0800aedc <cleanup_stdio>:
 800aedc:	6841      	ldr	r1, [r0, #4]
 800aede:	4b0c      	ldr	r3, [pc, #48]	@ (800af10 <cleanup_stdio+0x34>)
 800aee0:	4299      	cmp	r1, r3
 800aee2:	b510      	push	{r4, lr}
 800aee4:	4604      	mov	r4, r0
 800aee6:	d001      	beq.n	800aeec <cleanup_stdio+0x10>
 800aee8:	f001 fcac 	bl	800c844 <_fflush_r>
 800aeec:	68a1      	ldr	r1, [r4, #8]
 800aeee:	4b09      	ldr	r3, [pc, #36]	@ (800af14 <cleanup_stdio+0x38>)
 800aef0:	4299      	cmp	r1, r3
 800aef2:	d002      	beq.n	800aefa <cleanup_stdio+0x1e>
 800aef4:	4620      	mov	r0, r4
 800aef6:	f001 fca5 	bl	800c844 <_fflush_r>
 800aefa:	68e1      	ldr	r1, [r4, #12]
 800aefc:	4b06      	ldr	r3, [pc, #24]	@ (800af18 <cleanup_stdio+0x3c>)
 800aefe:	4299      	cmp	r1, r3
 800af00:	d004      	beq.n	800af0c <cleanup_stdio+0x30>
 800af02:	4620      	mov	r0, r4
 800af04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af08:	f001 bc9c 	b.w	800c844 <_fflush_r>
 800af0c:	bd10      	pop	{r4, pc}
 800af0e:	bf00      	nop
 800af10:	2000a99c 	.word	0x2000a99c
 800af14:	2000aa04 	.word	0x2000aa04
 800af18:	2000aa6c 	.word	0x2000aa6c

0800af1c <global_stdio_init.part.0>:
 800af1c:	b510      	push	{r4, lr}
 800af1e:	4b0b      	ldr	r3, [pc, #44]	@ (800af4c <global_stdio_init.part.0+0x30>)
 800af20:	4c0b      	ldr	r4, [pc, #44]	@ (800af50 <global_stdio_init.part.0+0x34>)
 800af22:	4a0c      	ldr	r2, [pc, #48]	@ (800af54 <global_stdio_init.part.0+0x38>)
 800af24:	601a      	str	r2, [r3, #0]
 800af26:	4620      	mov	r0, r4
 800af28:	2200      	movs	r2, #0
 800af2a:	2104      	movs	r1, #4
 800af2c:	f7ff ff94 	bl	800ae58 <std>
 800af30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800af34:	2201      	movs	r2, #1
 800af36:	2109      	movs	r1, #9
 800af38:	f7ff ff8e 	bl	800ae58 <std>
 800af3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800af40:	2202      	movs	r2, #2
 800af42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af46:	2112      	movs	r1, #18
 800af48:	f7ff bf86 	b.w	800ae58 <std>
 800af4c:	2000aad4 	.word	0x2000aad4
 800af50:	2000a99c 	.word	0x2000a99c
 800af54:	0800aec5 	.word	0x0800aec5

0800af58 <__sfp_lock_acquire>:
 800af58:	4801      	ldr	r0, [pc, #4]	@ (800af60 <__sfp_lock_acquire+0x8>)
 800af5a:	f000 b900 	b.w	800b15e <__retarget_lock_acquire_recursive>
 800af5e:	bf00      	nop
 800af60:	2000aadd 	.word	0x2000aadd

0800af64 <__sfp_lock_release>:
 800af64:	4801      	ldr	r0, [pc, #4]	@ (800af6c <__sfp_lock_release+0x8>)
 800af66:	f000 b8fb 	b.w	800b160 <__retarget_lock_release_recursive>
 800af6a:	bf00      	nop
 800af6c:	2000aadd 	.word	0x2000aadd

0800af70 <__sinit>:
 800af70:	b510      	push	{r4, lr}
 800af72:	4604      	mov	r4, r0
 800af74:	f7ff fff0 	bl	800af58 <__sfp_lock_acquire>
 800af78:	6a23      	ldr	r3, [r4, #32]
 800af7a:	b11b      	cbz	r3, 800af84 <__sinit+0x14>
 800af7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af80:	f7ff bff0 	b.w	800af64 <__sfp_lock_release>
 800af84:	4b04      	ldr	r3, [pc, #16]	@ (800af98 <__sinit+0x28>)
 800af86:	6223      	str	r3, [r4, #32]
 800af88:	4b04      	ldr	r3, [pc, #16]	@ (800af9c <__sinit+0x2c>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d1f5      	bne.n	800af7c <__sinit+0xc>
 800af90:	f7ff ffc4 	bl	800af1c <global_stdio_init.part.0>
 800af94:	e7f2      	b.n	800af7c <__sinit+0xc>
 800af96:	bf00      	nop
 800af98:	0800aedd 	.word	0x0800aedd
 800af9c:	2000aad4 	.word	0x2000aad4

0800afa0 <_fwalk_sglue>:
 800afa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afa4:	4607      	mov	r7, r0
 800afa6:	4688      	mov	r8, r1
 800afa8:	4614      	mov	r4, r2
 800afaa:	2600      	movs	r6, #0
 800afac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afb0:	f1b9 0901 	subs.w	r9, r9, #1
 800afb4:	d505      	bpl.n	800afc2 <_fwalk_sglue+0x22>
 800afb6:	6824      	ldr	r4, [r4, #0]
 800afb8:	2c00      	cmp	r4, #0
 800afba:	d1f7      	bne.n	800afac <_fwalk_sglue+0xc>
 800afbc:	4630      	mov	r0, r6
 800afbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afc2:	89ab      	ldrh	r3, [r5, #12]
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d907      	bls.n	800afd8 <_fwalk_sglue+0x38>
 800afc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800afcc:	3301      	adds	r3, #1
 800afce:	d003      	beq.n	800afd8 <_fwalk_sglue+0x38>
 800afd0:	4629      	mov	r1, r5
 800afd2:	4638      	mov	r0, r7
 800afd4:	47c0      	blx	r8
 800afd6:	4306      	orrs	r6, r0
 800afd8:	3568      	adds	r5, #104	@ 0x68
 800afda:	e7e9      	b.n	800afb0 <_fwalk_sglue+0x10>

0800afdc <__sread>:
 800afdc:	b510      	push	{r4, lr}
 800afde:	460c      	mov	r4, r1
 800afe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afe4:	f000 f86c 	bl	800b0c0 <_read_r>
 800afe8:	2800      	cmp	r0, #0
 800afea:	bfab      	itete	ge
 800afec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800afee:	89a3      	ldrhlt	r3, [r4, #12]
 800aff0:	181b      	addge	r3, r3, r0
 800aff2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aff6:	bfac      	ite	ge
 800aff8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800affa:	81a3      	strhlt	r3, [r4, #12]
 800affc:	bd10      	pop	{r4, pc}

0800affe <__swrite>:
 800affe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b002:	461f      	mov	r7, r3
 800b004:	898b      	ldrh	r3, [r1, #12]
 800b006:	05db      	lsls	r3, r3, #23
 800b008:	4605      	mov	r5, r0
 800b00a:	460c      	mov	r4, r1
 800b00c:	4616      	mov	r6, r2
 800b00e:	d505      	bpl.n	800b01c <__swrite+0x1e>
 800b010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b014:	2302      	movs	r3, #2
 800b016:	2200      	movs	r2, #0
 800b018:	f000 f840 	bl	800b09c <_lseek_r>
 800b01c:	89a3      	ldrh	r3, [r4, #12]
 800b01e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b022:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b026:	81a3      	strh	r3, [r4, #12]
 800b028:	4632      	mov	r2, r6
 800b02a:	463b      	mov	r3, r7
 800b02c:	4628      	mov	r0, r5
 800b02e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b032:	f000 b857 	b.w	800b0e4 <_write_r>

0800b036 <__sseek>:
 800b036:	b510      	push	{r4, lr}
 800b038:	460c      	mov	r4, r1
 800b03a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b03e:	f000 f82d 	bl	800b09c <_lseek_r>
 800b042:	1c43      	adds	r3, r0, #1
 800b044:	89a3      	ldrh	r3, [r4, #12]
 800b046:	bf15      	itete	ne
 800b048:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b04a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b04e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b052:	81a3      	strheq	r3, [r4, #12]
 800b054:	bf18      	it	ne
 800b056:	81a3      	strhne	r3, [r4, #12]
 800b058:	bd10      	pop	{r4, pc}

0800b05a <__sclose>:
 800b05a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b05e:	f000 b80d 	b.w	800b07c <_close_r>

0800b062 <memset>:
 800b062:	4402      	add	r2, r0
 800b064:	4603      	mov	r3, r0
 800b066:	4293      	cmp	r3, r2
 800b068:	d100      	bne.n	800b06c <memset+0xa>
 800b06a:	4770      	bx	lr
 800b06c:	f803 1b01 	strb.w	r1, [r3], #1
 800b070:	e7f9      	b.n	800b066 <memset+0x4>
	...

0800b074 <_localeconv_r>:
 800b074:	4800      	ldr	r0, [pc, #0]	@ (800b078 <_localeconv_r+0x4>)
 800b076:	4770      	bx	lr
 800b078:	2000018c 	.word	0x2000018c

0800b07c <_close_r>:
 800b07c:	b538      	push	{r3, r4, r5, lr}
 800b07e:	4d06      	ldr	r5, [pc, #24]	@ (800b098 <_close_r+0x1c>)
 800b080:	2300      	movs	r3, #0
 800b082:	4604      	mov	r4, r0
 800b084:	4608      	mov	r0, r1
 800b086:	602b      	str	r3, [r5, #0]
 800b088:	f7f7 fa7e 	bl	8002588 <_close>
 800b08c:	1c43      	adds	r3, r0, #1
 800b08e:	d102      	bne.n	800b096 <_close_r+0x1a>
 800b090:	682b      	ldr	r3, [r5, #0]
 800b092:	b103      	cbz	r3, 800b096 <_close_r+0x1a>
 800b094:	6023      	str	r3, [r4, #0]
 800b096:	bd38      	pop	{r3, r4, r5, pc}
 800b098:	2000aad8 	.word	0x2000aad8

0800b09c <_lseek_r>:
 800b09c:	b538      	push	{r3, r4, r5, lr}
 800b09e:	4d07      	ldr	r5, [pc, #28]	@ (800b0bc <_lseek_r+0x20>)
 800b0a0:	4604      	mov	r4, r0
 800b0a2:	4608      	mov	r0, r1
 800b0a4:	4611      	mov	r1, r2
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	602a      	str	r2, [r5, #0]
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	f7f7 fa93 	bl	80025d6 <_lseek>
 800b0b0:	1c43      	adds	r3, r0, #1
 800b0b2:	d102      	bne.n	800b0ba <_lseek_r+0x1e>
 800b0b4:	682b      	ldr	r3, [r5, #0]
 800b0b6:	b103      	cbz	r3, 800b0ba <_lseek_r+0x1e>
 800b0b8:	6023      	str	r3, [r4, #0]
 800b0ba:	bd38      	pop	{r3, r4, r5, pc}
 800b0bc:	2000aad8 	.word	0x2000aad8

0800b0c0 <_read_r>:
 800b0c0:	b538      	push	{r3, r4, r5, lr}
 800b0c2:	4d07      	ldr	r5, [pc, #28]	@ (800b0e0 <_read_r+0x20>)
 800b0c4:	4604      	mov	r4, r0
 800b0c6:	4608      	mov	r0, r1
 800b0c8:	4611      	mov	r1, r2
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	602a      	str	r2, [r5, #0]
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	f7f7 fa21 	bl	8002516 <_read>
 800b0d4:	1c43      	adds	r3, r0, #1
 800b0d6:	d102      	bne.n	800b0de <_read_r+0x1e>
 800b0d8:	682b      	ldr	r3, [r5, #0]
 800b0da:	b103      	cbz	r3, 800b0de <_read_r+0x1e>
 800b0dc:	6023      	str	r3, [r4, #0]
 800b0de:	bd38      	pop	{r3, r4, r5, pc}
 800b0e0:	2000aad8 	.word	0x2000aad8

0800b0e4 <_write_r>:
 800b0e4:	b538      	push	{r3, r4, r5, lr}
 800b0e6:	4d07      	ldr	r5, [pc, #28]	@ (800b104 <_write_r+0x20>)
 800b0e8:	4604      	mov	r4, r0
 800b0ea:	4608      	mov	r0, r1
 800b0ec:	4611      	mov	r1, r2
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	602a      	str	r2, [r5, #0]
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	f7f7 fa2c 	bl	8002550 <_write>
 800b0f8:	1c43      	adds	r3, r0, #1
 800b0fa:	d102      	bne.n	800b102 <_write_r+0x1e>
 800b0fc:	682b      	ldr	r3, [r5, #0]
 800b0fe:	b103      	cbz	r3, 800b102 <_write_r+0x1e>
 800b100:	6023      	str	r3, [r4, #0]
 800b102:	bd38      	pop	{r3, r4, r5, pc}
 800b104:	2000aad8 	.word	0x2000aad8

0800b108 <__errno>:
 800b108:	4b01      	ldr	r3, [pc, #4]	@ (800b110 <__errno+0x8>)
 800b10a:	6818      	ldr	r0, [r3, #0]
 800b10c:	4770      	bx	lr
 800b10e:	bf00      	nop
 800b110:	2000004c 	.word	0x2000004c

0800b114 <__libc_init_array>:
 800b114:	b570      	push	{r4, r5, r6, lr}
 800b116:	4d0d      	ldr	r5, [pc, #52]	@ (800b14c <__libc_init_array+0x38>)
 800b118:	4c0d      	ldr	r4, [pc, #52]	@ (800b150 <__libc_init_array+0x3c>)
 800b11a:	1b64      	subs	r4, r4, r5
 800b11c:	10a4      	asrs	r4, r4, #2
 800b11e:	2600      	movs	r6, #0
 800b120:	42a6      	cmp	r6, r4
 800b122:	d109      	bne.n	800b138 <__libc_init_array+0x24>
 800b124:	4d0b      	ldr	r5, [pc, #44]	@ (800b154 <__libc_init_array+0x40>)
 800b126:	4c0c      	ldr	r4, [pc, #48]	@ (800b158 <__libc_init_array+0x44>)
 800b128:	f003 f966 	bl	800e3f8 <_init>
 800b12c:	1b64      	subs	r4, r4, r5
 800b12e:	10a4      	asrs	r4, r4, #2
 800b130:	2600      	movs	r6, #0
 800b132:	42a6      	cmp	r6, r4
 800b134:	d105      	bne.n	800b142 <__libc_init_array+0x2e>
 800b136:	bd70      	pop	{r4, r5, r6, pc}
 800b138:	f855 3b04 	ldr.w	r3, [r5], #4
 800b13c:	4798      	blx	r3
 800b13e:	3601      	adds	r6, #1
 800b140:	e7ee      	b.n	800b120 <__libc_init_array+0xc>
 800b142:	f855 3b04 	ldr.w	r3, [r5], #4
 800b146:	4798      	blx	r3
 800b148:	3601      	adds	r6, #1
 800b14a:	e7f2      	b.n	800b132 <__libc_init_array+0x1e>
 800b14c:	08026f58 	.word	0x08026f58
 800b150:	08026f58 	.word	0x08026f58
 800b154:	08026f58 	.word	0x08026f58
 800b158:	08026f5c 	.word	0x08026f5c

0800b15c <__retarget_lock_init_recursive>:
 800b15c:	4770      	bx	lr

0800b15e <__retarget_lock_acquire_recursive>:
 800b15e:	4770      	bx	lr

0800b160 <__retarget_lock_release_recursive>:
 800b160:	4770      	bx	lr
	...

0800b164 <__assert_func>:
 800b164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b166:	4614      	mov	r4, r2
 800b168:	461a      	mov	r2, r3
 800b16a:	4b09      	ldr	r3, [pc, #36]	@ (800b190 <__assert_func+0x2c>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4605      	mov	r5, r0
 800b170:	68d8      	ldr	r0, [r3, #12]
 800b172:	b954      	cbnz	r4, 800b18a <__assert_func+0x26>
 800b174:	4b07      	ldr	r3, [pc, #28]	@ (800b194 <__assert_func+0x30>)
 800b176:	461c      	mov	r4, r3
 800b178:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b17c:	9100      	str	r1, [sp, #0]
 800b17e:	462b      	mov	r3, r5
 800b180:	4905      	ldr	r1, [pc, #20]	@ (800b198 <__assert_func+0x34>)
 800b182:	f001 fb87 	bl	800c894 <fiprintf>
 800b186:	f001 fbb5 	bl	800c8f4 <abort>
 800b18a:	4b04      	ldr	r3, [pc, #16]	@ (800b19c <__assert_func+0x38>)
 800b18c:	e7f4      	b.n	800b178 <__assert_func+0x14>
 800b18e:	bf00      	nop
 800b190:	2000004c 	.word	0x2000004c
 800b194:	08026a6f 	.word	0x08026a6f
 800b198:	08026a41 	.word	0x08026a41
 800b19c:	08026a34 	.word	0x08026a34

0800b1a0 <quorem>:
 800b1a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a4:	6903      	ldr	r3, [r0, #16]
 800b1a6:	690c      	ldr	r4, [r1, #16]
 800b1a8:	42a3      	cmp	r3, r4
 800b1aa:	4607      	mov	r7, r0
 800b1ac:	db7e      	blt.n	800b2ac <quorem+0x10c>
 800b1ae:	3c01      	subs	r4, #1
 800b1b0:	f101 0814 	add.w	r8, r1, #20
 800b1b4:	00a3      	lsls	r3, r4, #2
 800b1b6:	f100 0514 	add.w	r5, r0, #20
 800b1ba:	9300      	str	r3, [sp, #0]
 800b1bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1c0:	9301      	str	r3, [sp, #4]
 800b1c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b1c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b1d2:	fbb2 f6f3 	udiv	r6, r2, r3
 800b1d6:	d32e      	bcc.n	800b236 <quorem+0x96>
 800b1d8:	f04f 0a00 	mov.w	sl, #0
 800b1dc:	46c4      	mov	ip, r8
 800b1de:	46ae      	mov	lr, r5
 800b1e0:	46d3      	mov	fp, sl
 800b1e2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b1e6:	b298      	uxth	r0, r3
 800b1e8:	fb06 a000 	mla	r0, r6, r0, sl
 800b1ec:	0c02      	lsrs	r2, r0, #16
 800b1ee:	0c1b      	lsrs	r3, r3, #16
 800b1f0:	fb06 2303 	mla	r3, r6, r3, r2
 800b1f4:	f8de 2000 	ldr.w	r2, [lr]
 800b1f8:	b280      	uxth	r0, r0
 800b1fa:	b292      	uxth	r2, r2
 800b1fc:	1a12      	subs	r2, r2, r0
 800b1fe:	445a      	add	r2, fp
 800b200:	f8de 0000 	ldr.w	r0, [lr]
 800b204:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b208:	b29b      	uxth	r3, r3
 800b20a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b20e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b212:	b292      	uxth	r2, r2
 800b214:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b218:	45e1      	cmp	r9, ip
 800b21a:	f84e 2b04 	str.w	r2, [lr], #4
 800b21e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b222:	d2de      	bcs.n	800b1e2 <quorem+0x42>
 800b224:	9b00      	ldr	r3, [sp, #0]
 800b226:	58eb      	ldr	r3, [r5, r3]
 800b228:	b92b      	cbnz	r3, 800b236 <quorem+0x96>
 800b22a:	9b01      	ldr	r3, [sp, #4]
 800b22c:	3b04      	subs	r3, #4
 800b22e:	429d      	cmp	r5, r3
 800b230:	461a      	mov	r2, r3
 800b232:	d32f      	bcc.n	800b294 <quorem+0xf4>
 800b234:	613c      	str	r4, [r7, #16]
 800b236:	4638      	mov	r0, r7
 800b238:	f001 f978 	bl	800c52c <__mcmp>
 800b23c:	2800      	cmp	r0, #0
 800b23e:	db25      	blt.n	800b28c <quorem+0xec>
 800b240:	4629      	mov	r1, r5
 800b242:	2000      	movs	r0, #0
 800b244:	f858 2b04 	ldr.w	r2, [r8], #4
 800b248:	f8d1 c000 	ldr.w	ip, [r1]
 800b24c:	fa1f fe82 	uxth.w	lr, r2
 800b250:	fa1f f38c 	uxth.w	r3, ip
 800b254:	eba3 030e 	sub.w	r3, r3, lr
 800b258:	4403      	add	r3, r0
 800b25a:	0c12      	lsrs	r2, r2, #16
 800b25c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b260:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b264:	b29b      	uxth	r3, r3
 800b266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b26a:	45c1      	cmp	r9, r8
 800b26c:	f841 3b04 	str.w	r3, [r1], #4
 800b270:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b274:	d2e6      	bcs.n	800b244 <quorem+0xa4>
 800b276:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b27a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b27e:	b922      	cbnz	r2, 800b28a <quorem+0xea>
 800b280:	3b04      	subs	r3, #4
 800b282:	429d      	cmp	r5, r3
 800b284:	461a      	mov	r2, r3
 800b286:	d30b      	bcc.n	800b2a0 <quorem+0x100>
 800b288:	613c      	str	r4, [r7, #16]
 800b28a:	3601      	adds	r6, #1
 800b28c:	4630      	mov	r0, r6
 800b28e:	b003      	add	sp, #12
 800b290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b294:	6812      	ldr	r2, [r2, #0]
 800b296:	3b04      	subs	r3, #4
 800b298:	2a00      	cmp	r2, #0
 800b29a:	d1cb      	bne.n	800b234 <quorem+0x94>
 800b29c:	3c01      	subs	r4, #1
 800b29e:	e7c6      	b.n	800b22e <quorem+0x8e>
 800b2a0:	6812      	ldr	r2, [r2, #0]
 800b2a2:	3b04      	subs	r3, #4
 800b2a4:	2a00      	cmp	r2, #0
 800b2a6:	d1ef      	bne.n	800b288 <quorem+0xe8>
 800b2a8:	3c01      	subs	r4, #1
 800b2aa:	e7ea      	b.n	800b282 <quorem+0xe2>
 800b2ac:	2000      	movs	r0, #0
 800b2ae:	e7ee      	b.n	800b28e <quorem+0xee>

0800b2b0 <_dtoa_r>:
 800b2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b4:	69c7      	ldr	r7, [r0, #28]
 800b2b6:	b099      	sub	sp, #100	@ 0x64
 800b2b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b2bc:	ec55 4b10 	vmov	r4, r5, d0
 800b2c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b2c2:	9109      	str	r1, [sp, #36]	@ 0x24
 800b2c4:	4683      	mov	fp, r0
 800b2c6:	920e      	str	r2, [sp, #56]	@ 0x38
 800b2c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b2ca:	b97f      	cbnz	r7, 800b2ec <_dtoa_r+0x3c>
 800b2cc:	2010      	movs	r0, #16
 800b2ce:	f000 fdfd 	bl	800becc <malloc>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	f8cb 001c 	str.w	r0, [fp, #28]
 800b2d8:	b920      	cbnz	r0, 800b2e4 <_dtoa_r+0x34>
 800b2da:	4ba7      	ldr	r3, [pc, #668]	@ (800b578 <_dtoa_r+0x2c8>)
 800b2dc:	21ef      	movs	r1, #239	@ 0xef
 800b2de:	48a7      	ldr	r0, [pc, #668]	@ (800b57c <_dtoa_r+0x2cc>)
 800b2e0:	f7ff ff40 	bl	800b164 <__assert_func>
 800b2e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b2e8:	6007      	str	r7, [r0, #0]
 800b2ea:	60c7      	str	r7, [r0, #12]
 800b2ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b2f0:	6819      	ldr	r1, [r3, #0]
 800b2f2:	b159      	cbz	r1, 800b30c <_dtoa_r+0x5c>
 800b2f4:	685a      	ldr	r2, [r3, #4]
 800b2f6:	604a      	str	r2, [r1, #4]
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	4093      	lsls	r3, r2
 800b2fc:	608b      	str	r3, [r1, #8]
 800b2fe:	4658      	mov	r0, fp
 800b300:	f000 feda 	bl	800c0b8 <_Bfree>
 800b304:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b308:	2200      	movs	r2, #0
 800b30a:	601a      	str	r2, [r3, #0]
 800b30c:	1e2b      	subs	r3, r5, #0
 800b30e:	bfb9      	ittee	lt
 800b310:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b314:	9303      	strlt	r3, [sp, #12]
 800b316:	2300      	movge	r3, #0
 800b318:	6033      	strge	r3, [r6, #0]
 800b31a:	9f03      	ldr	r7, [sp, #12]
 800b31c:	4b98      	ldr	r3, [pc, #608]	@ (800b580 <_dtoa_r+0x2d0>)
 800b31e:	bfbc      	itt	lt
 800b320:	2201      	movlt	r2, #1
 800b322:	6032      	strlt	r2, [r6, #0]
 800b324:	43bb      	bics	r3, r7
 800b326:	d112      	bne.n	800b34e <_dtoa_r+0x9e>
 800b328:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b32a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b32e:	6013      	str	r3, [r2, #0]
 800b330:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b334:	4323      	orrs	r3, r4
 800b336:	f000 854d 	beq.w	800bdd4 <_dtoa_r+0xb24>
 800b33a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b33c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b594 <_dtoa_r+0x2e4>
 800b340:	2b00      	cmp	r3, #0
 800b342:	f000 854f 	beq.w	800bde4 <_dtoa_r+0xb34>
 800b346:	f10a 0303 	add.w	r3, sl, #3
 800b34a:	f000 bd49 	b.w	800bde0 <_dtoa_r+0xb30>
 800b34e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b352:	2200      	movs	r2, #0
 800b354:	ec51 0b17 	vmov	r0, r1, d7
 800b358:	2300      	movs	r3, #0
 800b35a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b35e:	f7f5 fbb3 	bl	8000ac8 <__aeabi_dcmpeq>
 800b362:	4680      	mov	r8, r0
 800b364:	b158      	cbz	r0, 800b37e <_dtoa_r+0xce>
 800b366:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b368:	2301      	movs	r3, #1
 800b36a:	6013      	str	r3, [r2, #0]
 800b36c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b36e:	b113      	cbz	r3, 800b376 <_dtoa_r+0xc6>
 800b370:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b372:	4b84      	ldr	r3, [pc, #528]	@ (800b584 <_dtoa_r+0x2d4>)
 800b374:	6013      	str	r3, [r2, #0]
 800b376:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b598 <_dtoa_r+0x2e8>
 800b37a:	f000 bd33 	b.w	800bde4 <_dtoa_r+0xb34>
 800b37e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b382:	aa16      	add	r2, sp, #88	@ 0x58
 800b384:	a917      	add	r1, sp, #92	@ 0x5c
 800b386:	4658      	mov	r0, fp
 800b388:	f001 f980 	bl	800c68c <__d2b>
 800b38c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b390:	4681      	mov	r9, r0
 800b392:	2e00      	cmp	r6, #0
 800b394:	d077      	beq.n	800b486 <_dtoa_r+0x1d6>
 800b396:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b398:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b39c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b3a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b3a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b3ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	4b74      	ldr	r3, [pc, #464]	@ (800b588 <_dtoa_r+0x2d8>)
 800b3b6:	f7f4 ff67 	bl	8000288 <__aeabi_dsub>
 800b3ba:	a369      	add	r3, pc, #420	@ (adr r3, 800b560 <_dtoa_r+0x2b0>)
 800b3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c0:	f7f5 f91a 	bl	80005f8 <__aeabi_dmul>
 800b3c4:	a368      	add	r3, pc, #416	@ (adr r3, 800b568 <_dtoa_r+0x2b8>)
 800b3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ca:	f7f4 ff5f 	bl	800028c <__adddf3>
 800b3ce:	4604      	mov	r4, r0
 800b3d0:	4630      	mov	r0, r6
 800b3d2:	460d      	mov	r5, r1
 800b3d4:	f7f5 f8a6 	bl	8000524 <__aeabi_i2d>
 800b3d8:	a365      	add	r3, pc, #404	@ (adr r3, 800b570 <_dtoa_r+0x2c0>)
 800b3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3de:	f7f5 f90b 	bl	80005f8 <__aeabi_dmul>
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	4629      	mov	r1, r5
 800b3ea:	f7f4 ff4f 	bl	800028c <__adddf3>
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	460d      	mov	r5, r1
 800b3f2:	f7f5 fbb1 	bl	8000b58 <__aeabi_d2iz>
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	4607      	mov	r7, r0
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	4629      	mov	r1, r5
 800b400:	f7f5 fb6c 	bl	8000adc <__aeabi_dcmplt>
 800b404:	b140      	cbz	r0, 800b418 <_dtoa_r+0x168>
 800b406:	4638      	mov	r0, r7
 800b408:	f7f5 f88c 	bl	8000524 <__aeabi_i2d>
 800b40c:	4622      	mov	r2, r4
 800b40e:	462b      	mov	r3, r5
 800b410:	f7f5 fb5a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b414:	b900      	cbnz	r0, 800b418 <_dtoa_r+0x168>
 800b416:	3f01      	subs	r7, #1
 800b418:	2f16      	cmp	r7, #22
 800b41a:	d851      	bhi.n	800b4c0 <_dtoa_r+0x210>
 800b41c:	4b5b      	ldr	r3, [pc, #364]	@ (800b58c <_dtoa_r+0x2dc>)
 800b41e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b426:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b42a:	f7f5 fb57 	bl	8000adc <__aeabi_dcmplt>
 800b42e:	2800      	cmp	r0, #0
 800b430:	d048      	beq.n	800b4c4 <_dtoa_r+0x214>
 800b432:	3f01      	subs	r7, #1
 800b434:	2300      	movs	r3, #0
 800b436:	9312      	str	r3, [sp, #72]	@ 0x48
 800b438:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b43a:	1b9b      	subs	r3, r3, r6
 800b43c:	1e5a      	subs	r2, r3, #1
 800b43e:	bf44      	itt	mi
 800b440:	f1c3 0801 	rsbmi	r8, r3, #1
 800b444:	2300      	movmi	r3, #0
 800b446:	9208      	str	r2, [sp, #32]
 800b448:	bf54      	ite	pl
 800b44a:	f04f 0800 	movpl.w	r8, #0
 800b44e:	9308      	strmi	r3, [sp, #32]
 800b450:	2f00      	cmp	r7, #0
 800b452:	db39      	blt.n	800b4c8 <_dtoa_r+0x218>
 800b454:	9b08      	ldr	r3, [sp, #32]
 800b456:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b458:	443b      	add	r3, r7
 800b45a:	9308      	str	r3, [sp, #32]
 800b45c:	2300      	movs	r3, #0
 800b45e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b460:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b462:	2b09      	cmp	r3, #9
 800b464:	d864      	bhi.n	800b530 <_dtoa_r+0x280>
 800b466:	2b05      	cmp	r3, #5
 800b468:	bfc4      	itt	gt
 800b46a:	3b04      	subgt	r3, #4
 800b46c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b46e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b470:	f1a3 0302 	sub.w	r3, r3, #2
 800b474:	bfcc      	ite	gt
 800b476:	2400      	movgt	r4, #0
 800b478:	2401      	movle	r4, #1
 800b47a:	2b03      	cmp	r3, #3
 800b47c:	d863      	bhi.n	800b546 <_dtoa_r+0x296>
 800b47e:	e8df f003 	tbb	[pc, r3]
 800b482:	372a      	.short	0x372a
 800b484:	5535      	.short	0x5535
 800b486:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b48a:	441e      	add	r6, r3
 800b48c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b490:	2b20      	cmp	r3, #32
 800b492:	bfc1      	itttt	gt
 800b494:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b498:	409f      	lslgt	r7, r3
 800b49a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b49e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b4a2:	bfd6      	itet	le
 800b4a4:	f1c3 0320 	rsble	r3, r3, #32
 800b4a8:	ea47 0003 	orrgt.w	r0, r7, r3
 800b4ac:	fa04 f003 	lslle.w	r0, r4, r3
 800b4b0:	f7f5 f828 	bl	8000504 <__aeabi_ui2d>
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b4ba:	3e01      	subs	r6, #1
 800b4bc:	9214      	str	r2, [sp, #80]	@ 0x50
 800b4be:	e777      	b.n	800b3b0 <_dtoa_r+0x100>
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	e7b8      	b.n	800b436 <_dtoa_r+0x186>
 800b4c4:	9012      	str	r0, [sp, #72]	@ 0x48
 800b4c6:	e7b7      	b.n	800b438 <_dtoa_r+0x188>
 800b4c8:	427b      	negs	r3, r7
 800b4ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	eba8 0807 	sub.w	r8, r8, r7
 800b4d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b4d4:	e7c4      	b.n	800b460 <_dtoa_r+0x1b0>
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	dc35      	bgt.n	800b54c <_dtoa_r+0x29c>
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	9300      	str	r3, [sp, #0]
 800b4e4:	9307      	str	r3, [sp, #28]
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b4ea:	e00b      	b.n	800b504 <_dtoa_r+0x254>
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	e7f3      	b.n	800b4d8 <_dtoa_r+0x228>
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4f6:	18fb      	adds	r3, r7, r3
 800b4f8:	9300      	str	r3, [sp, #0]
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	9307      	str	r3, [sp, #28]
 800b500:	bfb8      	it	lt
 800b502:	2301      	movlt	r3, #1
 800b504:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b508:	2100      	movs	r1, #0
 800b50a:	2204      	movs	r2, #4
 800b50c:	f102 0514 	add.w	r5, r2, #20
 800b510:	429d      	cmp	r5, r3
 800b512:	d91f      	bls.n	800b554 <_dtoa_r+0x2a4>
 800b514:	6041      	str	r1, [r0, #4]
 800b516:	4658      	mov	r0, fp
 800b518:	f000 fd8e 	bl	800c038 <_Balloc>
 800b51c:	4682      	mov	sl, r0
 800b51e:	2800      	cmp	r0, #0
 800b520:	d13c      	bne.n	800b59c <_dtoa_r+0x2ec>
 800b522:	4b1b      	ldr	r3, [pc, #108]	@ (800b590 <_dtoa_r+0x2e0>)
 800b524:	4602      	mov	r2, r0
 800b526:	f240 11af 	movw	r1, #431	@ 0x1af
 800b52a:	e6d8      	b.n	800b2de <_dtoa_r+0x2e>
 800b52c:	2301      	movs	r3, #1
 800b52e:	e7e0      	b.n	800b4f2 <_dtoa_r+0x242>
 800b530:	2401      	movs	r4, #1
 800b532:	2300      	movs	r3, #0
 800b534:	9309      	str	r3, [sp, #36]	@ 0x24
 800b536:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b538:	f04f 33ff 	mov.w	r3, #4294967295
 800b53c:	9300      	str	r3, [sp, #0]
 800b53e:	9307      	str	r3, [sp, #28]
 800b540:	2200      	movs	r2, #0
 800b542:	2312      	movs	r3, #18
 800b544:	e7d0      	b.n	800b4e8 <_dtoa_r+0x238>
 800b546:	2301      	movs	r3, #1
 800b548:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b54a:	e7f5      	b.n	800b538 <_dtoa_r+0x288>
 800b54c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b54e:	9300      	str	r3, [sp, #0]
 800b550:	9307      	str	r3, [sp, #28]
 800b552:	e7d7      	b.n	800b504 <_dtoa_r+0x254>
 800b554:	3101      	adds	r1, #1
 800b556:	0052      	lsls	r2, r2, #1
 800b558:	e7d8      	b.n	800b50c <_dtoa_r+0x25c>
 800b55a:	bf00      	nop
 800b55c:	f3af 8000 	nop.w
 800b560:	636f4361 	.word	0x636f4361
 800b564:	3fd287a7 	.word	0x3fd287a7
 800b568:	8b60c8b3 	.word	0x8b60c8b3
 800b56c:	3fc68a28 	.word	0x3fc68a28
 800b570:	509f79fb 	.word	0x509f79fb
 800b574:	3fd34413 	.word	0x3fd34413
 800b578:	08026a7d 	.word	0x08026a7d
 800b57c:	08026a94 	.word	0x08026a94
 800b580:	7ff00000 	.word	0x7ff00000
 800b584:	08026a11 	.word	0x08026a11
 800b588:	3ff80000 	.word	0x3ff80000
 800b58c:	08026b90 	.word	0x08026b90
 800b590:	08026aec 	.word	0x08026aec
 800b594:	08026a79 	.word	0x08026a79
 800b598:	08026a10 	.word	0x08026a10
 800b59c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b5a0:	6018      	str	r0, [r3, #0]
 800b5a2:	9b07      	ldr	r3, [sp, #28]
 800b5a4:	2b0e      	cmp	r3, #14
 800b5a6:	f200 80a4 	bhi.w	800b6f2 <_dtoa_r+0x442>
 800b5aa:	2c00      	cmp	r4, #0
 800b5ac:	f000 80a1 	beq.w	800b6f2 <_dtoa_r+0x442>
 800b5b0:	2f00      	cmp	r7, #0
 800b5b2:	dd33      	ble.n	800b61c <_dtoa_r+0x36c>
 800b5b4:	4bad      	ldr	r3, [pc, #692]	@ (800b86c <_dtoa_r+0x5bc>)
 800b5b6:	f007 020f 	and.w	r2, r7, #15
 800b5ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5be:	ed93 7b00 	vldr	d7, [r3]
 800b5c2:	05f8      	lsls	r0, r7, #23
 800b5c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b5c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b5cc:	d516      	bpl.n	800b5fc <_dtoa_r+0x34c>
 800b5ce:	4ba8      	ldr	r3, [pc, #672]	@ (800b870 <_dtoa_r+0x5c0>)
 800b5d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b5d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b5d8:	f7f5 f938 	bl	800084c <__aeabi_ddiv>
 800b5dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5e0:	f004 040f 	and.w	r4, r4, #15
 800b5e4:	2603      	movs	r6, #3
 800b5e6:	4da2      	ldr	r5, [pc, #648]	@ (800b870 <_dtoa_r+0x5c0>)
 800b5e8:	b954      	cbnz	r4, 800b600 <_dtoa_r+0x350>
 800b5ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5f2:	f7f5 f92b 	bl	800084c <__aeabi_ddiv>
 800b5f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5fa:	e028      	b.n	800b64e <_dtoa_r+0x39e>
 800b5fc:	2602      	movs	r6, #2
 800b5fe:	e7f2      	b.n	800b5e6 <_dtoa_r+0x336>
 800b600:	07e1      	lsls	r1, r4, #31
 800b602:	d508      	bpl.n	800b616 <_dtoa_r+0x366>
 800b604:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b608:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b60c:	f7f4 fff4 	bl	80005f8 <__aeabi_dmul>
 800b610:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b614:	3601      	adds	r6, #1
 800b616:	1064      	asrs	r4, r4, #1
 800b618:	3508      	adds	r5, #8
 800b61a:	e7e5      	b.n	800b5e8 <_dtoa_r+0x338>
 800b61c:	f000 80d2 	beq.w	800b7c4 <_dtoa_r+0x514>
 800b620:	427c      	negs	r4, r7
 800b622:	4b92      	ldr	r3, [pc, #584]	@ (800b86c <_dtoa_r+0x5bc>)
 800b624:	4d92      	ldr	r5, [pc, #584]	@ (800b870 <_dtoa_r+0x5c0>)
 800b626:	f004 020f 	and.w	r2, r4, #15
 800b62a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b632:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b636:	f7f4 ffdf 	bl	80005f8 <__aeabi_dmul>
 800b63a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b63e:	1124      	asrs	r4, r4, #4
 800b640:	2300      	movs	r3, #0
 800b642:	2602      	movs	r6, #2
 800b644:	2c00      	cmp	r4, #0
 800b646:	f040 80b2 	bne.w	800b7ae <_dtoa_r+0x4fe>
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d1d3      	bne.n	800b5f6 <_dtoa_r+0x346>
 800b64e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b650:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b654:	2b00      	cmp	r3, #0
 800b656:	f000 80b7 	beq.w	800b7c8 <_dtoa_r+0x518>
 800b65a:	4b86      	ldr	r3, [pc, #536]	@ (800b874 <_dtoa_r+0x5c4>)
 800b65c:	2200      	movs	r2, #0
 800b65e:	4620      	mov	r0, r4
 800b660:	4629      	mov	r1, r5
 800b662:	f7f5 fa3b 	bl	8000adc <__aeabi_dcmplt>
 800b666:	2800      	cmp	r0, #0
 800b668:	f000 80ae 	beq.w	800b7c8 <_dtoa_r+0x518>
 800b66c:	9b07      	ldr	r3, [sp, #28]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	f000 80aa 	beq.w	800b7c8 <_dtoa_r+0x518>
 800b674:	9b00      	ldr	r3, [sp, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	dd37      	ble.n	800b6ea <_dtoa_r+0x43a>
 800b67a:	1e7b      	subs	r3, r7, #1
 800b67c:	9304      	str	r3, [sp, #16]
 800b67e:	4620      	mov	r0, r4
 800b680:	4b7d      	ldr	r3, [pc, #500]	@ (800b878 <_dtoa_r+0x5c8>)
 800b682:	2200      	movs	r2, #0
 800b684:	4629      	mov	r1, r5
 800b686:	f7f4 ffb7 	bl	80005f8 <__aeabi_dmul>
 800b68a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b68e:	9c00      	ldr	r4, [sp, #0]
 800b690:	3601      	adds	r6, #1
 800b692:	4630      	mov	r0, r6
 800b694:	f7f4 ff46 	bl	8000524 <__aeabi_i2d>
 800b698:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b69c:	f7f4 ffac 	bl	80005f8 <__aeabi_dmul>
 800b6a0:	4b76      	ldr	r3, [pc, #472]	@ (800b87c <_dtoa_r+0x5cc>)
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f7f4 fdf2 	bl	800028c <__adddf3>
 800b6a8:	4605      	mov	r5, r0
 800b6aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b6ae:	2c00      	cmp	r4, #0
 800b6b0:	f040 808d 	bne.w	800b7ce <_dtoa_r+0x51e>
 800b6b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6b8:	4b71      	ldr	r3, [pc, #452]	@ (800b880 <_dtoa_r+0x5d0>)
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	f7f4 fde4 	bl	8000288 <__aeabi_dsub>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b6c8:	462a      	mov	r2, r5
 800b6ca:	4633      	mov	r3, r6
 800b6cc:	f7f5 fa24 	bl	8000b18 <__aeabi_dcmpgt>
 800b6d0:	2800      	cmp	r0, #0
 800b6d2:	f040 828b 	bne.w	800bbec <_dtoa_r+0x93c>
 800b6d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6da:	462a      	mov	r2, r5
 800b6dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b6e0:	f7f5 f9fc 	bl	8000adc <__aeabi_dcmplt>
 800b6e4:	2800      	cmp	r0, #0
 800b6e6:	f040 8128 	bne.w	800b93a <_dtoa_r+0x68a>
 800b6ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b6ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b6f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	f2c0 815a 	blt.w	800b9ae <_dtoa_r+0x6fe>
 800b6fa:	2f0e      	cmp	r7, #14
 800b6fc:	f300 8157 	bgt.w	800b9ae <_dtoa_r+0x6fe>
 800b700:	4b5a      	ldr	r3, [pc, #360]	@ (800b86c <_dtoa_r+0x5bc>)
 800b702:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b706:	ed93 7b00 	vldr	d7, [r3]
 800b70a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	ed8d 7b00 	vstr	d7, [sp]
 800b712:	da03      	bge.n	800b71c <_dtoa_r+0x46c>
 800b714:	9b07      	ldr	r3, [sp, #28]
 800b716:	2b00      	cmp	r3, #0
 800b718:	f340 8101 	ble.w	800b91e <_dtoa_r+0x66e>
 800b71c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b720:	4656      	mov	r6, sl
 800b722:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b726:	4620      	mov	r0, r4
 800b728:	4629      	mov	r1, r5
 800b72a:	f7f5 f88f 	bl	800084c <__aeabi_ddiv>
 800b72e:	f7f5 fa13 	bl	8000b58 <__aeabi_d2iz>
 800b732:	4680      	mov	r8, r0
 800b734:	f7f4 fef6 	bl	8000524 <__aeabi_i2d>
 800b738:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b73c:	f7f4 ff5c 	bl	80005f8 <__aeabi_dmul>
 800b740:	4602      	mov	r2, r0
 800b742:	460b      	mov	r3, r1
 800b744:	4620      	mov	r0, r4
 800b746:	4629      	mov	r1, r5
 800b748:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b74c:	f7f4 fd9c 	bl	8000288 <__aeabi_dsub>
 800b750:	f806 4b01 	strb.w	r4, [r6], #1
 800b754:	9d07      	ldr	r5, [sp, #28]
 800b756:	eba6 040a 	sub.w	r4, r6, sl
 800b75a:	42a5      	cmp	r5, r4
 800b75c:	4602      	mov	r2, r0
 800b75e:	460b      	mov	r3, r1
 800b760:	f040 8117 	bne.w	800b992 <_dtoa_r+0x6e2>
 800b764:	f7f4 fd92 	bl	800028c <__adddf3>
 800b768:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b76c:	4604      	mov	r4, r0
 800b76e:	460d      	mov	r5, r1
 800b770:	f7f5 f9d2 	bl	8000b18 <__aeabi_dcmpgt>
 800b774:	2800      	cmp	r0, #0
 800b776:	f040 80f9 	bne.w	800b96c <_dtoa_r+0x6bc>
 800b77a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b77e:	4620      	mov	r0, r4
 800b780:	4629      	mov	r1, r5
 800b782:	f7f5 f9a1 	bl	8000ac8 <__aeabi_dcmpeq>
 800b786:	b118      	cbz	r0, 800b790 <_dtoa_r+0x4e0>
 800b788:	f018 0f01 	tst.w	r8, #1
 800b78c:	f040 80ee 	bne.w	800b96c <_dtoa_r+0x6bc>
 800b790:	4649      	mov	r1, r9
 800b792:	4658      	mov	r0, fp
 800b794:	f000 fc90 	bl	800c0b8 <_Bfree>
 800b798:	2300      	movs	r3, #0
 800b79a:	7033      	strb	r3, [r6, #0]
 800b79c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b79e:	3701      	adds	r7, #1
 800b7a0:	601f      	str	r7, [r3, #0]
 800b7a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	f000 831d 	beq.w	800bde4 <_dtoa_r+0xb34>
 800b7aa:	601e      	str	r6, [r3, #0]
 800b7ac:	e31a      	b.n	800bde4 <_dtoa_r+0xb34>
 800b7ae:	07e2      	lsls	r2, r4, #31
 800b7b0:	d505      	bpl.n	800b7be <_dtoa_r+0x50e>
 800b7b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b7b6:	f7f4 ff1f 	bl	80005f8 <__aeabi_dmul>
 800b7ba:	3601      	adds	r6, #1
 800b7bc:	2301      	movs	r3, #1
 800b7be:	1064      	asrs	r4, r4, #1
 800b7c0:	3508      	adds	r5, #8
 800b7c2:	e73f      	b.n	800b644 <_dtoa_r+0x394>
 800b7c4:	2602      	movs	r6, #2
 800b7c6:	e742      	b.n	800b64e <_dtoa_r+0x39e>
 800b7c8:	9c07      	ldr	r4, [sp, #28]
 800b7ca:	9704      	str	r7, [sp, #16]
 800b7cc:	e761      	b.n	800b692 <_dtoa_r+0x3e2>
 800b7ce:	4b27      	ldr	r3, [pc, #156]	@ (800b86c <_dtoa_r+0x5bc>)
 800b7d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b7d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b7d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b7da:	4454      	add	r4, sl
 800b7dc:	2900      	cmp	r1, #0
 800b7de:	d053      	beq.n	800b888 <_dtoa_r+0x5d8>
 800b7e0:	4928      	ldr	r1, [pc, #160]	@ (800b884 <_dtoa_r+0x5d4>)
 800b7e2:	2000      	movs	r0, #0
 800b7e4:	f7f5 f832 	bl	800084c <__aeabi_ddiv>
 800b7e8:	4633      	mov	r3, r6
 800b7ea:	462a      	mov	r2, r5
 800b7ec:	f7f4 fd4c 	bl	8000288 <__aeabi_dsub>
 800b7f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b7f4:	4656      	mov	r6, sl
 800b7f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7fa:	f7f5 f9ad 	bl	8000b58 <__aeabi_d2iz>
 800b7fe:	4605      	mov	r5, r0
 800b800:	f7f4 fe90 	bl	8000524 <__aeabi_i2d>
 800b804:	4602      	mov	r2, r0
 800b806:	460b      	mov	r3, r1
 800b808:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b80c:	f7f4 fd3c 	bl	8000288 <__aeabi_dsub>
 800b810:	3530      	adds	r5, #48	@ 0x30
 800b812:	4602      	mov	r2, r0
 800b814:	460b      	mov	r3, r1
 800b816:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b81a:	f806 5b01 	strb.w	r5, [r6], #1
 800b81e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b822:	f7f5 f95b 	bl	8000adc <__aeabi_dcmplt>
 800b826:	2800      	cmp	r0, #0
 800b828:	d171      	bne.n	800b90e <_dtoa_r+0x65e>
 800b82a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b82e:	4911      	ldr	r1, [pc, #68]	@ (800b874 <_dtoa_r+0x5c4>)
 800b830:	2000      	movs	r0, #0
 800b832:	f7f4 fd29 	bl	8000288 <__aeabi_dsub>
 800b836:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b83a:	f7f5 f94f 	bl	8000adc <__aeabi_dcmplt>
 800b83e:	2800      	cmp	r0, #0
 800b840:	f040 8095 	bne.w	800b96e <_dtoa_r+0x6be>
 800b844:	42a6      	cmp	r6, r4
 800b846:	f43f af50 	beq.w	800b6ea <_dtoa_r+0x43a>
 800b84a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b84e:	4b0a      	ldr	r3, [pc, #40]	@ (800b878 <_dtoa_r+0x5c8>)
 800b850:	2200      	movs	r2, #0
 800b852:	f7f4 fed1 	bl	80005f8 <__aeabi_dmul>
 800b856:	4b08      	ldr	r3, [pc, #32]	@ (800b878 <_dtoa_r+0x5c8>)
 800b858:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b85c:	2200      	movs	r2, #0
 800b85e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b862:	f7f4 fec9 	bl	80005f8 <__aeabi_dmul>
 800b866:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b86a:	e7c4      	b.n	800b7f6 <_dtoa_r+0x546>
 800b86c:	08026b90 	.word	0x08026b90
 800b870:	08026b68 	.word	0x08026b68
 800b874:	3ff00000 	.word	0x3ff00000
 800b878:	40240000 	.word	0x40240000
 800b87c:	401c0000 	.word	0x401c0000
 800b880:	40140000 	.word	0x40140000
 800b884:	3fe00000 	.word	0x3fe00000
 800b888:	4631      	mov	r1, r6
 800b88a:	4628      	mov	r0, r5
 800b88c:	f7f4 feb4 	bl	80005f8 <__aeabi_dmul>
 800b890:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b894:	9415      	str	r4, [sp, #84]	@ 0x54
 800b896:	4656      	mov	r6, sl
 800b898:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b89c:	f7f5 f95c 	bl	8000b58 <__aeabi_d2iz>
 800b8a0:	4605      	mov	r5, r0
 800b8a2:	f7f4 fe3f 	bl	8000524 <__aeabi_i2d>
 800b8a6:	4602      	mov	r2, r0
 800b8a8:	460b      	mov	r3, r1
 800b8aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8ae:	f7f4 fceb 	bl	8000288 <__aeabi_dsub>
 800b8b2:	3530      	adds	r5, #48	@ 0x30
 800b8b4:	f806 5b01 	strb.w	r5, [r6], #1
 800b8b8:	4602      	mov	r2, r0
 800b8ba:	460b      	mov	r3, r1
 800b8bc:	42a6      	cmp	r6, r4
 800b8be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b8c2:	f04f 0200 	mov.w	r2, #0
 800b8c6:	d124      	bne.n	800b912 <_dtoa_r+0x662>
 800b8c8:	4bac      	ldr	r3, [pc, #688]	@ (800bb7c <_dtoa_r+0x8cc>)
 800b8ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b8ce:	f7f4 fcdd 	bl	800028c <__adddf3>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	460b      	mov	r3, r1
 800b8d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8da:	f7f5 f91d 	bl	8000b18 <__aeabi_dcmpgt>
 800b8de:	2800      	cmp	r0, #0
 800b8e0:	d145      	bne.n	800b96e <_dtoa_r+0x6be>
 800b8e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b8e6:	49a5      	ldr	r1, [pc, #660]	@ (800bb7c <_dtoa_r+0x8cc>)
 800b8e8:	2000      	movs	r0, #0
 800b8ea:	f7f4 fccd 	bl	8000288 <__aeabi_dsub>
 800b8ee:	4602      	mov	r2, r0
 800b8f0:	460b      	mov	r3, r1
 800b8f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8f6:	f7f5 f8f1 	bl	8000adc <__aeabi_dcmplt>
 800b8fa:	2800      	cmp	r0, #0
 800b8fc:	f43f aef5 	beq.w	800b6ea <_dtoa_r+0x43a>
 800b900:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b902:	1e73      	subs	r3, r6, #1
 800b904:	9315      	str	r3, [sp, #84]	@ 0x54
 800b906:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b90a:	2b30      	cmp	r3, #48	@ 0x30
 800b90c:	d0f8      	beq.n	800b900 <_dtoa_r+0x650>
 800b90e:	9f04      	ldr	r7, [sp, #16]
 800b910:	e73e      	b.n	800b790 <_dtoa_r+0x4e0>
 800b912:	4b9b      	ldr	r3, [pc, #620]	@ (800bb80 <_dtoa_r+0x8d0>)
 800b914:	f7f4 fe70 	bl	80005f8 <__aeabi_dmul>
 800b918:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b91c:	e7bc      	b.n	800b898 <_dtoa_r+0x5e8>
 800b91e:	d10c      	bne.n	800b93a <_dtoa_r+0x68a>
 800b920:	4b98      	ldr	r3, [pc, #608]	@ (800bb84 <_dtoa_r+0x8d4>)
 800b922:	2200      	movs	r2, #0
 800b924:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b928:	f7f4 fe66 	bl	80005f8 <__aeabi_dmul>
 800b92c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b930:	f7f5 f8e8 	bl	8000b04 <__aeabi_dcmpge>
 800b934:	2800      	cmp	r0, #0
 800b936:	f000 8157 	beq.w	800bbe8 <_dtoa_r+0x938>
 800b93a:	2400      	movs	r4, #0
 800b93c:	4625      	mov	r5, r4
 800b93e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b940:	43db      	mvns	r3, r3
 800b942:	9304      	str	r3, [sp, #16]
 800b944:	4656      	mov	r6, sl
 800b946:	2700      	movs	r7, #0
 800b948:	4621      	mov	r1, r4
 800b94a:	4658      	mov	r0, fp
 800b94c:	f000 fbb4 	bl	800c0b8 <_Bfree>
 800b950:	2d00      	cmp	r5, #0
 800b952:	d0dc      	beq.n	800b90e <_dtoa_r+0x65e>
 800b954:	b12f      	cbz	r7, 800b962 <_dtoa_r+0x6b2>
 800b956:	42af      	cmp	r7, r5
 800b958:	d003      	beq.n	800b962 <_dtoa_r+0x6b2>
 800b95a:	4639      	mov	r1, r7
 800b95c:	4658      	mov	r0, fp
 800b95e:	f000 fbab 	bl	800c0b8 <_Bfree>
 800b962:	4629      	mov	r1, r5
 800b964:	4658      	mov	r0, fp
 800b966:	f000 fba7 	bl	800c0b8 <_Bfree>
 800b96a:	e7d0      	b.n	800b90e <_dtoa_r+0x65e>
 800b96c:	9704      	str	r7, [sp, #16]
 800b96e:	4633      	mov	r3, r6
 800b970:	461e      	mov	r6, r3
 800b972:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b976:	2a39      	cmp	r2, #57	@ 0x39
 800b978:	d107      	bne.n	800b98a <_dtoa_r+0x6da>
 800b97a:	459a      	cmp	sl, r3
 800b97c:	d1f8      	bne.n	800b970 <_dtoa_r+0x6c0>
 800b97e:	9a04      	ldr	r2, [sp, #16]
 800b980:	3201      	adds	r2, #1
 800b982:	9204      	str	r2, [sp, #16]
 800b984:	2230      	movs	r2, #48	@ 0x30
 800b986:	f88a 2000 	strb.w	r2, [sl]
 800b98a:	781a      	ldrb	r2, [r3, #0]
 800b98c:	3201      	adds	r2, #1
 800b98e:	701a      	strb	r2, [r3, #0]
 800b990:	e7bd      	b.n	800b90e <_dtoa_r+0x65e>
 800b992:	4b7b      	ldr	r3, [pc, #492]	@ (800bb80 <_dtoa_r+0x8d0>)
 800b994:	2200      	movs	r2, #0
 800b996:	f7f4 fe2f 	bl	80005f8 <__aeabi_dmul>
 800b99a:	2200      	movs	r2, #0
 800b99c:	2300      	movs	r3, #0
 800b99e:	4604      	mov	r4, r0
 800b9a0:	460d      	mov	r5, r1
 800b9a2:	f7f5 f891 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9a6:	2800      	cmp	r0, #0
 800b9a8:	f43f aebb 	beq.w	800b722 <_dtoa_r+0x472>
 800b9ac:	e6f0      	b.n	800b790 <_dtoa_r+0x4e0>
 800b9ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b9b0:	2a00      	cmp	r2, #0
 800b9b2:	f000 80db 	beq.w	800bb6c <_dtoa_r+0x8bc>
 800b9b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9b8:	2a01      	cmp	r2, #1
 800b9ba:	f300 80bf 	bgt.w	800bb3c <_dtoa_r+0x88c>
 800b9be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b9c0:	2a00      	cmp	r2, #0
 800b9c2:	f000 80b7 	beq.w	800bb34 <_dtoa_r+0x884>
 800b9c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b9ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b9cc:	4646      	mov	r6, r8
 800b9ce:	9a08      	ldr	r2, [sp, #32]
 800b9d0:	2101      	movs	r1, #1
 800b9d2:	441a      	add	r2, r3
 800b9d4:	4658      	mov	r0, fp
 800b9d6:	4498      	add	r8, r3
 800b9d8:	9208      	str	r2, [sp, #32]
 800b9da:	f000 fc21 	bl	800c220 <__i2b>
 800b9de:	4605      	mov	r5, r0
 800b9e0:	b15e      	cbz	r6, 800b9fa <_dtoa_r+0x74a>
 800b9e2:	9b08      	ldr	r3, [sp, #32]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	dd08      	ble.n	800b9fa <_dtoa_r+0x74a>
 800b9e8:	42b3      	cmp	r3, r6
 800b9ea:	9a08      	ldr	r2, [sp, #32]
 800b9ec:	bfa8      	it	ge
 800b9ee:	4633      	movge	r3, r6
 800b9f0:	eba8 0803 	sub.w	r8, r8, r3
 800b9f4:	1af6      	subs	r6, r6, r3
 800b9f6:	1ad3      	subs	r3, r2, r3
 800b9f8:	9308      	str	r3, [sp, #32]
 800b9fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9fc:	b1f3      	cbz	r3, 800ba3c <_dtoa_r+0x78c>
 800b9fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	f000 80b7 	beq.w	800bb74 <_dtoa_r+0x8c4>
 800ba06:	b18c      	cbz	r4, 800ba2c <_dtoa_r+0x77c>
 800ba08:	4629      	mov	r1, r5
 800ba0a:	4622      	mov	r2, r4
 800ba0c:	4658      	mov	r0, fp
 800ba0e:	f000 fcc7 	bl	800c3a0 <__pow5mult>
 800ba12:	464a      	mov	r2, r9
 800ba14:	4601      	mov	r1, r0
 800ba16:	4605      	mov	r5, r0
 800ba18:	4658      	mov	r0, fp
 800ba1a:	f000 fc17 	bl	800c24c <__multiply>
 800ba1e:	4649      	mov	r1, r9
 800ba20:	9004      	str	r0, [sp, #16]
 800ba22:	4658      	mov	r0, fp
 800ba24:	f000 fb48 	bl	800c0b8 <_Bfree>
 800ba28:	9b04      	ldr	r3, [sp, #16]
 800ba2a:	4699      	mov	r9, r3
 800ba2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba2e:	1b1a      	subs	r2, r3, r4
 800ba30:	d004      	beq.n	800ba3c <_dtoa_r+0x78c>
 800ba32:	4649      	mov	r1, r9
 800ba34:	4658      	mov	r0, fp
 800ba36:	f000 fcb3 	bl	800c3a0 <__pow5mult>
 800ba3a:	4681      	mov	r9, r0
 800ba3c:	2101      	movs	r1, #1
 800ba3e:	4658      	mov	r0, fp
 800ba40:	f000 fbee 	bl	800c220 <__i2b>
 800ba44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba46:	4604      	mov	r4, r0
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	f000 81cf 	beq.w	800bdec <_dtoa_r+0xb3c>
 800ba4e:	461a      	mov	r2, r3
 800ba50:	4601      	mov	r1, r0
 800ba52:	4658      	mov	r0, fp
 800ba54:	f000 fca4 	bl	800c3a0 <__pow5mult>
 800ba58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	4604      	mov	r4, r0
 800ba5e:	f300 8095 	bgt.w	800bb8c <_dtoa_r+0x8dc>
 800ba62:	9b02      	ldr	r3, [sp, #8]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	f040 8087 	bne.w	800bb78 <_dtoa_r+0x8c8>
 800ba6a:	9b03      	ldr	r3, [sp, #12]
 800ba6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	f040 8089 	bne.w	800bb88 <_dtoa_r+0x8d8>
 800ba76:	9b03      	ldr	r3, [sp, #12]
 800ba78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ba7c:	0d1b      	lsrs	r3, r3, #20
 800ba7e:	051b      	lsls	r3, r3, #20
 800ba80:	b12b      	cbz	r3, 800ba8e <_dtoa_r+0x7de>
 800ba82:	9b08      	ldr	r3, [sp, #32]
 800ba84:	3301      	adds	r3, #1
 800ba86:	9308      	str	r3, [sp, #32]
 800ba88:	f108 0801 	add.w	r8, r8, #1
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	f000 81b0 	beq.w	800bdf8 <_dtoa_r+0xb48>
 800ba98:	6923      	ldr	r3, [r4, #16]
 800ba9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ba9e:	6918      	ldr	r0, [r3, #16]
 800baa0:	f000 fb72 	bl	800c188 <__hi0bits>
 800baa4:	f1c0 0020 	rsb	r0, r0, #32
 800baa8:	9b08      	ldr	r3, [sp, #32]
 800baaa:	4418      	add	r0, r3
 800baac:	f010 001f 	ands.w	r0, r0, #31
 800bab0:	d077      	beq.n	800bba2 <_dtoa_r+0x8f2>
 800bab2:	f1c0 0320 	rsb	r3, r0, #32
 800bab6:	2b04      	cmp	r3, #4
 800bab8:	dd6b      	ble.n	800bb92 <_dtoa_r+0x8e2>
 800baba:	9b08      	ldr	r3, [sp, #32]
 800babc:	f1c0 001c 	rsb	r0, r0, #28
 800bac0:	4403      	add	r3, r0
 800bac2:	4480      	add	r8, r0
 800bac4:	4406      	add	r6, r0
 800bac6:	9308      	str	r3, [sp, #32]
 800bac8:	f1b8 0f00 	cmp.w	r8, #0
 800bacc:	dd05      	ble.n	800bada <_dtoa_r+0x82a>
 800bace:	4649      	mov	r1, r9
 800bad0:	4642      	mov	r2, r8
 800bad2:	4658      	mov	r0, fp
 800bad4:	f000 fcbe 	bl	800c454 <__lshift>
 800bad8:	4681      	mov	r9, r0
 800bada:	9b08      	ldr	r3, [sp, #32]
 800badc:	2b00      	cmp	r3, #0
 800bade:	dd05      	ble.n	800baec <_dtoa_r+0x83c>
 800bae0:	4621      	mov	r1, r4
 800bae2:	461a      	mov	r2, r3
 800bae4:	4658      	mov	r0, fp
 800bae6:	f000 fcb5 	bl	800c454 <__lshift>
 800baea:	4604      	mov	r4, r0
 800baec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d059      	beq.n	800bba6 <_dtoa_r+0x8f6>
 800baf2:	4621      	mov	r1, r4
 800baf4:	4648      	mov	r0, r9
 800baf6:	f000 fd19 	bl	800c52c <__mcmp>
 800bafa:	2800      	cmp	r0, #0
 800bafc:	da53      	bge.n	800bba6 <_dtoa_r+0x8f6>
 800bafe:	1e7b      	subs	r3, r7, #1
 800bb00:	9304      	str	r3, [sp, #16]
 800bb02:	4649      	mov	r1, r9
 800bb04:	2300      	movs	r3, #0
 800bb06:	220a      	movs	r2, #10
 800bb08:	4658      	mov	r0, fp
 800bb0a:	f000 faf7 	bl	800c0fc <__multadd>
 800bb0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb10:	4681      	mov	r9, r0
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	f000 8172 	beq.w	800bdfc <_dtoa_r+0xb4c>
 800bb18:	2300      	movs	r3, #0
 800bb1a:	4629      	mov	r1, r5
 800bb1c:	220a      	movs	r2, #10
 800bb1e:	4658      	mov	r0, fp
 800bb20:	f000 faec 	bl	800c0fc <__multadd>
 800bb24:	9b00      	ldr	r3, [sp, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	4605      	mov	r5, r0
 800bb2a:	dc67      	bgt.n	800bbfc <_dtoa_r+0x94c>
 800bb2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb2e:	2b02      	cmp	r3, #2
 800bb30:	dc41      	bgt.n	800bbb6 <_dtoa_r+0x906>
 800bb32:	e063      	b.n	800bbfc <_dtoa_r+0x94c>
 800bb34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bb36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bb3a:	e746      	b.n	800b9ca <_dtoa_r+0x71a>
 800bb3c:	9b07      	ldr	r3, [sp, #28]
 800bb3e:	1e5c      	subs	r4, r3, #1
 800bb40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb42:	42a3      	cmp	r3, r4
 800bb44:	bfbf      	itttt	lt
 800bb46:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bb48:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bb4a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bb4c:	1ae3      	sublt	r3, r4, r3
 800bb4e:	bfb4      	ite	lt
 800bb50:	18d2      	addlt	r2, r2, r3
 800bb52:	1b1c      	subge	r4, r3, r4
 800bb54:	9b07      	ldr	r3, [sp, #28]
 800bb56:	bfbc      	itt	lt
 800bb58:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bb5a:	2400      	movlt	r4, #0
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	bfb5      	itete	lt
 800bb60:	eba8 0603 	sublt.w	r6, r8, r3
 800bb64:	9b07      	ldrge	r3, [sp, #28]
 800bb66:	2300      	movlt	r3, #0
 800bb68:	4646      	movge	r6, r8
 800bb6a:	e730      	b.n	800b9ce <_dtoa_r+0x71e>
 800bb6c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bb6e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bb70:	4646      	mov	r6, r8
 800bb72:	e735      	b.n	800b9e0 <_dtoa_r+0x730>
 800bb74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb76:	e75c      	b.n	800ba32 <_dtoa_r+0x782>
 800bb78:	2300      	movs	r3, #0
 800bb7a:	e788      	b.n	800ba8e <_dtoa_r+0x7de>
 800bb7c:	3fe00000 	.word	0x3fe00000
 800bb80:	40240000 	.word	0x40240000
 800bb84:	40140000 	.word	0x40140000
 800bb88:	9b02      	ldr	r3, [sp, #8]
 800bb8a:	e780      	b.n	800ba8e <_dtoa_r+0x7de>
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb90:	e782      	b.n	800ba98 <_dtoa_r+0x7e8>
 800bb92:	d099      	beq.n	800bac8 <_dtoa_r+0x818>
 800bb94:	9a08      	ldr	r2, [sp, #32]
 800bb96:	331c      	adds	r3, #28
 800bb98:	441a      	add	r2, r3
 800bb9a:	4498      	add	r8, r3
 800bb9c:	441e      	add	r6, r3
 800bb9e:	9208      	str	r2, [sp, #32]
 800bba0:	e792      	b.n	800bac8 <_dtoa_r+0x818>
 800bba2:	4603      	mov	r3, r0
 800bba4:	e7f6      	b.n	800bb94 <_dtoa_r+0x8e4>
 800bba6:	9b07      	ldr	r3, [sp, #28]
 800bba8:	9704      	str	r7, [sp, #16]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	dc20      	bgt.n	800bbf0 <_dtoa_r+0x940>
 800bbae:	9300      	str	r3, [sp, #0]
 800bbb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbb2:	2b02      	cmp	r3, #2
 800bbb4:	dd1e      	ble.n	800bbf4 <_dtoa_r+0x944>
 800bbb6:	9b00      	ldr	r3, [sp, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	f47f aec0 	bne.w	800b93e <_dtoa_r+0x68e>
 800bbbe:	4621      	mov	r1, r4
 800bbc0:	2205      	movs	r2, #5
 800bbc2:	4658      	mov	r0, fp
 800bbc4:	f000 fa9a 	bl	800c0fc <__multadd>
 800bbc8:	4601      	mov	r1, r0
 800bbca:	4604      	mov	r4, r0
 800bbcc:	4648      	mov	r0, r9
 800bbce:	f000 fcad 	bl	800c52c <__mcmp>
 800bbd2:	2800      	cmp	r0, #0
 800bbd4:	f77f aeb3 	ble.w	800b93e <_dtoa_r+0x68e>
 800bbd8:	4656      	mov	r6, sl
 800bbda:	2331      	movs	r3, #49	@ 0x31
 800bbdc:	f806 3b01 	strb.w	r3, [r6], #1
 800bbe0:	9b04      	ldr	r3, [sp, #16]
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	9304      	str	r3, [sp, #16]
 800bbe6:	e6ae      	b.n	800b946 <_dtoa_r+0x696>
 800bbe8:	9c07      	ldr	r4, [sp, #28]
 800bbea:	9704      	str	r7, [sp, #16]
 800bbec:	4625      	mov	r5, r4
 800bbee:	e7f3      	b.n	800bbd8 <_dtoa_r+0x928>
 800bbf0:	9b07      	ldr	r3, [sp, #28]
 800bbf2:	9300      	str	r3, [sp, #0]
 800bbf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	f000 8104 	beq.w	800be04 <_dtoa_r+0xb54>
 800bbfc:	2e00      	cmp	r6, #0
 800bbfe:	dd05      	ble.n	800bc0c <_dtoa_r+0x95c>
 800bc00:	4629      	mov	r1, r5
 800bc02:	4632      	mov	r2, r6
 800bc04:	4658      	mov	r0, fp
 800bc06:	f000 fc25 	bl	800c454 <__lshift>
 800bc0a:	4605      	mov	r5, r0
 800bc0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d05a      	beq.n	800bcc8 <_dtoa_r+0xa18>
 800bc12:	6869      	ldr	r1, [r5, #4]
 800bc14:	4658      	mov	r0, fp
 800bc16:	f000 fa0f 	bl	800c038 <_Balloc>
 800bc1a:	4606      	mov	r6, r0
 800bc1c:	b928      	cbnz	r0, 800bc2a <_dtoa_r+0x97a>
 800bc1e:	4b84      	ldr	r3, [pc, #528]	@ (800be30 <_dtoa_r+0xb80>)
 800bc20:	4602      	mov	r2, r0
 800bc22:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bc26:	f7ff bb5a 	b.w	800b2de <_dtoa_r+0x2e>
 800bc2a:	692a      	ldr	r2, [r5, #16]
 800bc2c:	3202      	adds	r2, #2
 800bc2e:	0092      	lsls	r2, r2, #2
 800bc30:	f105 010c 	add.w	r1, r5, #12
 800bc34:	300c      	adds	r0, #12
 800bc36:	f000 fe4f 	bl	800c8d8 <memcpy>
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	4631      	mov	r1, r6
 800bc3e:	4658      	mov	r0, fp
 800bc40:	f000 fc08 	bl	800c454 <__lshift>
 800bc44:	f10a 0301 	add.w	r3, sl, #1
 800bc48:	9307      	str	r3, [sp, #28]
 800bc4a:	9b00      	ldr	r3, [sp, #0]
 800bc4c:	4453      	add	r3, sl
 800bc4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc50:	9b02      	ldr	r3, [sp, #8]
 800bc52:	f003 0301 	and.w	r3, r3, #1
 800bc56:	462f      	mov	r7, r5
 800bc58:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc5a:	4605      	mov	r5, r0
 800bc5c:	9b07      	ldr	r3, [sp, #28]
 800bc5e:	4621      	mov	r1, r4
 800bc60:	3b01      	subs	r3, #1
 800bc62:	4648      	mov	r0, r9
 800bc64:	9300      	str	r3, [sp, #0]
 800bc66:	f7ff fa9b 	bl	800b1a0 <quorem>
 800bc6a:	4639      	mov	r1, r7
 800bc6c:	9002      	str	r0, [sp, #8]
 800bc6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bc72:	4648      	mov	r0, r9
 800bc74:	f000 fc5a 	bl	800c52c <__mcmp>
 800bc78:	462a      	mov	r2, r5
 800bc7a:	9008      	str	r0, [sp, #32]
 800bc7c:	4621      	mov	r1, r4
 800bc7e:	4658      	mov	r0, fp
 800bc80:	f000 fc70 	bl	800c564 <__mdiff>
 800bc84:	68c2      	ldr	r2, [r0, #12]
 800bc86:	4606      	mov	r6, r0
 800bc88:	bb02      	cbnz	r2, 800bccc <_dtoa_r+0xa1c>
 800bc8a:	4601      	mov	r1, r0
 800bc8c:	4648      	mov	r0, r9
 800bc8e:	f000 fc4d 	bl	800c52c <__mcmp>
 800bc92:	4602      	mov	r2, r0
 800bc94:	4631      	mov	r1, r6
 800bc96:	4658      	mov	r0, fp
 800bc98:	920e      	str	r2, [sp, #56]	@ 0x38
 800bc9a:	f000 fa0d 	bl	800c0b8 <_Bfree>
 800bc9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bca0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bca2:	9e07      	ldr	r6, [sp, #28]
 800bca4:	ea43 0102 	orr.w	r1, r3, r2
 800bca8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcaa:	4319      	orrs	r1, r3
 800bcac:	d110      	bne.n	800bcd0 <_dtoa_r+0xa20>
 800bcae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bcb2:	d029      	beq.n	800bd08 <_dtoa_r+0xa58>
 800bcb4:	9b08      	ldr	r3, [sp, #32]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	dd02      	ble.n	800bcc0 <_dtoa_r+0xa10>
 800bcba:	9b02      	ldr	r3, [sp, #8]
 800bcbc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bcc0:	9b00      	ldr	r3, [sp, #0]
 800bcc2:	f883 8000 	strb.w	r8, [r3]
 800bcc6:	e63f      	b.n	800b948 <_dtoa_r+0x698>
 800bcc8:	4628      	mov	r0, r5
 800bcca:	e7bb      	b.n	800bc44 <_dtoa_r+0x994>
 800bccc:	2201      	movs	r2, #1
 800bcce:	e7e1      	b.n	800bc94 <_dtoa_r+0x9e4>
 800bcd0:	9b08      	ldr	r3, [sp, #32]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	db04      	blt.n	800bce0 <_dtoa_r+0xa30>
 800bcd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bcd8:	430b      	orrs	r3, r1
 800bcda:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bcdc:	430b      	orrs	r3, r1
 800bcde:	d120      	bne.n	800bd22 <_dtoa_r+0xa72>
 800bce0:	2a00      	cmp	r2, #0
 800bce2:	dded      	ble.n	800bcc0 <_dtoa_r+0xa10>
 800bce4:	4649      	mov	r1, r9
 800bce6:	2201      	movs	r2, #1
 800bce8:	4658      	mov	r0, fp
 800bcea:	f000 fbb3 	bl	800c454 <__lshift>
 800bcee:	4621      	mov	r1, r4
 800bcf0:	4681      	mov	r9, r0
 800bcf2:	f000 fc1b 	bl	800c52c <__mcmp>
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	dc03      	bgt.n	800bd02 <_dtoa_r+0xa52>
 800bcfa:	d1e1      	bne.n	800bcc0 <_dtoa_r+0xa10>
 800bcfc:	f018 0f01 	tst.w	r8, #1
 800bd00:	d0de      	beq.n	800bcc0 <_dtoa_r+0xa10>
 800bd02:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bd06:	d1d8      	bne.n	800bcba <_dtoa_r+0xa0a>
 800bd08:	9a00      	ldr	r2, [sp, #0]
 800bd0a:	2339      	movs	r3, #57	@ 0x39
 800bd0c:	7013      	strb	r3, [r2, #0]
 800bd0e:	4633      	mov	r3, r6
 800bd10:	461e      	mov	r6, r3
 800bd12:	3b01      	subs	r3, #1
 800bd14:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bd18:	2a39      	cmp	r2, #57	@ 0x39
 800bd1a:	d052      	beq.n	800bdc2 <_dtoa_r+0xb12>
 800bd1c:	3201      	adds	r2, #1
 800bd1e:	701a      	strb	r2, [r3, #0]
 800bd20:	e612      	b.n	800b948 <_dtoa_r+0x698>
 800bd22:	2a00      	cmp	r2, #0
 800bd24:	dd07      	ble.n	800bd36 <_dtoa_r+0xa86>
 800bd26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bd2a:	d0ed      	beq.n	800bd08 <_dtoa_r+0xa58>
 800bd2c:	9a00      	ldr	r2, [sp, #0]
 800bd2e:	f108 0301 	add.w	r3, r8, #1
 800bd32:	7013      	strb	r3, [r2, #0]
 800bd34:	e608      	b.n	800b948 <_dtoa_r+0x698>
 800bd36:	9b07      	ldr	r3, [sp, #28]
 800bd38:	9a07      	ldr	r2, [sp, #28]
 800bd3a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bd3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d028      	beq.n	800bd96 <_dtoa_r+0xae6>
 800bd44:	4649      	mov	r1, r9
 800bd46:	2300      	movs	r3, #0
 800bd48:	220a      	movs	r2, #10
 800bd4a:	4658      	mov	r0, fp
 800bd4c:	f000 f9d6 	bl	800c0fc <__multadd>
 800bd50:	42af      	cmp	r7, r5
 800bd52:	4681      	mov	r9, r0
 800bd54:	f04f 0300 	mov.w	r3, #0
 800bd58:	f04f 020a 	mov.w	r2, #10
 800bd5c:	4639      	mov	r1, r7
 800bd5e:	4658      	mov	r0, fp
 800bd60:	d107      	bne.n	800bd72 <_dtoa_r+0xac2>
 800bd62:	f000 f9cb 	bl	800c0fc <__multadd>
 800bd66:	4607      	mov	r7, r0
 800bd68:	4605      	mov	r5, r0
 800bd6a:	9b07      	ldr	r3, [sp, #28]
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	9307      	str	r3, [sp, #28]
 800bd70:	e774      	b.n	800bc5c <_dtoa_r+0x9ac>
 800bd72:	f000 f9c3 	bl	800c0fc <__multadd>
 800bd76:	4629      	mov	r1, r5
 800bd78:	4607      	mov	r7, r0
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	220a      	movs	r2, #10
 800bd7e:	4658      	mov	r0, fp
 800bd80:	f000 f9bc 	bl	800c0fc <__multadd>
 800bd84:	4605      	mov	r5, r0
 800bd86:	e7f0      	b.n	800bd6a <_dtoa_r+0xaba>
 800bd88:	9b00      	ldr	r3, [sp, #0]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	bfcc      	ite	gt
 800bd8e:	461e      	movgt	r6, r3
 800bd90:	2601      	movle	r6, #1
 800bd92:	4456      	add	r6, sl
 800bd94:	2700      	movs	r7, #0
 800bd96:	4649      	mov	r1, r9
 800bd98:	2201      	movs	r2, #1
 800bd9a:	4658      	mov	r0, fp
 800bd9c:	f000 fb5a 	bl	800c454 <__lshift>
 800bda0:	4621      	mov	r1, r4
 800bda2:	4681      	mov	r9, r0
 800bda4:	f000 fbc2 	bl	800c52c <__mcmp>
 800bda8:	2800      	cmp	r0, #0
 800bdaa:	dcb0      	bgt.n	800bd0e <_dtoa_r+0xa5e>
 800bdac:	d102      	bne.n	800bdb4 <_dtoa_r+0xb04>
 800bdae:	f018 0f01 	tst.w	r8, #1
 800bdb2:	d1ac      	bne.n	800bd0e <_dtoa_r+0xa5e>
 800bdb4:	4633      	mov	r3, r6
 800bdb6:	461e      	mov	r6, r3
 800bdb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bdbc:	2a30      	cmp	r2, #48	@ 0x30
 800bdbe:	d0fa      	beq.n	800bdb6 <_dtoa_r+0xb06>
 800bdc0:	e5c2      	b.n	800b948 <_dtoa_r+0x698>
 800bdc2:	459a      	cmp	sl, r3
 800bdc4:	d1a4      	bne.n	800bd10 <_dtoa_r+0xa60>
 800bdc6:	9b04      	ldr	r3, [sp, #16]
 800bdc8:	3301      	adds	r3, #1
 800bdca:	9304      	str	r3, [sp, #16]
 800bdcc:	2331      	movs	r3, #49	@ 0x31
 800bdce:	f88a 3000 	strb.w	r3, [sl]
 800bdd2:	e5b9      	b.n	800b948 <_dtoa_r+0x698>
 800bdd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bdd6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800be34 <_dtoa_r+0xb84>
 800bdda:	b11b      	cbz	r3, 800bde4 <_dtoa_r+0xb34>
 800bddc:	f10a 0308 	add.w	r3, sl, #8
 800bde0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bde2:	6013      	str	r3, [r2, #0]
 800bde4:	4650      	mov	r0, sl
 800bde6:	b019      	add	sp, #100	@ 0x64
 800bde8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdee:	2b01      	cmp	r3, #1
 800bdf0:	f77f ae37 	ble.w	800ba62 <_dtoa_r+0x7b2>
 800bdf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdf6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bdf8:	2001      	movs	r0, #1
 800bdfa:	e655      	b.n	800baa8 <_dtoa_r+0x7f8>
 800bdfc:	9b00      	ldr	r3, [sp, #0]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	f77f aed6 	ble.w	800bbb0 <_dtoa_r+0x900>
 800be04:	4656      	mov	r6, sl
 800be06:	4621      	mov	r1, r4
 800be08:	4648      	mov	r0, r9
 800be0a:	f7ff f9c9 	bl	800b1a0 <quorem>
 800be0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800be12:	f806 8b01 	strb.w	r8, [r6], #1
 800be16:	9b00      	ldr	r3, [sp, #0]
 800be18:	eba6 020a 	sub.w	r2, r6, sl
 800be1c:	4293      	cmp	r3, r2
 800be1e:	ddb3      	ble.n	800bd88 <_dtoa_r+0xad8>
 800be20:	4649      	mov	r1, r9
 800be22:	2300      	movs	r3, #0
 800be24:	220a      	movs	r2, #10
 800be26:	4658      	mov	r0, fp
 800be28:	f000 f968 	bl	800c0fc <__multadd>
 800be2c:	4681      	mov	r9, r0
 800be2e:	e7ea      	b.n	800be06 <_dtoa_r+0xb56>
 800be30:	08026aec 	.word	0x08026aec
 800be34:	08026a70 	.word	0x08026a70

0800be38 <_free_r>:
 800be38:	b538      	push	{r3, r4, r5, lr}
 800be3a:	4605      	mov	r5, r0
 800be3c:	2900      	cmp	r1, #0
 800be3e:	d041      	beq.n	800bec4 <_free_r+0x8c>
 800be40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be44:	1f0c      	subs	r4, r1, #4
 800be46:	2b00      	cmp	r3, #0
 800be48:	bfb8      	it	lt
 800be4a:	18e4      	addlt	r4, r4, r3
 800be4c:	f000 f8e8 	bl	800c020 <__malloc_lock>
 800be50:	4a1d      	ldr	r2, [pc, #116]	@ (800bec8 <_free_r+0x90>)
 800be52:	6813      	ldr	r3, [r2, #0]
 800be54:	b933      	cbnz	r3, 800be64 <_free_r+0x2c>
 800be56:	6063      	str	r3, [r4, #4]
 800be58:	6014      	str	r4, [r2, #0]
 800be5a:	4628      	mov	r0, r5
 800be5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be60:	f000 b8e4 	b.w	800c02c <__malloc_unlock>
 800be64:	42a3      	cmp	r3, r4
 800be66:	d908      	bls.n	800be7a <_free_r+0x42>
 800be68:	6820      	ldr	r0, [r4, #0]
 800be6a:	1821      	adds	r1, r4, r0
 800be6c:	428b      	cmp	r3, r1
 800be6e:	bf01      	itttt	eq
 800be70:	6819      	ldreq	r1, [r3, #0]
 800be72:	685b      	ldreq	r3, [r3, #4]
 800be74:	1809      	addeq	r1, r1, r0
 800be76:	6021      	streq	r1, [r4, #0]
 800be78:	e7ed      	b.n	800be56 <_free_r+0x1e>
 800be7a:	461a      	mov	r2, r3
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	b10b      	cbz	r3, 800be84 <_free_r+0x4c>
 800be80:	42a3      	cmp	r3, r4
 800be82:	d9fa      	bls.n	800be7a <_free_r+0x42>
 800be84:	6811      	ldr	r1, [r2, #0]
 800be86:	1850      	adds	r0, r2, r1
 800be88:	42a0      	cmp	r0, r4
 800be8a:	d10b      	bne.n	800bea4 <_free_r+0x6c>
 800be8c:	6820      	ldr	r0, [r4, #0]
 800be8e:	4401      	add	r1, r0
 800be90:	1850      	adds	r0, r2, r1
 800be92:	4283      	cmp	r3, r0
 800be94:	6011      	str	r1, [r2, #0]
 800be96:	d1e0      	bne.n	800be5a <_free_r+0x22>
 800be98:	6818      	ldr	r0, [r3, #0]
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	6053      	str	r3, [r2, #4]
 800be9e:	4408      	add	r0, r1
 800bea0:	6010      	str	r0, [r2, #0]
 800bea2:	e7da      	b.n	800be5a <_free_r+0x22>
 800bea4:	d902      	bls.n	800beac <_free_r+0x74>
 800bea6:	230c      	movs	r3, #12
 800bea8:	602b      	str	r3, [r5, #0]
 800beaa:	e7d6      	b.n	800be5a <_free_r+0x22>
 800beac:	6820      	ldr	r0, [r4, #0]
 800beae:	1821      	adds	r1, r4, r0
 800beb0:	428b      	cmp	r3, r1
 800beb2:	bf04      	itt	eq
 800beb4:	6819      	ldreq	r1, [r3, #0]
 800beb6:	685b      	ldreq	r3, [r3, #4]
 800beb8:	6063      	str	r3, [r4, #4]
 800beba:	bf04      	itt	eq
 800bebc:	1809      	addeq	r1, r1, r0
 800bebe:	6021      	streq	r1, [r4, #0]
 800bec0:	6054      	str	r4, [r2, #4]
 800bec2:	e7ca      	b.n	800be5a <_free_r+0x22>
 800bec4:	bd38      	pop	{r3, r4, r5, pc}
 800bec6:	bf00      	nop
 800bec8:	2000aae4 	.word	0x2000aae4

0800becc <malloc>:
 800becc:	4b02      	ldr	r3, [pc, #8]	@ (800bed8 <malloc+0xc>)
 800bece:	4601      	mov	r1, r0
 800bed0:	6818      	ldr	r0, [r3, #0]
 800bed2:	f000 b825 	b.w	800bf20 <_malloc_r>
 800bed6:	bf00      	nop
 800bed8:	2000004c 	.word	0x2000004c

0800bedc <sbrk_aligned>:
 800bedc:	b570      	push	{r4, r5, r6, lr}
 800bede:	4e0f      	ldr	r6, [pc, #60]	@ (800bf1c <sbrk_aligned+0x40>)
 800bee0:	460c      	mov	r4, r1
 800bee2:	6831      	ldr	r1, [r6, #0]
 800bee4:	4605      	mov	r5, r0
 800bee6:	b911      	cbnz	r1, 800beee <sbrk_aligned+0x12>
 800bee8:	f000 fce6 	bl	800c8b8 <_sbrk_r>
 800beec:	6030      	str	r0, [r6, #0]
 800beee:	4621      	mov	r1, r4
 800bef0:	4628      	mov	r0, r5
 800bef2:	f000 fce1 	bl	800c8b8 <_sbrk_r>
 800bef6:	1c43      	adds	r3, r0, #1
 800bef8:	d103      	bne.n	800bf02 <sbrk_aligned+0x26>
 800befa:	f04f 34ff 	mov.w	r4, #4294967295
 800befe:	4620      	mov	r0, r4
 800bf00:	bd70      	pop	{r4, r5, r6, pc}
 800bf02:	1cc4      	adds	r4, r0, #3
 800bf04:	f024 0403 	bic.w	r4, r4, #3
 800bf08:	42a0      	cmp	r0, r4
 800bf0a:	d0f8      	beq.n	800befe <sbrk_aligned+0x22>
 800bf0c:	1a21      	subs	r1, r4, r0
 800bf0e:	4628      	mov	r0, r5
 800bf10:	f000 fcd2 	bl	800c8b8 <_sbrk_r>
 800bf14:	3001      	adds	r0, #1
 800bf16:	d1f2      	bne.n	800befe <sbrk_aligned+0x22>
 800bf18:	e7ef      	b.n	800befa <sbrk_aligned+0x1e>
 800bf1a:	bf00      	nop
 800bf1c:	2000aae0 	.word	0x2000aae0

0800bf20 <_malloc_r>:
 800bf20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf24:	1ccd      	adds	r5, r1, #3
 800bf26:	f025 0503 	bic.w	r5, r5, #3
 800bf2a:	3508      	adds	r5, #8
 800bf2c:	2d0c      	cmp	r5, #12
 800bf2e:	bf38      	it	cc
 800bf30:	250c      	movcc	r5, #12
 800bf32:	2d00      	cmp	r5, #0
 800bf34:	4606      	mov	r6, r0
 800bf36:	db01      	blt.n	800bf3c <_malloc_r+0x1c>
 800bf38:	42a9      	cmp	r1, r5
 800bf3a:	d904      	bls.n	800bf46 <_malloc_r+0x26>
 800bf3c:	230c      	movs	r3, #12
 800bf3e:	6033      	str	r3, [r6, #0]
 800bf40:	2000      	movs	r0, #0
 800bf42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c01c <_malloc_r+0xfc>
 800bf4a:	f000 f869 	bl	800c020 <__malloc_lock>
 800bf4e:	f8d8 3000 	ldr.w	r3, [r8]
 800bf52:	461c      	mov	r4, r3
 800bf54:	bb44      	cbnz	r4, 800bfa8 <_malloc_r+0x88>
 800bf56:	4629      	mov	r1, r5
 800bf58:	4630      	mov	r0, r6
 800bf5a:	f7ff ffbf 	bl	800bedc <sbrk_aligned>
 800bf5e:	1c43      	adds	r3, r0, #1
 800bf60:	4604      	mov	r4, r0
 800bf62:	d158      	bne.n	800c016 <_malloc_r+0xf6>
 800bf64:	f8d8 4000 	ldr.w	r4, [r8]
 800bf68:	4627      	mov	r7, r4
 800bf6a:	2f00      	cmp	r7, #0
 800bf6c:	d143      	bne.n	800bff6 <_malloc_r+0xd6>
 800bf6e:	2c00      	cmp	r4, #0
 800bf70:	d04b      	beq.n	800c00a <_malloc_r+0xea>
 800bf72:	6823      	ldr	r3, [r4, #0]
 800bf74:	4639      	mov	r1, r7
 800bf76:	4630      	mov	r0, r6
 800bf78:	eb04 0903 	add.w	r9, r4, r3
 800bf7c:	f000 fc9c 	bl	800c8b8 <_sbrk_r>
 800bf80:	4581      	cmp	r9, r0
 800bf82:	d142      	bne.n	800c00a <_malloc_r+0xea>
 800bf84:	6821      	ldr	r1, [r4, #0]
 800bf86:	1a6d      	subs	r5, r5, r1
 800bf88:	4629      	mov	r1, r5
 800bf8a:	4630      	mov	r0, r6
 800bf8c:	f7ff ffa6 	bl	800bedc <sbrk_aligned>
 800bf90:	3001      	adds	r0, #1
 800bf92:	d03a      	beq.n	800c00a <_malloc_r+0xea>
 800bf94:	6823      	ldr	r3, [r4, #0]
 800bf96:	442b      	add	r3, r5
 800bf98:	6023      	str	r3, [r4, #0]
 800bf9a:	f8d8 3000 	ldr.w	r3, [r8]
 800bf9e:	685a      	ldr	r2, [r3, #4]
 800bfa0:	bb62      	cbnz	r2, 800bffc <_malloc_r+0xdc>
 800bfa2:	f8c8 7000 	str.w	r7, [r8]
 800bfa6:	e00f      	b.n	800bfc8 <_malloc_r+0xa8>
 800bfa8:	6822      	ldr	r2, [r4, #0]
 800bfaa:	1b52      	subs	r2, r2, r5
 800bfac:	d420      	bmi.n	800bff0 <_malloc_r+0xd0>
 800bfae:	2a0b      	cmp	r2, #11
 800bfb0:	d917      	bls.n	800bfe2 <_malloc_r+0xc2>
 800bfb2:	1961      	adds	r1, r4, r5
 800bfb4:	42a3      	cmp	r3, r4
 800bfb6:	6025      	str	r5, [r4, #0]
 800bfb8:	bf18      	it	ne
 800bfba:	6059      	strne	r1, [r3, #4]
 800bfbc:	6863      	ldr	r3, [r4, #4]
 800bfbe:	bf08      	it	eq
 800bfc0:	f8c8 1000 	streq.w	r1, [r8]
 800bfc4:	5162      	str	r2, [r4, r5]
 800bfc6:	604b      	str	r3, [r1, #4]
 800bfc8:	4630      	mov	r0, r6
 800bfca:	f000 f82f 	bl	800c02c <__malloc_unlock>
 800bfce:	f104 000b 	add.w	r0, r4, #11
 800bfd2:	1d23      	adds	r3, r4, #4
 800bfd4:	f020 0007 	bic.w	r0, r0, #7
 800bfd8:	1ac2      	subs	r2, r0, r3
 800bfda:	bf1c      	itt	ne
 800bfdc:	1a1b      	subne	r3, r3, r0
 800bfde:	50a3      	strne	r3, [r4, r2]
 800bfe0:	e7af      	b.n	800bf42 <_malloc_r+0x22>
 800bfe2:	6862      	ldr	r2, [r4, #4]
 800bfe4:	42a3      	cmp	r3, r4
 800bfe6:	bf0c      	ite	eq
 800bfe8:	f8c8 2000 	streq.w	r2, [r8]
 800bfec:	605a      	strne	r2, [r3, #4]
 800bfee:	e7eb      	b.n	800bfc8 <_malloc_r+0xa8>
 800bff0:	4623      	mov	r3, r4
 800bff2:	6864      	ldr	r4, [r4, #4]
 800bff4:	e7ae      	b.n	800bf54 <_malloc_r+0x34>
 800bff6:	463c      	mov	r4, r7
 800bff8:	687f      	ldr	r7, [r7, #4]
 800bffa:	e7b6      	b.n	800bf6a <_malloc_r+0x4a>
 800bffc:	461a      	mov	r2, r3
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	42a3      	cmp	r3, r4
 800c002:	d1fb      	bne.n	800bffc <_malloc_r+0xdc>
 800c004:	2300      	movs	r3, #0
 800c006:	6053      	str	r3, [r2, #4]
 800c008:	e7de      	b.n	800bfc8 <_malloc_r+0xa8>
 800c00a:	230c      	movs	r3, #12
 800c00c:	6033      	str	r3, [r6, #0]
 800c00e:	4630      	mov	r0, r6
 800c010:	f000 f80c 	bl	800c02c <__malloc_unlock>
 800c014:	e794      	b.n	800bf40 <_malloc_r+0x20>
 800c016:	6005      	str	r5, [r0, #0]
 800c018:	e7d6      	b.n	800bfc8 <_malloc_r+0xa8>
 800c01a:	bf00      	nop
 800c01c:	2000aae4 	.word	0x2000aae4

0800c020 <__malloc_lock>:
 800c020:	4801      	ldr	r0, [pc, #4]	@ (800c028 <__malloc_lock+0x8>)
 800c022:	f7ff b89c 	b.w	800b15e <__retarget_lock_acquire_recursive>
 800c026:	bf00      	nop
 800c028:	2000aadc 	.word	0x2000aadc

0800c02c <__malloc_unlock>:
 800c02c:	4801      	ldr	r0, [pc, #4]	@ (800c034 <__malloc_unlock+0x8>)
 800c02e:	f7ff b897 	b.w	800b160 <__retarget_lock_release_recursive>
 800c032:	bf00      	nop
 800c034:	2000aadc 	.word	0x2000aadc

0800c038 <_Balloc>:
 800c038:	b570      	push	{r4, r5, r6, lr}
 800c03a:	69c6      	ldr	r6, [r0, #28]
 800c03c:	4604      	mov	r4, r0
 800c03e:	460d      	mov	r5, r1
 800c040:	b976      	cbnz	r6, 800c060 <_Balloc+0x28>
 800c042:	2010      	movs	r0, #16
 800c044:	f7ff ff42 	bl	800becc <malloc>
 800c048:	4602      	mov	r2, r0
 800c04a:	61e0      	str	r0, [r4, #28]
 800c04c:	b920      	cbnz	r0, 800c058 <_Balloc+0x20>
 800c04e:	4b18      	ldr	r3, [pc, #96]	@ (800c0b0 <_Balloc+0x78>)
 800c050:	4818      	ldr	r0, [pc, #96]	@ (800c0b4 <_Balloc+0x7c>)
 800c052:	216b      	movs	r1, #107	@ 0x6b
 800c054:	f7ff f886 	bl	800b164 <__assert_func>
 800c058:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c05c:	6006      	str	r6, [r0, #0]
 800c05e:	60c6      	str	r6, [r0, #12]
 800c060:	69e6      	ldr	r6, [r4, #28]
 800c062:	68f3      	ldr	r3, [r6, #12]
 800c064:	b183      	cbz	r3, 800c088 <_Balloc+0x50>
 800c066:	69e3      	ldr	r3, [r4, #28]
 800c068:	68db      	ldr	r3, [r3, #12]
 800c06a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c06e:	b9b8      	cbnz	r0, 800c0a0 <_Balloc+0x68>
 800c070:	2101      	movs	r1, #1
 800c072:	fa01 f605 	lsl.w	r6, r1, r5
 800c076:	1d72      	adds	r2, r6, #5
 800c078:	0092      	lsls	r2, r2, #2
 800c07a:	4620      	mov	r0, r4
 800c07c:	f000 fc41 	bl	800c902 <_calloc_r>
 800c080:	b160      	cbz	r0, 800c09c <_Balloc+0x64>
 800c082:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c086:	e00e      	b.n	800c0a6 <_Balloc+0x6e>
 800c088:	2221      	movs	r2, #33	@ 0x21
 800c08a:	2104      	movs	r1, #4
 800c08c:	4620      	mov	r0, r4
 800c08e:	f000 fc38 	bl	800c902 <_calloc_r>
 800c092:	69e3      	ldr	r3, [r4, #28]
 800c094:	60f0      	str	r0, [r6, #12]
 800c096:	68db      	ldr	r3, [r3, #12]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d1e4      	bne.n	800c066 <_Balloc+0x2e>
 800c09c:	2000      	movs	r0, #0
 800c09e:	bd70      	pop	{r4, r5, r6, pc}
 800c0a0:	6802      	ldr	r2, [r0, #0]
 800c0a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c0ac:	e7f7      	b.n	800c09e <_Balloc+0x66>
 800c0ae:	bf00      	nop
 800c0b0:	08026a7d 	.word	0x08026a7d
 800c0b4:	08026afd 	.word	0x08026afd

0800c0b8 <_Bfree>:
 800c0b8:	b570      	push	{r4, r5, r6, lr}
 800c0ba:	69c6      	ldr	r6, [r0, #28]
 800c0bc:	4605      	mov	r5, r0
 800c0be:	460c      	mov	r4, r1
 800c0c0:	b976      	cbnz	r6, 800c0e0 <_Bfree+0x28>
 800c0c2:	2010      	movs	r0, #16
 800c0c4:	f7ff ff02 	bl	800becc <malloc>
 800c0c8:	4602      	mov	r2, r0
 800c0ca:	61e8      	str	r0, [r5, #28]
 800c0cc:	b920      	cbnz	r0, 800c0d8 <_Bfree+0x20>
 800c0ce:	4b09      	ldr	r3, [pc, #36]	@ (800c0f4 <_Bfree+0x3c>)
 800c0d0:	4809      	ldr	r0, [pc, #36]	@ (800c0f8 <_Bfree+0x40>)
 800c0d2:	218f      	movs	r1, #143	@ 0x8f
 800c0d4:	f7ff f846 	bl	800b164 <__assert_func>
 800c0d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0dc:	6006      	str	r6, [r0, #0]
 800c0de:	60c6      	str	r6, [r0, #12]
 800c0e0:	b13c      	cbz	r4, 800c0f2 <_Bfree+0x3a>
 800c0e2:	69eb      	ldr	r3, [r5, #28]
 800c0e4:	6862      	ldr	r2, [r4, #4]
 800c0e6:	68db      	ldr	r3, [r3, #12]
 800c0e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c0ec:	6021      	str	r1, [r4, #0]
 800c0ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c0f2:	bd70      	pop	{r4, r5, r6, pc}
 800c0f4:	08026a7d 	.word	0x08026a7d
 800c0f8:	08026afd 	.word	0x08026afd

0800c0fc <__multadd>:
 800c0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c100:	690d      	ldr	r5, [r1, #16]
 800c102:	4607      	mov	r7, r0
 800c104:	460c      	mov	r4, r1
 800c106:	461e      	mov	r6, r3
 800c108:	f101 0c14 	add.w	ip, r1, #20
 800c10c:	2000      	movs	r0, #0
 800c10e:	f8dc 3000 	ldr.w	r3, [ip]
 800c112:	b299      	uxth	r1, r3
 800c114:	fb02 6101 	mla	r1, r2, r1, r6
 800c118:	0c1e      	lsrs	r6, r3, #16
 800c11a:	0c0b      	lsrs	r3, r1, #16
 800c11c:	fb02 3306 	mla	r3, r2, r6, r3
 800c120:	b289      	uxth	r1, r1
 800c122:	3001      	adds	r0, #1
 800c124:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c128:	4285      	cmp	r5, r0
 800c12a:	f84c 1b04 	str.w	r1, [ip], #4
 800c12e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c132:	dcec      	bgt.n	800c10e <__multadd+0x12>
 800c134:	b30e      	cbz	r6, 800c17a <__multadd+0x7e>
 800c136:	68a3      	ldr	r3, [r4, #8]
 800c138:	42ab      	cmp	r3, r5
 800c13a:	dc19      	bgt.n	800c170 <__multadd+0x74>
 800c13c:	6861      	ldr	r1, [r4, #4]
 800c13e:	4638      	mov	r0, r7
 800c140:	3101      	adds	r1, #1
 800c142:	f7ff ff79 	bl	800c038 <_Balloc>
 800c146:	4680      	mov	r8, r0
 800c148:	b928      	cbnz	r0, 800c156 <__multadd+0x5a>
 800c14a:	4602      	mov	r2, r0
 800c14c:	4b0c      	ldr	r3, [pc, #48]	@ (800c180 <__multadd+0x84>)
 800c14e:	480d      	ldr	r0, [pc, #52]	@ (800c184 <__multadd+0x88>)
 800c150:	21ba      	movs	r1, #186	@ 0xba
 800c152:	f7ff f807 	bl	800b164 <__assert_func>
 800c156:	6922      	ldr	r2, [r4, #16]
 800c158:	3202      	adds	r2, #2
 800c15a:	f104 010c 	add.w	r1, r4, #12
 800c15e:	0092      	lsls	r2, r2, #2
 800c160:	300c      	adds	r0, #12
 800c162:	f000 fbb9 	bl	800c8d8 <memcpy>
 800c166:	4621      	mov	r1, r4
 800c168:	4638      	mov	r0, r7
 800c16a:	f7ff ffa5 	bl	800c0b8 <_Bfree>
 800c16e:	4644      	mov	r4, r8
 800c170:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c174:	3501      	adds	r5, #1
 800c176:	615e      	str	r6, [r3, #20]
 800c178:	6125      	str	r5, [r4, #16]
 800c17a:	4620      	mov	r0, r4
 800c17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c180:	08026aec 	.word	0x08026aec
 800c184:	08026afd 	.word	0x08026afd

0800c188 <__hi0bits>:
 800c188:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c18c:	4603      	mov	r3, r0
 800c18e:	bf36      	itet	cc
 800c190:	0403      	lslcc	r3, r0, #16
 800c192:	2000      	movcs	r0, #0
 800c194:	2010      	movcc	r0, #16
 800c196:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c19a:	bf3c      	itt	cc
 800c19c:	021b      	lslcc	r3, r3, #8
 800c19e:	3008      	addcc	r0, #8
 800c1a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c1a4:	bf3c      	itt	cc
 800c1a6:	011b      	lslcc	r3, r3, #4
 800c1a8:	3004      	addcc	r0, #4
 800c1aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1ae:	bf3c      	itt	cc
 800c1b0:	009b      	lslcc	r3, r3, #2
 800c1b2:	3002      	addcc	r0, #2
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	db05      	blt.n	800c1c4 <__hi0bits+0x3c>
 800c1b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c1bc:	f100 0001 	add.w	r0, r0, #1
 800c1c0:	bf08      	it	eq
 800c1c2:	2020      	moveq	r0, #32
 800c1c4:	4770      	bx	lr

0800c1c6 <__lo0bits>:
 800c1c6:	6803      	ldr	r3, [r0, #0]
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	f013 0007 	ands.w	r0, r3, #7
 800c1ce:	d00b      	beq.n	800c1e8 <__lo0bits+0x22>
 800c1d0:	07d9      	lsls	r1, r3, #31
 800c1d2:	d421      	bmi.n	800c218 <__lo0bits+0x52>
 800c1d4:	0798      	lsls	r0, r3, #30
 800c1d6:	bf49      	itett	mi
 800c1d8:	085b      	lsrmi	r3, r3, #1
 800c1da:	089b      	lsrpl	r3, r3, #2
 800c1dc:	2001      	movmi	r0, #1
 800c1de:	6013      	strmi	r3, [r2, #0]
 800c1e0:	bf5c      	itt	pl
 800c1e2:	6013      	strpl	r3, [r2, #0]
 800c1e4:	2002      	movpl	r0, #2
 800c1e6:	4770      	bx	lr
 800c1e8:	b299      	uxth	r1, r3
 800c1ea:	b909      	cbnz	r1, 800c1f0 <__lo0bits+0x2a>
 800c1ec:	0c1b      	lsrs	r3, r3, #16
 800c1ee:	2010      	movs	r0, #16
 800c1f0:	b2d9      	uxtb	r1, r3
 800c1f2:	b909      	cbnz	r1, 800c1f8 <__lo0bits+0x32>
 800c1f4:	3008      	adds	r0, #8
 800c1f6:	0a1b      	lsrs	r3, r3, #8
 800c1f8:	0719      	lsls	r1, r3, #28
 800c1fa:	bf04      	itt	eq
 800c1fc:	091b      	lsreq	r3, r3, #4
 800c1fe:	3004      	addeq	r0, #4
 800c200:	0799      	lsls	r1, r3, #30
 800c202:	bf04      	itt	eq
 800c204:	089b      	lsreq	r3, r3, #2
 800c206:	3002      	addeq	r0, #2
 800c208:	07d9      	lsls	r1, r3, #31
 800c20a:	d403      	bmi.n	800c214 <__lo0bits+0x4e>
 800c20c:	085b      	lsrs	r3, r3, #1
 800c20e:	f100 0001 	add.w	r0, r0, #1
 800c212:	d003      	beq.n	800c21c <__lo0bits+0x56>
 800c214:	6013      	str	r3, [r2, #0]
 800c216:	4770      	bx	lr
 800c218:	2000      	movs	r0, #0
 800c21a:	4770      	bx	lr
 800c21c:	2020      	movs	r0, #32
 800c21e:	4770      	bx	lr

0800c220 <__i2b>:
 800c220:	b510      	push	{r4, lr}
 800c222:	460c      	mov	r4, r1
 800c224:	2101      	movs	r1, #1
 800c226:	f7ff ff07 	bl	800c038 <_Balloc>
 800c22a:	4602      	mov	r2, r0
 800c22c:	b928      	cbnz	r0, 800c23a <__i2b+0x1a>
 800c22e:	4b05      	ldr	r3, [pc, #20]	@ (800c244 <__i2b+0x24>)
 800c230:	4805      	ldr	r0, [pc, #20]	@ (800c248 <__i2b+0x28>)
 800c232:	f240 1145 	movw	r1, #325	@ 0x145
 800c236:	f7fe ff95 	bl	800b164 <__assert_func>
 800c23a:	2301      	movs	r3, #1
 800c23c:	6144      	str	r4, [r0, #20]
 800c23e:	6103      	str	r3, [r0, #16]
 800c240:	bd10      	pop	{r4, pc}
 800c242:	bf00      	nop
 800c244:	08026aec 	.word	0x08026aec
 800c248:	08026afd 	.word	0x08026afd

0800c24c <__multiply>:
 800c24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c250:	4614      	mov	r4, r2
 800c252:	690a      	ldr	r2, [r1, #16]
 800c254:	6923      	ldr	r3, [r4, #16]
 800c256:	429a      	cmp	r2, r3
 800c258:	bfa8      	it	ge
 800c25a:	4623      	movge	r3, r4
 800c25c:	460f      	mov	r7, r1
 800c25e:	bfa4      	itt	ge
 800c260:	460c      	movge	r4, r1
 800c262:	461f      	movge	r7, r3
 800c264:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c268:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c26c:	68a3      	ldr	r3, [r4, #8]
 800c26e:	6861      	ldr	r1, [r4, #4]
 800c270:	eb0a 0609 	add.w	r6, sl, r9
 800c274:	42b3      	cmp	r3, r6
 800c276:	b085      	sub	sp, #20
 800c278:	bfb8      	it	lt
 800c27a:	3101      	addlt	r1, #1
 800c27c:	f7ff fedc 	bl	800c038 <_Balloc>
 800c280:	b930      	cbnz	r0, 800c290 <__multiply+0x44>
 800c282:	4602      	mov	r2, r0
 800c284:	4b44      	ldr	r3, [pc, #272]	@ (800c398 <__multiply+0x14c>)
 800c286:	4845      	ldr	r0, [pc, #276]	@ (800c39c <__multiply+0x150>)
 800c288:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c28c:	f7fe ff6a 	bl	800b164 <__assert_func>
 800c290:	f100 0514 	add.w	r5, r0, #20
 800c294:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c298:	462b      	mov	r3, r5
 800c29a:	2200      	movs	r2, #0
 800c29c:	4543      	cmp	r3, r8
 800c29e:	d321      	bcc.n	800c2e4 <__multiply+0x98>
 800c2a0:	f107 0114 	add.w	r1, r7, #20
 800c2a4:	f104 0214 	add.w	r2, r4, #20
 800c2a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c2ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c2b0:	9302      	str	r3, [sp, #8]
 800c2b2:	1b13      	subs	r3, r2, r4
 800c2b4:	3b15      	subs	r3, #21
 800c2b6:	f023 0303 	bic.w	r3, r3, #3
 800c2ba:	3304      	adds	r3, #4
 800c2bc:	f104 0715 	add.w	r7, r4, #21
 800c2c0:	42ba      	cmp	r2, r7
 800c2c2:	bf38      	it	cc
 800c2c4:	2304      	movcc	r3, #4
 800c2c6:	9301      	str	r3, [sp, #4]
 800c2c8:	9b02      	ldr	r3, [sp, #8]
 800c2ca:	9103      	str	r1, [sp, #12]
 800c2cc:	428b      	cmp	r3, r1
 800c2ce:	d80c      	bhi.n	800c2ea <__multiply+0x9e>
 800c2d0:	2e00      	cmp	r6, #0
 800c2d2:	dd03      	ble.n	800c2dc <__multiply+0x90>
 800c2d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d05b      	beq.n	800c394 <__multiply+0x148>
 800c2dc:	6106      	str	r6, [r0, #16]
 800c2de:	b005      	add	sp, #20
 800c2e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2e4:	f843 2b04 	str.w	r2, [r3], #4
 800c2e8:	e7d8      	b.n	800c29c <__multiply+0x50>
 800c2ea:	f8b1 a000 	ldrh.w	sl, [r1]
 800c2ee:	f1ba 0f00 	cmp.w	sl, #0
 800c2f2:	d024      	beq.n	800c33e <__multiply+0xf2>
 800c2f4:	f104 0e14 	add.w	lr, r4, #20
 800c2f8:	46a9      	mov	r9, r5
 800c2fa:	f04f 0c00 	mov.w	ip, #0
 800c2fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c302:	f8d9 3000 	ldr.w	r3, [r9]
 800c306:	fa1f fb87 	uxth.w	fp, r7
 800c30a:	b29b      	uxth	r3, r3
 800c30c:	fb0a 330b 	mla	r3, sl, fp, r3
 800c310:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c314:	f8d9 7000 	ldr.w	r7, [r9]
 800c318:	4463      	add	r3, ip
 800c31a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c31e:	fb0a c70b 	mla	r7, sl, fp, ip
 800c322:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c326:	b29b      	uxth	r3, r3
 800c328:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c32c:	4572      	cmp	r2, lr
 800c32e:	f849 3b04 	str.w	r3, [r9], #4
 800c332:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c336:	d8e2      	bhi.n	800c2fe <__multiply+0xb2>
 800c338:	9b01      	ldr	r3, [sp, #4]
 800c33a:	f845 c003 	str.w	ip, [r5, r3]
 800c33e:	9b03      	ldr	r3, [sp, #12]
 800c340:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c344:	3104      	adds	r1, #4
 800c346:	f1b9 0f00 	cmp.w	r9, #0
 800c34a:	d021      	beq.n	800c390 <__multiply+0x144>
 800c34c:	682b      	ldr	r3, [r5, #0]
 800c34e:	f104 0c14 	add.w	ip, r4, #20
 800c352:	46ae      	mov	lr, r5
 800c354:	f04f 0a00 	mov.w	sl, #0
 800c358:	f8bc b000 	ldrh.w	fp, [ip]
 800c35c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c360:	fb09 770b 	mla	r7, r9, fp, r7
 800c364:	4457      	add	r7, sl
 800c366:	b29b      	uxth	r3, r3
 800c368:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c36c:	f84e 3b04 	str.w	r3, [lr], #4
 800c370:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c374:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c378:	f8be 3000 	ldrh.w	r3, [lr]
 800c37c:	fb09 330a 	mla	r3, r9, sl, r3
 800c380:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c384:	4562      	cmp	r2, ip
 800c386:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c38a:	d8e5      	bhi.n	800c358 <__multiply+0x10c>
 800c38c:	9f01      	ldr	r7, [sp, #4]
 800c38e:	51eb      	str	r3, [r5, r7]
 800c390:	3504      	adds	r5, #4
 800c392:	e799      	b.n	800c2c8 <__multiply+0x7c>
 800c394:	3e01      	subs	r6, #1
 800c396:	e79b      	b.n	800c2d0 <__multiply+0x84>
 800c398:	08026aec 	.word	0x08026aec
 800c39c:	08026afd 	.word	0x08026afd

0800c3a0 <__pow5mult>:
 800c3a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3a4:	4615      	mov	r5, r2
 800c3a6:	f012 0203 	ands.w	r2, r2, #3
 800c3aa:	4607      	mov	r7, r0
 800c3ac:	460e      	mov	r6, r1
 800c3ae:	d007      	beq.n	800c3c0 <__pow5mult+0x20>
 800c3b0:	4c25      	ldr	r4, [pc, #148]	@ (800c448 <__pow5mult+0xa8>)
 800c3b2:	3a01      	subs	r2, #1
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c3ba:	f7ff fe9f 	bl	800c0fc <__multadd>
 800c3be:	4606      	mov	r6, r0
 800c3c0:	10ad      	asrs	r5, r5, #2
 800c3c2:	d03d      	beq.n	800c440 <__pow5mult+0xa0>
 800c3c4:	69fc      	ldr	r4, [r7, #28]
 800c3c6:	b97c      	cbnz	r4, 800c3e8 <__pow5mult+0x48>
 800c3c8:	2010      	movs	r0, #16
 800c3ca:	f7ff fd7f 	bl	800becc <malloc>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	61f8      	str	r0, [r7, #28]
 800c3d2:	b928      	cbnz	r0, 800c3e0 <__pow5mult+0x40>
 800c3d4:	4b1d      	ldr	r3, [pc, #116]	@ (800c44c <__pow5mult+0xac>)
 800c3d6:	481e      	ldr	r0, [pc, #120]	@ (800c450 <__pow5mult+0xb0>)
 800c3d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c3dc:	f7fe fec2 	bl	800b164 <__assert_func>
 800c3e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c3e4:	6004      	str	r4, [r0, #0]
 800c3e6:	60c4      	str	r4, [r0, #12]
 800c3e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c3ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c3f0:	b94c      	cbnz	r4, 800c406 <__pow5mult+0x66>
 800c3f2:	f240 2171 	movw	r1, #625	@ 0x271
 800c3f6:	4638      	mov	r0, r7
 800c3f8:	f7ff ff12 	bl	800c220 <__i2b>
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800c402:	4604      	mov	r4, r0
 800c404:	6003      	str	r3, [r0, #0]
 800c406:	f04f 0900 	mov.w	r9, #0
 800c40a:	07eb      	lsls	r3, r5, #31
 800c40c:	d50a      	bpl.n	800c424 <__pow5mult+0x84>
 800c40e:	4631      	mov	r1, r6
 800c410:	4622      	mov	r2, r4
 800c412:	4638      	mov	r0, r7
 800c414:	f7ff ff1a 	bl	800c24c <__multiply>
 800c418:	4631      	mov	r1, r6
 800c41a:	4680      	mov	r8, r0
 800c41c:	4638      	mov	r0, r7
 800c41e:	f7ff fe4b 	bl	800c0b8 <_Bfree>
 800c422:	4646      	mov	r6, r8
 800c424:	106d      	asrs	r5, r5, #1
 800c426:	d00b      	beq.n	800c440 <__pow5mult+0xa0>
 800c428:	6820      	ldr	r0, [r4, #0]
 800c42a:	b938      	cbnz	r0, 800c43c <__pow5mult+0x9c>
 800c42c:	4622      	mov	r2, r4
 800c42e:	4621      	mov	r1, r4
 800c430:	4638      	mov	r0, r7
 800c432:	f7ff ff0b 	bl	800c24c <__multiply>
 800c436:	6020      	str	r0, [r4, #0]
 800c438:	f8c0 9000 	str.w	r9, [r0]
 800c43c:	4604      	mov	r4, r0
 800c43e:	e7e4      	b.n	800c40a <__pow5mult+0x6a>
 800c440:	4630      	mov	r0, r6
 800c442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c446:	bf00      	nop
 800c448:	08026b58 	.word	0x08026b58
 800c44c:	08026a7d 	.word	0x08026a7d
 800c450:	08026afd 	.word	0x08026afd

0800c454 <__lshift>:
 800c454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c458:	460c      	mov	r4, r1
 800c45a:	6849      	ldr	r1, [r1, #4]
 800c45c:	6923      	ldr	r3, [r4, #16]
 800c45e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c462:	68a3      	ldr	r3, [r4, #8]
 800c464:	4607      	mov	r7, r0
 800c466:	4691      	mov	r9, r2
 800c468:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c46c:	f108 0601 	add.w	r6, r8, #1
 800c470:	42b3      	cmp	r3, r6
 800c472:	db0b      	blt.n	800c48c <__lshift+0x38>
 800c474:	4638      	mov	r0, r7
 800c476:	f7ff fddf 	bl	800c038 <_Balloc>
 800c47a:	4605      	mov	r5, r0
 800c47c:	b948      	cbnz	r0, 800c492 <__lshift+0x3e>
 800c47e:	4602      	mov	r2, r0
 800c480:	4b28      	ldr	r3, [pc, #160]	@ (800c524 <__lshift+0xd0>)
 800c482:	4829      	ldr	r0, [pc, #164]	@ (800c528 <__lshift+0xd4>)
 800c484:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c488:	f7fe fe6c 	bl	800b164 <__assert_func>
 800c48c:	3101      	adds	r1, #1
 800c48e:	005b      	lsls	r3, r3, #1
 800c490:	e7ee      	b.n	800c470 <__lshift+0x1c>
 800c492:	2300      	movs	r3, #0
 800c494:	f100 0114 	add.w	r1, r0, #20
 800c498:	f100 0210 	add.w	r2, r0, #16
 800c49c:	4618      	mov	r0, r3
 800c49e:	4553      	cmp	r3, sl
 800c4a0:	db33      	blt.n	800c50a <__lshift+0xb6>
 800c4a2:	6920      	ldr	r0, [r4, #16]
 800c4a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c4a8:	f104 0314 	add.w	r3, r4, #20
 800c4ac:	f019 091f 	ands.w	r9, r9, #31
 800c4b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c4b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c4b8:	d02b      	beq.n	800c512 <__lshift+0xbe>
 800c4ba:	f1c9 0e20 	rsb	lr, r9, #32
 800c4be:	468a      	mov	sl, r1
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	6818      	ldr	r0, [r3, #0]
 800c4c4:	fa00 f009 	lsl.w	r0, r0, r9
 800c4c8:	4310      	orrs	r0, r2
 800c4ca:	f84a 0b04 	str.w	r0, [sl], #4
 800c4ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4d2:	459c      	cmp	ip, r3
 800c4d4:	fa22 f20e 	lsr.w	r2, r2, lr
 800c4d8:	d8f3      	bhi.n	800c4c2 <__lshift+0x6e>
 800c4da:	ebac 0304 	sub.w	r3, ip, r4
 800c4de:	3b15      	subs	r3, #21
 800c4e0:	f023 0303 	bic.w	r3, r3, #3
 800c4e4:	3304      	adds	r3, #4
 800c4e6:	f104 0015 	add.w	r0, r4, #21
 800c4ea:	4584      	cmp	ip, r0
 800c4ec:	bf38      	it	cc
 800c4ee:	2304      	movcc	r3, #4
 800c4f0:	50ca      	str	r2, [r1, r3]
 800c4f2:	b10a      	cbz	r2, 800c4f8 <__lshift+0xa4>
 800c4f4:	f108 0602 	add.w	r6, r8, #2
 800c4f8:	3e01      	subs	r6, #1
 800c4fa:	4638      	mov	r0, r7
 800c4fc:	612e      	str	r6, [r5, #16]
 800c4fe:	4621      	mov	r1, r4
 800c500:	f7ff fdda 	bl	800c0b8 <_Bfree>
 800c504:	4628      	mov	r0, r5
 800c506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c50a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c50e:	3301      	adds	r3, #1
 800c510:	e7c5      	b.n	800c49e <__lshift+0x4a>
 800c512:	3904      	subs	r1, #4
 800c514:	f853 2b04 	ldr.w	r2, [r3], #4
 800c518:	f841 2f04 	str.w	r2, [r1, #4]!
 800c51c:	459c      	cmp	ip, r3
 800c51e:	d8f9      	bhi.n	800c514 <__lshift+0xc0>
 800c520:	e7ea      	b.n	800c4f8 <__lshift+0xa4>
 800c522:	bf00      	nop
 800c524:	08026aec 	.word	0x08026aec
 800c528:	08026afd 	.word	0x08026afd

0800c52c <__mcmp>:
 800c52c:	690a      	ldr	r2, [r1, #16]
 800c52e:	4603      	mov	r3, r0
 800c530:	6900      	ldr	r0, [r0, #16]
 800c532:	1a80      	subs	r0, r0, r2
 800c534:	b530      	push	{r4, r5, lr}
 800c536:	d10e      	bne.n	800c556 <__mcmp+0x2a>
 800c538:	3314      	adds	r3, #20
 800c53a:	3114      	adds	r1, #20
 800c53c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c540:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c544:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c548:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c54c:	4295      	cmp	r5, r2
 800c54e:	d003      	beq.n	800c558 <__mcmp+0x2c>
 800c550:	d205      	bcs.n	800c55e <__mcmp+0x32>
 800c552:	f04f 30ff 	mov.w	r0, #4294967295
 800c556:	bd30      	pop	{r4, r5, pc}
 800c558:	42a3      	cmp	r3, r4
 800c55a:	d3f3      	bcc.n	800c544 <__mcmp+0x18>
 800c55c:	e7fb      	b.n	800c556 <__mcmp+0x2a>
 800c55e:	2001      	movs	r0, #1
 800c560:	e7f9      	b.n	800c556 <__mcmp+0x2a>
	...

0800c564 <__mdiff>:
 800c564:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c568:	4689      	mov	r9, r1
 800c56a:	4606      	mov	r6, r0
 800c56c:	4611      	mov	r1, r2
 800c56e:	4648      	mov	r0, r9
 800c570:	4614      	mov	r4, r2
 800c572:	f7ff ffdb 	bl	800c52c <__mcmp>
 800c576:	1e05      	subs	r5, r0, #0
 800c578:	d112      	bne.n	800c5a0 <__mdiff+0x3c>
 800c57a:	4629      	mov	r1, r5
 800c57c:	4630      	mov	r0, r6
 800c57e:	f7ff fd5b 	bl	800c038 <_Balloc>
 800c582:	4602      	mov	r2, r0
 800c584:	b928      	cbnz	r0, 800c592 <__mdiff+0x2e>
 800c586:	4b3f      	ldr	r3, [pc, #252]	@ (800c684 <__mdiff+0x120>)
 800c588:	f240 2137 	movw	r1, #567	@ 0x237
 800c58c:	483e      	ldr	r0, [pc, #248]	@ (800c688 <__mdiff+0x124>)
 800c58e:	f7fe fde9 	bl	800b164 <__assert_func>
 800c592:	2301      	movs	r3, #1
 800c594:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c598:	4610      	mov	r0, r2
 800c59a:	b003      	add	sp, #12
 800c59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5a0:	bfbc      	itt	lt
 800c5a2:	464b      	movlt	r3, r9
 800c5a4:	46a1      	movlt	r9, r4
 800c5a6:	4630      	mov	r0, r6
 800c5a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c5ac:	bfba      	itte	lt
 800c5ae:	461c      	movlt	r4, r3
 800c5b0:	2501      	movlt	r5, #1
 800c5b2:	2500      	movge	r5, #0
 800c5b4:	f7ff fd40 	bl	800c038 <_Balloc>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	b918      	cbnz	r0, 800c5c4 <__mdiff+0x60>
 800c5bc:	4b31      	ldr	r3, [pc, #196]	@ (800c684 <__mdiff+0x120>)
 800c5be:	f240 2145 	movw	r1, #581	@ 0x245
 800c5c2:	e7e3      	b.n	800c58c <__mdiff+0x28>
 800c5c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c5c8:	6926      	ldr	r6, [r4, #16]
 800c5ca:	60c5      	str	r5, [r0, #12]
 800c5cc:	f109 0310 	add.w	r3, r9, #16
 800c5d0:	f109 0514 	add.w	r5, r9, #20
 800c5d4:	f104 0e14 	add.w	lr, r4, #20
 800c5d8:	f100 0b14 	add.w	fp, r0, #20
 800c5dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c5e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c5e4:	9301      	str	r3, [sp, #4]
 800c5e6:	46d9      	mov	r9, fp
 800c5e8:	f04f 0c00 	mov.w	ip, #0
 800c5ec:	9b01      	ldr	r3, [sp, #4]
 800c5ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c5f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c5f6:	9301      	str	r3, [sp, #4]
 800c5f8:	fa1f f38a 	uxth.w	r3, sl
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	b283      	uxth	r3, r0
 800c600:	1acb      	subs	r3, r1, r3
 800c602:	0c00      	lsrs	r0, r0, #16
 800c604:	4463      	add	r3, ip
 800c606:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c60a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c60e:	b29b      	uxth	r3, r3
 800c610:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c614:	4576      	cmp	r6, lr
 800c616:	f849 3b04 	str.w	r3, [r9], #4
 800c61a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c61e:	d8e5      	bhi.n	800c5ec <__mdiff+0x88>
 800c620:	1b33      	subs	r3, r6, r4
 800c622:	3b15      	subs	r3, #21
 800c624:	f023 0303 	bic.w	r3, r3, #3
 800c628:	3415      	adds	r4, #21
 800c62a:	3304      	adds	r3, #4
 800c62c:	42a6      	cmp	r6, r4
 800c62e:	bf38      	it	cc
 800c630:	2304      	movcc	r3, #4
 800c632:	441d      	add	r5, r3
 800c634:	445b      	add	r3, fp
 800c636:	461e      	mov	r6, r3
 800c638:	462c      	mov	r4, r5
 800c63a:	4544      	cmp	r4, r8
 800c63c:	d30e      	bcc.n	800c65c <__mdiff+0xf8>
 800c63e:	f108 0103 	add.w	r1, r8, #3
 800c642:	1b49      	subs	r1, r1, r5
 800c644:	f021 0103 	bic.w	r1, r1, #3
 800c648:	3d03      	subs	r5, #3
 800c64a:	45a8      	cmp	r8, r5
 800c64c:	bf38      	it	cc
 800c64e:	2100      	movcc	r1, #0
 800c650:	440b      	add	r3, r1
 800c652:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c656:	b191      	cbz	r1, 800c67e <__mdiff+0x11a>
 800c658:	6117      	str	r7, [r2, #16]
 800c65a:	e79d      	b.n	800c598 <__mdiff+0x34>
 800c65c:	f854 1b04 	ldr.w	r1, [r4], #4
 800c660:	46e6      	mov	lr, ip
 800c662:	0c08      	lsrs	r0, r1, #16
 800c664:	fa1c fc81 	uxtah	ip, ip, r1
 800c668:	4471      	add	r1, lr
 800c66a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c66e:	b289      	uxth	r1, r1
 800c670:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c674:	f846 1b04 	str.w	r1, [r6], #4
 800c678:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c67c:	e7dd      	b.n	800c63a <__mdiff+0xd6>
 800c67e:	3f01      	subs	r7, #1
 800c680:	e7e7      	b.n	800c652 <__mdiff+0xee>
 800c682:	bf00      	nop
 800c684:	08026aec 	.word	0x08026aec
 800c688:	08026afd 	.word	0x08026afd

0800c68c <__d2b>:
 800c68c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c690:	460f      	mov	r7, r1
 800c692:	2101      	movs	r1, #1
 800c694:	ec59 8b10 	vmov	r8, r9, d0
 800c698:	4616      	mov	r6, r2
 800c69a:	f7ff fccd 	bl	800c038 <_Balloc>
 800c69e:	4604      	mov	r4, r0
 800c6a0:	b930      	cbnz	r0, 800c6b0 <__d2b+0x24>
 800c6a2:	4602      	mov	r2, r0
 800c6a4:	4b23      	ldr	r3, [pc, #140]	@ (800c734 <__d2b+0xa8>)
 800c6a6:	4824      	ldr	r0, [pc, #144]	@ (800c738 <__d2b+0xac>)
 800c6a8:	f240 310f 	movw	r1, #783	@ 0x30f
 800c6ac:	f7fe fd5a 	bl	800b164 <__assert_func>
 800c6b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c6b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c6b8:	b10d      	cbz	r5, 800c6be <__d2b+0x32>
 800c6ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c6be:	9301      	str	r3, [sp, #4]
 800c6c0:	f1b8 0300 	subs.w	r3, r8, #0
 800c6c4:	d023      	beq.n	800c70e <__d2b+0x82>
 800c6c6:	4668      	mov	r0, sp
 800c6c8:	9300      	str	r3, [sp, #0]
 800c6ca:	f7ff fd7c 	bl	800c1c6 <__lo0bits>
 800c6ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c6d2:	b1d0      	cbz	r0, 800c70a <__d2b+0x7e>
 800c6d4:	f1c0 0320 	rsb	r3, r0, #32
 800c6d8:	fa02 f303 	lsl.w	r3, r2, r3
 800c6dc:	430b      	orrs	r3, r1
 800c6de:	40c2      	lsrs	r2, r0
 800c6e0:	6163      	str	r3, [r4, #20]
 800c6e2:	9201      	str	r2, [sp, #4]
 800c6e4:	9b01      	ldr	r3, [sp, #4]
 800c6e6:	61a3      	str	r3, [r4, #24]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	bf0c      	ite	eq
 800c6ec:	2201      	moveq	r2, #1
 800c6ee:	2202      	movne	r2, #2
 800c6f0:	6122      	str	r2, [r4, #16]
 800c6f2:	b1a5      	cbz	r5, 800c71e <__d2b+0x92>
 800c6f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c6f8:	4405      	add	r5, r0
 800c6fa:	603d      	str	r5, [r7, #0]
 800c6fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c700:	6030      	str	r0, [r6, #0]
 800c702:	4620      	mov	r0, r4
 800c704:	b003      	add	sp, #12
 800c706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c70a:	6161      	str	r1, [r4, #20]
 800c70c:	e7ea      	b.n	800c6e4 <__d2b+0x58>
 800c70e:	a801      	add	r0, sp, #4
 800c710:	f7ff fd59 	bl	800c1c6 <__lo0bits>
 800c714:	9b01      	ldr	r3, [sp, #4]
 800c716:	6163      	str	r3, [r4, #20]
 800c718:	3020      	adds	r0, #32
 800c71a:	2201      	movs	r2, #1
 800c71c:	e7e8      	b.n	800c6f0 <__d2b+0x64>
 800c71e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c722:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c726:	6038      	str	r0, [r7, #0]
 800c728:	6918      	ldr	r0, [r3, #16]
 800c72a:	f7ff fd2d 	bl	800c188 <__hi0bits>
 800c72e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c732:	e7e5      	b.n	800c700 <__d2b+0x74>
 800c734:	08026aec 	.word	0x08026aec
 800c738:	08026afd 	.word	0x08026afd

0800c73c <__sflush_r>:
 800c73c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c744:	0716      	lsls	r6, r2, #28
 800c746:	4605      	mov	r5, r0
 800c748:	460c      	mov	r4, r1
 800c74a:	d454      	bmi.n	800c7f6 <__sflush_r+0xba>
 800c74c:	684b      	ldr	r3, [r1, #4]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	dc02      	bgt.n	800c758 <__sflush_r+0x1c>
 800c752:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c754:	2b00      	cmp	r3, #0
 800c756:	dd48      	ble.n	800c7ea <__sflush_r+0xae>
 800c758:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c75a:	2e00      	cmp	r6, #0
 800c75c:	d045      	beq.n	800c7ea <__sflush_r+0xae>
 800c75e:	2300      	movs	r3, #0
 800c760:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c764:	682f      	ldr	r7, [r5, #0]
 800c766:	6a21      	ldr	r1, [r4, #32]
 800c768:	602b      	str	r3, [r5, #0]
 800c76a:	d030      	beq.n	800c7ce <__sflush_r+0x92>
 800c76c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c76e:	89a3      	ldrh	r3, [r4, #12]
 800c770:	0759      	lsls	r1, r3, #29
 800c772:	d505      	bpl.n	800c780 <__sflush_r+0x44>
 800c774:	6863      	ldr	r3, [r4, #4]
 800c776:	1ad2      	subs	r2, r2, r3
 800c778:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c77a:	b10b      	cbz	r3, 800c780 <__sflush_r+0x44>
 800c77c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c77e:	1ad2      	subs	r2, r2, r3
 800c780:	2300      	movs	r3, #0
 800c782:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c784:	6a21      	ldr	r1, [r4, #32]
 800c786:	4628      	mov	r0, r5
 800c788:	47b0      	blx	r6
 800c78a:	1c43      	adds	r3, r0, #1
 800c78c:	89a3      	ldrh	r3, [r4, #12]
 800c78e:	d106      	bne.n	800c79e <__sflush_r+0x62>
 800c790:	6829      	ldr	r1, [r5, #0]
 800c792:	291d      	cmp	r1, #29
 800c794:	d82b      	bhi.n	800c7ee <__sflush_r+0xb2>
 800c796:	4a2a      	ldr	r2, [pc, #168]	@ (800c840 <__sflush_r+0x104>)
 800c798:	410a      	asrs	r2, r1
 800c79a:	07d6      	lsls	r6, r2, #31
 800c79c:	d427      	bmi.n	800c7ee <__sflush_r+0xb2>
 800c79e:	2200      	movs	r2, #0
 800c7a0:	6062      	str	r2, [r4, #4]
 800c7a2:	04d9      	lsls	r1, r3, #19
 800c7a4:	6922      	ldr	r2, [r4, #16]
 800c7a6:	6022      	str	r2, [r4, #0]
 800c7a8:	d504      	bpl.n	800c7b4 <__sflush_r+0x78>
 800c7aa:	1c42      	adds	r2, r0, #1
 800c7ac:	d101      	bne.n	800c7b2 <__sflush_r+0x76>
 800c7ae:	682b      	ldr	r3, [r5, #0]
 800c7b0:	b903      	cbnz	r3, 800c7b4 <__sflush_r+0x78>
 800c7b2:	6560      	str	r0, [r4, #84]	@ 0x54
 800c7b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c7b6:	602f      	str	r7, [r5, #0]
 800c7b8:	b1b9      	cbz	r1, 800c7ea <__sflush_r+0xae>
 800c7ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c7be:	4299      	cmp	r1, r3
 800c7c0:	d002      	beq.n	800c7c8 <__sflush_r+0x8c>
 800c7c2:	4628      	mov	r0, r5
 800c7c4:	f7ff fb38 	bl	800be38 <_free_r>
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	6363      	str	r3, [r4, #52]	@ 0x34
 800c7cc:	e00d      	b.n	800c7ea <__sflush_r+0xae>
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	4628      	mov	r0, r5
 800c7d2:	47b0      	blx	r6
 800c7d4:	4602      	mov	r2, r0
 800c7d6:	1c50      	adds	r0, r2, #1
 800c7d8:	d1c9      	bne.n	800c76e <__sflush_r+0x32>
 800c7da:	682b      	ldr	r3, [r5, #0]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d0c6      	beq.n	800c76e <__sflush_r+0x32>
 800c7e0:	2b1d      	cmp	r3, #29
 800c7e2:	d001      	beq.n	800c7e8 <__sflush_r+0xac>
 800c7e4:	2b16      	cmp	r3, #22
 800c7e6:	d11e      	bne.n	800c826 <__sflush_r+0xea>
 800c7e8:	602f      	str	r7, [r5, #0]
 800c7ea:	2000      	movs	r0, #0
 800c7ec:	e022      	b.n	800c834 <__sflush_r+0xf8>
 800c7ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7f2:	b21b      	sxth	r3, r3
 800c7f4:	e01b      	b.n	800c82e <__sflush_r+0xf2>
 800c7f6:	690f      	ldr	r7, [r1, #16]
 800c7f8:	2f00      	cmp	r7, #0
 800c7fa:	d0f6      	beq.n	800c7ea <__sflush_r+0xae>
 800c7fc:	0793      	lsls	r3, r2, #30
 800c7fe:	680e      	ldr	r6, [r1, #0]
 800c800:	bf08      	it	eq
 800c802:	694b      	ldreq	r3, [r1, #20]
 800c804:	600f      	str	r7, [r1, #0]
 800c806:	bf18      	it	ne
 800c808:	2300      	movne	r3, #0
 800c80a:	eba6 0807 	sub.w	r8, r6, r7
 800c80e:	608b      	str	r3, [r1, #8]
 800c810:	f1b8 0f00 	cmp.w	r8, #0
 800c814:	dde9      	ble.n	800c7ea <__sflush_r+0xae>
 800c816:	6a21      	ldr	r1, [r4, #32]
 800c818:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c81a:	4643      	mov	r3, r8
 800c81c:	463a      	mov	r2, r7
 800c81e:	4628      	mov	r0, r5
 800c820:	47b0      	blx	r6
 800c822:	2800      	cmp	r0, #0
 800c824:	dc08      	bgt.n	800c838 <__sflush_r+0xfc>
 800c826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c82a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c82e:	81a3      	strh	r3, [r4, #12]
 800c830:	f04f 30ff 	mov.w	r0, #4294967295
 800c834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c838:	4407      	add	r7, r0
 800c83a:	eba8 0800 	sub.w	r8, r8, r0
 800c83e:	e7e7      	b.n	800c810 <__sflush_r+0xd4>
 800c840:	dfbffffe 	.word	0xdfbffffe

0800c844 <_fflush_r>:
 800c844:	b538      	push	{r3, r4, r5, lr}
 800c846:	690b      	ldr	r3, [r1, #16]
 800c848:	4605      	mov	r5, r0
 800c84a:	460c      	mov	r4, r1
 800c84c:	b913      	cbnz	r3, 800c854 <_fflush_r+0x10>
 800c84e:	2500      	movs	r5, #0
 800c850:	4628      	mov	r0, r5
 800c852:	bd38      	pop	{r3, r4, r5, pc}
 800c854:	b118      	cbz	r0, 800c85e <_fflush_r+0x1a>
 800c856:	6a03      	ldr	r3, [r0, #32]
 800c858:	b90b      	cbnz	r3, 800c85e <_fflush_r+0x1a>
 800c85a:	f7fe fb89 	bl	800af70 <__sinit>
 800c85e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d0f3      	beq.n	800c84e <_fflush_r+0xa>
 800c866:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c868:	07d0      	lsls	r0, r2, #31
 800c86a:	d404      	bmi.n	800c876 <_fflush_r+0x32>
 800c86c:	0599      	lsls	r1, r3, #22
 800c86e:	d402      	bmi.n	800c876 <_fflush_r+0x32>
 800c870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c872:	f7fe fc74 	bl	800b15e <__retarget_lock_acquire_recursive>
 800c876:	4628      	mov	r0, r5
 800c878:	4621      	mov	r1, r4
 800c87a:	f7ff ff5f 	bl	800c73c <__sflush_r>
 800c87e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c880:	07da      	lsls	r2, r3, #31
 800c882:	4605      	mov	r5, r0
 800c884:	d4e4      	bmi.n	800c850 <_fflush_r+0xc>
 800c886:	89a3      	ldrh	r3, [r4, #12]
 800c888:	059b      	lsls	r3, r3, #22
 800c88a:	d4e1      	bmi.n	800c850 <_fflush_r+0xc>
 800c88c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c88e:	f7fe fc67 	bl	800b160 <__retarget_lock_release_recursive>
 800c892:	e7dd      	b.n	800c850 <_fflush_r+0xc>

0800c894 <fiprintf>:
 800c894:	b40e      	push	{r1, r2, r3}
 800c896:	b503      	push	{r0, r1, lr}
 800c898:	4601      	mov	r1, r0
 800c89a:	ab03      	add	r3, sp, #12
 800c89c:	4805      	ldr	r0, [pc, #20]	@ (800c8b4 <fiprintf+0x20>)
 800c89e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8a2:	6800      	ldr	r0, [r0, #0]
 800c8a4:	9301      	str	r3, [sp, #4]
 800c8a6:	f000 f889 	bl	800c9bc <_vfiprintf_r>
 800c8aa:	b002      	add	sp, #8
 800c8ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8b0:	b003      	add	sp, #12
 800c8b2:	4770      	bx	lr
 800c8b4:	2000004c 	.word	0x2000004c

0800c8b8 <_sbrk_r>:
 800c8b8:	b538      	push	{r3, r4, r5, lr}
 800c8ba:	4d06      	ldr	r5, [pc, #24]	@ (800c8d4 <_sbrk_r+0x1c>)
 800c8bc:	2300      	movs	r3, #0
 800c8be:	4604      	mov	r4, r0
 800c8c0:	4608      	mov	r0, r1
 800c8c2:	602b      	str	r3, [r5, #0]
 800c8c4:	f7f5 fe94 	bl	80025f0 <_sbrk>
 800c8c8:	1c43      	adds	r3, r0, #1
 800c8ca:	d102      	bne.n	800c8d2 <_sbrk_r+0x1a>
 800c8cc:	682b      	ldr	r3, [r5, #0]
 800c8ce:	b103      	cbz	r3, 800c8d2 <_sbrk_r+0x1a>
 800c8d0:	6023      	str	r3, [r4, #0]
 800c8d2:	bd38      	pop	{r3, r4, r5, pc}
 800c8d4:	2000aad8 	.word	0x2000aad8

0800c8d8 <memcpy>:
 800c8d8:	440a      	add	r2, r1
 800c8da:	4291      	cmp	r1, r2
 800c8dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c8e0:	d100      	bne.n	800c8e4 <memcpy+0xc>
 800c8e2:	4770      	bx	lr
 800c8e4:	b510      	push	{r4, lr}
 800c8e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c8ee:	4291      	cmp	r1, r2
 800c8f0:	d1f9      	bne.n	800c8e6 <memcpy+0xe>
 800c8f2:	bd10      	pop	{r4, pc}

0800c8f4 <abort>:
 800c8f4:	b508      	push	{r3, lr}
 800c8f6:	2006      	movs	r0, #6
 800c8f8:	f000 fa34 	bl	800cd64 <raise>
 800c8fc:	2001      	movs	r0, #1
 800c8fe:	f7f5 fdff 	bl	8002500 <_exit>

0800c902 <_calloc_r>:
 800c902:	b570      	push	{r4, r5, r6, lr}
 800c904:	fba1 5402 	umull	r5, r4, r1, r2
 800c908:	b93c      	cbnz	r4, 800c91a <_calloc_r+0x18>
 800c90a:	4629      	mov	r1, r5
 800c90c:	f7ff fb08 	bl	800bf20 <_malloc_r>
 800c910:	4606      	mov	r6, r0
 800c912:	b928      	cbnz	r0, 800c920 <_calloc_r+0x1e>
 800c914:	2600      	movs	r6, #0
 800c916:	4630      	mov	r0, r6
 800c918:	bd70      	pop	{r4, r5, r6, pc}
 800c91a:	220c      	movs	r2, #12
 800c91c:	6002      	str	r2, [r0, #0]
 800c91e:	e7f9      	b.n	800c914 <_calloc_r+0x12>
 800c920:	462a      	mov	r2, r5
 800c922:	4621      	mov	r1, r4
 800c924:	f7fe fb9d 	bl	800b062 <memset>
 800c928:	e7f5      	b.n	800c916 <_calloc_r+0x14>

0800c92a <__ascii_mbtowc>:
 800c92a:	b082      	sub	sp, #8
 800c92c:	b901      	cbnz	r1, 800c930 <__ascii_mbtowc+0x6>
 800c92e:	a901      	add	r1, sp, #4
 800c930:	b142      	cbz	r2, 800c944 <__ascii_mbtowc+0x1a>
 800c932:	b14b      	cbz	r3, 800c948 <__ascii_mbtowc+0x1e>
 800c934:	7813      	ldrb	r3, [r2, #0]
 800c936:	600b      	str	r3, [r1, #0]
 800c938:	7812      	ldrb	r2, [r2, #0]
 800c93a:	1e10      	subs	r0, r2, #0
 800c93c:	bf18      	it	ne
 800c93e:	2001      	movne	r0, #1
 800c940:	b002      	add	sp, #8
 800c942:	4770      	bx	lr
 800c944:	4610      	mov	r0, r2
 800c946:	e7fb      	b.n	800c940 <__ascii_mbtowc+0x16>
 800c948:	f06f 0001 	mvn.w	r0, #1
 800c94c:	e7f8      	b.n	800c940 <__ascii_mbtowc+0x16>

0800c94e <__ascii_wctomb>:
 800c94e:	4603      	mov	r3, r0
 800c950:	4608      	mov	r0, r1
 800c952:	b141      	cbz	r1, 800c966 <__ascii_wctomb+0x18>
 800c954:	2aff      	cmp	r2, #255	@ 0xff
 800c956:	d904      	bls.n	800c962 <__ascii_wctomb+0x14>
 800c958:	228a      	movs	r2, #138	@ 0x8a
 800c95a:	601a      	str	r2, [r3, #0]
 800c95c:	f04f 30ff 	mov.w	r0, #4294967295
 800c960:	4770      	bx	lr
 800c962:	700a      	strb	r2, [r1, #0]
 800c964:	2001      	movs	r0, #1
 800c966:	4770      	bx	lr

0800c968 <__sfputc_r>:
 800c968:	6893      	ldr	r3, [r2, #8]
 800c96a:	3b01      	subs	r3, #1
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	b410      	push	{r4}
 800c970:	6093      	str	r3, [r2, #8]
 800c972:	da08      	bge.n	800c986 <__sfputc_r+0x1e>
 800c974:	6994      	ldr	r4, [r2, #24]
 800c976:	42a3      	cmp	r3, r4
 800c978:	db01      	blt.n	800c97e <__sfputc_r+0x16>
 800c97a:	290a      	cmp	r1, #10
 800c97c:	d103      	bne.n	800c986 <__sfputc_r+0x1e>
 800c97e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c982:	f000 b933 	b.w	800cbec <__swbuf_r>
 800c986:	6813      	ldr	r3, [r2, #0]
 800c988:	1c58      	adds	r0, r3, #1
 800c98a:	6010      	str	r0, [r2, #0]
 800c98c:	7019      	strb	r1, [r3, #0]
 800c98e:	4608      	mov	r0, r1
 800c990:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c994:	4770      	bx	lr

0800c996 <__sfputs_r>:
 800c996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c998:	4606      	mov	r6, r0
 800c99a:	460f      	mov	r7, r1
 800c99c:	4614      	mov	r4, r2
 800c99e:	18d5      	adds	r5, r2, r3
 800c9a0:	42ac      	cmp	r4, r5
 800c9a2:	d101      	bne.n	800c9a8 <__sfputs_r+0x12>
 800c9a4:	2000      	movs	r0, #0
 800c9a6:	e007      	b.n	800c9b8 <__sfputs_r+0x22>
 800c9a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9ac:	463a      	mov	r2, r7
 800c9ae:	4630      	mov	r0, r6
 800c9b0:	f7ff ffda 	bl	800c968 <__sfputc_r>
 800c9b4:	1c43      	adds	r3, r0, #1
 800c9b6:	d1f3      	bne.n	800c9a0 <__sfputs_r+0xa>
 800c9b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c9bc <_vfiprintf_r>:
 800c9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9c0:	460d      	mov	r5, r1
 800c9c2:	b09d      	sub	sp, #116	@ 0x74
 800c9c4:	4614      	mov	r4, r2
 800c9c6:	4698      	mov	r8, r3
 800c9c8:	4606      	mov	r6, r0
 800c9ca:	b118      	cbz	r0, 800c9d4 <_vfiprintf_r+0x18>
 800c9cc:	6a03      	ldr	r3, [r0, #32]
 800c9ce:	b90b      	cbnz	r3, 800c9d4 <_vfiprintf_r+0x18>
 800c9d0:	f7fe face 	bl	800af70 <__sinit>
 800c9d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9d6:	07d9      	lsls	r1, r3, #31
 800c9d8:	d405      	bmi.n	800c9e6 <_vfiprintf_r+0x2a>
 800c9da:	89ab      	ldrh	r3, [r5, #12]
 800c9dc:	059a      	lsls	r2, r3, #22
 800c9de:	d402      	bmi.n	800c9e6 <_vfiprintf_r+0x2a>
 800c9e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9e2:	f7fe fbbc 	bl	800b15e <__retarget_lock_acquire_recursive>
 800c9e6:	89ab      	ldrh	r3, [r5, #12]
 800c9e8:	071b      	lsls	r3, r3, #28
 800c9ea:	d501      	bpl.n	800c9f0 <_vfiprintf_r+0x34>
 800c9ec:	692b      	ldr	r3, [r5, #16]
 800c9ee:	b99b      	cbnz	r3, 800ca18 <_vfiprintf_r+0x5c>
 800c9f0:	4629      	mov	r1, r5
 800c9f2:	4630      	mov	r0, r6
 800c9f4:	f000 f938 	bl	800cc68 <__swsetup_r>
 800c9f8:	b170      	cbz	r0, 800ca18 <_vfiprintf_r+0x5c>
 800c9fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9fc:	07dc      	lsls	r4, r3, #31
 800c9fe:	d504      	bpl.n	800ca0a <_vfiprintf_r+0x4e>
 800ca00:	f04f 30ff 	mov.w	r0, #4294967295
 800ca04:	b01d      	add	sp, #116	@ 0x74
 800ca06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca0a:	89ab      	ldrh	r3, [r5, #12]
 800ca0c:	0598      	lsls	r0, r3, #22
 800ca0e:	d4f7      	bmi.n	800ca00 <_vfiprintf_r+0x44>
 800ca10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca12:	f7fe fba5 	bl	800b160 <__retarget_lock_release_recursive>
 800ca16:	e7f3      	b.n	800ca00 <_vfiprintf_r+0x44>
 800ca18:	2300      	movs	r3, #0
 800ca1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca1c:	2320      	movs	r3, #32
 800ca1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ca22:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca26:	2330      	movs	r3, #48	@ 0x30
 800ca28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cbd8 <_vfiprintf_r+0x21c>
 800ca2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ca30:	f04f 0901 	mov.w	r9, #1
 800ca34:	4623      	mov	r3, r4
 800ca36:	469a      	mov	sl, r3
 800ca38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca3c:	b10a      	cbz	r2, 800ca42 <_vfiprintf_r+0x86>
 800ca3e:	2a25      	cmp	r2, #37	@ 0x25
 800ca40:	d1f9      	bne.n	800ca36 <_vfiprintf_r+0x7a>
 800ca42:	ebba 0b04 	subs.w	fp, sl, r4
 800ca46:	d00b      	beq.n	800ca60 <_vfiprintf_r+0xa4>
 800ca48:	465b      	mov	r3, fp
 800ca4a:	4622      	mov	r2, r4
 800ca4c:	4629      	mov	r1, r5
 800ca4e:	4630      	mov	r0, r6
 800ca50:	f7ff ffa1 	bl	800c996 <__sfputs_r>
 800ca54:	3001      	adds	r0, #1
 800ca56:	f000 80a7 	beq.w	800cba8 <_vfiprintf_r+0x1ec>
 800ca5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca5c:	445a      	add	r2, fp
 800ca5e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca60:	f89a 3000 	ldrb.w	r3, [sl]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	f000 809f 	beq.w	800cba8 <_vfiprintf_r+0x1ec>
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ca70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca74:	f10a 0a01 	add.w	sl, sl, #1
 800ca78:	9304      	str	r3, [sp, #16]
 800ca7a:	9307      	str	r3, [sp, #28]
 800ca7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca80:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca82:	4654      	mov	r4, sl
 800ca84:	2205      	movs	r2, #5
 800ca86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca8a:	4853      	ldr	r0, [pc, #332]	@ (800cbd8 <_vfiprintf_r+0x21c>)
 800ca8c:	f7f3 fba0 	bl	80001d0 <memchr>
 800ca90:	9a04      	ldr	r2, [sp, #16]
 800ca92:	b9d8      	cbnz	r0, 800cacc <_vfiprintf_r+0x110>
 800ca94:	06d1      	lsls	r1, r2, #27
 800ca96:	bf44      	itt	mi
 800ca98:	2320      	movmi	r3, #32
 800ca9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca9e:	0713      	lsls	r3, r2, #28
 800caa0:	bf44      	itt	mi
 800caa2:	232b      	movmi	r3, #43	@ 0x2b
 800caa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800caa8:	f89a 3000 	ldrb.w	r3, [sl]
 800caac:	2b2a      	cmp	r3, #42	@ 0x2a
 800caae:	d015      	beq.n	800cadc <_vfiprintf_r+0x120>
 800cab0:	9a07      	ldr	r2, [sp, #28]
 800cab2:	4654      	mov	r4, sl
 800cab4:	2000      	movs	r0, #0
 800cab6:	f04f 0c0a 	mov.w	ip, #10
 800caba:	4621      	mov	r1, r4
 800cabc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cac0:	3b30      	subs	r3, #48	@ 0x30
 800cac2:	2b09      	cmp	r3, #9
 800cac4:	d94b      	bls.n	800cb5e <_vfiprintf_r+0x1a2>
 800cac6:	b1b0      	cbz	r0, 800caf6 <_vfiprintf_r+0x13a>
 800cac8:	9207      	str	r2, [sp, #28]
 800caca:	e014      	b.n	800caf6 <_vfiprintf_r+0x13a>
 800cacc:	eba0 0308 	sub.w	r3, r0, r8
 800cad0:	fa09 f303 	lsl.w	r3, r9, r3
 800cad4:	4313      	orrs	r3, r2
 800cad6:	9304      	str	r3, [sp, #16]
 800cad8:	46a2      	mov	sl, r4
 800cada:	e7d2      	b.n	800ca82 <_vfiprintf_r+0xc6>
 800cadc:	9b03      	ldr	r3, [sp, #12]
 800cade:	1d19      	adds	r1, r3, #4
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	9103      	str	r1, [sp, #12]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	bfbb      	ittet	lt
 800cae8:	425b      	neglt	r3, r3
 800caea:	f042 0202 	orrlt.w	r2, r2, #2
 800caee:	9307      	strge	r3, [sp, #28]
 800caf0:	9307      	strlt	r3, [sp, #28]
 800caf2:	bfb8      	it	lt
 800caf4:	9204      	strlt	r2, [sp, #16]
 800caf6:	7823      	ldrb	r3, [r4, #0]
 800caf8:	2b2e      	cmp	r3, #46	@ 0x2e
 800cafa:	d10a      	bne.n	800cb12 <_vfiprintf_r+0x156>
 800cafc:	7863      	ldrb	r3, [r4, #1]
 800cafe:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb00:	d132      	bne.n	800cb68 <_vfiprintf_r+0x1ac>
 800cb02:	9b03      	ldr	r3, [sp, #12]
 800cb04:	1d1a      	adds	r2, r3, #4
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	9203      	str	r2, [sp, #12]
 800cb0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cb0e:	3402      	adds	r4, #2
 800cb10:	9305      	str	r3, [sp, #20]
 800cb12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cbe8 <_vfiprintf_r+0x22c>
 800cb16:	7821      	ldrb	r1, [r4, #0]
 800cb18:	2203      	movs	r2, #3
 800cb1a:	4650      	mov	r0, sl
 800cb1c:	f7f3 fb58 	bl	80001d0 <memchr>
 800cb20:	b138      	cbz	r0, 800cb32 <_vfiprintf_r+0x176>
 800cb22:	9b04      	ldr	r3, [sp, #16]
 800cb24:	eba0 000a 	sub.w	r0, r0, sl
 800cb28:	2240      	movs	r2, #64	@ 0x40
 800cb2a:	4082      	lsls	r2, r0
 800cb2c:	4313      	orrs	r3, r2
 800cb2e:	3401      	adds	r4, #1
 800cb30:	9304      	str	r3, [sp, #16]
 800cb32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb36:	4829      	ldr	r0, [pc, #164]	@ (800cbdc <_vfiprintf_r+0x220>)
 800cb38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cb3c:	2206      	movs	r2, #6
 800cb3e:	f7f3 fb47 	bl	80001d0 <memchr>
 800cb42:	2800      	cmp	r0, #0
 800cb44:	d03f      	beq.n	800cbc6 <_vfiprintf_r+0x20a>
 800cb46:	4b26      	ldr	r3, [pc, #152]	@ (800cbe0 <_vfiprintf_r+0x224>)
 800cb48:	bb1b      	cbnz	r3, 800cb92 <_vfiprintf_r+0x1d6>
 800cb4a:	9b03      	ldr	r3, [sp, #12]
 800cb4c:	3307      	adds	r3, #7
 800cb4e:	f023 0307 	bic.w	r3, r3, #7
 800cb52:	3308      	adds	r3, #8
 800cb54:	9303      	str	r3, [sp, #12]
 800cb56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb58:	443b      	add	r3, r7
 800cb5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb5c:	e76a      	b.n	800ca34 <_vfiprintf_r+0x78>
 800cb5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb62:	460c      	mov	r4, r1
 800cb64:	2001      	movs	r0, #1
 800cb66:	e7a8      	b.n	800caba <_vfiprintf_r+0xfe>
 800cb68:	2300      	movs	r3, #0
 800cb6a:	3401      	adds	r4, #1
 800cb6c:	9305      	str	r3, [sp, #20]
 800cb6e:	4619      	mov	r1, r3
 800cb70:	f04f 0c0a 	mov.w	ip, #10
 800cb74:	4620      	mov	r0, r4
 800cb76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb7a:	3a30      	subs	r2, #48	@ 0x30
 800cb7c:	2a09      	cmp	r2, #9
 800cb7e:	d903      	bls.n	800cb88 <_vfiprintf_r+0x1cc>
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d0c6      	beq.n	800cb12 <_vfiprintf_r+0x156>
 800cb84:	9105      	str	r1, [sp, #20]
 800cb86:	e7c4      	b.n	800cb12 <_vfiprintf_r+0x156>
 800cb88:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb8c:	4604      	mov	r4, r0
 800cb8e:	2301      	movs	r3, #1
 800cb90:	e7f0      	b.n	800cb74 <_vfiprintf_r+0x1b8>
 800cb92:	ab03      	add	r3, sp, #12
 800cb94:	9300      	str	r3, [sp, #0]
 800cb96:	462a      	mov	r2, r5
 800cb98:	4b12      	ldr	r3, [pc, #72]	@ (800cbe4 <_vfiprintf_r+0x228>)
 800cb9a:	a904      	add	r1, sp, #16
 800cb9c:	4630      	mov	r0, r6
 800cb9e:	f7fd fda3 	bl	800a6e8 <_printf_float>
 800cba2:	4607      	mov	r7, r0
 800cba4:	1c78      	adds	r0, r7, #1
 800cba6:	d1d6      	bne.n	800cb56 <_vfiprintf_r+0x19a>
 800cba8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cbaa:	07d9      	lsls	r1, r3, #31
 800cbac:	d405      	bmi.n	800cbba <_vfiprintf_r+0x1fe>
 800cbae:	89ab      	ldrh	r3, [r5, #12]
 800cbb0:	059a      	lsls	r2, r3, #22
 800cbb2:	d402      	bmi.n	800cbba <_vfiprintf_r+0x1fe>
 800cbb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cbb6:	f7fe fad3 	bl	800b160 <__retarget_lock_release_recursive>
 800cbba:	89ab      	ldrh	r3, [r5, #12]
 800cbbc:	065b      	lsls	r3, r3, #25
 800cbbe:	f53f af1f 	bmi.w	800ca00 <_vfiprintf_r+0x44>
 800cbc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cbc4:	e71e      	b.n	800ca04 <_vfiprintf_r+0x48>
 800cbc6:	ab03      	add	r3, sp, #12
 800cbc8:	9300      	str	r3, [sp, #0]
 800cbca:	462a      	mov	r2, r5
 800cbcc:	4b05      	ldr	r3, [pc, #20]	@ (800cbe4 <_vfiprintf_r+0x228>)
 800cbce:	a904      	add	r1, sp, #16
 800cbd0:	4630      	mov	r0, r6
 800cbd2:	f7fe f821 	bl	800ac18 <_printf_i>
 800cbd6:	e7e4      	b.n	800cba2 <_vfiprintf_r+0x1e6>
 800cbd8:	08026d63 	.word	0x08026d63
 800cbdc:	08026d6d 	.word	0x08026d6d
 800cbe0:	0800a6e9 	.word	0x0800a6e9
 800cbe4:	0800c997 	.word	0x0800c997
 800cbe8:	08026d69 	.word	0x08026d69

0800cbec <__swbuf_r>:
 800cbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbee:	460e      	mov	r6, r1
 800cbf0:	4614      	mov	r4, r2
 800cbf2:	4605      	mov	r5, r0
 800cbf4:	b118      	cbz	r0, 800cbfe <__swbuf_r+0x12>
 800cbf6:	6a03      	ldr	r3, [r0, #32]
 800cbf8:	b90b      	cbnz	r3, 800cbfe <__swbuf_r+0x12>
 800cbfa:	f7fe f9b9 	bl	800af70 <__sinit>
 800cbfe:	69a3      	ldr	r3, [r4, #24]
 800cc00:	60a3      	str	r3, [r4, #8]
 800cc02:	89a3      	ldrh	r3, [r4, #12]
 800cc04:	071a      	lsls	r2, r3, #28
 800cc06:	d501      	bpl.n	800cc0c <__swbuf_r+0x20>
 800cc08:	6923      	ldr	r3, [r4, #16]
 800cc0a:	b943      	cbnz	r3, 800cc1e <__swbuf_r+0x32>
 800cc0c:	4621      	mov	r1, r4
 800cc0e:	4628      	mov	r0, r5
 800cc10:	f000 f82a 	bl	800cc68 <__swsetup_r>
 800cc14:	b118      	cbz	r0, 800cc1e <__swbuf_r+0x32>
 800cc16:	f04f 37ff 	mov.w	r7, #4294967295
 800cc1a:	4638      	mov	r0, r7
 800cc1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc1e:	6823      	ldr	r3, [r4, #0]
 800cc20:	6922      	ldr	r2, [r4, #16]
 800cc22:	1a98      	subs	r0, r3, r2
 800cc24:	6963      	ldr	r3, [r4, #20]
 800cc26:	b2f6      	uxtb	r6, r6
 800cc28:	4283      	cmp	r3, r0
 800cc2a:	4637      	mov	r7, r6
 800cc2c:	dc05      	bgt.n	800cc3a <__swbuf_r+0x4e>
 800cc2e:	4621      	mov	r1, r4
 800cc30:	4628      	mov	r0, r5
 800cc32:	f7ff fe07 	bl	800c844 <_fflush_r>
 800cc36:	2800      	cmp	r0, #0
 800cc38:	d1ed      	bne.n	800cc16 <__swbuf_r+0x2a>
 800cc3a:	68a3      	ldr	r3, [r4, #8]
 800cc3c:	3b01      	subs	r3, #1
 800cc3e:	60a3      	str	r3, [r4, #8]
 800cc40:	6823      	ldr	r3, [r4, #0]
 800cc42:	1c5a      	adds	r2, r3, #1
 800cc44:	6022      	str	r2, [r4, #0]
 800cc46:	701e      	strb	r6, [r3, #0]
 800cc48:	6962      	ldr	r2, [r4, #20]
 800cc4a:	1c43      	adds	r3, r0, #1
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d004      	beq.n	800cc5a <__swbuf_r+0x6e>
 800cc50:	89a3      	ldrh	r3, [r4, #12]
 800cc52:	07db      	lsls	r3, r3, #31
 800cc54:	d5e1      	bpl.n	800cc1a <__swbuf_r+0x2e>
 800cc56:	2e0a      	cmp	r6, #10
 800cc58:	d1df      	bne.n	800cc1a <__swbuf_r+0x2e>
 800cc5a:	4621      	mov	r1, r4
 800cc5c:	4628      	mov	r0, r5
 800cc5e:	f7ff fdf1 	bl	800c844 <_fflush_r>
 800cc62:	2800      	cmp	r0, #0
 800cc64:	d0d9      	beq.n	800cc1a <__swbuf_r+0x2e>
 800cc66:	e7d6      	b.n	800cc16 <__swbuf_r+0x2a>

0800cc68 <__swsetup_r>:
 800cc68:	b538      	push	{r3, r4, r5, lr}
 800cc6a:	4b29      	ldr	r3, [pc, #164]	@ (800cd10 <__swsetup_r+0xa8>)
 800cc6c:	4605      	mov	r5, r0
 800cc6e:	6818      	ldr	r0, [r3, #0]
 800cc70:	460c      	mov	r4, r1
 800cc72:	b118      	cbz	r0, 800cc7c <__swsetup_r+0x14>
 800cc74:	6a03      	ldr	r3, [r0, #32]
 800cc76:	b90b      	cbnz	r3, 800cc7c <__swsetup_r+0x14>
 800cc78:	f7fe f97a 	bl	800af70 <__sinit>
 800cc7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc80:	0719      	lsls	r1, r3, #28
 800cc82:	d422      	bmi.n	800ccca <__swsetup_r+0x62>
 800cc84:	06da      	lsls	r2, r3, #27
 800cc86:	d407      	bmi.n	800cc98 <__swsetup_r+0x30>
 800cc88:	2209      	movs	r2, #9
 800cc8a:	602a      	str	r2, [r5, #0]
 800cc8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc90:	81a3      	strh	r3, [r4, #12]
 800cc92:	f04f 30ff 	mov.w	r0, #4294967295
 800cc96:	e033      	b.n	800cd00 <__swsetup_r+0x98>
 800cc98:	0758      	lsls	r0, r3, #29
 800cc9a:	d512      	bpl.n	800ccc2 <__swsetup_r+0x5a>
 800cc9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cc9e:	b141      	cbz	r1, 800ccb2 <__swsetup_r+0x4a>
 800cca0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cca4:	4299      	cmp	r1, r3
 800cca6:	d002      	beq.n	800ccae <__swsetup_r+0x46>
 800cca8:	4628      	mov	r0, r5
 800ccaa:	f7ff f8c5 	bl	800be38 <_free_r>
 800ccae:	2300      	movs	r3, #0
 800ccb0:	6363      	str	r3, [r4, #52]	@ 0x34
 800ccb2:	89a3      	ldrh	r3, [r4, #12]
 800ccb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ccb8:	81a3      	strh	r3, [r4, #12]
 800ccba:	2300      	movs	r3, #0
 800ccbc:	6063      	str	r3, [r4, #4]
 800ccbe:	6923      	ldr	r3, [r4, #16]
 800ccc0:	6023      	str	r3, [r4, #0]
 800ccc2:	89a3      	ldrh	r3, [r4, #12]
 800ccc4:	f043 0308 	orr.w	r3, r3, #8
 800ccc8:	81a3      	strh	r3, [r4, #12]
 800ccca:	6923      	ldr	r3, [r4, #16]
 800cccc:	b94b      	cbnz	r3, 800cce2 <__swsetup_r+0x7a>
 800ccce:	89a3      	ldrh	r3, [r4, #12]
 800ccd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ccd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ccd8:	d003      	beq.n	800cce2 <__swsetup_r+0x7a>
 800ccda:	4621      	mov	r1, r4
 800ccdc:	4628      	mov	r0, r5
 800ccde:	f000 f883 	bl	800cde8 <__smakebuf_r>
 800cce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cce6:	f013 0201 	ands.w	r2, r3, #1
 800ccea:	d00a      	beq.n	800cd02 <__swsetup_r+0x9a>
 800ccec:	2200      	movs	r2, #0
 800ccee:	60a2      	str	r2, [r4, #8]
 800ccf0:	6962      	ldr	r2, [r4, #20]
 800ccf2:	4252      	negs	r2, r2
 800ccf4:	61a2      	str	r2, [r4, #24]
 800ccf6:	6922      	ldr	r2, [r4, #16]
 800ccf8:	b942      	cbnz	r2, 800cd0c <__swsetup_r+0xa4>
 800ccfa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ccfe:	d1c5      	bne.n	800cc8c <__swsetup_r+0x24>
 800cd00:	bd38      	pop	{r3, r4, r5, pc}
 800cd02:	0799      	lsls	r1, r3, #30
 800cd04:	bf58      	it	pl
 800cd06:	6962      	ldrpl	r2, [r4, #20]
 800cd08:	60a2      	str	r2, [r4, #8]
 800cd0a:	e7f4      	b.n	800ccf6 <__swsetup_r+0x8e>
 800cd0c:	2000      	movs	r0, #0
 800cd0e:	e7f7      	b.n	800cd00 <__swsetup_r+0x98>
 800cd10:	2000004c 	.word	0x2000004c

0800cd14 <_raise_r>:
 800cd14:	291f      	cmp	r1, #31
 800cd16:	b538      	push	{r3, r4, r5, lr}
 800cd18:	4605      	mov	r5, r0
 800cd1a:	460c      	mov	r4, r1
 800cd1c:	d904      	bls.n	800cd28 <_raise_r+0x14>
 800cd1e:	2316      	movs	r3, #22
 800cd20:	6003      	str	r3, [r0, #0]
 800cd22:	f04f 30ff 	mov.w	r0, #4294967295
 800cd26:	bd38      	pop	{r3, r4, r5, pc}
 800cd28:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cd2a:	b112      	cbz	r2, 800cd32 <_raise_r+0x1e>
 800cd2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd30:	b94b      	cbnz	r3, 800cd46 <_raise_r+0x32>
 800cd32:	4628      	mov	r0, r5
 800cd34:	f000 f830 	bl	800cd98 <_getpid_r>
 800cd38:	4622      	mov	r2, r4
 800cd3a:	4601      	mov	r1, r0
 800cd3c:	4628      	mov	r0, r5
 800cd3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd42:	f000 b817 	b.w	800cd74 <_kill_r>
 800cd46:	2b01      	cmp	r3, #1
 800cd48:	d00a      	beq.n	800cd60 <_raise_r+0x4c>
 800cd4a:	1c59      	adds	r1, r3, #1
 800cd4c:	d103      	bne.n	800cd56 <_raise_r+0x42>
 800cd4e:	2316      	movs	r3, #22
 800cd50:	6003      	str	r3, [r0, #0]
 800cd52:	2001      	movs	r0, #1
 800cd54:	e7e7      	b.n	800cd26 <_raise_r+0x12>
 800cd56:	2100      	movs	r1, #0
 800cd58:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cd5c:	4620      	mov	r0, r4
 800cd5e:	4798      	blx	r3
 800cd60:	2000      	movs	r0, #0
 800cd62:	e7e0      	b.n	800cd26 <_raise_r+0x12>

0800cd64 <raise>:
 800cd64:	4b02      	ldr	r3, [pc, #8]	@ (800cd70 <raise+0xc>)
 800cd66:	4601      	mov	r1, r0
 800cd68:	6818      	ldr	r0, [r3, #0]
 800cd6a:	f7ff bfd3 	b.w	800cd14 <_raise_r>
 800cd6e:	bf00      	nop
 800cd70:	2000004c 	.word	0x2000004c

0800cd74 <_kill_r>:
 800cd74:	b538      	push	{r3, r4, r5, lr}
 800cd76:	4d07      	ldr	r5, [pc, #28]	@ (800cd94 <_kill_r+0x20>)
 800cd78:	2300      	movs	r3, #0
 800cd7a:	4604      	mov	r4, r0
 800cd7c:	4608      	mov	r0, r1
 800cd7e:	4611      	mov	r1, r2
 800cd80:	602b      	str	r3, [r5, #0]
 800cd82:	f7f5 fbad 	bl	80024e0 <_kill>
 800cd86:	1c43      	adds	r3, r0, #1
 800cd88:	d102      	bne.n	800cd90 <_kill_r+0x1c>
 800cd8a:	682b      	ldr	r3, [r5, #0]
 800cd8c:	b103      	cbz	r3, 800cd90 <_kill_r+0x1c>
 800cd8e:	6023      	str	r3, [r4, #0]
 800cd90:	bd38      	pop	{r3, r4, r5, pc}
 800cd92:	bf00      	nop
 800cd94:	2000aad8 	.word	0x2000aad8

0800cd98 <_getpid_r>:
 800cd98:	f7f5 bb9a 	b.w	80024d0 <_getpid>

0800cd9c <__swhatbuf_r>:
 800cd9c:	b570      	push	{r4, r5, r6, lr}
 800cd9e:	460c      	mov	r4, r1
 800cda0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cda4:	2900      	cmp	r1, #0
 800cda6:	b096      	sub	sp, #88	@ 0x58
 800cda8:	4615      	mov	r5, r2
 800cdaa:	461e      	mov	r6, r3
 800cdac:	da0d      	bge.n	800cdca <__swhatbuf_r+0x2e>
 800cdae:	89a3      	ldrh	r3, [r4, #12]
 800cdb0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cdb4:	f04f 0100 	mov.w	r1, #0
 800cdb8:	bf14      	ite	ne
 800cdba:	2340      	movne	r3, #64	@ 0x40
 800cdbc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cdc0:	2000      	movs	r0, #0
 800cdc2:	6031      	str	r1, [r6, #0]
 800cdc4:	602b      	str	r3, [r5, #0]
 800cdc6:	b016      	add	sp, #88	@ 0x58
 800cdc8:	bd70      	pop	{r4, r5, r6, pc}
 800cdca:	466a      	mov	r2, sp
 800cdcc:	f000 f848 	bl	800ce60 <_fstat_r>
 800cdd0:	2800      	cmp	r0, #0
 800cdd2:	dbec      	blt.n	800cdae <__swhatbuf_r+0x12>
 800cdd4:	9901      	ldr	r1, [sp, #4]
 800cdd6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cdda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cdde:	4259      	negs	r1, r3
 800cde0:	4159      	adcs	r1, r3
 800cde2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cde6:	e7eb      	b.n	800cdc0 <__swhatbuf_r+0x24>

0800cde8 <__smakebuf_r>:
 800cde8:	898b      	ldrh	r3, [r1, #12]
 800cdea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdec:	079d      	lsls	r5, r3, #30
 800cdee:	4606      	mov	r6, r0
 800cdf0:	460c      	mov	r4, r1
 800cdf2:	d507      	bpl.n	800ce04 <__smakebuf_r+0x1c>
 800cdf4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cdf8:	6023      	str	r3, [r4, #0]
 800cdfa:	6123      	str	r3, [r4, #16]
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	6163      	str	r3, [r4, #20]
 800ce00:	b003      	add	sp, #12
 800ce02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce04:	ab01      	add	r3, sp, #4
 800ce06:	466a      	mov	r2, sp
 800ce08:	f7ff ffc8 	bl	800cd9c <__swhatbuf_r>
 800ce0c:	9f00      	ldr	r7, [sp, #0]
 800ce0e:	4605      	mov	r5, r0
 800ce10:	4639      	mov	r1, r7
 800ce12:	4630      	mov	r0, r6
 800ce14:	f7ff f884 	bl	800bf20 <_malloc_r>
 800ce18:	b948      	cbnz	r0, 800ce2e <__smakebuf_r+0x46>
 800ce1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce1e:	059a      	lsls	r2, r3, #22
 800ce20:	d4ee      	bmi.n	800ce00 <__smakebuf_r+0x18>
 800ce22:	f023 0303 	bic.w	r3, r3, #3
 800ce26:	f043 0302 	orr.w	r3, r3, #2
 800ce2a:	81a3      	strh	r3, [r4, #12]
 800ce2c:	e7e2      	b.n	800cdf4 <__smakebuf_r+0xc>
 800ce2e:	89a3      	ldrh	r3, [r4, #12]
 800ce30:	6020      	str	r0, [r4, #0]
 800ce32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce36:	81a3      	strh	r3, [r4, #12]
 800ce38:	9b01      	ldr	r3, [sp, #4]
 800ce3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ce3e:	b15b      	cbz	r3, 800ce58 <__smakebuf_r+0x70>
 800ce40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce44:	4630      	mov	r0, r6
 800ce46:	f000 f81d 	bl	800ce84 <_isatty_r>
 800ce4a:	b128      	cbz	r0, 800ce58 <__smakebuf_r+0x70>
 800ce4c:	89a3      	ldrh	r3, [r4, #12]
 800ce4e:	f023 0303 	bic.w	r3, r3, #3
 800ce52:	f043 0301 	orr.w	r3, r3, #1
 800ce56:	81a3      	strh	r3, [r4, #12]
 800ce58:	89a3      	ldrh	r3, [r4, #12]
 800ce5a:	431d      	orrs	r5, r3
 800ce5c:	81a5      	strh	r5, [r4, #12]
 800ce5e:	e7cf      	b.n	800ce00 <__smakebuf_r+0x18>

0800ce60 <_fstat_r>:
 800ce60:	b538      	push	{r3, r4, r5, lr}
 800ce62:	4d07      	ldr	r5, [pc, #28]	@ (800ce80 <_fstat_r+0x20>)
 800ce64:	2300      	movs	r3, #0
 800ce66:	4604      	mov	r4, r0
 800ce68:	4608      	mov	r0, r1
 800ce6a:	4611      	mov	r1, r2
 800ce6c:	602b      	str	r3, [r5, #0]
 800ce6e:	f7f5 fb97 	bl	80025a0 <_fstat>
 800ce72:	1c43      	adds	r3, r0, #1
 800ce74:	d102      	bne.n	800ce7c <_fstat_r+0x1c>
 800ce76:	682b      	ldr	r3, [r5, #0]
 800ce78:	b103      	cbz	r3, 800ce7c <_fstat_r+0x1c>
 800ce7a:	6023      	str	r3, [r4, #0]
 800ce7c:	bd38      	pop	{r3, r4, r5, pc}
 800ce7e:	bf00      	nop
 800ce80:	2000aad8 	.word	0x2000aad8

0800ce84 <_isatty_r>:
 800ce84:	b538      	push	{r3, r4, r5, lr}
 800ce86:	4d06      	ldr	r5, [pc, #24]	@ (800cea0 <_isatty_r+0x1c>)
 800ce88:	2300      	movs	r3, #0
 800ce8a:	4604      	mov	r4, r0
 800ce8c:	4608      	mov	r0, r1
 800ce8e:	602b      	str	r3, [r5, #0]
 800ce90:	f7f5 fb96 	bl	80025c0 <_isatty>
 800ce94:	1c43      	adds	r3, r0, #1
 800ce96:	d102      	bne.n	800ce9e <_isatty_r+0x1a>
 800ce98:	682b      	ldr	r3, [r5, #0]
 800ce9a:	b103      	cbz	r3, 800ce9e <_isatty_r+0x1a>
 800ce9c:	6023      	str	r3, [r4, #0]
 800ce9e:	bd38      	pop	{r3, r4, r5, pc}
 800cea0:	2000aad8 	.word	0x2000aad8
 800cea4:	00000000 	.word	0x00000000

0800cea8 <log>:
 800cea8:	b538      	push	{r3, r4, r5, lr}
 800ceaa:	ed2d 8b02 	vpush	{d8}
 800ceae:	ec55 4b10 	vmov	r4, r5, d0
 800ceb2:	f000 fa91 	bl	800d3d8 <__ieee754_log>
 800ceb6:	4622      	mov	r2, r4
 800ceb8:	462b      	mov	r3, r5
 800ceba:	4620      	mov	r0, r4
 800cebc:	4629      	mov	r1, r5
 800cebe:	eeb0 8a40 	vmov.f32	s16, s0
 800cec2:	eef0 8a60 	vmov.f32	s17, s1
 800cec6:	f7f3 fe31 	bl	8000b2c <__aeabi_dcmpun>
 800ceca:	b998      	cbnz	r0, 800cef4 <log+0x4c>
 800cecc:	2200      	movs	r2, #0
 800cece:	2300      	movs	r3, #0
 800ced0:	4620      	mov	r0, r4
 800ced2:	4629      	mov	r1, r5
 800ced4:	f7f3 fe20 	bl	8000b18 <__aeabi_dcmpgt>
 800ced8:	b960      	cbnz	r0, 800cef4 <log+0x4c>
 800ceda:	2200      	movs	r2, #0
 800cedc:	2300      	movs	r3, #0
 800cede:	4620      	mov	r0, r4
 800cee0:	4629      	mov	r1, r5
 800cee2:	f7f3 fdf1 	bl	8000ac8 <__aeabi_dcmpeq>
 800cee6:	b160      	cbz	r0, 800cf02 <log+0x5a>
 800cee8:	f7fe f90e 	bl	800b108 <__errno>
 800ceec:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800cf18 <log+0x70>
 800cef0:	2322      	movs	r3, #34	@ 0x22
 800cef2:	6003      	str	r3, [r0, #0]
 800cef4:	eeb0 0a48 	vmov.f32	s0, s16
 800cef8:	eef0 0a68 	vmov.f32	s1, s17
 800cefc:	ecbd 8b02 	vpop	{d8}
 800cf00:	bd38      	pop	{r3, r4, r5, pc}
 800cf02:	f7fe f901 	bl	800b108 <__errno>
 800cf06:	ecbd 8b02 	vpop	{d8}
 800cf0a:	2321      	movs	r3, #33	@ 0x21
 800cf0c:	6003      	str	r3, [r0, #0]
 800cf0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf12:	4803      	ldr	r0, [pc, #12]	@ (800cf20 <log+0x78>)
 800cf14:	f000 b8d0 	b.w	800d0b8 <nan>
 800cf18:	00000000 	.word	0x00000000
 800cf1c:	fff00000 	.word	0xfff00000
 800cf20:	08026a6f 	.word	0x08026a6f
 800cf24:	00000000 	.word	0x00000000

0800cf28 <cos>:
 800cf28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf2a:	ec53 2b10 	vmov	r2, r3, d0
 800cf2e:	4826      	ldr	r0, [pc, #152]	@ (800cfc8 <cos+0xa0>)
 800cf30:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cf34:	4281      	cmp	r1, r0
 800cf36:	d806      	bhi.n	800cf46 <cos+0x1e>
 800cf38:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800cfc0 <cos+0x98>
 800cf3c:	b005      	add	sp, #20
 800cf3e:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf42:	f000 b8c5 	b.w	800d0d0 <__kernel_cos>
 800cf46:	4821      	ldr	r0, [pc, #132]	@ (800cfcc <cos+0xa4>)
 800cf48:	4281      	cmp	r1, r0
 800cf4a:	d908      	bls.n	800cf5e <cos+0x36>
 800cf4c:	4610      	mov	r0, r2
 800cf4e:	4619      	mov	r1, r3
 800cf50:	f7f3 f99a 	bl	8000288 <__aeabi_dsub>
 800cf54:	ec41 0b10 	vmov	d0, r0, r1
 800cf58:	b005      	add	sp, #20
 800cf5a:	f85d fb04 	ldr.w	pc, [sp], #4
 800cf5e:	4668      	mov	r0, sp
 800cf60:	f000 fbf2 	bl	800d748 <__ieee754_rem_pio2>
 800cf64:	f000 0003 	and.w	r0, r0, #3
 800cf68:	2801      	cmp	r0, #1
 800cf6a:	d00b      	beq.n	800cf84 <cos+0x5c>
 800cf6c:	2802      	cmp	r0, #2
 800cf6e:	d015      	beq.n	800cf9c <cos+0x74>
 800cf70:	b9d8      	cbnz	r0, 800cfaa <cos+0x82>
 800cf72:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cf76:	ed9d 0b00 	vldr	d0, [sp]
 800cf7a:	f000 f8a9 	bl	800d0d0 <__kernel_cos>
 800cf7e:	ec51 0b10 	vmov	r0, r1, d0
 800cf82:	e7e7      	b.n	800cf54 <cos+0x2c>
 800cf84:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cf88:	ed9d 0b00 	vldr	d0, [sp]
 800cf8c:	f000 f968 	bl	800d260 <__kernel_sin>
 800cf90:	ec53 2b10 	vmov	r2, r3, d0
 800cf94:	4610      	mov	r0, r2
 800cf96:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800cf9a:	e7db      	b.n	800cf54 <cos+0x2c>
 800cf9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cfa0:	ed9d 0b00 	vldr	d0, [sp]
 800cfa4:	f000 f894 	bl	800d0d0 <__kernel_cos>
 800cfa8:	e7f2      	b.n	800cf90 <cos+0x68>
 800cfaa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cfae:	ed9d 0b00 	vldr	d0, [sp]
 800cfb2:	2001      	movs	r0, #1
 800cfb4:	f000 f954 	bl	800d260 <__kernel_sin>
 800cfb8:	e7e1      	b.n	800cf7e <cos+0x56>
 800cfba:	bf00      	nop
 800cfbc:	f3af 8000 	nop.w
	...
 800cfc8:	3fe921fb 	.word	0x3fe921fb
 800cfcc:	7fefffff 	.word	0x7fefffff

0800cfd0 <sin>:
 800cfd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cfd2:	ec53 2b10 	vmov	r2, r3, d0
 800cfd6:	4826      	ldr	r0, [pc, #152]	@ (800d070 <sin+0xa0>)
 800cfd8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cfdc:	4281      	cmp	r1, r0
 800cfde:	d807      	bhi.n	800cff0 <sin+0x20>
 800cfe0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800d068 <sin+0x98>
 800cfe4:	2000      	movs	r0, #0
 800cfe6:	b005      	add	sp, #20
 800cfe8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfec:	f000 b938 	b.w	800d260 <__kernel_sin>
 800cff0:	4820      	ldr	r0, [pc, #128]	@ (800d074 <sin+0xa4>)
 800cff2:	4281      	cmp	r1, r0
 800cff4:	d908      	bls.n	800d008 <sin+0x38>
 800cff6:	4610      	mov	r0, r2
 800cff8:	4619      	mov	r1, r3
 800cffa:	f7f3 f945 	bl	8000288 <__aeabi_dsub>
 800cffe:	ec41 0b10 	vmov	d0, r0, r1
 800d002:	b005      	add	sp, #20
 800d004:	f85d fb04 	ldr.w	pc, [sp], #4
 800d008:	4668      	mov	r0, sp
 800d00a:	f000 fb9d 	bl	800d748 <__ieee754_rem_pio2>
 800d00e:	f000 0003 	and.w	r0, r0, #3
 800d012:	2801      	cmp	r0, #1
 800d014:	d00c      	beq.n	800d030 <sin+0x60>
 800d016:	2802      	cmp	r0, #2
 800d018:	d011      	beq.n	800d03e <sin+0x6e>
 800d01a:	b9e8      	cbnz	r0, 800d058 <sin+0x88>
 800d01c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d020:	ed9d 0b00 	vldr	d0, [sp]
 800d024:	2001      	movs	r0, #1
 800d026:	f000 f91b 	bl	800d260 <__kernel_sin>
 800d02a:	ec51 0b10 	vmov	r0, r1, d0
 800d02e:	e7e6      	b.n	800cffe <sin+0x2e>
 800d030:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d034:	ed9d 0b00 	vldr	d0, [sp]
 800d038:	f000 f84a 	bl	800d0d0 <__kernel_cos>
 800d03c:	e7f5      	b.n	800d02a <sin+0x5a>
 800d03e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d042:	ed9d 0b00 	vldr	d0, [sp]
 800d046:	2001      	movs	r0, #1
 800d048:	f000 f90a 	bl	800d260 <__kernel_sin>
 800d04c:	ec53 2b10 	vmov	r2, r3, d0
 800d050:	4610      	mov	r0, r2
 800d052:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d056:	e7d2      	b.n	800cffe <sin+0x2e>
 800d058:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d05c:	ed9d 0b00 	vldr	d0, [sp]
 800d060:	f000 f836 	bl	800d0d0 <__kernel_cos>
 800d064:	e7f2      	b.n	800d04c <sin+0x7c>
 800d066:	bf00      	nop
	...
 800d070:	3fe921fb 	.word	0x3fe921fb
 800d074:	7fefffff 	.word	0x7fefffff

0800d078 <sqrtf>:
 800d078:	b508      	push	{r3, lr}
 800d07a:	ed2d 8b02 	vpush	{d8}
 800d07e:	eeb0 8a40 	vmov.f32	s16, s0
 800d082:	f000 f821 	bl	800d0c8 <__ieee754_sqrtf>
 800d086:	eeb4 8a48 	vcmp.f32	s16, s16
 800d08a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d08e:	d60c      	bvs.n	800d0aa <sqrtf+0x32>
 800d090:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800d0b0 <sqrtf+0x38>
 800d094:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d09c:	d505      	bpl.n	800d0aa <sqrtf+0x32>
 800d09e:	f7fe f833 	bl	800b108 <__errno>
 800d0a2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d0a6:	2321      	movs	r3, #33	@ 0x21
 800d0a8:	6003      	str	r3, [r0, #0]
 800d0aa:	ecbd 8b02 	vpop	{d8}
 800d0ae:	bd08      	pop	{r3, pc}
	...

0800d0b8 <nan>:
 800d0b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d0c0 <nan+0x8>
 800d0bc:	4770      	bx	lr
 800d0be:	bf00      	nop
 800d0c0:	00000000 	.word	0x00000000
 800d0c4:	7ff80000 	.word	0x7ff80000

0800d0c8 <__ieee754_sqrtf>:
 800d0c8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d0cc:	4770      	bx	lr
	...

0800d0d0 <__kernel_cos>:
 800d0d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0d4:	ec57 6b10 	vmov	r6, r7, d0
 800d0d8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800d0dc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800d0e0:	ed8d 1b00 	vstr	d1, [sp]
 800d0e4:	d206      	bcs.n	800d0f4 <__kernel_cos+0x24>
 800d0e6:	4630      	mov	r0, r6
 800d0e8:	4639      	mov	r1, r7
 800d0ea:	f7f3 fd35 	bl	8000b58 <__aeabi_d2iz>
 800d0ee:	2800      	cmp	r0, #0
 800d0f0:	f000 8088 	beq.w	800d204 <__kernel_cos+0x134>
 800d0f4:	4632      	mov	r2, r6
 800d0f6:	463b      	mov	r3, r7
 800d0f8:	4630      	mov	r0, r6
 800d0fa:	4639      	mov	r1, r7
 800d0fc:	f7f3 fa7c 	bl	80005f8 <__aeabi_dmul>
 800d100:	4b51      	ldr	r3, [pc, #324]	@ (800d248 <__kernel_cos+0x178>)
 800d102:	2200      	movs	r2, #0
 800d104:	4604      	mov	r4, r0
 800d106:	460d      	mov	r5, r1
 800d108:	f7f3 fa76 	bl	80005f8 <__aeabi_dmul>
 800d10c:	a340      	add	r3, pc, #256	@ (adr r3, 800d210 <__kernel_cos+0x140>)
 800d10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d112:	4682      	mov	sl, r0
 800d114:	468b      	mov	fp, r1
 800d116:	4620      	mov	r0, r4
 800d118:	4629      	mov	r1, r5
 800d11a:	f7f3 fa6d 	bl	80005f8 <__aeabi_dmul>
 800d11e:	a33e      	add	r3, pc, #248	@ (adr r3, 800d218 <__kernel_cos+0x148>)
 800d120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d124:	f7f3 f8b2 	bl	800028c <__adddf3>
 800d128:	4622      	mov	r2, r4
 800d12a:	462b      	mov	r3, r5
 800d12c:	f7f3 fa64 	bl	80005f8 <__aeabi_dmul>
 800d130:	a33b      	add	r3, pc, #236	@ (adr r3, 800d220 <__kernel_cos+0x150>)
 800d132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d136:	f7f3 f8a7 	bl	8000288 <__aeabi_dsub>
 800d13a:	4622      	mov	r2, r4
 800d13c:	462b      	mov	r3, r5
 800d13e:	f7f3 fa5b 	bl	80005f8 <__aeabi_dmul>
 800d142:	a339      	add	r3, pc, #228	@ (adr r3, 800d228 <__kernel_cos+0x158>)
 800d144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d148:	f7f3 f8a0 	bl	800028c <__adddf3>
 800d14c:	4622      	mov	r2, r4
 800d14e:	462b      	mov	r3, r5
 800d150:	f7f3 fa52 	bl	80005f8 <__aeabi_dmul>
 800d154:	a336      	add	r3, pc, #216	@ (adr r3, 800d230 <__kernel_cos+0x160>)
 800d156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d15a:	f7f3 f895 	bl	8000288 <__aeabi_dsub>
 800d15e:	4622      	mov	r2, r4
 800d160:	462b      	mov	r3, r5
 800d162:	f7f3 fa49 	bl	80005f8 <__aeabi_dmul>
 800d166:	a334      	add	r3, pc, #208	@ (adr r3, 800d238 <__kernel_cos+0x168>)
 800d168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16c:	f7f3 f88e 	bl	800028c <__adddf3>
 800d170:	4622      	mov	r2, r4
 800d172:	462b      	mov	r3, r5
 800d174:	f7f3 fa40 	bl	80005f8 <__aeabi_dmul>
 800d178:	4622      	mov	r2, r4
 800d17a:	462b      	mov	r3, r5
 800d17c:	f7f3 fa3c 	bl	80005f8 <__aeabi_dmul>
 800d180:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d184:	4604      	mov	r4, r0
 800d186:	460d      	mov	r5, r1
 800d188:	4630      	mov	r0, r6
 800d18a:	4639      	mov	r1, r7
 800d18c:	f7f3 fa34 	bl	80005f8 <__aeabi_dmul>
 800d190:	460b      	mov	r3, r1
 800d192:	4602      	mov	r2, r0
 800d194:	4629      	mov	r1, r5
 800d196:	4620      	mov	r0, r4
 800d198:	f7f3 f876 	bl	8000288 <__aeabi_dsub>
 800d19c:	4b2b      	ldr	r3, [pc, #172]	@ (800d24c <__kernel_cos+0x17c>)
 800d19e:	4598      	cmp	r8, r3
 800d1a0:	4606      	mov	r6, r0
 800d1a2:	460f      	mov	r7, r1
 800d1a4:	d810      	bhi.n	800d1c8 <__kernel_cos+0xf8>
 800d1a6:	4602      	mov	r2, r0
 800d1a8:	460b      	mov	r3, r1
 800d1aa:	4650      	mov	r0, sl
 800d1ac:	4659      	mov	r1, fp
 800d1ae:	f7f3 f86b 	bl	8000288 <__aeabi_dsub>
 800d1b2:	460b      	mov	r3, r1
 800d1b4:	4926      	ldr	r1, [pc, #152]	@ (800d250 <__kernel_cos+0x180>)
 800d1b6:	4602      	mov	r2, r0
 800d1b8:	2000      	movs	r0, #0
 800d1ba:	f7f3 f865 	bl	8000288 <__aeabi_dsub>
 800d1be:	ec41 0b10 	vmov	d0, r0, r1
 800d1c2:	b003      	add	sp, #12
 800d1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1c8:	4b22      	ldr	r3, [pc, #136]	@ (800d254 <__kernel_cos+0x184>)
 800d1ca:	4921      	ldr	r1, [pc, #132]	@ (800d250 <__kernel_cos+0x180>)
 800d1cc:	4598      	cmp	r8, r3
 800d1ce:	bf8c      	ite	hi
 800d1d0:	4d21      	ldrhi	r5, [pc, #132]	@ (800d258 <__kernel_cos+0x188>)
 800d1d2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800d1d6:	2400      	movs	r4, #0
 800d1d8:	4622      	mov	r2, r4
 800d1da:	462b      	mov	r3, r5
 800d1dc:	2000      	movs	r0, #0
 800d1de:	f7f3 f853 	bl	8000288 <__aeabi_dsub>
 800d1e2:	4622      	mov	r2, r4
 800d1e4:	4680      	mov	r8, r0
 800d1e6:	4689      	mov	r9, r1
 800d1e8:	462b      	mov	r3, r5
 800d1ea:	4650      	mov	r0, sl
 800d1ec:	4659      	mov	r1, fp
 800d1ee:	f7f3 f84b 	bl	8000288 <__aeabi_dsub>
 800d1f2:	4632      	mov	r2, r6
 800d1f4:	463b      	mov	r3, r7
 800d1f6:	f7f3 f847 	bl	8000288 <__aeabi_dsub>
 800d1fa:	4602      	mov	r2, r0
 800d1fc:	460b      	mov	r3, r1
 800d1fe:	4640      	mov	r0, r8
 800d200:	4649      	mov	r1, r9
 800d202:	e7da      	b.n	800d1ba <__kernel_cos+0xea>
 800d204:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800d240 <__kernel_cos+0x170>
 800d208:	e7db      	b.n	800d1c2 <__kernel_cos+0xf2>
 800d20a:	bf00      	nop
 800d20c:	f3af 8000 	nop.w
 800d210:	be8838d4 	.word	0xbe8838d4
 800d214:	bda8fae9 	.word	0xbda8fae9
 800d218:	bdb4b1c4 	.word	0xbdb4b1c4
 800d21c:	3e21ee9e 	.word	0x3e21ee9e
 800d220:	809c52ad 	.word	0x809c52ad
 800d224:	3e927e4f 	.word	0x3e927e4f
 800d228:	19cb1590 	.word	0x19cb1590
 800d22c:	3efa01a0 	.word	0x3efa01a0
 800d230:	16c15177 	.word	0x16c15177
 800d234:	3f56c16c 	.word	0x3f56c16c
 800d238:	5555554c 	.word	0x5555554c
 800d23c:	3fa55555 	.word	0x3fa55555
 800d240:	00000000 	.word	0x00000000
 800d244:	3ff00000 	.word	0x3ff00000
 800d248:	3fe00000 	.word	0x3fe00000
 800d24c:	3fd33332 	.word	0x3fd33332
 800d250:	3ff00000 	.word	0x3ff00000
 800d254:	3fe90000 	.word	0x3fe90000
 800d258:	3fd20000 	.word	0x3fd20000
 800d25c:	00000000 	.word	0x00000000

0800d260 <__kernel_sin>:
 800d260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d264:	ec55 4b10 	vmov	r4, r5, d0
 800d268:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d26c:	b085      	sub	sp, #20
 800d26e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800d272:	ed8d 1b02 	vstr	d1, [sp, #8]
 800d276:	4680      	mov	r8, r0
 800d278:	d205      	bcs.n	800d286 <__kernel_sin+0x26>
 800d27a:	4620      	mov	r0, r4
 800d27c:	4629      	mov	r1, r5
 800d27e:	f7f3 fc6b 	bl	8000b58 <__aeabi_d2iz>
 800d282:	2800      	cmp	r0, #0
 800d284:	d052      	beq.n	800d32c <__kernel_sin+0xcc>
 800d286:	4622      	mov	r2, r4
 800d288:	462b      	mov	r3, r5
 800d28a:	4620      	mov	r0, r4
 800d28c:	4629      	mov	r1, r5
 800d28e:	f7f3 f9b3 	bl	80005f8 <__aeabi_dmul>
 800d292:	4682      	mov	sl, r0
 800d294:	468b      	mov	fp, r1
 800d296:	4602      	mov	r2, r0
 800d298:	460b      	mov	r3, r1
 800d29a:	4620      	mov	r0, r4
 800d29c:	4629      	mov	r1, r5
 800d29e:	f7f3 f9ab 	bl	80005f8 <__aeabi_dmul>
 800d2a2:	a342      	add	r3, pc, #264	@ (adr r3, 800d3ac <__kernel_sin+0x14c>)
 800d2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a8:	e9cd 0100 	strd	r0, r1, [sp]
 800d2ac:	4650      	mov	r0, sl
 800d2ae:	4659      	mov	r1, fp
 800d2b0:	f7f3 f9a2 	bl	80005f8 <__aeabi_dmul>
 800d2b4:	a33f      	add	r3, pc, #252	@ (adr r3, 800d3b4 <__kernel_sin+0x154>)
 800d2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ba:	f7f2 ffe5 	bl	8000288 <__aeabi_dsub>
 800d2be:	4652      	mov	r2, sl
 800d2c0:	465b      	mov	r3, fp
 800d2c2:	f7f3 f999 	bl	80005f8 <__aeabi_dmul>
 800d2c6:	a33d      	add	r3, pc, #244	@ (adr r3, 800d3bc <__kernel_sin+0x15c>)
 800d2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2cc:	f7f2 ffde 	bl	800028c <__adddf3>
 800d2d0:	4652      	mov	r2, sl
 800d2d2:	465b      	mov	r3, fp
 800d2d4:	f7f3 f990 	bl	80005f8 <__aeabi_dmul>
 800d2d8:	a33a      	add	r3, pc, #232	@ (adr r3, 800d3c4 <__kernel_sin+0x164>)
 800d2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2de:	f7f2 ffd3 	bl	8000288 <__aeabi_dsub>
 800d2e2:	4652      	mov	r2, sl
 800d2e4:	465b      	mov	r3, fp
 800d2e6:	f7f3 f987 	bl	80005f8 <__aeabi_dmul>
 800d2ea:	a338      	add	r3, pc, #224	@ (adr r3, 800d3cc <__kernel_sin+0x16c>)
 800d2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f0:	f7f2 ffcc 	bl	800028c <__adddf3>
 800d2f4:	4606      	mov	r6, r0
 800d2f6:	460f      	mov	r7, r1
 800d2f8:	f1b8 0f00 	cmp.w	r8, #0
 800d2fc:	d11b      	bne.n	800d336 <__kernel_sin+0xd6>
 800d2fe:	4602      	mov	r2, r0
 800d300:	460b      	mov	r3, r1
 800d302:	4650      	mov	r0, sl
 800d304:	4659      	mov	r1, fp
 800d306:	f7f3 f977 	bl	80005f8 <__aeabi_dmul>
 800d30a:	a325      	add	r3, pc, #148	@ (adr r3, 800d3a0 <__kernel_sin+0x140>)
 800d30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d310:	f7f2 ffba 	bl	8000288 <__aeabi_dsub>
 800d314:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d318:	f7f3 f96e 	bl	80005f8 <__aeabi_dmul>
 800d31c:	4602      	mov	r2, r0
 800d31e:	460b      	mov	r3, r1
 800d320:	4620      	mov	r0, r4
 800d322:	4629      	mov	r1, r5
 800d324:	f7f2 ffb2 	bl	800028c <__adddf3>
 800d328:	4604      	mov	r4, r0
 800d32a:	460d      	mov	r5, r1
 800d32c:	ec45 4b10 	vmov	d0, r4, r5
 800d330:	b005      	add	sp, #20
 800d332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d336:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d33a:	4b1b      	ldr	r3, [pc, #108]	@ (800d3a8 <__kernel_sin+0x148>)
 800d33c:	2200      	movs	r2, #0
 800d33e:	f7f3 f95b 	bl	80005f8 <__aeabi_dmul>
 800d342:	4632      	mov	r2, r6
 800d344:	4680      	mov	r8, r0
 800d346:	4689      	mov	r9, r1
 800d348:	463b      	mov	r3, r7
 800d34a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d34e:	f7f3 f953 	bl	80005f8 <__aeabi_dmul>
 800d352:	4602      	mov	r2, r0
 800d354:	460b      	mov	r3, r1
 800d356:	4640      	mov	r0, r8
 800d358:	4649      	mov	r1, r9
 800d35a:	f7f2 ff95 	bl	8000288 <__aeabi_dsub>
 800d35e:	4652      	mov	r2, sl
 800d360:	465b      	mov	r3, fp
 800d362:	f7f3 f949 	bl	80005f8 <__aeabi_dmul>
 800d366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d36a:	f7f2 ff8d 	bl	8000288 <__aeabi_dsub>
 800d36e:	a30c      	add	r3, pc, #48	@ (adr r3, 800d3a0 <__kernel_sin+0x140>)
 800d370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d374:	4606      	mov	r6, r0
 800d376:	460f      	mov	r7, r1
 800d378:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d37c:	f7f3 f93c 	bl	80005f8 <__aeabi_dmul>
 800d380:	4602      	mov	r2, r0
 800d382:	460b      	mov	r3, r1
 800d384:	4630      	mov	r0, r6
 800d386:	4639      	mov	r1, r7
 800d388:	f7f2 ff80 	bl	800028c <__adddf3>
 800d38c:	4602      	mov	r2, r0
 800d38e:	460b      	mov	r3, r1
 800d390:	4620      	mov	r0, r4
 800d392:	4629      	mov	r1, r5
 800d394:	f7f2 ff78 	bl	8000288 <__aeabi_dsub>
 800d398:	e7c6      	b.n	800d328 <__kernel_sin+0xc8>
 800d39a:	bf00      	nop
 800d39c:	f3af 8000 	nop.w
 800d3a0:	55555549 	.word	0x55555549
 800d3a4:	3fc55555 	.word	0x3fc55555
 800d3a8:	3fe00000 	.word	0x3fe00000
 800d3ac:	5acfd57c 	.word	0x5acfd57c
 800d3b0:	3de5d93a 	.word	0x3de5d93a
 800d3b4:	8a2b9ceb 	.word	0x8a2b9ceb
 800d3b8:	3e5ae5e6 	.word	0x3e5ae5e6
 800d3bc:	57b1fe7d 	.word	0x57b1fe7d
 800d3c0:	3ec71de3 	.word	0x3ec71de3
 800d3c4:	19c161d5 	.word	0x19c161d5
 800d3c8:	3f2a01a0 	.word	0x3f2a01a0
 800d3cc:	1110f8a6 	.word	0x1110f8a6
 800d3d0:	3f811111 	.word	0x3f811111
 800d3d4:	00000000 	.word	0x00000000

0800d3d8 <__ieee754_log>:
 800d3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3dc:	ec51 0b10 	vmov	r0, r1, d0
 800d3e0:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800d3e4:	b087      	sub	sp, #28
 800d3e6:	460d      	mov	r5, r1
 800d3e8:	da26      	bge.n	800d438 <__ieee754_log+0x60>
 800d3ea:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d3ee:	4303      	orrs	r3, r0
 800d3f0:	4602      	mov	r2, r0
 800d3f2:	d10a      	bne.n	800d40a <__ieee754_log+0x32>
 800d3f4:	49ce      	ldr	r1, [pc, #824]	@ (800d730 <__ieee754_log+0x358>)
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	2000      	movs	r0, #0
 800d3fc:	f7f3 fa26 	bl	800084c <__aeabi_ddiv>
 800d400:	ec41 0b10 	vmov	d0, r0, r1
 800d404:	b007      	add	sp, #28
 800d406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d40a:	2900      	cmp	r1, #0
 800d40c:	da05      	bge.n	800d41a <__ieee754_log+0x42>
 800d40e:	460b      	mov	r3, r1
 800d410:	f7f2 ff3a 	bl	8000288 <__aeabi_dsub>
 800d414:	2200      	movs	r2, #0
 800d416:	2300      	movs	r3, #0
 800d418:	e7f0      	b.n	800d3fc <__ieee754_log+0x24>
 800d41a:	4bc6      	ldr	r3, [pc, #792]	@ (800d734 <__ieee754_log+0x35c>)
 800d41c:	2200      	movs	r2, #0
 800d41e:	f7f3 f8eb 	bl	80005f8 <__aeabi_dmul>
 800d422:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800d426:	460d      	mov	r5, r1
 800d428:	4ac3      	ldr	r2, [pc, #780]	@ (800d738 <__ieee754_log+0x360>)
 800d42a:	4295      	cmp	r5, r2
 800d42c:	dd06      	ble.n	800d43c <__ieee754_log+0x64>
 800d42e:	4602      	mov	r2, r0
 800d430:	460b      	mov	r3, r1
 800d432:	f7f2 ff2b 	bl	800028c <__adddf3>
 800d436:	e7e3      	b.n	800d400 <__ieee754_log+0x28>
 800d438:	2300      	movs	r3, #0
 800d43a:	e7f5      	b.n	800d428 <__ieee754_log+0x50>
 800d43c:	152c      	asrs	r4, r5, #20
 800d43e:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800d442:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800d446:	441c      	add	r4, r3
 800d448:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800d44c:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800d450:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d454:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800d458:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800d45c:	ea42 0105 	orr.w	r1, r2, r5
 800d460:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800d464:	2200      	movs	r2, #0
 800d466:	4bb5      	ldr	r3, [pc, #724]	@ (800d73c <__ieee754_log+0x364>)
 800d468:	f7f2 ff0e 	bl	8000288 <__aeabi_dsub>
 800d46c:	1cab      	adds	r3, r5, #2
 800d46e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d472:	2b02      	cmp	r3, #2
 800d474:	4682      	mov	sl, r0
 800d476:	468b      	mov	fp, r1
 800d478:	f04f 0200 	mov.w	r2, #0
 800d47c:	dc53      	bgt.n	800d526 <__ieee754_log+0x14e>
 800d47e:	2300      	movs	r3, #0
 800d480:	f7f3 fb22 	bl	8000ac8 <__aeabi_dcmpeq>
 800d484:	b1d0      	cbz	r0, 800d4bc <__ieee754_log+0xe4>
 800d486:	2c00      	cmp	r4, #0
 800d488:	f000 8120 	beq.w	800d6cc <__ieee754_log+0x2f4>
 800d48c:	4620      	mov	r0, r4
 800d48e:	f7f3 f849 	bl	8000524 <__aeabi_i2d>
 800d492:	a391      	add	r3, pc, #580	@ (adr r3, 800d6d8 <__ieee754_log+0x300>)
 800d494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d498:	4606      	mov	r6, r0
 800d49a:	460f      	mov	r7, r1
 800d49c:	f7f3 f8ac 	bl	80005f8 <__aeabi_dmul>
 800d4a0:	a38f      	add	r3, pc, #572	@ (adr r3, 800d6e0 <__ieee754_log+0x308>)
 800d4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a6:	4604      	mov	r4, r0
 800d4a8:	460d      	mov	r5, r1
 800d4aa:	4630      	mov	r0, r6
 800d4ac:	4639      	mov	r1, r7
 800d4ae:	f7f3 f8a3 	bl	80005f8 <__aeabi_dmul>
 800d4b2:	4602      	mov	r2, r0
 800d4b4:	460b      	mov	r3, r1
 800d4b6:	4620      	mov	r0, r4
 800d4b8:	4629      	mov	r1, r5
 800d4ba:	e7ba      	b.n	800d432 <__ieee754_log+0x5a>
 800d4bc:	a38a      	add	r3, pc, #552	@ (adr r3, 800d6e8 <__ieee754_log+0x310>)
 800d4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c2:	4650      	mov	r0, sl
 800d4c4:	4659      	mov	r1, fp
 800d4c6:	f7f3 f897 	bl	80005f8 <__aeabi_dmul>
 800d4ca:	4602      	mov	r2, r0
 800d4cc:	460b      	mov	r3, r1
 800d4ce:	2000      	movs	r0, #0
 800d4d0:	499b      	ldr	r1, [pc, #620]	@ (800d740 <__ieee754_log+0x368>)
 800d4d2:	f7f2 fed9 	bl	8000288 <__aeabi_dsub>
 800d4d6:	4652      	mov	r2, sl
 800d4d8:	4606      	mov	r6, r0
 800d4da:	460f      	mov	r7, r1
 800d4dc:	465b      	mov	r3, fp
 800d4de:	4650      	mov	r0, sl
 800d4e0:	4659      	mov	r1, fp
 800d4e2:	f7f3 f889 	bl	80005f8 <__aeabi_dmul>
 800d4e6:	4602      	mov	r2, r0
 800d4e8:	460b      	mov	r3, r1
 800d4ea:	4630      	mov	r0, r6
 800d4ec:	4639      	mov	r1, r7
 800d4ee:	f7f3 f883 	bl	80005f8 <__aeabi_dmul>
 800d4f2:	4606      	mov	r6, r0
 800d4f4:	460f      	mov	r7, r1
 800d4f6:	b914      	cbnz	r4, 800d4fe <__ieee754_log+0x126>
 800d4f8:	4632      	mov	r2, r6
 800d4fa:	463b      	mov	r3, r7
 800d4fc:	e0a0      	b.n	800d640 <__ieee754_log+0x268>
 800d4fe:	4620      	mov	r0, r4
 800d500:	f7f3 f810 	bl	8000524 <__aeabi_i2d>
 800d504:	a374      	add	r3, pc, #464	@ (adr r3, 800d6d8 <__ieee754_log+0x300>)
 800d506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d50a:	4680      	mov	r8, r0
 800d50c:	4689      	mov	r9, r1
 800d50e:	f7f3 f873 	bl	80005f8 <__aeabi_dmul>
 800d512:	a373      	add	r3, pc, #460	@ (adr r3, 800d6e0 <__ieee754_log+0x308>)
 800d514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d518:	4604      	mov	r4, r0
 800d51a:	460d      	mov	r5, r1
 800d51c:	4640      	mov	r0, r8
 800d51e:	4649      	mov	r1, r9
 800d520:	f7f3 f86a 	bl	80005f8 <__aeabi_dmul>
 800d524:	e0a5      	b.n	800d672 <__ieee754_log+0x29a>
 800d526:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d52a:	f7f2 feaf 	bl	800028c <__adddf3>
 800d52e:	4602      	mov	r2, r0
 800d530:	460b      	mov	r3, r1
 800d532:	4650      	mov	r0, sl
 800d534:	4659      	mov	r1, fp
 800d536:	f7f3 f989 	bl	800084c <__aeabi_ddiv>
 800d53a:	e9cd 0100 	strd	r0, r1, [sp]
 800d53e:	4620      	mov	r0, r4
 800d540:	f7f2 fff0 	bl	8000524 <__aeabi_i2d>
 800d544:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d548:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d54c:	4610      	mov	r0, r2
 800d54e:	4619      	mov	r1, r3
 800d550:	f7f3 f852 	bl	80005f8 <__aeabi_dmul>
 800d554:	4602      	mov	r2, r0
 800d556:	460b      	mov	r3, r1
 800d558:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d55c:	f7f3 f84c 	bl	80005f8 <__aeabi_dmul>
 800d560:	a363      	add	r3, pc, #396	@ (adr r3, 800d6f0 <__ieee754_log+0x318>)
 800d562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d566:	4680      	mov	r8, r0
 800d568:	4689      	mov	r9, r1
 800d56a:	f7f3 f845 	bl	80005f8 <__aeabi_dmul>
 800d56e:	a362      	add	r3, pc, #392	@ (adr r3, 800d6f8 <__ieee754_log+0x320>)
 800d570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d574:	f7f2 fe8a 	bl	800028c <__adddf3>
 800d578:	4642      	mov	r2, r8
 800d57a:	464b      	mov	r3, r9
 800d57c:	f7f3 f83c 	bl	80005f8 <__aeabi_dmul>
 800d580:	a35f      	add	r3, pc, #380	@ (adr r3, 800d700 <__ieee754_log+0x328>)
 800d582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d586:	f7f2 fe81 	bl	800028c <__adddf3>
 800d58a:	4642      	mov	r2, r8
 800d58c:	464b      	mov	r3, r9
 800d58e:	f7f3 f833 	bl	80005f8 <__aeabi_dmul>
 800d592:	a35d      	add	r3, pc, #372	@ (adr r3, 800d708 <__ieee754_log+0x330>)
 800d594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d598:	f7f2 fe78 	bl	800028c <__adddf3>
 800d59c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5a0:	f7f3 f82a 	bl	80005f8 <__aeabi_dmul>
 800d5a4:	a35a      	add	r3, pc, #360	@ (adr r3, 800d710 <__ieee754_log+0x338>)
 800d5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d5ae:	4640      	mov	r0, r8
 800d5b0:	4649      	mov	r1, r9
 800d5b2:	f7f3 f821 	bl	80005f8 <__aeabi_dmul>
 800d5b6:	a358      	add	r3, pc, #352	@ (adr r3, 800d718 <__ieee754_log+0x340>)
 800d5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5bc:	f7f2 fe66 	bl	800028c <__adddf3>
 800d5c0:	4642      	mov	r2, r8
 800d5c2:	464b      	mov	r3, r9
 800d5c4:	f7f3 f818 	bl	80005f8 <__aeabi_dmul>
 800d5c8:	a355      	add	r3, pc, #340	@ (adr r3, 800d720 <__ieee754_log+0x348>)
 800d5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ce:	f7f2 fe5d 	bl	800028c <__adddf3>
 800d5d2:	4642      	mov	r2, r8
 800d5d4:	464b      	mov	r3, r9
 800d5d6:	f7f3 f80f 	bl	80005f8 <__aeabi_dmul>
 800d5da:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800d5de:	4602      	mov	r2, r0
 800d5e0:	460b      	mov	r3, r1
 800d5e2:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800d5e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d5ea:	f7f2 fe4f 	bl	800028c <__adddf3>
 800d5ee:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800d5f2:	3551      	adds	r5, #81	@ 0x51
 800d5f4:	4335      	orrs	r5, r6
 800d5f6:	2d00      	cmp	r5, #0
 800d5f8:	4680      	mov	r8, r0
 800d5fa:	4689      	mov	r9, r1
 800d5fc:	dd48      	ble.n	800d690 <__ieee754_log+0x2b8>
 800d5fe:	4b50      	ldr	r3, [pc, #320]	@ (800d740 <__ieee754_log+0x368>)
 800d600:	2200      	movs	r2, #0
 800d602:	4650      	mov	r0, sl
 800d604:	4659      	mov	r1, fp
 800d606:	f7f2 fff7 	bl	80005f8 <__aeabi_dmul>
 800d60a:	4652      	mov	r2, sl
 800d60c:	465b      	mov	r3, fp
 800d60e:	f7f2 fff3 	bl	80005f8 <__aeabi_dmul>
 800d612:	4602      	mov	r2, r0
 800d614:	460b      	mov	r3, r1
 800d616:	4606      	mov	r6, r0
 800d618:	460f      	mov	r7, r1
 800d61a:	4640      	mov	r0, r8
 800d61c:	4649      	mov	r1, r9
 800d61e:	f7f2 fe35 	bl	800028c <__adddf3>
 800d622:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d626:	f7f2 ffe7 	bl	80005f8 <__aeabi_dmul>
 800d62a:	4680      	mov	r8, r0
 800d62c:	4689      	mov	r9, r1
 800d62e:	b964      	cbnz	r4, 800d64a <__ieee754_log+0x272>
 800d630:	4602      	mov	r2, r0
 800d632:	460b      	mov	r3, r1
 800d634:	4630      	mov	r0, r6
 800d636:	4639      	mov	r1, r7
 800d638:	f7f2 fe26 	bl	8000288 <__aeabi_dsub>
 800d63c:	4602      	mov	r2, r0
 800d63e:	460b      	mov	r3, r1
 800d640:	4650      	mov	r0, sl
 800d642:	4659      	mov	r1, fp
 800d644:	f7f2 fe20 	bl	8000288 <__aeabi_dsub>
 800d648:	e6da      	b.n	800d400 <__ieee754_log+0x28>
 800d64a:	a323      	add	r3, pc, #140	@ (adr r3, 800d6d8 <__ieee754_log+0x300>)
 800d64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d650:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d654:	f7f2 ffd0 	bl	80005f8 <__aeabi_dmul>
 800d658:	a321      	add	r3, pc, #132	@ (adr r3, 800d6e0 <__ieee754_log+0x308>)
 800d65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d65e:	4604      	mov	r4, r0
 800d660:	460d      	mov	r5, r1
 800d662:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d666:	f7f2 ffc7 	bl	80005f8 <__aeabi_dmul>
 800d66a:	4642      	mov	r2, r8
 800d66c:	464b      	mov	r3, r9
 800d66e:	f7f2 fe0d 	bl	800028c <__adddf3>
 800d672:	4602      	mov	r2, r0
 800d674:	460b      	mov	r3, r1
 800d676:	4630      	mov	r0, r6
 800d678:	4639      	mov	r1, r7
 800d67a:	f7f2 fe05 	bl	8000288 <__aeabi_dsub>
 800d67e:	4652      	mov	r2, sl
 800d680:	465b      	mov	r3, fp
 800d682:	f7f2 fe01 	bl	8000288 <__aeabi_dsub>
 800d686:	4602      	mov	r2, r0
 800d688:	460b      	mov	r3, r1
 800d68a:	4620      	mov	r0, r4
 800d68c:	4629      	mov	r1, r5
 800d68e:	e7d9      	b.n	800d644 <__ieee754_log+0x26c>
 800d690:	4602      	mov	r2, r0
 800d692:	460b      	mov	r3, r1
 800d694:	4650      	mov	r0, sl
 800d696:	4659      	mov	r1, fp
 800d698:	f7f2 fdf6 	bl	8000288 <__aeabi_dsub>
 800d69c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6a0:	f7f2 ffaa 	bl	80005f8 <__aeabi_dmul>
 800d6a4:	4606      	mov	r6, r0
 800d6a6:	460f      	mov	r7, r1
 800d6a8:	2c00      	cmp	r4, #0
 800d6aa:	f43f af25 	beq.w	800d4f8 <__ieee754_log+0x120>
 800d6ae:	a30a      	add	r3, pc, #40	@ (adr r3, 800d6d8 <__ieee754_log+0x300>)
 800d6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6b8:	f7f2 ff9e 	bl	80005f8 <__aeabi_dmul>
 800d6bc:	a308      	add	r3, pc, #32	@ (adr r3, 800d6e0 <__ieee754_log+0x308>)
 800d6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c2:	4604      	mov	r4, r0
 800d6c4:	460d      	mov	r5, r1
 800d6c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6ca:	e729      	b.n	800d520 <__ieee754_log+0x148>
 800d6cc:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800d728 <__ieee754_log+0x350>
 800d6d0:	e698      	b.n	800d404 <__ieee754_log+0x2c>
 800d6d2:	bf00      	nop
 800d6d4:	f3af 8000 	nop.w
 800d6d8:	fee00000 	.word	0xfee00000
 800d6dc:	3fe62e42 	.word	0x3fe62e42
 800d6e0:	35793c76 	.word	0x35793c76
 800d6e4:	3dea39ef 	.word	0x3dea39ef
 800d6e8:	55555555 	.word	0x55555555
 800d6ec:	3fd55555 	.word	0x3fd55555
 800d6f0:	df3e5244 	.word	0xdf3e5244
 800d6f4:	3fc2f112 	.word	0x3fc2f112
 800d6f8:	96cb03de 	.word	0x96cb03de
 800d6fc:	3fc74664 	.word	0x3fc74664
 800d700:	94229359 	.word	0x94229359
 800d704:	3fd24924 	.word	0x3fd24924
 800d708:	55555593 	.word	0x55555593
 800d70c:	3fe55555 	.word	0x3fe55555
 800d710:	d078c69f 	.word	0xd078c69f
 800d714:	3fc39a09 	.word	0x3fc39a09
 800d718:	1d8e78af 	.word	0x1d8e78af
 800d71c:	3fcc71c5 	.word	0x3fcc71c5
 800d720:	9997fa04 	.word	0x9997fa04
 800d724:	3fd99999 	.word	0x3fd99999
	...
 800d730:	c3500000 	.word	0xc3500000
 800d734:	43500000 	.word	0x43500000
 800d738:	7fefffff 	.word	0x7fefffff
 800d73c:	3ff00000 	.word	0x3ff00000
 800d740:	3fe00000 	.word	0x3fe00000
 800d744:	00000000 	.word	0x00000000

0800d748 <__ieee754_rem_pio2>:
 800d748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d74c:	ec57 6b10 	vmov	r6, r7, d0
 800d750:	4bc5      	ldr	r3, [pc, #788]	@ (800da68 <__ieee754_rem_pio2+0x320>)
 800d752:	b08d      	sub	sp, #52	@ 0x34
 800d754:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800d758:	4598      	cmp	r8, r3
 800d75a:	4604      	mov	r4, r0
 800d75c:	9704      	str	r7, [sp, #16]
 800d75e:	d807      	bhi.n	800d770 <__ieee754_rem_pio2+0x28>
 800d760:	2200      	movs	r2, #0
 800d762:	2300      	movs	r3, #0
 800d764:	ed80 0b00 	vstr	d0, [r0]
 800d768:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d76c:	2500      	movs	r5, #0
 800d76e:	e028      	b.n	800d7c2 <__ieee754_rem_pio2+0x7a>
 800d770:	4bbe      	ldr	r3, [pc, #760]	@ (800da6c <__ieee754_rem_pio2+0x324>)
 800d772:	4598      	cmp	r8, r3
 800d774:	d878      	bhi.n	800d868 <__ieee754_rem_pio2+0x120>
 800d776:	9b04      	ldr	r3, [sp, #16]
 800d778:	4dbd      	ldr	r5, [pc, #756]	@ (800da70 <__ieee754_rem_pio2+0x328>)
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	4630      	mov	r0, r6
 800d77e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800da30 <__ieee754_rem_pio2+0x2e8>)
 800d780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d784:	4639      	mov	r1, r7
 800d786:	dd38      	ble.n	800d7fa <__ieee754_rem_pio2+0xb2>
 800d788:	f7f2 fd7e 	bl	8000288 <__aeabi_dsub>
 800d78c:	45a8      	cmp	r8, r5
 800d78e:	4606      	mov	r6, r0
 800d790:	460f      	mov	r7, r1
 800d792:	d01a      	beq.n	800d7ca <__ieee754_rem_pio2+0x82>
 800d794:	a3a8      	add	r3, pc, #672	@ (adr r3, 800da38 <__ieee754_rem_pio2+0x2f0>)
 800d796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d79a:	f7f2 fd75 	bl	8000288 <__aeabi_dsub>
 800d79e:	4602      	mov	r2, r0
 800d7a0:	460b      	mov	r3, r1
 800d7a2:	4680      	mov	r8, r0
 800d7a4:	4689      	mov	r9, r1
 800d7a6:	4630      	mov	r0, r6
 800d7a8:	4639      	mov	r1, r7
 800d7aa:	f7f2 fd6d 	bl	8000288 <__aeabi_dsub>
 800d7ae:	a3a2      	add	r3, pc, #648	@ (adr r3, 800da38 <__ieee754_rem_pio2+0x2f0>)
 800d7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b4:	f7f2 fd68 	bl	8000288 <__aeabi_dsub>
 800d7b8:	e9c4 8900 	strd	r8, r9, [r4]
 800d7bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d7c0:	2501      	movs	r5, #1
 800d7c2:	4628      	mov	r0, r5
 800d7c4:	b00d      	add	sp, #52	@ 0x34
 800d7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ca:	a39d      	add	r3, pc, #628	@ (adr r3, 800da40 <__ieee754_rem_pio2+0x2f8>)
 800d7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d0:	f7f2 fd5a 	bl	8000288 <__aeabi_dsub>
 800d7d4:	a39c      	add	r3, pc, #624	@ (adr r3, 800da48 <__ieee754_rem_pio2+0x300>)
 800d7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7da:	4606      	mov	r6, r0
 800d7dc:	460f      	mov	r7, r1
 800d7de:	f7f2 fd53 	bl	8000288 <__aeabi_dsub>
 800d7e2:	4602      	mov	r2, r0
 800d7e4:	460b      	mov	r3, r1
 800d7e6:	4680      	mov	r8, r0
 800d7e8:	4689      	mov	r9, r1
 800d7ea:	4630      	mov	r0, r6
 800d7ec:	4639      	mov	r1, r7
 800d7ee:	f7f2 fd4b 	bl	8000288 <__aeabi_dsub>
 800d7f2:	a395      	add	r3, pc, #596	@ (adr r3, 800da48 <__ieee754_rem_pio2+0x300>)
 800d7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f8:	e7dc      	b.n	800d7b4 <__ieee754_rem_pio2+0x6c>
 800d7fa:	f7f2 fd47 	bl	800028c <__adddf3>
 800d7fe:	45a8      	cmp	r8, r5
 800d800:	4606      	mov	r6, r0
 800d802:	460f      	mov	r7, r1
 800d804:	d018      	beq.n	800d838 <__ieee754_rem_pio2+0xf0>
 800d806:	a38c      	add	r3, pc, #560	@ (adr r3, 800da38 <__ieee754_rem_pio2+0x2f0>)
 800d808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d80c:	f7f2 fd3e 	bl	800028c <__adddf3>
 800d810:	4602      	mov	r2, r0
 800d812:	460b      	mov	r3, r1
 800d814:	4680      	mov	r8, r0
 800d816:	4689      	mov	r9, r1
 800d818:	4630      	mov	r0, r6
 800d81a:	4639      	mov	r1, r7
 800d81c:	f7f2 fd34 	bl	8000288 <__aeabi_dsub>
 800d820:	a385      	add	r3, pc, #532	@ (adr r3, 800da38 <__ieee754_rem_pio2+0x2f0>)
 800d822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d826:	f7f2 fd31 	bl	800028c <__adddf3>
 800d82a:	f04f 35ff 	mov.w	r5, #4294967295
 800d82e:	e9c4 8900 	strd	r8, r9, [r4]
 800d832:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d836:	e7c4      	b.n	800d7c2 <__ieee754_rem_pio2+0x7a>
 800d838:	a381      	add	r3, pc, #516	@ (adr r3, 800da40 <__ieee754_rem_pio2+0x2f8>)
 800d83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d83e:	f7f2 fd25 	bl	800028c <__adddf3>
 800d842:	a381      	add	r3, pc, #516	@ (adr r3, 800da48 <__ieee754_rem_pio2+0x300>)
 800d844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d848:	4606      	mov	r6, r0
 800d84a:	460f      	mov	r7, r1
 800d84c:	f7f2 fd1e 	bl	800028c <__adddf3>
 800d850:	4602      	mov	r2, r0
 800d852:	460b      	mov	r3, r1
 800d854:	4680      	mov	r8, r0
 800d856:	4689      	mov	r9, r1
 800d858:	4630      	mov	r0, r6
 800d85a:	4639      	mov	r1, r7
 800d85c:	f7f2 fd14 	bl	8000288 <__aeabi_dsub>
 800d860:	a379      	add	r3, pc, #484	@ (adr r3, 800da48 <__ieee754_rem_pio2+0x300>)
 800d862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d866:	e7de      	b.n	800d826 <__ieee754_rem_pio2+0xde>
 800d868:	4b82      	ldr	r3, [pc, #520]	@ (800da74 <__ieee754_rem_pio2+0x32c>)
 800d86a:	4598      	cmp	r8, r3
 800d86c:	f200 80d1 	bhi.w	800da12 <__ieee754_rem_pio2+0x2ca>
 800d870:	f000 f966 	bl	800db40 <fabs>
 800d874:	ec57 6b10 	vmov	r6, r7, d0
 800d878:	a375      	add	r3, pc, #468	@ (adr r3, 800da50 <__ieee754_rem_pio2+0x308>)
 800d87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d87e:	4630      	mov	r0, r6
 800d880:	4639      	mov	r1, r7
 800d882:	f7f2 feb9 	bl	80005f8 <__aeabi_dmul>
 800d886:	4b7c      	ldr	r3, [pc, #496]	@ (800da78 <__ieee754_rem_pio2+0x330>)
 800d888:	2200      	movs	r2, #0
 800d88a:	f7f2 fcff 	bl	800028c <__adddf3>
 800d88e:	f7f3 f963 	bl	8000b58 <__aeabi_d2iz>
 800d892:	4605      	mov	r5, r0
 800d894:	f7f2 fe46 	bl	8000524 <__aeabi_i2d>
 800d898:	4602      	mov	r2, r0
 800d89a:	460b      	mov	r3, r1
 800d89c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d8a0:	a363      	add	r3, pc, #396	@ (adr r3, 800da30 <__ieee754_rem_pio2+0x2e8>)
 800d8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a6:	f7f2 fea7 	bl	80005f8 <__aeabi_dmul>
 800d8aa:	4602      	mov	r2, r0
 800d8ac:	460b      	mov	r3, r1
 800d8ae:	4630      	mov	r0, r6
 800d8b0:	4639      	mov	r1, r7
 800d8b2:	f7f2 fce9 	bl	8000288 <__aeabi_dsub>
 800d8b6:	a360      	add	r3, pc, #384	@ (adr r3, 800da38 <__ieee754_rem_pio2+0x2f0>)
 800d8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8bc:	4682      	mov	sl, r0
 800d8be:	468b      	mov	fp, r1
 800d8c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8c4:	f7f2 fe98 	bl	80005f8 <__aeabi_dmul>
 800d8c8:	2d1f      	cmp	r5, #31
 800d8ca:	4606      	mov	r6, r0
 800d8cc:	460f      	mov	r7, r1
 800d8ce:	dc0c      	bgt.n	800d8ea <__ieee754_rem_pio2+0x1a2>
 800d8d0:	4b6a      	ldr	r3, [pc, #424]	@ (800da7c <__ieee754_rem_pio2+0x334>)
 800d8d2:	1e6a      	subs	r2, r5, #1
 800d8d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8d8:	4543      	cmp	r3, r8
 800d8da:	d006      	beq.n	800d8ea <__ieee754_rem_pio2+0x1a2>
 800d8dc:	4632      	mov	r2, r6
 800d8de:	463b      	mov	r3, r7
 800d8e0:	4650      	mov	r0, sl
 800d8e2:	4659      	mov	r1, fp
 800d8e4:	f7f2 fcd0 	bl	8000288 <__aeabi_dsub>
 800d8e8:	e00e      	b.n	800d908 <__ieee754_rem_pio2+0x1c0>
 800d8ea:	463b      	mov	r3, r7
 800d8ec:	4632      	mov	r2, r6
 800d8ee:	4650      	mov	r0, sl
 800d8f0:	4659      	mov	r1, fp
 800d8f2:	f7f2 fcc9 	bl	8000288 <__aeabi_dsub>
 800d8f6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d8fa:	9305      	str	r3, [sp, #20]
 800d8fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d900:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800d904:	2b10      	cmp	r3, #16
 800d906:	dc02      	bgt.n	800d90e <__ieee754_rem_pio2+0x1c6>
 800d908:	e9c4 0100 	strd	r0, r1, [r4]
 800d90c:	e039      	b.n	800d982 <__ieee754_rem_pio2+0x23a>
 800d90e:	a34c      	add	r3, pc, #304	@ (adr r3, 800da40 <__ieee754_rem_pio2+0x2f8>)
 800d910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d914:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d918:	f7f2 fe6e 	bl	80005f8 <__aeabi_dmul>
 800d91c:	4606      	mov	r6, r0
 800d91e:	460f      	mov	r7, r1
 800d920:	4602      	mov	r2, r0
 800d922:	460b      	mov	r3, r1
 800d924:	4650      	mov	r0, sl
 800d926:	4659      	mov	r1, fp
 800d928:	f7f2 fcae 	bl	8000288 <__aeabi_dsub>
 800d92c:	4602      	mov	r2, r0
 800d92e:	460b      	mov	r3, r1
 800d930:	4680      	mov	r8, r0
 800d932:	4689      	mov	r9, r1
 800d934:	4650      	mov	r0, sl
 800d936:	4659      	mov	r1, fp
 800d938:	f7f2 fca6 	bl	8000288 <__aeabi_dsub>
 800d93c:	4632      	mov	r2, r6
 800d93e:	463b      	mov	r3, r7
 800d940:	f7f2 fca2 	bl	8000288 <__aeabi_dsub>
 800d944:	a340      	add	r3, pc, #256	@ (adr r3, 800da48 <__ieee754_rem_pio2+0x300>)
 800d946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d94a:	4606      	mov	r6, r0
 800d94c:	460f      	mov	r7, r1
 800d94e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d952:	f7f2 fe51 	bl	80005f8 <__aeabi_dmul>
 800d956:	4632      	mov	r2, r6
 800d958:	463b      	mov	r3, r7
 800d95a:	f7f2 fc95 	bl	8000288 <__aeabi_dsub>
 800d95e:	4602      	mov	r2, r0
 800d960:	460b      	mov	r3, r1
 800d962:	4606      	mov	r6, r0
 800d964:	460f      	mov	r7, r1
 800d966:	4640      	mov	r0, r8
 800d968:	4649      	mov	r1, r9
 800d96a:	f7f2 fc8d 	bl	8000288 <__aeabi_dsub>
 800d96e:	9a05      	ldr	r2, [sp, #20]
 800d970:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d974:	1ad3      	subs	r3, r2, r3
 800d976:	2b31      	cmp	r3, #49	@ 0x31
 800d978:	dc20      	bgt.n	800d9bc <__ieee754_rem_pio2+0x274>
 800d97a:	e9c4 0100 	strd	r0, r1, [r4]
 800d97e:	46c2      	mov	sl, r8
 800d980:	46cb      	mov	fp, r9
 800d982:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d986:	4650      	mov	r0, sl
 800d988:	4642      	mov	r2, r8
 800d98a:	464b      	mov	r3, r9
 800d98c:	4659      	mov	r1, fp
 800d98e:	f7f2 fc7b 	bl	8000288 <__aeabi_dsub>
 800d992:	463b      	mov	r3, r7
 800d994:	4632      	mov	r2, r6
 800d996:	f7f2 fc77 	bl	8000288 <__aeabi_dsub>
 800d99a:	9b04      	ldr	r3, [sp, #16]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d9a2:	f6bf af0e 	bge.w	800d7c2 <__ieee754_rem_pio2+0x7a>
 800d9a6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800d9aa:	6063      	str	r3, [r4, #4]
 800d9ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d9b0:	f8c4 8000 	str.w	r8, [r4]
 800d9b4:	60a0      	str	r0, [r4, #8]
 800d9b6:	60e3      	str	r3, [r4, #12]
 800d9b8:	426d      	negs	r5, r5
 800d9ba:	e702      	b.n	800d7c2 <__ieee754_rem_pio2+0x7a>
 800d9bc:	a326      	add	r3, pc, #152	@ (adr r3, 800da58 <__ieee754_rem_pio2+0x310>)
 800d9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9c6:	f7f2 fe17 	bl	80005f8 <__aeabi_dmul>
 800d9ca:	4606      	mov	r6, r0
 800d9cc:	460f      	mov	r7, r1
 800d9ce:	4602      	mov	r2, r0
 800d9d0:	460b      	mov	r3, r1
 800d9d2:	4640      	mov	r0, r8
 800d9d4:	4649      	mov	r1, r9
 800d9d6:	f7f2 fc57 	bl	8000288 <__aeabi_dsub>
 800d9da:	4602      	mov	r2, r0
 800d9dc:	460b      	mov	r3, r1
 800d9de:	4682      	mov	sl, r0
 800d9e0:	468b      	mov	fp, r1
 800d9e2:	4640      	mov	r0, r8
 800d9e4:	4649      	mov	r1, r9
 800d9e6:	f7f2 fc4f 	bl	8000288 <__aeabi_dsub>
 800d9ea:	4632      	mov	r2, r6
 800d9ec:	463b      	mov	r3, r7
 800d9ee:	f7f2 fc4b 	bl	8000288 <__aeabi_dsub>
 800d9f2:	a31b      	add	r3, pc, #108	@ (adr r3, 800da60 <__ieee754_rem_pio2+0x318>)
 800d9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f8:	4606      	mov	r6, r0
 800d9fa:	460f      	mov	r7, r1
 800d9fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da00:	f7f2 fdfa 	bl	80005f8 <__aeabi_dmul>
 800da04:	4632      	mov	r2, r6
 800da06:	463b      	mov	r3, r7
 800da08:	f7f2 fc3e 	bl	8000288 <__aeabi_dsub>
 800da0c:	4606      	mov	r6, r0
 800da0e:	460f      	mov	r7, r1
 800da10:	e764      	b.n	800d8dc <__ieee754_rem_pio2+0x194>
 800da12:	4b1b      	ldr	r3, [pc, #108]	@ (800da80 <__ieee754_rem_pio2+0x338>)
 800da14:	4598      	cmp	r8, r3
 800da16:	d935      	bls.n	800da84 <__ieee754_rem_pio2+0x33c>
 800da18:	4632      	mov	r2, r6
 800da1a:	463b      	mov	r3, r7
 800da1c:	4630      	mov	r0, r6
 800da1e:	4639      	mov	r1, r7
 800da20:	f7f2 fc32 	bl	8000288 <__aeabi_dsub>
 800da24:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800da28:	e9c4 0100 	strd	r0, r1, [r4]
 800da2c:	e69e      	b.n	800d76c <__ieee754_rem_pio2+0x24>
 800da2e:	bf00      	nop
 800da30:	54400000 	.word	0x54400000
 800da34:	3ff921fb 	.word	0x3ff921fb
 800da38:	1a626331 	.word	0x1a626331
 800da3c:	3dd0b461 	.word	0x3dd0b461
 800da40:	1a600000 	.word	0x1a600000
 800da44:	3dd0b461 	.word	0x3dd0b461
 800da48:	2e037073 	.word	0x2e037073
 800da4c:	3ba3198a 	.word	0x3ba3198a
 800da50:	6dc9c883 	.word	0x6dc9c883
 800da54:	3fe45f30 	.word	0x3fe45f30
 800da58:	2e000000 	.word	0x2e000000
 800da5c:	3ba3198a 	.word	0x3ba3198a
 800da60:	252049c1 	.word	0x252049c1
 800da64:	397b839a 	.word	0x397b839a
 800da68:	3fe921fb 	.word	0x3fe921fb
 800da6c:	4002d97b 	.word	0x4002d97b
 800da70:	3ff921fb 	.word	0x3ff921fb
 800da74:	413921fb 	.word	0x413921fb
 800da78:	3fe00000 	.word	0x3fe00000
 800da7c:	08026d74 	.word	0x08026d74
 800da80:	7fefffff 	.word	0x7fefffff
 800da84:	ea4f 5528 	mov.w	r5, r8, asr #20
 800da88:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800da8c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800da90:	4630      	mov	r0, r6
 800da92:	460f      	mov	r7, r1
 800da94:	f7f3 f860 	bl	8000b58 <__aeabi_d2iz>
 800da98:	f7f2 fd44 	bl	8000524 <__aeabi_i2d>
 800da9c:	4602      	mov	r2, r0
 800da9e:	460b      	mov	r3, r1
 800daa0:	4630      	mov	r0, r6
 800daa2:	4639      	mov	r1, r7
 800daa4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800daa8:	f7f2 fbee 	bl	8000288 <__aeabi_dsub>
 800daac:	4b22      	ldr	r3, [pc, #136]	@ (800db38 <__ieee754_rem_pio2+0x3f0>)
 800daae:	2200      	movs	r2, #0
 800dab0:	f7f2 fda2 	bl	80005f8 <__aeabi_dmul>
 800dab4:	460f      	mov	r7, r1
 800dab6:	4606      	mov	r6, r0
 800dab8:	f7f3 f84e 	bl	8000b58 <__aeabi_d2iz>
 800dabc:	f7f2 fd32 	bl	8000524 <__aeabi_i2d>
 800dac0:	4602      	mov	r2, r0
 800dac2:	460b      	mov	r3, r1
 800dac4:	4630      	mov	r0, r6
 800dac6:	4639      	mov	r1, r7
 800dac8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dacc:	f7f2 fbdc 	bl	8000288 <__aeabi_dsub>
 800dad0:	4b19      	ldr	r3, [pc, #100]	@ (800db38 <__ieee754_rem_pio2+0x3f0>)
 800dad2:	2200      	movs	r2, #0
 800dad4:	f7f2 fd90 	bl	80005f8 <__aeabi_dmul>
 800dad8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800dadc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800dae0:	f04f 0803 	mov.w	r8, #3
 800dae4:	2600      	movs	r6, #0
 800dae6:	2700      	movs	r7, #0
 800dae8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800daec:	4632      	mov	r2, r6
 800daee:	463b      	mov	r3, r7
 800daf0:	46c2      	mov	sl, r8
 800daf2:	f108 38ff 	add.w	r8, r8, #4294967295
 800daf6:	f7f2 ffe7 	bl	8000ac8 <__aeabi_dcmpeq>
 800dafa:	2800      	cmp	r0, #0
 800dafc:	d1f4      	bne.n	800dae8 <__ieee754_rem_pio2+0x3a0>
 800dafe:	4b0f      	ldr	r3, [pc, #60]	@ (800db3c <__ieee754_rem_pio2+0x3f4>)
 800db00:	9301      	str	r3, [sp, #4]
 800db02:	2302      	movs	r3, #2
 800db04:	9300      	str	r3, [sp, #0]
 800db06:	462a      	mov	r2, r5
 800db08:	4653      	mov	r3, sl
 800db0a:	4621      	mov	r1, r4
 800db0c:	a806      	add	r0, sp, #24
 800db0e:	f000 f81f 	bl	800db50 <__kernel_rem_pio2>
 800db12:	9b04      	ldr	r3, [sp, #16]
 800db14:	2b00      	cmp	r3, #0
 800db16:	4605      	mov	r5, r0
 800db18:	f6bf ae53 	bge.w	800d7c2 <__ieee754_rem_pio2+0x7a>
 800db1c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800db20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800db24:	e9c4 2300 	strd	r2, r3, [r4]
 800db28:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800db2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800db30:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800db34:	e740      	b.n	800d9b8 <__ieee754_rem_pio2+0x270>
 800db36:	bf00      	nop
 800db38:	41700000 	.word	0x41700000
 800db3c:	08026df4 	.word	0x08026df4

0800db40 <fabs>:
 800db40:	ec51 0b10 	vmov	r0, r1, d0
 800db44:	4602      	mov	r2, r0
 800db46:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800db4a:	ec43 2b10 	vmov	d0, r2, r3
 800db4e:	4770      	bx	lr

0800db50 <__kernel_rem_pio2>:
 800db50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db54:	ed2d 8b02 	vpush	{d8}
 800db58:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800db5c:	f112 0f14 	cmn.w	r2, #20
 800db60:	9306      	str	r3, [sp, #24]
 800db62:	9104      	str	r1, [sp, #16]
 800db64:	4bbe      	ldr	r3, [pc, #760]	@ (800de60 <__kernel_rem_pio2+0x310>)
 800db66:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800db68:	9008      	str	r0, [sp, #32]
 800db6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800db6e:	9300      	str	r3, [sp, #0]
 800db70:	9b06      	ldr	r3, [sp, #24]
 800db72:	f103 33ff 	add.w	r3, r3, #4294967295
 800db76:	bfa8      	it	ge
 800db78:	1ed4      	subge	r4, r2, #3
 800db7a:	9305      	str	r3, [sp, #20]
 800db7c:	bfb2      	itee	lt
 800db7e:	2400      	movlt	r4, #0
 800db80:	2318      	movge	r3, #24
 800db82:	fb94 f4f3 	sdivge	r4, r4, r3
 800db86:	f06f 0317 	mvn.w	r3, #23
 800db8a:	fb04 3303 	mla	r3, r4, r3, r3
 800db8e:	eb03 0b02 	add.w	fp, r3, r2
 800db92:	9b00      	ldr	r3, [sp, #0]
 800db94:	9a05      	ldr	r2, [sp, #20]
 800db96:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800de50 <__kernel_rem_pio2+0x300>
 800db9a:	eb03 0802 	add.w	r8, r3, r2
 800db9e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800dba0:	1aa7      	subs	r7, r4, r2
 800dba2:	ae20      	add	r6, sp, #128	@ 0x80
 800dba4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800dba8:	2500      	movs	r5, #0
 800dbaa:	4545      	cmp	r5, r8
 800dbac:	dd13      	ble.n	800dbd6 <__kernel_rem_pio2+0x86>
 800dbae:	9b06      	ldr	r3, [sp, #24]
 800dbb0:	aa20      	add	r2, sp, #128	@ 0x80
 800dbb2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800dbb6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800dbba:	f04f 0800 	mov.w	r8, #0
 800dbbe:	9b00      	ldr	r3, [sp, #0]
 800dbc0:	4598      	cmp	r8, r3
 800dbc2:	dc31      	bgt.n	800dc28 <__kernel_rem_pio2+0xd8>
 800dbc4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800de50 <__kernel_rem_pio2+0x300>
 800dbc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dbcc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dbd0:	462f      	mov	r7, r5
 800dbd2:	2600      	movs	r6, #0
 800dbd4:	e01b      	b.n	800dc0e <__kernel_rem_pio2+0xbe>
 800dbd6:	42ef      	cmn	r7, r5
 800dbd8:	d407      	bmi.n	800dbea <__kernel_rem_pio2+0x9a>
 800dbda:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800dbde:	f7f2 fca1 	bl	8000524 <__aeabi_i2d>
 800dbe2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800dbe6:	3501      	adds	r5, #1
 800dbe8:	e7df      	b.n	800dbaa <__kernel_rem_pio2+0x5a>
 800dbea:	ec51 0b18 	vmov	r0, r1, d8
 800dbee:	e7f8      	b.n	800dbe2 <__kernel_rem_pio2+0x92>
 800dbf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dbf4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800dbf8:	f7f2 fcfe 	bl	80005f8 <__aeabi_dmul>
 800dbfc:	4602      	mov	r2, r0
 800dbfe:	460b      	mov	r3, r1
 800dc00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc04:	f7f2 fb42 	bl	800028c <__adddf3>
 800dc08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc0c:	3601      	adds	r6, #1
 800dc0e:	9b05      	ldr	r3, [sp, #20]
 800dc10:	429e      	cmp	r6, r3
 800dc12:	f1a7 0708 	sub.w	r7, r7, #8
 800dc16:	ddeb      	ble.n	800dbf0 <__kernel_rem_pio2+0xa0>
 800dc18:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dc1c:	f108 0801 	add.w	r8, r8, #1
 800dc20:	ecaa 7b02 	vstmia	sl!, {d7}
 800dc24:	3508      	adds	r5, #8
 800dc26:	e7ca      	b.n	800dbbe <__kernel_rem_pio2+0x6e>
 800dc28:	9b00      	ldr	r3, [sp, #0]
 800dc2a:	f8dd 8000 	ldr.w	r8, [sp]
 800dc2e:	aa0c      	add	r2, sp, #48	@ 0x30
 800dc30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dc34:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc36:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800dc38:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800dc3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc3e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800dc42:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dc44:	ab98      	add	r3, sp, #608	@ 0x260
 800dc46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800dc4a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800dc4e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dc52:	ac0c      	add	r4, sp, #48	@ 0x30
 800dc54:	ab70      	add	r3, sp, #448	@ 0x1c0
 800dc56:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800dc5a:	46a1      	mov	r9, r4
 800dc5c:	46c2      	mov	sl, r8
 800dc5e:	f1ba 0f00 	cmp.w	sl, #0
 800dc62:	f1a5 0508 	sub.w	r5, r5, #8
 800dc66:	dc77      	bgt.n	800dd58 <__kernel_rem_pio2+0x208>
 800dc68:	4658      	mov	r0, fp
 800dc6a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800dc6e:	f000 fac7 	bl	800e200 <scalbn>
 800dc72:	ec57 6b10 	vmov	r6, r7, d0
 800dc76:	2200      	movs	r2, #0
 800dc78:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800dc7c:	4630      	mov	r0, r6
 800dc7e:	4639      	mov	r1, r7
 800dc80:	f7f2 fcba 	bl	80005f8 <__aeabi_dmul>
 800dc84:	ec41 0b10 	vmov	d0, r0, r1
 800dc88:	f000 fb3a 	bl	800e300 <floor>
 800dc8c:	4b75      	ldr	r3, [pc, #468]	@ (800de64 <__kernel_rem_pio2+0x314>)
 800dc8e:	ec51 0b10 	vmov	r0, r1, d0
 800dc92:	2200      	movs	r2, #0
 800dc94:	f7f2 fcb0 	bl	80005f8 <__aeabi_dmul>
 800dc98:	4602      	mov	r2, r0
 800dc9a:	460b      	mov	r3, r1
 800dc9c:	4630      	mov	r0, r6
 800dc9e:	4639      	mov	r1, r7
 800dca0:	f7f2 faf2 	bl	8000288 <__aeabi_dsub>
 800dca4:	460f      	mov	r7, r1
 800dca6:	4606      	mov	r6, r0
 800dca8:	f7f2 ff56 	bl	8000b58 <__aeabi_d2iz>
 800dcac:	9002      	str	r0, [sp, #8]
 800dcae:	f7f2 fc39 	bl	8000524 <__aeabi_i2d>
 800dcb2:	4602      	mov	r2, r0
 800dcb4:	460b      	mov	r3, r1
 800dcb6:	4630      	mov	r0, r6
 800dcb8:	4639      	mov	r1, r7
 800dcba:	f7f2 fae5 	bl	8000288 <__aeabi_dsub>
 800dcbe:	f1bb 0f00 	cmp.w	fp, #0
 800dcc2:	4606      	mov	r6, r0
 800dcc4:	460f      	mov	r7, r1
 800dcc6:	dd6c      	ble.n	800dda2 <__kernel_rem_pio2+0x252>
 800dcc8:	f108 31ff 	add.w	r1, r8, #4294967295
 800dccc:	ab0c      	add	r3, sp, #48	@ 0x30
 800dcce:	9d02      	ldr	r5, [sp, #8]
 800dcd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dcd4:	f1cb 0018 	rsb	r0, fp, #24
 800dcd8:	fa43 f200 	asr.w	r2, r3, r0
 800dcdc:	4415      	add	r5, r2
 800dcde:	4082      	lsls	r2, r0
 800dce0:	1a9b      	subs	r3, r3, r2
 800dce2:	aa0c      	add	r2, sp, #48	@ 0x30
 800dce4:	9502      	str	r5, [sp, #8]
 800dce6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800dcea:	f1cb 0217 	rsb	r2, fp, #23
 800dcee:	fa43 f902 	asr.w	r9, r3, r2
 800dcf2:	f1b9 0f00 	cmp.w	r9, #0
 800dcf6:	dd64      	ble.n	800ddc2 <__kernel_rem_pio2+0x272>
 800dcf8:	9b02      	ldr	r3, [sp, #8]
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	3301      	adds	r3, #1
 800dcfe:	9302      	str	r3, [sp, #8]
 800dd00:	4615      	mov	r5, r2
 800dd02:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800dd06:	4590      	cmp	r8, r2
 800dd08:	f300 80b8 	bgt.w	800de7c <__kernel_rem_pio2+0x32c>
 800dd0c:	f1bb 0f00 	cmp.w	fp, #0
 800dd10:	dd07      	ble.n	800dd22 <__kernel_rem_pio2+0x1d2>
 800dd12:	f1bb 0f01 	cmp.w	fp, #1
 800dd16:	f000 80bf 	beq.w	800de98 <__kernel_rem_pio2+0x348>
 800dd1a:	f1bb 0f02 	cmp.w	fp, #2
 800dd1e:	f000 80c6 	beq.w	800deae <__kernel_rem_pio2+0x35e>
 800dd22:	f1b9 0f02 	cmp.w	r9, #2
 800dd26:	d14c      	bne.n	800ddc2 <__kernel_rem_pio2+0x272>
 800dd28:	4632      	mov	r2, r6
 800dd2a:	463b      	mov	r3, r7
 800dd2c:	494e      	ldr	r1, [pc, #312]	@ (800de68 <__kernel_rem_pio2+0x318>)
 800dd2e:	2000      	movs	r0, #0
 800dd30:	f7f2 faaa 	bl	8000288 <__aeabi_dsub>
 800dd34:	4606      	mov	r6, r0
 800dd36:	460f      	mov	r7, r1
 800dd38:	2d00      	cmp	r5, #0
 800dd3a:	d042      	beq.n	800ddc2 <__kernel_rem_pio2+0x272>
 800dd3c:	4658      	mov	r0, fp
 800dd3e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800de58 <__kernel_rem_pio2+0x308>
 800dd42:	f000 fa5d 	bl	800e200 <scalbn>
 800dd46:	4630      	mov	r0, r6
 800dd48:	4639      	mov	r1, r7
 800dd4a:	ec53 2b10 	vmov	r2, r3, d0
 800dd4e:	f7f2 fa9b 	bl	8000288 <__aeabi_dsub>
 800dd52:	4606      	mov	r6, r0
 800dd54:	460f      	mov	r7, r1
 800dd56:	e034      	b.n	800ddc2 <__kernel_rem_pio2+0x272>
 800dd58:	4b44      	ldr	r3, [pc, #272]	@ (800de6c <__kernel_rem_pio2+0x31c>)
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd60:	f7f2 fc4a 	bl	80005f8 <__aeabi_dmul>
 800dd64:	f7f2 fef8 	bl	8000b58 <__aeabi_d2iz>
 800dd68:	f7f2 fbdc 	bl	8000524 <__aeabi_i2d>
 800dd6c:	4b40      	ldr	r3, [pc, #256]	@ (800de70 <__kernel_rem_pio2+0x320>)
 800dd6e:	2200      	movs	r2, #0
 800dd70:	4606      	mov	r6, r0
 800dd72:	460f      	mov	r7, r1
 800dd74:	f7f2 fc40 	bl	80005f8 <__aeabi_dmul>
 800dd78:	4602      	mov	r2, r0
 800dd7a:	460b      	mov	r3, r1
 800dd7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd80:	f7f2 fa82 	bl	8000288 <__aeabi_dsub>
 800dd84:	f7f2 fee8 	bl	8000b58 <__aeabi_d2iz>
 800dd88:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dd8c:	f849 0b04 	str.w	r0, [r9], #4
 800dd90:	4639      	mov	r1, r7
 800dd92:	4630      	mov	r0, r6
 800dd94:	f7f2 fa7a 	bl	800028c <__adddf3>
 800dd98:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dda0:	e75d      	b.n	800dc5e <__kernel_rem_pio2+0x10e>
 800dda2:	d107      	bne.n	800ddb4 <__kernel_rem_pio2+0x264>
 800dda4:	f108 33ff 	add.w	r3, r8, #4294967295
 800dda8:	aa0c      	add	r2, sp, #48	@ 0x30
 800ddaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddae:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800ddb2:	e79e      	b.n	800dcf2 <__kernel_rem_pio2+0x1a2>
 800ddb4:	4b2f      	ldr	r3, [pc, #188]	@ (800de74 <__kernel_rem_pio2+0x324>)
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	f7f2 fea4 	bl	8000b04 <__aeabi_dcmpge>
 800ddbc:	2800      	cmp	r0, #0
 800ddbe:	d143      	bne.n	800de48 <__kernel_rem_pio2+0x2f8>
 800ddc0:	4681      	mov	r9, r0
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	4630      	mov	r0, r6
 800ddc8:	4639      	mov	r1, r7
 800ddca:	f7f2 fe7d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ddce:	2800      	cmp	r0, #0
 800ddd0:	f000 80bf 	beq.w	800df52 <__kernel_rem_pio2+0x402>
 800ddd4:	f108 33ff 	add.w	r3, r8, #4294967295
 800ddd8:	2200      	movs	r2, #0
 800ddda:	9900      	ldr	r1, [sp, #0]
 800dddc:	428b      	cmp	r3, r1
 800ddde:	da6e      	bge.n	800debe <__kernel_rem_pio2+0x36e>
 800dde0:	2a00      	cmp	r2, #0
 800dde2:	f000 8089 	beq.w	800def8 <__kernel_rem_pio2+0x3a8>
 800dde6:	f108 38ff 	add.w	r8, r8, #4294967295
 800ddea:	ab0c      	add	r3, sp, #48	@ 0x30
 800ddec:	f1ab 0b18 	sub.w	fp, fp, #24
 800ddf0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d0f6      	beq.n	800dde6 <__kernel_rem_pio2+0x296>
 800ddf8:	4658      	mov	r0, fp
 800ddfa:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800de58 <__kernel_rem_pio2+0x308>
 800ddfe:	f000 f9ff 	bl	800e200 <scalbn>
 800de02:	f108 0301 	add.w	r3, r8, #1
 800de06:	00da      	lsls	r2, r3, #3
 800de08:	9205      	str	r2, [sp, #20]
 800de0a:	ec55 4b10 	vmov	r4, r5, d0
 800de0e:	aa70      	add	r2, sp, #448	@ 0x1c0
 800de10:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800de6c <__kernel_rem_pio2+0x31c>
 800de14:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800de18:	4646      	mov	r6, r8
 800de1a:	f04f 0a00 	mov.w	sl, #0
 800de1e:	2e00      	cmp	r6, #0
 800de20:	f280 80cf 	bge.w	800dfc2 <__kernel_rem_pio2+0x472>
 800de24:	4644      	mov	r4, r8
 800de26:	2c00      	cmp	r4, #0
 800de28:	f2c0 80fd 	blt.w	800e026 <__kernel_rem_pio2+0x4d6>
 800de2c:	4b12      	ldr	r3, [pc, #72]	@ (800de78 <__kernel_rem_pio2+0x328>)
 800de2e:	461f      	mov	r7, r3
 800de30:	ab70      	add	r3, sp, #448	@ 0x1c0
 800de32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800de36:	9306      	str	r3, [sp, #24]
 800de38:	f04f 0a00 	mov.w	sl, #0
 800de3c:	f04f 0b00 	mov.w	fp, #0
 800de40:	2600      	movs	r6, #0
 800de42:	eba8 0504 	sub.w	r5, r8, r4
 800de46:	e0e2      	b.n	800e00e <__kernel_rem_pio2+0x4be>
 800de48:	f04f 0902 	mov.w	r9, #2
 800de4c:	e754      	b.n	800dcf8 <__kernel_rem_pio2+0x1a8>
 800de4e:	bf00      	nop
	...
 800de5c:	3ff00000 	.word	0x3ff00000
 800de60:	08026f40 	.word	0x08026f40
 800de64:	40200000 	.word	0x40200000
 800de68:	3ff00000 	.word	0x3ff00000
 800de6c:	3e700000 	.word	0x3e700000
 800de70:	41700000 	.word	0x41700000
 800de74:	3fe00000 	.word	0x3fe00000
 800de78:	08026f00 	.word	0x08026f00
 800de7c:	f854 3b04 	ldr.w	r3, [r4], #4
 800de80:	b945      	cbnz	r5, 800de94 <__kernel_rem_pio2+0x344>
 800de82:	b123      	cbz	r3, 800de8e <__kernel_rem_pio2+0x33e>
 800de84:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800de88:	f844 3c04 	str.w	r3, [r4, #-4]
 800de8c:	2301      	movs	r3, #1
 800de8e:	3201      	adds	r2, #1
 800de90:	461d      	mov	r5, r3
 800de92:	e738      	b.n	800dd06 <__kernel_rem_pio2+0x1b6>
 800de94:	1acb      	subs	r3, r1, r3
 800de96:	e7f7      	b.n	800de88 <__kernel_rem_pio2+0x338>
 800de98:	f108 32ff 	add.w	r2, r8, #4294967295
 800de9c:	ab0c      	add	r3, sp, #48	@ 0x30
 800de9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dea2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800dea6:	a90c      	add	r1, sp, #48	@ 0x30
 800dea8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800deac:	e739      	b.n	800dd22 <__kernel_rem_pio2+0x1d2>
 800deae:	f108 32ff 	add.w	r2, r8, #4294967295
 800deb2:	ab0c      	add	r3, sp, #48	@ 0x30
 800deb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800deb8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800debc:	e7f3      	b.n	800dea6 <__kernel_rem_pio2+0x356>
 800debe:	a90c      	add	r1, sp, #48	@ 0x30
 800dec0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800dec4:	3b01      	subs	r3, #1
 800dec6:	430a      	orrs	r2, r1
 800dec8:	e787      	b.n	800ddda <__kernel_rem_pio2+0x28a>
 800deca:	3401      	adds	r4, #1
 800decc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ded0:	2a00      	cmp	r2, #0
 800ded2:	d0fa      	beq.n	800deca <__kernel_rem_pio2+0x37a>
 800ded4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ded6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800deda:	eb0d 0503 	add.w	r5, sp, r3
 800dede:	9b06      	ldr	r3, [sp, #24]
 800dee0:	aa20      	add	r2, sp, #128	@ 0x80
 800dee2:	4443      	add	r3, r8
 800dee4:	f108 0701 	add.w	r7, r8, #1
 800dee8:	3d98      	subs	r5, #152	@ 0x98
 800deea:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800deee:	4444      	add	r4, r8
 800def0:	42bc      	cmp	r4, r7
 800def2:	da04      	bge.n	800defe <__kernel_rem_pio2+0x3ae>
 800def4:	46a0      	mov	r8, r4
 800def6:	e6a2      	b.n	800dc3e <__kernel_rem_pio2+0xee>
 800def8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800defa:	2401      	movs	r4, #1
 800defc:	e7e6      	b.n	800decc <__kernel_rem_pio2+0x37c>
 800defe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df00:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800df04:	f7f2 fb0e 	bl	8000524 <__aeabi_i2d>
 800df08:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800e1d0 <__kernel_rem_pio2+0x680>
 800df0c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800df10:	ed8d 7b02 	vstr	d7, [sp, #8]
 800df14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800df18:	46b2      	mov	sl, r6
 800df1a:	f04f 0800 	mov.w	r8, #0
 800df1e:	9b05      	ldr	r3, [sp, #20]
 800df20:	4598      	cmp	r8, r3
 800df22:	dd05      	ble.n	800df30 <__kernel_rem_pio2+0x3e0>
 800df24:	ed9d 7b02 	vldr	d7, [sp, #8]
 800df28:	3701      	adds	r7, #1
 800df2a:	eca5 7b02 	vstmia	r5!, {d7}
 800df2e:	e7df      	b.n	800def0 <__kernel_rem_pio2+0x3a0>
 800df30:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800df34:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800df38:	f7f2 fb5e 	bl	80005f8 <__aeabi_dmul>
 800df3c:	4602      	mov	r2, r0
 800df3e:	460b      	mov	r3, r1
 800df40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df44:	f7f2 f9a2 	bl	800028c <__adddf3>
 800df48:	f108 0801 	add.w	r8, r8, #1
 800df4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df50:	e7e5      	b.n	800df1e <__kernel_rem_pio2+0x3ce>
 800df52:	f1cb 0000 	rsb	r0, fp, #0
 800df56:	ec47 6b10 	vmov	d0, r6, r7
 800df5a:	f000 f951 	bl	800e200 <scalbn>
 800df5e:	ec55 4b10 	vmov	r4, r5, d0
 800df62:	4b9d      	ldr	r3, [pc, #628]	@ (800e1d8 <__kernel_rem_pio2+0x688>)
 800df64:	2200      	movs	r2, #0
 800df66:	4620      	mov	r0, r4
 800df68:	4629      	mov	r1, r5
 800df6a:	f7f2 fdcb 	bl	8000b04 <__aeabi_dcmpge>
 800df6e:	b300      	cbz	r0, 800dfb2 <__kernel_rem_pio2+0x462>
 800df70:	4b9a      	ldr	r3, [pc, #616]	@ (800e1dc <__kernel_rem_pio2+0x68c>)
 800df72:	2200      	movs	r2, #0
 800df74:	4620      	mov	r0, r4
 800df76:	4629      	mov	r1, r5
 800df78:	f7f2 fb3e 	bl	80005f8 <__aeabi_dmul>
 800df7c:	f7f2 fdec 	bl	8000b58 <__aeabi_d2iz>
 800df80:	4606      	mov	r6, r0
 800df82:	f7f2 facf 	bl	8000524 <__aeabi_i2d>
 800df86:	4b94      	ldr	r3, [pc, #592]	@ (800e1d8 <__kernel_rem_pio2+0x688>)
 800df88:	2200      	movs	r2, #0
 800df8a:	f7f2 fb35 	bl	80005f8 <__aeabi_dmul>
 800df8e:	460b      	mov	r3, r1
 800df90:	4602      	mov	r2, r0
 800df92:	4629      	mov	r1, r5
 800df94:	4620      	mov	r0, r4
 800df96:	f7f2 f977 	bl	8000288 <__aeabi_dsub>
 800df9a:	f7f2 fddd 	bl	8000b58 <__aeabi_d2iz>
 800df9e:	ab0c      	add	r3, sp, #48	@ 0x30
 800dfa0:	f10b 0b18 	add.w	fp, fp, #24
 800dfa4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800dfa8:	f108 0801 	add.w	r8, r8, #1
 800dfac:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800dfb0:	e722      	b.n	800ddf8 <__kernel_rem_pio2+0x2a8>
 800dfb2:	4620      	mov	r0, r4
 800dfb4:	4629      	mov	r1, r5
 800dfb6:	f7f2 fdcf 	bl	8000b58 <__aeabi_d2iz>
 800dfba:	ab0c      	add	r3, sp, #48	@ 0x30
 800dfbc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800dfc0:	e71a      	b.n	800ddf8 <__kernel_rem_pio2+0x2a8>
 800dfc2:	ab0c      	add	r3, sp, #48	@ 0x30
 800dfc4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dfc8:	f7f2 faac 	bl	8000524 <__aeabi_i2d>
 800dfcc:	4622      	mov	r2, r4
 800dfce:	462b      	mov	r3, r5
 800dfd0:	f7f2 fb12 	bl	80005f8 <__aeabi_dmul>
 800dfd4:	4652      	mov	r2, sl
 800dfd6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800dfda:	465b      	mov	r3, fp
 800dfdc:	4620      	mov	r0, r4
 800dfde:	4629      	mov	r1, r5
 800dfe0:	f7f2 fb0a 	bl	80005f8 <__aeabi_dmul>
 800dfe4:	3e01      	subs	r6, #1
 800dfe6:	4604      	mov	r4, r0
 800dfe8:	460d      	mov	r5, r1
 800dfea:	e718      	b.n	800de1e <__kernel_rem_pio2+0x2ce>
 800dfec:	9906      	ldr	r1, [sp, #24]
 800dfee:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800dff2:	9106      	str	r1, [sp, #24]
 800dff4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800dff8:	f7f2 fafe 	bl	80005f8 <__aeabi_dmul>
 800dffc:	4602      	mov	r2, r0
 800dffe:	460b      	mov	r3, r1
 800e000:	4650      	mov	r0, sl
 800e002:	4659      	mov	r1, fp
 800e004:	f7f2 f942 	bl	800028c <__adddf3>
 800e008:	3601      	adds	r6, #1
 800e00a:	4682      	mov	sl, r0
 800e00c:	468b      	mov	fp, r1
 800e00e:	9b00      	ldr	r3, [sp, #0]
 800e010:	429e      	cmp	r6, r3
 800e012:	dc01      	bgt.n	800e018 <__kernel_rem_pio2+0x4c8>
 800e014:	42b5      	cmp	r5, r6
 800e016:	dae9      	bge.n	800dfec <__kernel_rem_pio2+0x49c>
 800e018:	ab48      	add	r3, sp, #288	@ 0x120
 800e01a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e01e:	e9c5 ab00 	strd	sl, fp, [r5]
 800e022:	3c01      	subs	r4, #1
 800e024:	e6ff      	b.n	800de26 <__kernel_rem_pio2+0x2d6>
 800e026:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800e028:	2b02      	cmp	r3, #2
 800e02a:	dc0b      	bgt.n	800e044 <__kernel_rem_pio2+0x4f4>
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	dc39      	bgt.n	800e0a4 <__kernel_rem_pio2+0x554>
 800e030:	d05d      	beq.n	800e0ee <__kernel_rem_pio2+0x59e>
 800e032:	9b02      	ldr	r3, [sp, #8]
 800e034:	f003 0007 	and.w	r0, r3, #7
 800e038:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800e03c:	ecbd 8b02 	vpop	{d8}
 800e040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e044:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800e046:	2b03      	cmp	r3, #3
 800e048:	d1f3      	bne.n	800e032 <__kernel_rem_pio2+0x4e2>
 800e04a:	9b05      	ldr	r3, [sp, #20]
 800e04c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e050:	eb0d 0403 	add.w	r4, sp, r3
 800e054:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800e058:	4625      	mov	r5, r4
 800e05a:	46c2      	mov	sl, r8
 800e05c:	f1ba 0f00 	cmp.w	sl, #0
 800e060:	f1a5 0508 	sub.w	r5, r5, #8
 800e064:	dc6b      	bgt.n	800e13e <__kernel_rem_pio2+0x5ee>
 800e066:	4645      	mov	r5, r8
 800e068:	2d01      	cmp	r5, #1
 800e06a:	f1a4 0408 	sub.w	r4, r4, #8
 800e06e:	f300 8087 	bgt.w	800e180 <__kernel_rem_pio2+0x630>
 800e072:	9c05      	ldr	r4, [sp, #20]
 800e074:	ab48      	add	r3, sp, #288	@ 0x120
 800e076:	441c      	add	r4, r3
 800e078:	2000      	movs	r0, #0
 800e07a:	2100      	movs	r1, #0
 800e07c:	f1b8 0f01 	cmp.w	r8, #1
 800e080:	f300 809c 	bgt.w	800e1bc <__kernel_rem_pio2+0x66c>
 800e084:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800e088:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800e08c:	f1b9 0f00 	cmp.w	r9, #0
 800e090:	f040 80a6 	bne.w	800e1e0 <__kernel_rem_pio2+0x690>
 800e094:	9b04      	ldr	r3, [sp, #16]
 800e096:	e9c3 7800 	strd	r7, r8, [r3]
 800e09a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e09e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e0a2:	e7c6      	b.n	800e032 <__kernel_rem_pio2+0x4e2>
 800e0a4:	9d05      	ldr	r5, [sp, #20]
 800e0a6:	ab48      	add	r3, sp, #288	@ 0x120
 800e0a8:	441d      	add	r5, r3
 800e0aa:	4644      	mov	r4, r8
 800e0ac:	2000      	movs	r0, #0
 800e0ae:	2100      	movs	r1, #0
 800e0b0:	2c00      	cmp	r4, #0
 800e0b2:	da35      	bge.n	800e120 <__kernel_rem_pio2+0x5d0>
 800e0b4:	f1b9 0f00 	cmp.w	r9, #0
 800e0b8:	d038      	beq.n	800e12c <__kernel_rem_pio2+0x5dc>
 800e0ba:	4602      	mov	r2, r0
 800e0bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e0c0:	9c04      	ldr	r4, [sp, #16]
 800e0c2:	e9c4 2300 	strd	r2, r3, [r4]
 800e0c6:	4602      	mov	r2, r0
 800e0c8:	460b      	mov	r3, r1
 800e0ca:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800e0ce:	f7f2 f8db 	bl	8000288 <__aeabi_dsub>
 800e0d2:	ad4a      	add	r5, sp, #296	@ 0x128
 800e0d4:	2401      	movs	r4, #1
 800e0d6:	45a0      	cmp	r8, r4
 800e0d8:	da2b      	bge.n	800e132 <__kernel_rem_pio2+0x5e2>
 800e0da:	f1b9 0f00 	cmp.w	r9, #0
 800e0de:	d002      	beq.n	800e0e6 <__kernel_rem_pio2+0x596>
 800e0e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e0e4:	4619      	mov	r1, r3
 800e0e6:	9b04      	ldr	r3, [sp, #16]
 800e0e8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e0ec:	e7a1      	b.n	800e032 <__kernel_rem_pio2+0x4e2>
 800e0ee:	9c05      	ldr	r4, [sp, #20]
 800e0f0:	ab48      	add	r3, sp, #288	@ 0x120
 800e0f2:	441c      	add	r4, r3
 800e0f4:	2000      	movs	r0, #0
 800e0f6:	2100      	movs	r1, #0
 800e0f8:	f1b8 0f00 	cmp.w	r8, #0
 800e0fc:	da09      	bge.n	800e112 <__kernel_rem_pio2+0x5c2>
 800e0fe:	f1b9 0f00 	cmp.w	r9, #0
 800e102:	d002      	beq.n	800e10a <__kernel_rem_pio2+0x5ba>
 800e104:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e108:	4619      	mov	r1, r3
 800e10a:	9b04      	ldr	r3, [sp, #16]
 800e10c:	e9c3 0100 	strd	r0, r1, [r3]
 800e110:	e78f      	b.n	800e032 <__kernel_rem_pio2+0x4e2>
 800e112:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e116:	f7f2 f8b9 	bl	800028c <__adddf3>
 800e11a:	f108 38ff 	add.w	r8, r8, #4294967295
 800e11e:	e7eb      	b.n	800e0f8 <__kernel_rem_pio2+0x5a8>
 800e120:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800e124:	f7f2 f8b2 	bl	800028c <__adddf3>
 800e128:	3c01      	subs	r4, #1
 800e12a:	e7c1      	b.n	800e0b0 <__kernel_rem_pio2+0x560>
 800e12c:	4602      	mov	r2, r0
 800e12e:	460b      	mov	r3, r1
 800e130:	e7c6      	b.n	800e0c0 <__kernel_rem_pio2+0x570>
 800e132:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800e136:	f7f2 f8a9 	bl	800028c <__adddf3>
 800e13a:	3401      	adds	r4, #1
 800e13c:	e7cb      	b.n	800e0d6 <__kernel_rem_pio2+0x586>
 800e13e:	ed95 7b00 	vldr	d7, [r5]
 800e142:	ed8d 7b00 	vstr	d7, [sp]
 800e146:	ed95 7b02 	vldr	d7, [r5, #8]
 800e14a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e14e:	ec53 2b17 	vmov	r2, r3, d7
 800e152:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e156:	f7f2 f899 	bl	800028c <__adddf3>
 800e15a:	4602      	mov	r2, r0
 800e15c:	460b      	mov	r3, r1
 800e15e:	4606      	mov	r6, r0
 800e160:	460f      	mov	r7, r1
 800e162:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e166:	f7f2 f88f 	bl	8000288 <__aeabi_dsub>
 800e16a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e16e:	f7f2 f88d 	bl	800028c <__adddf3>
 800e172:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e176:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800e17a:	e9c5 6700 	strd	r6, r7, [r5]
 800e17e:	e76d      	b.n	800e05c <__kernel_rem_pio2+0x50c>
 800e180:	ed94 7b00 	vldr	d7, [r4]
 800e184:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800e188:	ec51 0b17 	vmov	r0, r1, d7
 800e18c:	4652      	mov	r2, sl
 800e18e:	465b      	mov	r3, fp
 800e190:	ed8d 7b00 	vstr	d7, [sp]
 800e194:	f7f2 f87a 	bl	800028c <__adddf3>
 800e198:	4602      	mov	r2, r0
 800e19a:	460b      	mov	r3, r1
 800e19c:	4606      	mov	r6, r0
 800e19e:	460f      	mov	r7, r1
 800e1a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e1a4:	f7f2 f870 	bl	8000288 <__aeabi_dsub>
 800e1a8:	4652      	mov	r2, sl
 800e1aa:	465b      	mov	r3, fp
 800e1ac:	f7f2 f86e 	bl	800028c <__adddf3>
 800e1b0:	3d01      	subs	r5, #1
 800e1b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e1b6:	e9c4 6700 	strd	r6, r7, [r4]
 800e1ba:	e755      	b.n	800e068 <__kernel_rem_pio2+0x518>
 800e1bc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e1c0:	f7f2 f864 	bl	800028c <__adddf3>
 800e1c4:	f108 38ff 	add.w	r8, r8, #4294967295
 800e1c8:	e758      	b.n	800e07c <__kernel_rem_pio2+0x52c>
 800e1ca:	bf00      	nop
 800e1cc:	f3af 8000 	nop.w
	...
 800e1d8:	41700000 	.word	0x41700000
 800e1dc:	3e700000 	.word	0x3e700000
 800e1e0:	9b04      	ldr	r3, [sp, #16]
 800e1e2:	9a04      	ldr	r2, [sp, #16]
 800e1e4:	601f      	str	r7, [r3, #0]
 800e1e6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800e1ea:	605c      	str	r4, [r3, #4]
 800e1ec:	609d      	str	r5, [r3, #8]
 800e1ee:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e1f2:	60d3      	str	r3, [r2, #12]
 800e1f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e1f8:	6110      	str	r0, [r2, #16]
 800e1fa:	6153      	str	r3, [r2, #20]
 800e1fc:	e719      	b.n	800e032 <__kernel_rem_pio2+0x4e2>
 800e1fe:	bf00      	nop

0800e200 <scalbn>:
 800e200:	b570      	push	{r4, r5, r6, lr}
 800e202:	ec55 4b10 	vmov	r4, r5, d0
 800e206:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e20a:	4606      	mov	r6, r0
 800e20c:	462b      	mov	r3, r5
 800e20e:	b991      	cbnz	r1, 800e236 <scalbn+0x36>
 800e210:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e214:	4323      	orrs	r3, r4
 800e216:	d03d      	beq.n	800e294 <scalbn+0x94>
 800e218:	4b35      	ldr	r3, [pc, #212]	@ (800e2f0 <scalbn+0xf0>)
 800e21a:	4620      	mov	r0, r4
 800e21c:	4629      	mov	r1, r5
 800e21e:	2200      	movs	r2, #0
 800e220:	f7f2 f9ea 	bl	80005f8 <__aeabi_dmul>
 800e224:	4b33      	ldr	r3, [pc, #204]	@ (800e2f4 <scalbn+0xf4>)
 800e226:	429e      	cmp	r6, r3
 800e228:	4604      	mov	r4, r0
 800e22a:	460d      	mov	r5, r1
 800e22c:	da0f      	bge.n	800e24e <scalbn+0x4e>
 800e22e:	a328      	add	r3, pc, #160	@ (adr r3, 800e2d0 <scalbn+0xd0>)
 800e230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e234:	e01e      	b.n	800e274 <scalbn+0x74>
 800e236:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800e23a:	4291      	cmp	r1, r2
 800e23c:	d10b      	bne.n	800e256 <scalbn+0x56>
 800e23e:	4622      	mov	r2, r4
 800e240:	4620      	mov	r0, r4
 800e242:	4629      	mov	r1, r5
 800e244:	f7f2 f822 	bl	800028c <__adddf3>
 800e248:	4604      	mov	r4, r0
 800e24a:	460d      	mov	r5, r1
 800e24c:	e022      	b.n	800e294 <scalbn+0x94>
 800e24e:	460b      	mov	r3, r1
 800e250:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e254:	3936      	subs	r1, #54	@ 0x36
 800e256:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800e25a:	4296      	cmp	r6, r2
 800e25c:	dd0d      	ble.n	800e27a <scalbn+0x7a>
 800e25e:	2d00      	cmp	r5, #0
 800e260:	a11d      	add	r1, pc, #116	@ (adr r1, 800e2d8 <scalbn+0xd8>)
 800e262:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e266:	da02      	bge.n	800e26e <scalbn+0x6e>
 800e268:	a11d      	add	r1, pc, #116	@ (adr r1, 800e2e0 <scalbn+0xe0>)
 800e26a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e26e:	a31a      	add	r3, pc, #104	@ (adr r3, 800e2d8 <scalbn+0xd8>)
 800e270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e274:	f7f2 f9c0 	bl	80005f8 <__aeabi_dmul>
 800e278:	e7e6      	b.n	800e248 <scalbn+0x48>
 800e27a:	1872      	adds	r2, r6, r1
 800e27c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800e280:	428a      	cmp	r2, r1
 800e282:	dcec      	bgt.n	800e25e <scalbn+0x5e>
 800e284:	2a00      	cmp	r2, #0
 800e286:	dd08      	ble.n	800e29a <scalbn+0x9a>
 800e288:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e28c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e290:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e294:	ec45 4b10 	vmov	d0, r4, r5
 800e298:	bd70      	pop	{r4, r5, r6, pc}
 800e29a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800e29e:	da08      	bge.n	800e2b2 <scalbn+0xb2>
 800e2a0:	2d00      	cmp	r5, #0
 800e2a2:	a10b      	add	r1, pc, #44	@ (adr r1, 800e2d0 <scalbn+0xd0>)
 800e2a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2a8:	dac1      	bge.n	800e22e <scalbn+0x2e>
 800e2aa:	a10f      	add	r1, pc, #60	@ (adr r1, 800e2e8 <scalbn+0xe8>)
 800e2ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2b0:	e7bd      	b.n	800e22e <scalbn+0x2e>
 800e2b2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e2b6:	3236      	adds	r2, #54	@ 0x36
 800e2b8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e2bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e2c0:	4620      	mov	r0, r4
 800e2c2:	4b0d      	ldr	r3, [pc, #52]	@ (800e2f8 <scalbn+0xf8>)
 800e2c4:	4629      	mov	r1, r5
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	e7d4      	b.n	800e274 <scalbn+0x74>
 800e2ca:	bf00      	nop
 800e2cc:	f3af 8000 	nop.w
 800e2d0:	c2f8f359 	.word	0xc2f8f359
 800e2d4:	01a56e1f 	.word	0x01a56e1f
 800e2d8:	8800759c 	.word	0x8800759c
 800e2dc:	7e37e43c 	.word	0x7e37e43c
 800e2e0:	8800759c 	.word	0x8800759c
 800e2e4:	fe37e43c 	.word	0xfe37e43c
 800e2e8:	c2f8f359 	.word	0xc2f8f359
 800e2ec:	81a56e1f 	.word	0x81a56e1f
 800e2f0:	43500000 	.word	0x43500000
 800e2f4:	ffff3cb0 	.word	0xffff3cb0
 800e2f8:	3c900000 	.word	0x3c900000
 800e2fc:	00000000 	.word	0x00000000

0800e300 <floor>:
 800e300:	ec51 0b10 	vmov	r0, r1, d0
 800e304:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e30c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800e310:	2e13      	cmp	r6, #19
 800e312:	460c      	mov	r4, r1
 800e314:	4605      	mov	r5, r0
 800e316:	4680      	mov	r8, r0
 800e318:	dc34      	bgt.n	800e384 <floor+0x84>
 800e31a:	2e00      	cmp	r6, #0
 800e31c:	da17      	bge.n	800e34e <floor+0x4e>
 800e31e:	a332      	add	r3, pc, #200	@ (adr r3, 800e3e8 <floor+0xe8>)
 800e320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e324:	f7f1 ffb2 	bl	800028c <__adddf3>
 800e328:	2200      	movs	r2, #0
 800e32a:	2300      	movs	r3, #0
 800e32c:	f7f2 fbf4 	bl	8000b18 <__aeabi_dcmpgt>
 800e330:	b150      	cbz	r0, 800e348 <floor+0x48>
 800e332:	2c00      	cmp	r4, #0
 800e334:	da55      	bge.n	800e3e2 <floor+0xe2>
 800e336:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800e33a:	432c      	orrs	r4, r5
 800e33c:	2500      	movs	r5, #0
 800e33e:	42ac      	cmp	r4, r5
 800e340:	4c2b      	ldr	r4, [pc, #172]	@ (800e3f0 <floor+0xf0>)
 800e342:	bf08      	it	eq
 800e344:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800e348:	4621      	mov	r1, r4
 800e34a:	4628      	mov	r0, r5
 800e34c:	e023      	b.n	800e396 <floor+0x96>
 800e34e:	4f29      	ldr	r7, [pc, #164]	@ (800e3f4 <floor+0xf4>)
 800e350:	4137      	asrs	r7, r6
 800e352:	ea01 0307 	and.w	r3, r1, r7
 800e356:	4303      	orrs	r3, r0
 800e358:	d01d      	beq.n	800e396 <floor+0x96>
 800e35a:	a323      	add	r3, pc, #140	@ (adr r3, 800e3e8 <floor+0xe8>)
 800e35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e360:	f7f1 ff94 	bl	800028c <__adddf3>
 800e364:	2200      	movs	r2, #0
 800e366:	2300      	movs	r3, #0
 800e368:	f7f2 fbd6 	bl	8000b18 <__aeabi_dcmpgt>
 800e36c:	2800      	cmp	r0, #0
 800e36e:	d0eb      	beq.n	800e348 <floor+0x48>
 800e370:	2c00      	cmp	r4, #0
 800e372:	bfbe      	ittt	lt
 800e374:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800e378:	4133      	asrlt	r3, r6
 800e37a:	18e4      	addlt	r4, r4, r3
 800e37c:	ea24 0407 	bic.w	r4, r4, r7
 800e380:	2500      	movs	r5, #0
 800e382:	e7e1      	b.n	800e348 <floor+0x48>
 800e384:	2e33      	cmp	r6, #51	@ 0x33
 800e386:	dd0a      	ble.n	800e39e <floor+0x9e>
 800e388:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800e38c:	d103      	bne.n	800e396 <floor+0x96>
 800e38e:	4602      	mov	r2, r0
 800e390:	460b      	mov	r3, r1
 800e392:	f7f1 ff7b 	bl	800028c <__adddf3>
 800e396:	ec41 0b10 	vmov	d0, r0, r1
 800e39a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e39e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800e3a2:	f04f 37ff 	mov.w	r7, #4294967295
 800e3a6:	40df      	lsrs	r7, r3
 800e3a8:	4207      	tst	r7, r0
 800e3aa:	d0f4      	beq.n	800e396 <floor+0x96>
 800e3ac:	a30e      	add	r3, pc, #56	@ (adr r3, 800e3e8 <floor+0xe8>)
 800e3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b2:	f7f1 ff6b 	bl	800028c <__adddf3>
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	f7f2 fbad 	bl	8000b18 <__aeabi_dcmpgt>
 800e3be:	2800      	cmp	r0, #0
 800e3c0:	d0c2      	beq.n	800e348 <floor+0x48>
 800e3c2:	2c00      	cmp	r4, #0
 800e3c4:	da0a      	bge.n	800e3dc <floor+0xdc>
 800e3c6:	2e14      	cmp	r6, #20
 800e3c8:	d101      	bne.n	800e3ce <floor+0xce>
 800e3ca:	3401      	adds	r4, #1
 800e3cc:	e006      	b.n	800e3dc <floor+0xdc>
 800e3ce:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	40b3      	lsls	r3, r6
 800e3d6:	441d      	add	r5, r3
 800e3d8:	4545      	cmp	r5, r8
 800e3da:	d3f6      	bcc.n	800e3ca <floor+0xca>
 800e3dc:	ea25 0507 	bic.w	r5, r5, r7
 800e3e0:	e7b2      	b.n	800e348 <floor+0x48>
 800e3e2:	2500      	movs	r5, #0
 800e3e4:	462c      	mov	r4, r5
 800e3e6:	e7af      	b.n	800e348 <floor+0x48>
 800e3e8:	8800759c 	.word	0x8800759c
 800e3ec:	7e37e43c 	.word	0x7e37e43c
 800e3f0:	bff00000 	.word	0xbff00000
 800e3f4:	000fffff 	.word	0x000fffff

0800e3f8 <_init>:
 800e3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3fa:	bf00      	nop
 800e3fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3fe:	bc08      	pop	{r3}
 800e400:	469e      	mov	lr, r3
 800e402:	4770      	bx	lr

0800e404 <_fini>:
 800e404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e406:	bf00      	nop
 800e408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e40a:	bc08      	pop	{r3}
 800e40c:	469e      	mov	lr, r3
 800e40e:	4770      	bx	lr
