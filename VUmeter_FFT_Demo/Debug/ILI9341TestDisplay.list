
ILI9341TestDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004348  0800aed0  0800aed0  0001aed0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f218  0800f218  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f218  0800f218  0001f218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f220  0800f220  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f220  0800f220  0001f220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f224  0800f224  0001f224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800f228  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009b24  200001e8  0800f410  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009d0c  0800f410  00029d0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e5e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a6e  00000000  00000000  00033076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  00035ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec8  00000000  00000000  00036ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c34  00000000  00000000  00037978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001354c  00000000  00000000  000595ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6d83  00000000  00000000  0006caf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013387b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000530c  00000000  00000000  001338cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aeb4 	.word	0x0800aeb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800aeb4 	.word	0x0800aeb4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	0000      	movs	r0, r0
	...

08000f50 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f50:	b5b0      	push	{r4, r5, r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f54:	f001 fc49 	bl	80027ea <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f58:	f000 f8c8 	bl	80010ec <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000f5c:	f000 f928 	bl	80011b0 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f60:	f000 fa58 	bl	8001414 <MX_GPIO_Init>
	MX_DMA_Init();
 8000f64:	f000 fa1c 	bl	80013a0 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000f68:	f000 f9ea 	bl	8001340 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 8000f6c:	f000 f9aa 	bl	80012c4 <MX_SPI1_Init>
	MX_SAI1_Init();
 8000f70:	f000 f948 	bl	8001204 <MX_SAI1_Init>
	/* USER CODE BEGIN 2 */
	Displ_Init(Displ_Orientat_270);	// initialize the display and set the initial display orientation (here is orientaton: 0°) - THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 8000f74:	2003      	movs	r0, #3
 8000f76:	f001 f8eb 	bl	8002150 <Displ_Init>
	Displ_CLS(BLACK);// after initialization (above) and before turning on backlight (below), you can draw the initial display appearance. (here I'm just clearing display with a black background)
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f001 fa6c 	bl	8002458 <Displ_CLS>
	Displ_BackLight('F');  	// initialize backlight and turn it on at init level
 8000f80:	2046      	movs	r0, #70	; 0x46
 8000f82:	f001 fbb7 	bl	80026f4 <Displ_BackLight>
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*) saiTx_buf, SAI_BUF_LEN);
 8000f86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f8a:	494f      	ldr	r1, [pc, #316]	; (80010c8 <main+0x178>)
 8000f8c:	484f      	ldr	r0, [pc, #316]	; (80010cc <main+0x17c>)
 8000f8e:	f004 f9f7 	bl	8005380 <HAL_SAI_Transmit_DMA>
	HAL_SAI_Receive_DMA(&hsai_BlockB1, (uint8_t*) saiRx_buf, SAI_BUF_LEN);
 8000f92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f96:	494e      	ldr	r1, [pc, #312]	; (80010d0 <main+0x180>)
 8000f98:	484e      	ldr	r0, [pc, #312]	; (80010d4 <main+0x184>)
 8000f9a:	f004 faa1 	bl	80054e0 <HAL_SAI_Receive_DMA>
	Displ_Orientation(Displ_Orientat_270);
 8000f9e:	2003      	movs	r0, #3
 8000fa0:	f001 f8f2 	bl	8002188 <Displ_Orientation>
	Displ_CLS(BLUE);
 8000fa4:	201f      	movs	r0, #31
 8000fa6:	f001 fa57 	bl	8002458 <Displ_CLS>
		HAL_Delay(2000);
		Displ_ColorTest();
		HAL_Delay(2000);
*/

		if (powerComputed){
 8000faa:	4b4b      	ldr	r3, [pc, #300]	; (80010d8 <main+0x188>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d0fb      	beq.n	8000faa <main+0x5a>
			PwrAvgLeft = 0.93*PwrAvgLeft + 0.07*PowerLeft/100000;
 8000fb2:	4b4a      	ldr	r3, [pc, #296]	; (80010dc <main+0x18c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fac6 	bl	8000548 <__aeabi_f2d>
 8000fbc:	a33c      	add	r3, pc, #240	; (adr r3, 80010b0 <main+0x160>)
 8000fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc2:	f7ff fb19 	bl	80005f8 <__aeabi_dmul>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4614      	mov	r4, r2
 8000fcc:	461d      	mov	r5, r3
 8000fce:	4b44      	ldr	r3, [pc, #272]	; (80010e0 <main+0x190>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fa96 	bl	8000504 <__aeabi_ui2d>
 8000fd8:	a337      	add	r3, pc, #220	; (adr r3, 80010b8 <main+0x168>)
 8000fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fde:	f7ff fb0b 	bl	80005f8 <__aeabi_dmul>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	a335      	add	r3, pc, #212	; (adr r3, 80010c0 <main+0x170>)
 8000fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff0:	f7ff fc2c 	bl	800084c <__aeabi_ddiv>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	4629      	mov	r1, r5
 8000ffc:	f7ff f946 	bl	800028c <__adddf3>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4610      	mov	r0, r2
 8001006:	4619      	mov	r1, r3
 8001008:	f7ff fdce 	bl	8000ba8 <__aeabi_d2f>
 800100c:	4603      	mov	r3, r0
 800100e:	4a33      	ldr	r2, [pc, #204]	; (80010dc <main+0x18c>)
 8001010:	6013      	str	r3, [r2, #0]
			PwrAvgRight = 0.93*PwrAvgRight + 0.07*PowerRight/100000;
 8001012:	4b34      	ldr	r3, [pc, #208]	; (80010e4 <main+0x194>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fa96 	bl	8000548 <__aeabi_f2d>
 800101c:	a324      	add	r3, pc, #144	; (adr r3, 80010b0 <main+0x160>)
 800101e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001022:	f7ff fae9 	bl	80005f8 <__aeabi_dmul>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4614      	mov	r4, r2
 800102c:	461d      	mov	r5, r3
 800102e:	4b2e      	ldr	r3, [pc, #184]	; (80010e8 <main+0x198>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fa66 	bl	8000504 <__aeabi_ui2d>
 8001038:	a31f      	add	r3, pc, #124	; (adr r3, 80010b8 <main+0x168>)
 800103a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103e:	f7ff fadb 	bl	80005f8 <__aeabi_dmul>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4610      	mov	r0, r2
 8001048:	4619      	mov	r1, r3
 800104a:	a31d      	add	r3, pc, #116	; (adr r3, 80010c0 <main+0x170>)
 800104c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001050:	f7ff fbfc 	bl	800084c <__aeabi_ddiv>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4620      	mov	r0, r4
 800105a:	4629      	mov	r1, r5
 800105c:	f7ff f916 	bl	800028c <__adddf3>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4610      	mov	r0, r2
 8001066:	4619      	mov	r1, r3
 8001068:	f7ff fd9e 	bl	8000ba8 <__aeabi_d2f>
 800106c:	4603      	mov	r3, r0
 800106e:	4a1d      	ldr	r2, [pc, #116]	; (80010e4 <main+0x194>)
 8001070:	6013      	str	r3, [r2, #0]
			displayVUmeter(24, 10, (int)PwrAvgLeft);
 8001072:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <main+0x18c>)
 8001074:	edd3 7a00 	vldr	s15, [r3]
 8001078:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800107c:	ee17 3a90 	vmov	r3, s15
 8001080:	b21b      	sxth	r3, r3
 8001082:	461a      	mov	r2, r3
 8001084:	210a      	movs	r1, #10
 8001086:	2018      	movs	r0, #24
 8001088:	f000 fe4a 	bl	8001d20 <displayVUmeter>
			displayVUmeter(184, 10, (int)PwrAvgRight);
 800108c:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <main+0x194>)
 800108e:	edd3 7a00 	vldr	s15, [r3]
 8001092:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001096:	ee17 3a90 	vmov	r3, s15
 800109a:	b21b      	sxth	r3, r3
 800109c:	461a      	mov	r2, r3
 800109e:	210a      	movs	r1, #10
 80010a0:	20b8      	movs	r0, #184	; 0xb8
 80010a2:	f000 fe3d 	bl	8001d20 <displayVUmeter>
			powerComputed = 0;
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <main+0x188>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
		if (powerComputed){
 80010ac:	e77d      	b.n	8000faa <main+0x5a>
 80010ae:	bf00      	nop
 80010b0:	5c28f5c3 	.word	0x5c28f5c3
 80010b4:	3fedc28f 	.word	0x3fedc28f
 80010b8:	1eb851ec 	.word	0x1eb851ec
 80010bc:	3fb1eb85 	.word	0x3fb1eb85
 80010c0:	00000000 	.word	0x00000000
 80010c4:	40f86a00 	.word	0x40f86a00
 80010c8:	200004cc 	.word	0x200004cc
 80010cc:	20000204 	.word	0x20000204
 80010d0:	20000ccc 	.word	0x20000ccc
 80010d4:	20000288 	.word	0x20000288
 80010d8:	200014dc 	.word	0x200014dc
 80010dc:	200014d4 	.word	0x200014d4
 80010e0:	200014cc 	.word	0x200014cc
 80010e4:	200014d8 	.word	0x200014d8
 80010e8:	200014d0 	.word	0x200014d0

080010ec <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b096      	sub	sp, #88	; 0x58
 80010f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	2244      	movs	r2, #68	; 0x44
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f006 f91e 	bl	800733c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001100:	463b      	mov	r3, r7
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 800110e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001112:	f002 f95b 	bl	80033cc <HAL_PWREx_ControlVoltageScaling>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 800111c:	f000 fad0 	bl	80016c0 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001120:	f002 f936 	bl	8003390 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001124:	4b21      	ldr	r3, [pc, #132]	; (80011ac <SystemClock_Config+0xc0>)
 8001126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800112a:	4a20      	ldr	r2, [pc, #128]	; (80011ac <SystemClock_Config+0xc0>)
 800112c:	f023 0318 	bic.w	r3, r3, #24
 8001130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8001134:	2314      	movs	r3, #20
 8001136:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001138:	2301      	movs	r3, #1
 800113a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800113c:	2301      	movs	r3, #1
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8001144:	2390      	movs	r3, #144	; 0x90
 8001146:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001148:	2302      	movs	r3, #2
 800114a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800114c:	2301      	movs	r3, #1
 800114e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 5;
 8001150:	2305      	movs	r3, #5
 8001152:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 33;
 8001154:	2321      	movs	r3, #33	; 0x21
 8001156:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001158:	2307      	movs	r3, #7
 800115a:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800115c:	2302      	movs	r3, #2
 800115e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001160:	2302      	movs	r3, #2
 8001162:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	4618      	mov	r0, r3
 800116a:	f002 f985 	bl	8003478 <HAL_RCC_OscConfig>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <SystemClock_Config+0x8c>
		Error_Handler();
 8001174:	f000 faa4 	bl	80016c0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001178:	230f      	movs	r3, #15
 800117a:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800117c:	2303      	movs	r3, #3
 800117e:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001180:	2300      	movs	r3, #0
 8001182:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001188:	2300      	movs	r3, #0
 800118a:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800118c:	463b      	mov	r3, r7
 800118e:	2104      	movs	r1, #4
 8001190:	4618      	mov	r0, r3
 8001192:	f002 fd85 	bl	8003ca0 <HAL_RCC_ClockConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <SystemClock_Config+0xb4>
		Error_Handler();
 800119c:	f000 fa90 	bl	80016c0 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 80011a0:	f003 fd76 	bl	8004c90 <HAL_RCCEx_EnableMSIPLLMode>
}
 80011a4:	bf00      	nop
 80011a6:	3758      	adds	r7, #88	; 0x58
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40021000 	.word	0x40021000

080011b0 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b096      	sub	sp, #88	; 0x58
 80011b4:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	2254      	movs	r2, #84	; 0x54
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f006 f8bd 	bl	800733c <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80011c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011c6:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80011cc:	2301      	movs	r3, #1
 80011ce:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 80011d0:	2305      	movs	r3, #5
 80011d2:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 64;
 80011d4:	2340      	movs	r3, #64	; 0x40
 80011d6:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV25;
 80011d8:	2319      	movs	r3, #25
 80011da:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80011dc:	2302      	movs	r3, #2
 80011de:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80011e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e8:	623b      	str	r3, [r7, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	4618      	mov	r0, r3
 80011ee:	f002 ff7b 	bl	80040e8 <HAL_RCCEx_PeriphCLKConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <PeriphCommonClock_Config+0x4c>
		Error_Handler();
 80011f8:	f000 fa62 	bl	80016c0 <Error_Handler>
	}
}
 80011fc:	bf00      	nop
 80011fe:	3758      	adds	r7, #88	; 0x58
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <MX_SAI1_Init>:
/**
 * @brief SAI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI1_Init(void) {
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	/* USER CODE END SAI1_Init 0 */

	/* USER CODE BEGIN SAI1_Init 1 */

	/* USER CODE END SAI1_Init 1 */
	hsai_BlockA1.Instance = SAI1_Block_A;
 8001208:	4b2a      	ldr	r3, [pc, #168]	; (80012b4 <MX_SAI1_Init+0xb0>)
 800120a:	4a2b      	ldr	r2, [pc, #172]	; (80012b8 <MX_SAI1_Init+0xb4>)
 800120c:	601a      	str	r2, [r3, #0]
	hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800120e:	4b29      	ldr	r3, [pc, #164]	; (80012b4 <MX_SAI1_Init+0xb0>)
 8001210:	2200      	movs	r2, #0
 8001212:	605a      	str	r2, [r3, #4]
	hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001214:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <MX_SAI1_Init+0xb0>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
	hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800121a:	4b26      	ldr	r3, [pc, #152]	; (80012b4 <MX_SAI1_Init+0xb0>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
	hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001220:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <MX_SAI1_Init+0xb0>)
 8001222:	2200      	movs	r2, #0
 8001224:	615a      	str	r2, [r3, #20]
	hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001226:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <MX_SAI1_Init+0xb0>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
	hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800122c:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <MX_SAI1_Init+0xb0>)
 800122e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001232:	61da      	str	r2, [r3, #28]
	hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001234:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <MX_SAI1_Init+0xb0>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
	hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800123a:	4b1e      	ldr	r3, [pc, #120]	; (80012b4 <MX_SAI1_Init+0xb0>)
 800123c:	2200      	movs	r2, #0
 800123e:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001240:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <MX_SAI1_Init+0xb0>)
 8001242:	2200      	movs	r2, #0
 8001244:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001246:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <MX_SAI1_Init+0xb0>)
 8001248:	2200      	movs	r2, #0
 800124a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD,
 800124c:	2302      	movs	r3, #2
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	4818      	ldr	r0, [pc, #96]	; (80012b4 <MX_SAI1_Init+0xb0>)
 8001254:	f003 feda 	bl	800500c <HAL_SAI_InitProtocol>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_SAI1_Init+0x5e>
			SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK) {
		Error_Handler();
 800125e:	f000 fa2f 	bl	80016c0 <Error_Handler>
	}
	hsai_BlockB1.Instance = SAI1_Block_B;
 8001262:	4b16      	ldr	r3, [pc, #88]	; (80012bc <MX_SAI1_Init+0xb8>)
 8001264:	4a16      	ldr	r2, [pc, #88]	; (80012c0 <MX_SAI1_Init+0xbc>)
 8001266:	601a      	str	r2, [r3, #0]
	hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001268:	4b14      	ldr	r3, [pc, #80]	; (80012bc <MX_SAI1_Init+0xb8>)
 800126a:	2203      	movs	r2, #3
 800126c:	605a      	str	r2, [r3, #4]
	hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800126e:	4b13      	ldr	r3, [pc, #76]	; (80012bc <MX_SAI1_Init+0xb8>)
 8001270:	2201      	movs	r2, #1
 8001272:	609a      	str	r2, [r3, #8]
	hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <MX_SAI1_Init+0xb8>)
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
	hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800127a:	4b10      	ldr	r3, [pc, #64]	; (80012bc <MX_SAI1_Init+0xb8>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
	hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001280:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <MX_SAI1_Init+0xb8>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
	hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001286:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <MX_SAI1_Init+0xb8>)
 8001288:	2200      	movs	r2, #0
 800128a:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <MX_SAI1_Init+0xb8>)
 800128e:	2200      	movs	r2, #0
 8001290:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <MX_SAI1_Init+0xb8>)
 8001294:	2200      	movs	r2, #0
 8001296:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD,
 8001298:	2302      	movs	r3, #2
 800129a:	2200      	movs	r2, #0
 800129c:	2100      	movs	r1, #0
 800129e:	4807      	ldr	r0, [pc, #28]	; (80012bc <MX_SAI1_Init+0xb8>)
 80012a0:	f003 feb4 	bl	800500c <HAL_SAI_InitProtocol>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_SAI1_Init+0xaa>
			SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK) {
		Error_Handler();
 80012aa:	f000 fa09 	bl	80016c0 <Error_Handler>
	}
	/* USER CODE BEGIN SAI1_Init 2 */

	/* USER CODE END SAI1_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000204 	.word	0x20000204
 80012b8:	40015404 	.word	0x40015404
 80012bc:	20000288 	.word	0x20000288
 80012c0:	40015424 	.word	0x40015424

080012c4 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80012c8:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <MX_SPI1_Init+0x74>)
 80012ca:	4a1c      	ldr	r2, [pc, #112]	; (800133c <MX_SPI1_Init+0x78>)
 80012cc:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80012ce:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <MX_SPI1_Init+0x74>)
 80012d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012d4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012d6:	4b18      	ldr	r3, [pc, #96]	; (8001338 <MX_SPI1_Init+0x74>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012dc:	4b16      	ldr	r3, [pc, #88]	; (8001338 <MX_SPI1_Init+0x74>)
 80012de:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80012e2:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <MX_SPI1_Init+0x74>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ea:	4b13      	ldr	r3, [pc, #76]	; (8001338 <MX_SPI1_Init+0x74>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <MX_SPI1_Init+0x74>)
 80012f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012f6:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <MX_SPI1_Init+0x74>)
 80012fa:	2220      	movs	r2, #32
 80012fc:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <MX_SPI1_Init+0x74>)
 8001300:	2200      	movs	r2, #0
 8001302:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <MX_SPI1_Init+0x74>)
 8001306:	2200      	movs	r2, #0
 8001308:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <MX_SPI1_Init+0x74>)
 800130c:	2200      	movs	r2, #0
 800130e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <MX_SPI1_Init+0x74>)
 8001312:	2207      	movs	r2, #7
 8001314:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <MX_SPI1_Init+0x74>)
 8001318:	2200      	movs	r2, #0
 800131a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <MX_SPI1_Init+0x74>)
 800131e:	2208      	movs	r2, #8
 8001320:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001322:	4805      	ldr	r0, [pc, #20]	; (8001338 <MX_SPI1_Init+0x74>)
 8001324:	f004 fdac 	bl	8005e80 <HAL_SPI_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_SPI1_Init+0x6e>
		Error_Handler();
 800132e:	f000 f9c7 	bl	80016c0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	2000039c 	.word	0x2000039c
 800133c:	40013000 	.word	0x40013000

08001340 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <MX_USART2_UART_Init+0x58>)
 8001346:	4a15      	ldr	r2, [pc, #84]	; (800139c <MX_USART2_UART_Init+0x5c>)
 8001348:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800134a:	4b13      	ldr	r3, [pc, #76]	; (8001398 <MX_USART2_UART_Init+0x58>)
 800134c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001350:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <MX_USART2_UART_Init+0x58>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <MX_USART2_UART_Init+0x58>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <MX_USART2_UART_Init+0x58>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <MX_USART2_UART_Init+0x58>)
 8001366:	220c      	movs	r2, #12
 8001368:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <MX_USART2_UART_Init+0x58>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <MX_USART2_UART_Init+0x58>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001376:	4b08      	ldr	r3, [pc, #32]	; (8001398 <MX_USART2_UART_Init+0x58>)
 8001378:	2200      	movs	r2, #0
 800137a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <MX_USART2_UART_Init+0x58>)
 800137e:	2200      	movs	r2, #0
 8001380:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_USART2_UART_Init+0x58>)
 8001384:	f005 fb86 	bl	8006a94 <HAL_UART_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800138e:	f000 f997 	bl	80016c0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000448 	.word	0x20000448
 800139c:	40004400 	.word	0x40004400

080013a0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80013a6:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <MX_DMA_Init+0x70>)
 80013a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013aa:	4a19      	ldr	r2, [pc, #100]	; (8001410 <MX_DMA_Init+0x70>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6493      	str	r3, [r2, #72]	; 0x48
 80013b2:	4b17      	ldr	r3, [pc, #92]	; (8001410 <MX_DMA_Init+0x70>)
 80013b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <MX_DMA_Init+0x70>)
 80013c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c2:	4a13      	ldr	r2, [pc, #76]	; (8001410 <MX_DMA_Init+0x70>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	6493      	str	r3, [r2, #72]	; 0x48
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <MX_DMA_Init+0x70>)
 80013cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	603b      	str	r3, [r7, #0]
 80013d4:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	200d      	movs	r0, #13
 80013dc:	f001 fb79 	bl	8002ad2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80013e0:	200d      	movs	r0, #13
 80013e2:	f001 fb92 	bl	8002b0a <HAL_NVIC_EnableIRQ>
	/* DMA2_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2100      	movs	r1, #0
 80013ea:	2038      	movs	r0, #56	; 0x38
 80013ec:	f001 fb71 	bl	8002ad2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80013f0:	2038      	movs	r0, #56	; 0x38
 80013f2:	f001 fb8a 	bl	8002b0a <HAL_NVIC_EnableIRQ>
	/* DMA2_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	2039      	movs	r0, #57	; 0x39
 80013fc:	f001 fb69 	bl	8002ad2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8001400:	2039      	movs	r0, #57	; 0x39
 8001402:	f001 fb82 	bl	8002b0a <HAL_NVIC_EnableIRQ>

}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40021000 	.word	0x40021000

08001414 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800142a:	4b3d      	ldr	r3, [pc, #244]	; (8001520 <MX_GPIO_Init+0x10c>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142e:	4a3c      	ldr	r2, [pc, #240]	; (8001520 <MX_GPIO_Init+0x10c>)
 8001430:	f043 0304 	orr.w	r3, r3, #4
 8001434:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001436:	4b3a      	ldr	r3, [pc, #232]	; (8001520 <MX_GPIO_Init+0x10c>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	f003 0304 	and.w	r3, r3, #4
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001442:	4b37      	ldr	r3, [pc, #220]	; (8001520 <MX_GPIO_Init+0x10c>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	4a36      	ldr	r2, [pc, #216]	; (8001520 <MX_GPIO_Init+0x10c>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800144e:	4b34      	ldr	r3, [pc, #208]	; (8001520 <MX_GPIO_Init+0x10c>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	4b31      	ldr	r3, [pc, #196]	; (8001520 <MX_GPIO_Init+0x10c>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	4a30      	ldr	r2, [pc, #192]	; (8001520 <MX_GPIO_Init+0x10c>)
 8001460:	f043 0302 	orr.w	r3, r3, #2
 8001464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001466:	4b2e      	ldr	r3, [pc, #184]	; (8001520 <MX_GPIO_Init+0x10c>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	603b      	str	r3, [r7, #0]
 8001470:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, GPIO_PIN_SET);
 8001472:	2201      	movs	r2, #1
 8001474:	2110      	movs	r1, #16
 8001476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800147a:	f001 ff59 	bl	8003330 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, TOUCH_CS_Pin | DISPL_CS_Pin, GPIO_PIN_SET);
 800147e:	2201      	movs	r2, #1
 8001480:	2182      	movs	r1, #130	; 0x82
 8001482:	4828      	ldr	r0, [pc, #160]	; (8001524 <MX_GPIO_Init+0x110>)
 8001484:	f001 ff54 	bl	8003330 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD3_Pin | DISPL_LED_Pin | DISPL_RST_Pin,
 8001488:	2200      	movs	r2, #0
 800148a:	2158      	movs	r1, #88	; 0x58
 800148c:	4825      	ldr	r0, [pc, #148]	; (8001524 <MX_GPIO_Init+0x110>)
 800148e:	f001 ff4f 	bl	8003330 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : DISPL_DC_Pin */
	GPIO_InitStruct.Pin = DISPL_DC_Pin;
 8001492:	2310      	movs	r3, #16
 8001494:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001496:	2301      	movs	r3, #1
 8001498:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800149e:	2302      	movs	r3, #2
 80014a0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(DISPL_DC_GPIO_Port, &GPIO_InitStruct);
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	4619      	mov	r1, r3
 80014a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ac:	f001 fdbe 	bl	800302c <HAL_GPIO_Init>

	/*Configure GPIO pins : TOUCH_CS_Pin DISPL_CS_Pin */
	GPIO_InitStruct.Pin = TOUCH_CS_Pin | DISPL_CS_Pin;
 80014b0:	2382      	movs	r3, #130	; 0x82
 80014b2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014bc:	2302      	movs	r3, #2
 80014be:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c0:	f107 030c 	add.w	r3, r7, #12
 80014c4:	4619      	mov	r1, r3
 80014c6:	4817      	ldr	r0, [pc, #92]	; (8001524 <MX_GPIO_Init+0x110>)
 80014c8:	f001 fdb0 	bl	800302c <HAL_GPIO_Init>

	/*Configure GPIO pin : TOUCH_INT_Pin */
	GPIO_InitStruct.Pin = TOUCH_INT_Pin;
 80014cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014d0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014d2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014d6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d8:	2301      	movs	r3, #1
 80014da:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 030c 	add.w	r3, r7, #12
 80014e0:	4619      	mov	r1, r3
 80014e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e6:	f001 fda1 	bl	800302c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin DISPL_LED_Pin DISPL_RST_Pin */
	GPIO_InitStruct.Pin = LD3_Pin | DISPL_LED_Pin | DISPL_RST_Pin;
 80014ea:	2358      	movs	r3, #88	; 0x58
 80014ec:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fa:	f107 030c 	add.w	r3, r7, #12
 80014fe:	4619      	mov	r1, r3
 8001500:	4808      	ldr	r0, [pc, #32]	; (8001524 <MX_GPIO_Init+0x110>)
 8001502:	f001 fd93 	bl	800302c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	2028      	movs	r0, #40	; 0x28
 800150c:	f001 fae1 	bl	8002ad2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001510:	2028      	movs	r0, #40	; 0x28
 8001512:	f001 fafa 	bl	8002b0a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001516:	bf00      	nop
 8001518:	3720      	adds	r7, #32
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40021000 	.word	0x40021000
 8001524:	48000400 	.word	0x48000400

08001528 <HAL_SAI_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	processData(&saiRx_buf[SAI_BUF_LEN / 2], &saiTx_buf[SAI_BUF_LEN / 2]);
 8001530:	4903      	ldr	r1, [pc, #12]	; (8001540 <HAL_SAI_RxCpltCallback+0x18>)
 8001532:	4804      	ldr	r0, [pc, #16]	; (8001544 <HAL_SAI_RxCpltCallback+0x1c>)
 8001534:	f000 f818 	bl	8001568 <processData>
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	200008cc 	.word	0x200008cc
 8001544:	200010cc 	.word	0x200010cc

08001548 <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	processData(&saiRx_buf[0], &saiTx_buf[0]);
 8001550:	4903      	ldr	r1, [pc, #12]	; (8001560 <HAL_SAI_RxHalfCpltCallback+0x18>)
 8001552:	4804      	ldr	r0, [pc, #16]	; (8001564 <HAL_SAI_RxHalfCpltCallback+0x1c>)
 8001554:	f000 f808 	bl	8001568 <processData>
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	200004cc 	.word	0x200004cc
 8001564:	20000ccc 	.word	0x20000ccc

08001568 <processData>:

void processData(int16_t *saiRxBuffer, int16_t *saiTxBuffer) {
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
	static int16_t inputSignalLeft[BUFFER_SIZE], inputSignalRight[BUFFER_SIZE];
	static int16_t outputSignalLeft[BUFFER_SIZE],
			outputSignalRight[BUFFER_SIZE];

	// copy RxBuffer to leftSignalBuffer and rightSignalBuffer
	for (index1 = 0, index2 = 0; index1 < BUFFER_SIZE; index1++) {
 8001572:	2300      	movs	r3, #0
 8001574:	81bb      	strh	r3, [r7, #12]
 8001576:	2300      	movs	r3, #0
 8001578:	817b      	strh	r3, [r7, #10]
 800157a:	e01a      	b.n	80015b2 <processData+0x4a>
		inputSignalLeft[index1] = saiRxBuffer[index2++];
 800157c:	897b      	ldrh	r3, [r7, #10]
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	817a      	strh	r2, [r7, #10]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	441a      	add	r2, r3
 8001588:	89bb      	ldrh	r3, [r7, #12]
 800158a:	f9b2 1000 	ldrsh.w	r1, [r2]
 800158e:	4a45      	ldr	r2, [pc, #276]	; (80016a4 <processData+0x13c>)
 8001590:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		inputSignalRight[index1] = saiRxBuffer[index2++];
 8001594:	897b      	ldrh	r3, [r7, #10]
 8001596:	1c5a      	adds	r2, r3, #1
 8001598:	817a      	strh	r2, [r7, #10]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	441a      	add	r2, r3
 80015a0:	89bb      	ldrh	r3, [r7, #12]
 80015a2:	f9b2 1000 	ldrsh.w	r1, [r2]
 80015a6:	4a40      	ldr	r2, [pc, #256]	; (80016a8 <processData+0x140>)
 80015a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (index1 = 0, index2 = 0; index1 < BUFFER_SIZE; index1++) {
 80015ac:	89bb      	ldrh	r3, [r7, #12]
 80015ae:	3301      	adds	r3, #1
 80015b0:	81bb      	strh	r3, [r7, #12]
 80015b2:	89bb      	ldrh	r3, [r7, #12]
 80015b4:	2bff      	cmp	r3, #255	; 0xff
 80015b6:	d9e1      	bls.n	800157c <processData+0x14>

	// Here, the data of inputSignalLeft[] and inputSignalRight[] can be processed
	// The result should be stored in outputSignalLeft[] and outpuSignalRight[].
	// Note that the arrays contain BUFFER_SIZE values each

	PowerLeft = 0;
 80015b8:	4b3c      	ldr	r3, [pc, #240]	; (80016ac <processData+0x144>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
	PowerRight = 0;
 80015be:	4b3c      	ldr	r3, [pc, #240]	; (80016b0 <processData+0x148>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
	for (i = 0; i < BUFFER_SIZE; i++) {
 80015c4:	2300      	movs	r3, #0
 80015c6:	81fb      	strh	r3, [r7, #14]
 80015c8:	e034      	b.n	8001634 <processData+0xcc>
		outputSignalLeft[i] = inputSignalLeft[i];
 80015ca:	89fa      	ldrh	r2, [r7, #14]
 80015cc:	89fb      	ldrh	r3, [r7, #14]
 80015ce:	4935      	ldr	r1, [pc, #212]	; (80016a4 <processData+0x13c>)
 80015d0:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80015d4:	4a37      	ldr	r2, [pc, #220]	; (80016b4 <processData+0x14c>)
 80015d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		PowerLeft += inputSignalLeft[i]*inputSignalLeft[i];
 80015da:	89fb      	ldrh	r3, [r7, #14]
 80015dc:	4a31      	ldr	r2, [pc, #196]	; (80016a4 <processData+0x13c>)
 80015de:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80015e2:	4619      	mov	r1, r3
 80015e4:	89fb      	ldrh	r3, [r7, #14]
 80015e6:	4a2f      	ldr	r2, [pc, #188]	; (80016a4 <processData+0x13c>)
 80015e8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80015ec:	fb01 f303 	mul.w	r3, r1, r3
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b2e      	ldr	r3, [pc, #184]	; (80016ac <processData+0x144>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4413      	add	r3, r2
 80015f8:	4a2c      	ldr	r2, [pc, #176]	; (80016ac <processData+0x144>)
 80015fa:	6013      	str	r3, [r2, #0]
		outputSignalRight[i] = inputSignalRight[i];
 80015fc:	89fa      	ldrh	r2, [r7, #14]
 80015fe:	89fb      	ldrh	r3, [r7, #14]
 8001600:	4929      	ldr	r1, [pc, #164]	; (80016a8 <processData+0x140>)
 8001602:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8001606:	4a2c      	ldr	r2, [pc, #176]	; (80016b8 <processData+0x150>)
 8001608:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		PowerRight += inputSignalRight[i]*inputSignalRight[i];
 800160c:	89fb      	ldrh	r3, [r7, #14]
 800160e:	4a26      	ldr	r2, [pc, #152]	; (80016a8 <processData+0x140>)
 8001610:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001614:	4619      	mov	r1, r3
 8001616:	89fb      	ldrh	r3, [r7, #14]
 8001618:	4a23      	ldr	r2, [pc, #140]	; (80016a8 <processData+0x140>)
 800161a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800161e:	fb01 f303 	mul.w	r3, r1, r3
 8001622:	461a      	mov	r2, r3
 8001624:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <processData+0x148>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4413      	add	r3, r2
 800162a:	4a21      	ldr	r2, [pc, #132]	; (80016b0 <processData+0x148>)
 800162c:	6013      	str	r3, [r2, #0]
	for (i = 0; i < BUFFER_SIZE; i++) {
 800162e:	89fb      	ldrh	r3, [r7, #14]
 8001630:	3301      	adds	r3, #1
 8001632:	81fb      	strh	r3, [r7, #14]
 8001634:	89fb      	ldrh	r3, [r7, #14]
 8001636:	2bff      	cmp	r3, #255	; 0xff
 8001638:	d9c7      	bls.n	80015ca <processData+0x62>
	}
	PowerRight = PowerRight >> 8;
 800163a:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <processData+0x148>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	0a1b      	lsrs	r3, r3, #8
 8001640:	4a1b      	ldr	r2, [pc, #108]	; (80016b0 <processData+0x148>)
 8001642:	6013      	str	r3, [r2, #0]
	PowerLeft = PowerLeft >> 8;
 8001644:	4b19      	ldr	r3, [pc, #100]	; (80016ac <processData+0x144>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	0a1b      	lsrs	r3, r3, #8
 800164a:	4a18      	ldr	r2, [pc, #96]	; (80016ac <processData+0x144>)
 800164c:	6013      	str	r3, [r2, #0]
	powerComputed = 1;
 800164e:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <processData+0x154>)
 8001650:	2201      	movs	r2, #1
 8001652:	601a      	str	r2, [r3, #0]

	// copy left and right txBuffer into TxBuffer
	for (index1 = 0, index2 = 0; index1 < BUFFER_SIZE; index1++) {
 8001654:	2300      	movs	r3, #0
 8001656:	81bb      	strh	r3, [r7, #12]
 8001658:	2300      	movs	r3, #0
 800165a:	817b      	strh	r3, [r7, #10]
 800165c:	e018      	b.n	8001690 <processData+0x128>
		saiTxBuffer[index2++] = outputSignalLeft[index1];
 800165e:	89ba      	ldrh	r2, [r7, #12]
 8001660:	897b      	ldrh	r3, [r7, #10]
 8001662:	1c59      	adds	r1, r3, #1
 8001664:	8179      	strh	r1, [r7, #10]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	6839      	ldr	r1, [r7, #0]
 800166a:	440b      	add	r3, r1
 800166c:	4911      	ldr	r1, [pc, #68]	; (80016b4 <processData+0x14c>)
 800166e:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001672:	801a      	strh	r2, [r3, #0]
		saiTxBuffer[index2++] = outputSignalRight[index1];
 8001674:	89ba      	ldrh	r2, [r7, #12]
 8001676:	897b      	ldrh	r3, [r7, #10]
 8001678:	1c59      	adds	r1, r3, #1
 800167a:	8179      	strh	r1, [r7, #10]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	6839      	ldr	r1, [r7, #0]
 8001680:	440b      	add	r3, r1
 8001682:	490d      	ldr	r1, [pc, #52]	; (80016b8 <processData+0x150>)
 8001684:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001688:	801a      	strh	r2, [r3, #0]
	for (index1 = 0, index2 = 0; index1 < BUFFER_SIZE; index1++) {
 800168a:	89bb      	ldrh	r3, [r7, #12]
 800168c:	3301      	adds	r3, #1
 800168e:	81bb      	strh	r3, [r7, #12]
 8001690:	89bb      	ldrh	r3, [r7, #12]
 8001692:	2bff      	cmp	r3, #255	; 0xff
 8001694:	d9e3      	bls.n	800165e <processData+0xf6>
	}
}
 8001696:	bf00      	nop
 8001698:	bf00      	nop
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	200014e0 	.word	0x200014e0
 80016a8:	200016e0 	.word	0x200016e0
 80016ac:	200014cc 	.word	0x200014cc
 80016b0:	200014d0 	.word	0x200014d0
 80016b4:	200018e0 	.word	0x200018e0
 80016b8:	20001ae0 	.word	0x20001ae0
 80016bc:	200014dc 	.word	0x200014dc

080016c0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c4:	b672      	cpsid	i
}
 80016c6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016c8:	e7fe      	b.n	80016c8 <Error_Handler+0x8>
	...

080016cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <HAL_MspInit+0x44>)
 80016d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d6:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <HAL_MspInit+0x44>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6613      	str	r3, [r2, #96]	; 0x60
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <HAL_MspInit+0x44>)
 80016e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_MspInit+0x44>)
 80016ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ee:	4a08      	ldr	r2, [pc, #32]	; (8001710 <HAL_MspInit+0x44>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f4:	6593      	str	r3, [r2, #88]	; 0x58
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_MspInit+0x44>)
 80016f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000

08001714 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a30      	ldr	r2, [pc, #192]	; (80017f4 <HAL_SPI_MspInit+0xe0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d159      	bne.n	80017ea <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001736:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <HAL_SPI_MspInit+0xe4>)
 8001738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800173a:	4a2f      	ldr	r2, [pc, #188]	; (80017f8 <HAL_SPI_MspInit+0xe4>)
 800173c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001740:	6613      	str	r3, [r2, #96]	; 0x60
 8001742:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <HAL_SPI_MspInit+0xe4>)
 8001744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001746:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <HAL_SPI_MspInit+0xe4>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001752:	4a29      	ldr	r2, [pc, #164]	; (80017f8 <HAL_SPI_MspInit+0xe4>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800175a:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <HAL_SPI_MspInit+0xe4>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DISPL_SCK_Pin|TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 8001766:	23c2      	movs	r3, #194	; 0xc2
 8001768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001772:	2303      	movs	r3, #3
 8001774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001776:	2305      	movs	r3, #5
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4619      	mov	r1, r3
 8001780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001784:	f001 fc52 	bl	800302c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001788:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <HAL_SPI_MspInit+0xe8>)
 800178a:	4a1d      	ldr	r2, [pc, #116]	; (8001800 <HAL_SPI_MspInit+0xec>)
 800178c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 800178e:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <HAL_SPI_MspInit+0xe8>)
 8001790:	2201      	movs	r2, #1
 8001792:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001794:	4b19      	ldr	r3, [pc, #100]	; (80017fc <HAL_SPI_MspInit+0xe8>)
 8001796:	2210      	movs	r2, #16
 8001798:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800179a:	4b18      	ldr	r3, [pc, #96]	; (80017fc <HAL_SPI_MspInit+0xe8>)
 800179c:	2200      	movs	r2, #0
 800179e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017a0:	4b16      	ldr	r3, [pc, #88]	; (80017fc <HAL_SPI_MspInit+0xe8>)
 80017a2:	2280      	movs	r2, #128	; 0x80
 80017a4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <HAL_SPI_MspInit+0xe8>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017ac:	4b13      	ldr	r3, [pc, #76]	; (80017fc <HAL_SPI_MspInit+0xe8>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_SPI_MspInit+0xe8>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017b8:	4b10      	ldr	r3, [pc, #64]	; (80017fc <HAL_SPI_MspInit+0xe8>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80017be:	480f      	ldr	r0, [pc, #60]	; (80017fc <HAL_SPI_MspInit+0xe8>)
 80017c0:	f001 f9be 	bl	8002b40 <HAL_DMA_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80017ca:	f7ff ff79 	bl	80016c0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <HAL_SPI_MspInit+0xe8>)
 80017d2:	655a      	str	r2, [r3, #84]	; 0x54
 80017d4:	4a09      	ldr	r2, [pc, #36]	; (80017fc <HAL_SPI_MspInit+0xe8>)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	2023      	movs	r0, #35	; 0x23
 80017e0:	f001 f977 	bl	8002ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80017e4:	2023      	movs	r0, #35	; 0x23
 80017e6:	f001 f990 	bl	8002b0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017ea:	bf00      	nop
 80017ec:	3728      	adds	r7, #40	; 0x28
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40013000 	.word	0x40013000
 80017f8:	40021000 	.word	0x40021000
 80017fc:	20000400 	.word	0x20000400
 8001800:	40020030 	.word	0x40020030

08001804 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b09e      	sub	sp, #120	; 0x78
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800181c:	f107 0310 	add.w	r3, r7, #16
 8001820:	2254      	movs	r2, #84	; 0x54
 8001822:	2100      	movs	r1, #0
 8001824:	4618      	mov	r0, r3
 8001826:	f005 fd89 	bl	800733c <memset>
  if(huart->Instance==USART2)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a28      	ldr	r2, [pc, #160]	; (80018d0 <HAL_UART_MspInit+0xcc>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d148      	bne.n	80018c6 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001834:	2302      	movs	r3, #2
 8001836:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001838:	2300      	movs	r3, #0
 800183a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800183c:	f107 0310 	add.w	r3, r7, #16
 8001840:	4618      	mov	r0, r3
 8001842:	f002 fc51 	bl	80040e8 <HAL_RCCEx_PeriphCLKConfig>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800184c:	f7ff ff38 	bl	80016c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001850:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <HAL_UART_MspInit+0xd0>)
 8001852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001854:	4a1f      	ldr	r2, [pc, #124]	; (80018d4 <HAL_UART_MspInit+0xd0>)
 8001856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800185a:	6593      	str	r3, [r2, #88]	; 0x58
 800185c:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <HAL_UART_MspInit+0xd0>)
 800185e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001868:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <HAL_UART_MspInit+0xd0>)
 800186a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186c:	4a19      	ldr	r2, [pc, #100]	; (80018d4 <HAL_UART_MspInit+0xd0>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001874:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <HAL_UART_MspInit+0xd0>)
 8001876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001880:	2304      	movs	r3, #4
 8001882:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188c:	2303      	movs	r3, #3
 800188e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001890:	2307      	movs	r3, #7
 8001892:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001894:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001898:	4619      	mov	r1, r3
 800189a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800189e:	f001 fbc5 	bl	800302c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80018a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018a6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b0:	2303      	movs	r3, #3
 80018b2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80018b4:	2303      	movs	r3, #3
 80018b6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80018b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018bc:	4619      	mov	r1, r3
 80018be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c2:	f001 fbb3 	bl	800302c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018c6:	bf00      	nop
 80018c8:	3778      	adds	r7, #120	; 0x78
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40004400 	.word	0x40004400
 80018d4:	40021000 	.word	0x40021000

080018d8 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	; 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a64      	ldr	r2, [pc, #400]	; (8001a78 <HAL_SAI_MspInit+0x1a0>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d15f      	bne.n	80019aa <HAL_SAI_MspInit+0xd2>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80018ea:	4b64      	ldr	r3, [pc, #400]	; (8001a7c <HAL_SAI_MspInit+0x1a4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d113      	bne.n	800191a <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80018f2:	4b63      	ldr	r3, [pc, #396]	; (8001a80 <HAL_SAI_MspInit+0x1a8>)
 80018f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f6:	4a62      	ldr	r2, [pc, #392]	; (8001a80 <HAL_SAI_MspInit+0x1a8>)
 80018f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018fc:	6613      	str	r3, [r2, #96]	; 0x60
 80018fe:	4b60      	ldr	r3, [pc, #384]	; (8001a80 <HAL_SAI_MspInit+0x1a8>)
 8001900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001902:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	204a      	movs	r0, #74	; 0x4a
 8001910:	f001 f8df 	bl	8002ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8001914:	204a      	movs	r0, #74	; 0x4a
 8001916:	f001 f8f8 	bl	8002b0a <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 800191a:	4b58      	ldr	r3, [pc, #352]	; (8001a7c <HAL_SAI_MspInit+0x1a4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	3301      	adds	r3, #1
 8001920:	4a56      	ldr	r2, [pc, #344]	; (8001a7c <HAL_SAI_MspInit+0x1a4>)
 8001922:	6013      	str	r3, [r2, #0]
    PA3     ------> SAI1_MCLK_A
    PA8     ------> SAI1_SCK_A
    PA9     ------> SAI1_FS_A
    PA10     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001924:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8001928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192a:	2302      	movs	r3, #2
 800192c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001932:	2300      	movs	r3, #0
 8001934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001936:	230d      	movs	r3, #13
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193a:	f107 0314 	add.w	r3, r7, #20
 800193e:	4619      	mov	r1, r3
 8001940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001944:	f001 fb72 	bl	800302c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Channel1;
 8001948:	4b4e      	ldr	r3, [pc, #312]	; (8001a84 <HAL_SAI_MspInit+0x1ac>)
 800194a:	4a4f      	ldr	r2, [pc, #316]	; (8001a88 <HAL_SAI_MspInit+0x1b0>)
 800194c:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_1;
 800194e:	4b4d      	ldr	r3, [pc, #308]	; (8001a84 <HAL_SAI_MspInit+0x1ac>)
 8001950:	2201      	movs	r2, #1
 8001952:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001954:	4b4b      	ldr	r3, [pc, #300]	; (8001a84 <HAL_SAI_MspInit+0x1ac>)
 8001956:	2210      	movs	r2, #16
 8001958:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800195a:	4b4a      	ldr	r3, [pc, #296]	; (8001a84 <HAL_SAI_MspInit+0x1ac>)
 800195c:	2200      	movs	r2, #0
 800195e:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001960:	4b48      	ldr	r3, [pc, #288]	; (8001a84 <HAL_SAI_MspInit+0x1ac>)
 8001962:	2280      	movs	r2, #128	; 0x80
 8001964:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001966:	4b47      	ldr	r3, [pc, #284]	; (8001a84 <HAL_SAI_MspInit+0x1ac>)
 8001968:	f44f 7280 	mov.w	r2, #256	; 0x100
 800196c:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800196e:	4b45      	ldr	r3, [pc, #276]	; (8001a84 <HAL_SAI_MspInit+0x1ac>)
 8001970:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001974:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001976:	4b43      	ldr	r3, [pc, #268]	; (8001a84 <HAL_SAI_MspInit+0x1ac>)
 8001978:	2220      	movs	r2, #32
 800197a:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 800197c:	4b41      	ldr	r3, [pc, #260]	; (8001a84 <HAL_SAI_MspInit+0x1ac>)
 800197e:	2200      	movs	r2, #0
 8001980:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001982:	4840      	ldr	r0, [pc, #256]	; (8001a84 <HAL_SAI_MspInit+0x1ac>)
 8001984:	f001 f8dc 	bl	8002b40 <HAL_DMA_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_SAI_MspInit+0xba>
    {
      Error_Handler();
 800198e:	f7ff fe97 	bl	80016c0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a3b      	ldr	r2, [pc, #236]	; (8001a84 <HAL_SAI_MspInit+0x1ac>)
 8001996:	671a      	str	r2, [r3, #112]	; 0x70
 8001998:	4a3a      	ldr	r2, [pc, #232]	; (8001a84 <HAL_SAI_MspInit+0x1ac>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6293      	str	r3, [r2, #40]	; 0x28

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a38      	ldr	r2, [pc, #224]	; (8001a84 <HAL_SAI_MspInit+0x1ac>)
 80019a2:	66da      	str	r2, [r3, #108]	; 0x6c
 80019a4:	4a37      	ldr	r2, [pc, #220]	; (8001a84 <HAL_SAI_MspInit+0x1ac>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6293      	str	r3, [r2, #40]	; 0x28

    }
    if(hsai->Instance==SAI1_Block_B)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a37      	ldr	r2, [pc, #220]	; (8001a8c <HAL_SAI_MspInit+0x1b4>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d15d      	bne.n	8001a70 <HAL_SAI_MspInit+0x198>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 80019b4:	4b31      	ldr	r3, [pc, #196]	; (8001a7c <HAL_SAI_MspInit+0x1a4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d113      	bne.n	80019e4 <HAL_SAI_MspInit+0x10c>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80019bc:	4b30      	ldr	r3, [pc, #192]	; (8001a80 <HAL_SAI_MspInit+0x1a8>)
 80019be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c0:	4a2f      	ldr	r2, [pc, #188]	; (8001a80 <HAL_SAI_MspInit+0x1a8>)
 80019c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019c6:	6613      	str	r3, [r2, #96]	; 0x60
 80019c8:	4b2d      	ldr	r3, [pc, #180]	; (8001a80 <HAL_SAI_MspInit+0x1a8>)
 80019ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 80019d4:	2200      	movs	r2, #0
 80019d6:	2100      	movs	r1, #0
 80019d8:	204a      	movs	r0, #74	; 0x4a
 80019da:	f001 f87a 	bl	8002ad2 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI1_IRQn);
 80019de:	204a      	movs	r0, #74	; 0x4a
 80019e0:	f001 f893 	bl	8002b0a <HAL_NVIC_EnableIRQ>
      }
    SAI1_client ++;
 80019e4:	4b25      	ldr	r3, [pc, #148]	; (8001a7c <HAL_SAI_MspInit+0x1a4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	3301      	adds	r3, #1
 80019ea:	4a24      	ldr	r2, [pc, #144]	; (8001a7c <HAL_SAI_MspInit+0x1a4>)
 80019ec:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PB5     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80019ee:	2320      	movs	r3, #32
 80019f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	2302      	movs	r3, #2
 80019f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80019fe:	230d      	movs	r3, #13
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4619      	mov	r1, r3
 8001a08:	4821      	ldr	r0, [pc, #132]	; (8001a90 <HAL_SAI_MspInit+0x1b8>)
 8001a0a:	f001 fb0f 	bl	800302c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Channel2;
 8001a0e:	4b21      	ldr	r3, [pc, #132]	; (8001a94 <HAL_SAI_MspInit+0x1bc>)
 8001a10:	4a21      	ldr	r2, [pc, #132]	; (8001a98 <HAL_SAI_MspInit+0x1c0>)
 8001a12:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_1;
 8001a14:	4b1f      	ldr	r3, [pc, #124]	; (8001a94 <HAL_SAI_MspInit+0x1bc>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a1a:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <HAL_SAI_MspInit+0x1bc>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a20:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <HAL_SAI_MspInit+0x1bc>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8001a26:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <HAL_SAI_MspInit+0x1bc>)
 8001a28:	2280      	movs	r2, #128	; 0x80
 8001a2a:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a2c:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <HAL_SAI_MspInit+0x1bc>)
 8001a2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a32:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a34:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <HAL_SAI_MspInit+0x1bc>)
 8001a36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a3a:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8001a3c:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <HAL_SAI_MspInit+0x1bc>)
 8001a3e:	2220      	movs	r2, #32
 8001a40:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 8001a42:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <HAL_SAI_MspInit+0x1bc>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8001a48:	4812      	ldr	r0, [pc, #72]	; (8001a94 <HAL_SAI_MspInit+0x1bc>)
 8001a4a:	f001 f879 	bl	8002b40 <HAL_DMA_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 8001a54:	f7ff fe34 	bl	80016c0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a0e      	ldr	r2, [pc, #56]	; (8001a94 <HAL_SAI_MspInit+0x1bc>)
 8001a5c:	671a      	str	r2, [r3, #112]	; 0x70
 8001a5e:	4a0d      	ldr	r2, [pc, #52]	; (8001a94 <HAL_SAI_MspInit+0x1bc>)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a0b      	ldr	r2, [pc, #44]	; (8001a94 <HAL_SAI_MspInit+0x1bc>)
 8001a68:	66da      	str	r2, [r3, #108]	; 0x6c
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <HAL_SAI_MspInit+0x1bc>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6293      	str	r3, [r2, #40]	; 0x28
    }
}
 8001a70:	bf00      	nop
 8001a72:	3728      	adds	r7, #40	; 0x28
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40015404 	.word	0x40015404
 8001a7c:	20001ce0 	.word	0x20001ce0
 8001a80:	40021000 	.word	0x40021000
 8001a84:	2000030c 	.word	0x2000030c
 8001a88:	40020408 	.word	0x40020408
 8001a8c:	40015424 	.word	0x40015424
 8001a90:	48000400 	.word	0x48000400
 8001a94:	20000354 	.word	0x20000354
 8001a98:	4002041c 	.word	0x4002041c

08001a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <NMI_Handler+0x4>

08001aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aa6:	e7fe      	b.n	8001aa6 <HardFault_Handler+0x4>

08001aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aac:	e7fe      	b.n	8001aac <MemManage_Handler+0x4>

08001aae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ab2:	e7fe      	b.n	8001ab2 <BusFault_Handler+0x4>

08001ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <UsageFault_Handler+0x4>

08001aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae8:	f000 fed4 	bl	8002894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001af4:	4802      	ldr	r0, [pc, #8]	; (8001b00 <DMA1_Channel3_IRQHandler+0x10>)
 8001af6:	f001 f9ba 	bl	8002e6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000400 	.word	0x20000400

08001b04 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001b08:	4802      	ldr	r0, [pc, #8]	; (8001b14 <SPI1_IRQHandler+0x10>)
 8001b0a:	f004 fcbf 	bl	800648c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	2000039c 	.word	0x2000039c

08001b18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_INT_Pin);
 8001b1c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001b20:	f001 fc1e 	bl	8003360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001b2c:	4802      	ldr	r0, [pc, #8]	; (8001b38 <DMA2_Channel1_IRQHandler+0x10>)
 8001b2e:	f001 f99e 	bl	8002e6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	2000030c 	.word	0x2000030c

08001b3c <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8001b40:	4802      	ldr	r0, [pc, #8]	; (8001b4c <DMA2_Channel2_IRQHandler+0x10>)
 8001b42:	f001 f994 	bl	8002e6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000354 	.word	0x20000354

08001b50 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 8001b54:	4803      	ldr	r0, [pc, #12]	; (8001b64 <SAI1_IRQHandler+0x14>)
 8001b56:	f003 fd51 	bl	80055fc <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB1);
 8001b5a:	4803      	ldr	r0, [pc, #12]	; (8001b68 <SAI1_IRQHandler+0x18>)
 8001b5c:	f003 fd4e 	bl	80055fc <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000204 	.word	0x20000204
 8001b68:	20000288 	.word	0x20000288

08001b6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return 1;
 8001b70:	2301      	movs	r3, #1
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <_kill>:

int _kill(int pid, int sig)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b86:	f005 fbaf 	bl	80072e8 <__errno>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2216      	movs	r2, #22
 8001b8e:	601a      	str	r2, [r3, #0]
  return -1;
 8001b90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <_exit>:

void _exit (int status)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff ffe7 	bl	8001b7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bae:	e7fe      	b.n	8001bae <_exit+0x12>

08001bb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	e00a      	b.n	8001bd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bc2:	f3af 8000 	nop.w
 8001bc6:	4601      	mov	r1, r0
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	60ba      	str	r2, [r7, #8]
 8001bce:	b2ca      	uxtb	r2, r1
 8001bd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	dbf0      	blt.n	8001bc2 <_read+0x12>
  }

  return len;
 8001be0:	687b      	ldr	r3, [r7, #4]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b086      	sub	sp, #24
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	e009      	b.n	8001c10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	60ba      	str	r2, [r7, #8]
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	dbf1      	blt.n	8001bfc <_write+0x12>
  }
  return len;
 8001c18:	687b      	ldr	r3, [r7, #4]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <_close>:

int _close(int file)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c4a:	605a      	str	r2, [r3, #4]
  return 0;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <_isatty>:

int _isatty(int file)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c62:	2301      	movs	r3, #1
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c94:	4a14      	ldr	r2, [pc, #80]	; (8001ce8 <_sbrk+0x5c>)
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <_sbrk+0x60>)
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ca0:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <_sbrk+0x64>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d102      	bne.n	8001cae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <_sbrk+0x64>)
 8001caa:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <_sbrk+0x68>)
 8001cac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cae:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <_sbrk+0x64>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d207      	bcs.n	8001ccc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cbc:	f005 fb14 	bl	80072e8 <__errno>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cca:	e009      	b.n	8001ce0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <_sbrk+0x64>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cd2:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <_sbrk+0x64>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	4a05      	ldr	r2, [pc, #20]	; (8001cf0 <_sbrk+0x64>)
 8001cdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cde:	68fb      	ldr	r3, [r7, #12]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20010000 	.word	0x20010000
 8001cec:	00000400 	.word	0x00000400
 8001cf0:	20001ce4 	.word	0x20001ce4
 8001cf4:	20009d10 	.word	0x20009d10

08001cf8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <SystemInit+0x20>)
 8001cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d02:	4a05      	ldr	r2, [pc, #20]	; (8001d18 <SystemInit+0x20>)
 8001d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000ed00 	.word	0xe000ed00
 8001d1c:	00000000 	.word	0x00000000

08001d20 <displayVUmeter>:
 *      Author: markus.hufschmid
 */
#include "main.h"
#include <math.h>

void displayVUmeter(uint16_t x0, uint16_t y0, int16_t percentage){
 8001d20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d24:	b088      	sub	sp, #32
 8001d26:	af02      	add	r7, sp, #8
 8001d28:	4603      	mov	r3, r0
 8001d2a:	80fb      	strh	r3, [r7, #6]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	80bb      	strh	r3, [r7, #4]
 8001d30:	4613      	mov	r3, r2
 8001d32:	807b      	strh	r3, [r7, #2]
	int16_t x1, x2, y1,y2;
	float angle;

	ILI9488_DrawImage(x0, y0, 112, 70, (uint8_t*) myVUmeter_112x70, 112*70*2);
 8001d34:	88b9      	ldrh	r1, [r7, #4]
 8001d36:	88f8      	ldrh	r0, [r7, #6]
 8001d38:	f44f 5375 	mov.w	r3, #15680	; 0x3d40
 8001d3c:	9301      	str	r3, [sp, #4]
 8001d3e:	4b6a      	ldr	r3, [pc, #424]	; (8001ee8 <displayVUmeter+0x1c8>)
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	2346      	movs	r3, #70	; 0x46
 8001d44:	2270      	movs	r2, #112	; 0x70
 8001d46:	f000 fb5d 	bl	8002404 <ILI9488_DrawImage>
	angle = (100.0-percentage)*1.38/100.0+0.88;
 8001d4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fbe8 	bl	8000524 <__aeabi_i2d>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	f04f 0000 	mov.w	r0, #0
 8001d5c:	4963      	ldr	r1, [pc, #396]	; (8001eec <displayVUmeter+0x1cc>)
 8001d5e:	f7fe fa93 	bl	8000288 <__aeabi_dsub>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	4610      	mov	r0, r2
 8001d68:	4619      	mov	r1, r3
 8001d6a:	a35b      	add	r3, pc, #364	; (adr r3, 8001ed8 <displayVUmeter+0x1b8>)
 8001d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d70:	f7fe fc42 	bl	80005f8 <__aeabi_dmul>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f04f 0200 	mov.w	r2, #0
 8001d80:	4b5a      	ldr	r3, [pc, #360]	; (8001eec <displayVUmeter+0x1cc>)
 8001d82:	f7fe fd63 	bl	800084c <__aeabi_ddiv>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	a354      	add	r3, pc, #336	; (adr r3, 8001ee0 <displayVUmeter+0x1c0>)
 8001d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d94:	f7fe fa7a 	bl	800028c <__adddf3>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f7fe ff02 	bl	8000ba8 <__aeabi_d2f>
 8001da4:	4603      	mov	r3, r0
 8001da6:	617b      	str	r3, [r7, #20]
	x1 = (int16_t)(x0 + 56 + 77*cos(angle));
 8001da8:	88fb      	ldrh	r3, [r7, #6]
 8001daa:	3338      	adds	r3, #56	; 0x38
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7fe fbb9 	bl	8000524 <__aeabi_i2d>
 8001db2:	4604      	mov	r4, r0
 8001db4:	460d      	mov	r5, r1
 8001db6:	6978      	ldr	r0, [r7, #20]
 8001db8:	f7fe fbc6 	bl	8000548 <__aeabi_f2d>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	ec43 2b10 	vmov	d0, r2, r3
 8001dc4:	f007 ffd8 	bl	8009d78 <cos>
 8001dc8:	ec51 0b10 	vmov	r0, r1, d0
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	4b47      	ldr	r3, [pc, #284]	; (8001ef0 <displayVUmeter+0x1d0>)
 8001dd2:	f7fe fc11 	bl	80005f8 <__aeabi_dmul>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4620      	mov	r0, r4
 8001ddc:	4629      	mov	r1, r5
 8001dde:	f7fe fa55 	bl	800028c <__adddf3>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	4610      	mov	r0, r2
 8001de8:	4619      	mov	r1, r3
 8001dea:	f7fe feb5 	bl	8000b58 <__aeabi_d2iz>
 8001dee:	4603      	mov	r3, r0
 8001df0:	827b      	strh	r3, [r7, #18]
	y1 = (int16_t)(y0 + 92 - 77*sin(angle));
 8001df2:	88bb      	ldrh	r3, [r7, #4]
 8001df4:	335c      	adds	r3, #92	; 0x5c
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fb94 	bl	8000524 <__aeabi_i2d>
 8001dfc:	4604      	mov	r4, r0
 8001dfe:	460d      	mov	r5, r1
 8001e00:	6978      	ldr	r0, [r7, #20]
 8001e02:	f7fe fba1 	bl	8000548 <__aeabi_f2d>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	ec43 2b10 	vmov	d0, r2, r3
 8001e0e:	f008 f807 	bl	8009e20 <sin>
 8001e12:	ec51 0b10 	vmov	r0, r1, d0
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	4b35      	ldr	r3, [pc, #212]	; (8001ef0 <displayVUmeter+0x1d0>)
 8001e1c:	f7fe fbec 	bl	80005f8 <__aeabi_dmul>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4620      	mov	r0, r4
 8001e26:	4629      	mov	r1, r5
 8001e28:	f7fe fa2e 	bl	8000288 <__aeabi_dsub>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4610      	mov	r0, r2
 8001e32:	4619      	mov	r1, r3
 8001e34:	f7fe fe90 	bl	8000b58 <__aeabi_d2iz>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	823b      	strh	r3, [r7, #16]
	x2 = (int16_t)(x0 + 56 + 22*cos(angle)/sin(angle));
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	3338      	adds	r3, #56	; 0x38
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fb6f 	bl	8000524 <__aeabi_i2d>
 8001e46:	4604      	mov	r4, r0
 8001e48:	460d      	mov	r5, r1
 8001e4a:	6978      	ldr	r0, [r7, #20]
 8001e4c:	f7fe fb7c 	bl	8000548 <__aeabi_f2d>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	ec43 2b10 	vmov	d0, r2, r3
 8001e58:	f007 ff8e 	bl	8009d78 <cos>
 8001e5c:	ec51 0b10 	vmov	r0, r1, d0
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	4b23      	ldr	r3, [pc, #140]	; (8001ef4 <displayVUmeter+0x1d4>)
 8001e66:	f7fe fbc7 	bl	80005f8 <__aeabi_dmul>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4690      	mov	r8, r2
 8001e70:	4699      	mov	r9, r3
 8001e72:	6978      	ldr	r0, [r7, #20]
 8001e74:	f7fe fb68 	bl	8000548 <__aeabi_f2d>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	ec43 2b10 	vmov	d0, r2, r3
 8001e80:	f007 ffce 	bl	8009e20 <sin>
 8001e84:	ec53 2b10 	vmov	r2, r3, d0
 8001e88:	4640      	mov	r0, r8
 8001e8a:	4649      	mov	r1, r9
 8001e8c:	f7fe fcde 	bl	800084c <__aeabi_ddiv>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4620      	mov	r0, r4
 8001e96:	4629      	mov	r1, r5
 8001e98:	f7fe f9f8 	bl	800028c <__adddf3>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f7fe fe58 	bl	8000b58 <__aeabi_d2iz>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	81fb      	strh	r3, [r7, #14]
	y2 = (int16_t)(y0 + 70);
 8001eac:	88bb      	ldrh	r3, [r7, #4]
 8001eae:	3346      	adds	r3, #70	; 0x46
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	81bb      	strh	r3, [r7, #12]
	Displ_Line(x1, y1, x2, y2, BLACK);
 8001eb4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001eb8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001ebc:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8001ec0:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 8001ec4:	2400      	movs	r4, #0
 8001ec6:	9400      	str	r4, [sp, #0]
 8001ec8:	f000 fae2 	bl	8002490 <Displ_Line>
}
 8001ecc:	bf00      	nop
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ed6:	bf00      	nop
 8001ed8:	e147ae14 	.word	0xe147ae14
 8001edc:	3ff6147a 	.word	0x3ff6147a
 8001ee0:	c28f5c29 	.word	0xc28f5c29
 8001ee4:	3fec28f5 	.word	0x3fec28f5
 8001ee8:	0800af20 	.word	0x0800af20
 8001eec:	40590000 	.word	0x40590000
 8001ef0:	40534000 	.word	0x40534000
 8001ef4:	40360000 	.word	0x40360000

08001ef8 <Displ_Select>:

/******************************************
 * @brief	enable display, disabling touch
 * 			device selected if CS low
 ******************************************/
void Displ_Select(void) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
	if (TOUCH_SPI==DISPL_SPI){														// if SPI port shared (display <-> touch)
		if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {					// if display not yet selected
 8001efc:	2180      	movs	r1, #128	; 0x80
 8001efe:	480e      	ldr	r0, [pc, #56]	; (8001f38 <Displ_Select+0x40>)
 8001f00:	f001 f9fe 	bl	8003300 <HAL_GPIO_ReadPin>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d014      	beq.n	8001f34 <Displ_Select+0x3c>
			HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); 		// unselect touch
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	2102      	movs	r1, #2
 8001f0e:	480a      	ldr	r0, [pc, #40]	; (8001f38 <Displ_Select+0x40>)
 8001f10:	f001 fa0e 	bl	8003330 <HAL_GPIO_WritePin>
			SET_DISPL_SPI_BAUDRATE;				   									//change SPI port speed as per display needs
 8001f14:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <Displ_Select+0x44>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4908      	ldr	r1, [pc, #32]	; (8001f3c <Displ_Select+0x44>)
 8001f1a:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8001f1e:	4013      	ands	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <Displ_Select+0x44>)
 8001f24:	4a05      	ldr	r2, [pc, #20]	; (8001f3c <Displ_Select+0x44>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);	// select display
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2180      	movs	r1, #128	; 0x80
 8001f2e:	4802      	ldr	r0, [pc, #8]	; (8001f38 <Displ_Select+0x40>)
 8001f30:	f001 f9fe 	bl	8003330 <HAL_GPIO_WritePin>
		}
	}
}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	48000400 	.word	0x48000400
 8001f3c:	40013000 	.word	0x40013000

08001f40 <Displ_Transmit>:
 * @PARAM	DC_Status 	indicates if sending command or data
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6039      	str	r1, [r7, #0]
 8001f48:	4611      	mov	r1, r2
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	71fb      	strb	r3, [r7, #7]
 8001f50:	460b      	mov	r3, r1
 8001f52:	80bb      	strh	r3, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 8001f58:	bf00      	nop
 8001f5a:	4b23      	ldr	r3, [pc, #140]	; (8001fe8 <Displ_Transmit+0xa8>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0fa      	beq.n	8001f5a <Displ_Transmit+0x1a>

	Displ_Select();
 8001f64:	f7ff ffc8 	bl	8001ef8 <Displ_Select>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	2110      	movs	r1, #16
 8001f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f72:	f001 f9dd 	bl	8003330 <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer){
 8001f76:	79bb      	ldrb	r3, [r7, #6]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d016      	beq.n	8001faa <Displ_Transmit+0x6a>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
		uint32_t *limit=(uint32_t*)(data+dataSize);
 8001f7c:	88bb      	ldrh	r3, [r7, #4]
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	4413      	add	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	e00b      	b.n	8001fa2 <Displ_Transmit+0x62>
			*data32=__REV16(*data32);
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	ba5b      	rev16	r3, r3
 8001f94:	60bb      	str	r3, [r7, #8]
  return result;
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	601a      	str	r2, [r3, #0]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d3ef      	bcc.n	8001f8a <Displ_Transmit+0x4a>
#ifdef DISPLAY_SPI_INTERRUPT_MODE
		Displ_SpiAvailable=0;
		HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
		if (dataSize<DISPL_DMA_CUTOFF) {
 8001faa:	88bb      	ldrh	r3, [r7, #4]
 8001fac:	2b13      	cmp	r3, #19
 8001fae:	d80d      	bhi.n	8001fcc <Displ_Transmit+0x8c>
#endif //DISPLAY_SPI_DMA_MODE
			Displ_SpiAvailable=0;
 8001fb0:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <Displ_Transmit+0xa8>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 8001fb6:	88ba      	ldrh	r2, [r7, #4]
 8001fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbc:	6839      	ldr	r1, [r7, #0]
 8001fbe:	480b      	ldr	r0, [pc, #44]	; (8001fec <Displ_Transmit+0xac>)
 8001fc0:	f004 f801 	bl	8005fc6 <HAL_SPI_Transmit>
			Displ_SpiAvailable=1;
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <Displ_Transmit+0xa8>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	701a      	strb	r2, [r3, #0]
			Displ_SpiAvailable=0;
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
		}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
	}
 8001fca:	e008      	b.n	8001fde <Displ_Transmit+0x9e>
			Displ_SpiAvailable=0;
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <Displ_Transmit+0xa8>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
 8001fd2:	88bb      	ldrh	r3, [r7, #4]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	6839      	ldr	r1, [r7, #0]
 8001fd8:	4804      	ldr	r0, [pc, #16]	; (8001fec <Displ_Transmit+0xac>)
 8001fda:	f004 f963 	bl	80062a4 <HAL_SPI_Transmit_DMA>
	}
 8001fde:	bf00      	nop
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000004 	.word	0x20000004
 8001fec:	2000039c 	.word	0x2000039c

08001ff0 <Displ_WriteCommand>:


/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]
	Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 8001ffa:	1df9      	adds	r1, r7, #7
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	2201      	movs	r2, #1
 8002000:	2000      	movs	r0, #0
 8002002:	f7ff ff9d 	bl	8001f40 <Displ_Transmit>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 800200e:	b580      	push	{r7, lr}
 8002010:	b084      	sub	sp, #16
 8002012:	af00      	add	r7, sp, #0
 8002014:	60f8      	str	r0, [r7, #12]
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	4613      	mov	r3, r2
 800201a:	71fb      	strb	r3, [r7, #7]
	if (buff_size==0) return;
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d007      	beq.n	8002032 <Displ_WriteData+0x24>
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	b29a      	uxth	r2, r3
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	68f9      	ldr	r1, [r7, #12]
 800202a:	2001      	movs	r0, #1
 800202c:	f7ff ff88 	bl	8001f40 <Displ_Transmit>
 8002030:	e000      	b.n	8002034 <Displ_WriteData+0x26>
	if (buff_size==0) return;
 8002032:	bf00      	nop
}
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <ILI9XXX_Init>:


/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
	Displ_Select();
 8002040:	f7ff ff5a 	bl	8001ef8 <Displ_Select>

	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8002044:	2200      	movs	r2, #0
 8002046:	2140      	movs	r1, #64	; 0x40
 8002048:	4819      	ldr	r0, [pc, #100]	; (80020b0 <ILI9XXX_Init+0x74>)
 800204a:	f001 f971 	bl	8003330 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800204e:	2001      	movs	r0, #1
 8002050:	f000 fc40 	bl	80028d4 <HAL_Delay>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8002054:	2201      	movs	r2, #1
 8002056:	2140      	movs	r1, #64	; 0x40
 8002058:	4815      	ldr	r0, [pc, #84]	; (80020b0 <ILI9XXX_Init+0x74>)
 800205a:	f001 f969 	bl	8003330 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 800205e:	2096      	movs	r0, #150	; 0x96
 8002060:	f000 fc38 	bl	80028d4 <HAL_Delay>
		Displ_WriteData(data,3);
	#endif
*/


	Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8002064:	203a      	movs	r0, #58	; 0x3a
 8002066:	f7ff ffc3 	bl	8001ff0 <Displ_WriteCommand>
#ifdef Z_RGB666
	Displ_WriteData((uint8_t *)"\x66",1,0);		// RGB666
#endif
#ifdef Z_RGB565
	Displ_WriteData((uint8_t *)"\x55",1,0);		// RGB565
 800206a:	2200      	movs	r2, #0
 800206c:	2101      	movs	r1, #1
 800206e:	4811      	ldr	r0, [pc, #68]	; (80020b4 <ILI9XXX_Init+0x78>)
 8002070:	f7ff ffcd 	bl	800200e <Displ_WriteData>
#endif
	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8002074:	20b0      	movs	r0, #176	; 0xb0
 8002076:	f7ff ffbb 	bl	8001ff0 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 800207a:	2200      	movs	r2, #0
 800207c:	2101      	movs	r1, #1
 800207e:	480e      	ldr	r0, [pc, #56]	; (80020b8 <ILI9XXX_Init+0x7c>)
 8002080:	f7ff ffc5 	bl	800200e <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8002084:	20b0      	movs	r0, #176	; 0xb0
 8002086:	f7ff ffb3 	bl	8001ff0 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 800208a:	2200      	movs	r2, #0
 800208c:	2101      	movs	r1, #1
 800208e:	480a      	ldr	r0, [pc, #40]	; (80020b8 <ILI9XXX_Init+0x7c>)
 8002090:	f7ff ffbd 	bl	800200e <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8002094:	2011      	movs	r0, #17
 8002096:	f7ff ffab 	bl	8001ff0 <Displ_WriteCommand>
	HAL_Delay(120);
 800209a:	2078      	movs	r0, #120	; 0x78
 800209c:	f000 fc1a 	bl	80028d4 <HAL_Delay>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 80020a0:	2029      	movs	r0, #41	; 0x29
 80020a2:	f7ff ffa5 	bl	8001ff0 <Displ_WriteCommand>
	HAL_Delay(5);
 80020a6:	2005      	movs	r0, #5
 80020a8:	f000 fc14 	bl	80028d4 <HAL_Delay>

}
 80020ac:	bf00      	nop
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	48000400 	.word	0x48000400
 80020b4:	0800aed0 	.word	0x0800aed0
 80020b8:	0800aed4 	.word	0x0800aed4

080020bc <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80020bc:	b590      	push	{r4, r7, lr}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4604      	mov	r4, r0
 80020c4:	4608      	mov	r0, r1
 80020c6:	4611      	mov	r1, r2
 80020c8:	461a      	mov	r2, r3
 80020ca:	4623      	mov	r3, r4
 80020cc:	80fb      	strh	r3, [r7, #6]
 80020ce:	4603      	mov	r3, r0
 80020d0:	80bb      	strh	r3, [r7, #4]
 80020d2:	460b      	mov	r3, r1
 80020d4:	807b      	strh	r3, [r7, #2]
 80020d6:	4613      	mov	r3, r2
 80020d8:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 80020da:	887b      	ldrh	r3, [r7, #2]
 80020dc:	061a      	lsls	r2, r3, #24
 80020de:	887b      	ldrh	r3, [r7, #2]
 80020e0:	021b      	lsls	r3, r3, #8
 80020e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80020e6:	431a      	orrs	r2, r3
 80020e8:	88fb      	ldrh	r3, [r7, #6]
 80020ea:	021b      	lsls	r3, r3, #8
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	4313      	orrs	r3, r2
 80020f0:	88fa      	ldrh	r2, [r7, #6]
 80020f2:	0a12      	lsrs	r2, r2, #8
 80020f4:	b292      	uxth	r2, r2
 80020f6:	431a      	orrs	r2, r3
 80020f8:	4b14      	ldr	r3, [pc, #80]	; (800214c <Displ_SetAddressWindow+0x90>)
 80020fa:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 80020fc:	202a      	movs	r0, #42	; 0x2a
 80020fe:	f7ff ff77 	bl	8001ff0 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8002102:	2200      	movs	r2, #0
 8002104:	2104      	movs	r1, #4
 8002106:	4811      	ldr	r0, [pc, #68]	; (800214c <Displ_SetAddressWindow+0x90>)
 8002108:	f7ff ff81 	bl	800200e <Displ_WriteData>

	((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 800210c:	883b      	ldrh	r3, [r7, #0]
 800210e:	061a      	lsls	r2, r3, #24
 8002110:	883b      	ldrh	r3, [r7, #0]
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002118:	431a      	orrs	r2, r3
 800211a:	88bb      	ldrh	r3, [r7, #4]
 800211c:	021b      	lsls	r3, r3, #8
 800211e:	b29b      	uxth	r3, r3
 8002120:	4313      	orrs	r3, r2
 8002122:	88ba      	ldrh	r2, [r7, #4]
 8002124:	0a12      	lsrs	r2, r2, #8
 8002126:	b292      	uxth	r2, r2
 8002128:	431a      	orrs	r2, r3
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <Displ_SetAddressWindow+0x90>)
 800212c:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 800212e:	202b      	movs	r0, #43	; 0x2b
 8002130:	f7ff ff5e 	bl	8001ff0 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8002134:	2200      	movs	r2, #0
 8002136:	2104      	movs	r1, #4
 8002138:	4804      	ldr	r0, [pc, #16]	; (800214c <Displ_SetAddressWindow+0x90>)
 800213a:	f7ff ff68 	bl	800200e <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 800213e:	202c      	movs	r0, #44	; 0x2c
 8002140:	f7ff ff56 	bl	8001ff0 <Displ_WriteCommand>
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	bd90      	pop	{r4, r7, pc}
 800214c:	20009cf0 	.word	0x20009cf0

08002150 <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	71fb      	strb	r3, [r7, #7]
	if (TOUCH_SPI==DISPL_SPI){													// if touch and display share the same SPI port
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display (will be selected at writing time)
 800215a:	2201      	movs	r2, #1
 800215c:	2180      	movs	r1, #128	; 0x80
 800215e:	4809      	ldr	r0, [pc, #36]	; (8002184 <Displ_Init+0x34>)
 8002160:	f001 f8e6 	bl	8003330 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);		// unselect touch (will be selected at writing time)
 8002164:	2201      	movs	r2, #1
 8002166:	2102      	movs	r1, #2
 8002168:	4806      	ldr	r0, [pc, #24]	; (8002184 <Displ_Init+0x34>)
 800216a:	f001 f8e1 	bl	8003330 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET); 	// select display
		SET_DISPL_SPI_BAUDRATE;
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
		SET_TOUCH_SPI_BAUDRATE;
	}
	ILI9XXX_Init();
 800216e:	f7ff ff65 	bl	800203c <ILI9XXX_Init>
	Displ_Orientation(orientation);
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	4618      	mov	r0, r3
 8002176:	f000 f807 	bl	8002188 <Displ_Orientation>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	48000400 	.word	0x48000400

08002188 <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	71fb      	strb	r3, [r7, #7]
	static uint8_t data[1];
	switch(orientation) {
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	2b03      	cmp	r3, #3
 8002196:	d837      	bhi.n	8002208 <Displ_Orientation+0x80>
 8002198:	a201      	add	r2, pc, #4	; (adr r2, 80021a0 <Displ_Orientation+0x18>)
 800219a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800219e:	bf00      	nop
 80021a0:	080021b1 	.word	0x080021b1
 80021a4:	080021c7 	.word	0x080021c7
 80021a8:	080021dd 	.word	0x080021dd
 80021ac:	080021f3 	.word	0x080021f3
		case Displ_Orientat_0:
			data[0]=ILI9XXX_MADCTL_0DEG;
 80021b0:	4b1d      	ldr	r3, [pc, #116]	; (8002228 <Displ_Orientation+0xa0>)
 80021b2:	2288      	movs	r2, #136	; 0x88
 80021b4:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 80021b6:	4b1d      	ldr	r3, [pc, #116]	; (800222c <Displ_Orientation+0xa4>)
 80021b8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80021bc:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 80021be:	4b1c      	ldr	r3, [pc, #112]	; (8002230 <Displ_Orientation+0xa8>)
 80021c0:	22f0      	movs	r2, #240	; 0xf0
 80021c2:	801a      	strh	r2, [r3, #0]
			break;
 80021c4:	e020      	b.n	8002208 <Displ_Orientation+0x80>
		case Displ_Orientat_90:
			data[0]=ILI9XXX_MADCTL_90DEG;
 80021c6:	4b18      	ldr	r3, [pc, #96]	; (8002228 <Displ_Orientation+0xa0>)
 80021c8:	22e8      	movs	r2, #232	; 0xe8
 80021ca:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 80021cc:	4b17      	ldr	r3, [pc, #92]	; (800222c <Displ_Orientation+0xa4>)
 80021ce:	22f0      	movs	r2, #240	; 0xf0
 80021d0:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 80021d2:	4b17      	ldr	r3, [pc, #92]	; (8002230 <Displ_Orientation+0xa8>)
 80021d4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80021d8:	801a      	strh	r2, [r3, #0]
			break;
 80021da:	e015      	b.n	8002208 <Displ_Orientation+0x80>
		case Displ_Orientat_180:
			data[0]=ILI9XXX_MADCTL_180DEG;
 80021dc:	4b12      	ldr	r3, [pc, #72]	; (8002228 <Displ_Orientation+0xa0>)
 80021de:	2248      	movs	r2, #72	; 0x48
 80021e0:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 80021e2:	4b12      	ldr	r3, [pc, #72]	; (800222c <Displ_Orientation+0xa4>)
 80021e4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80021e8:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 80021ea:	4b11      	ldr	r3, [pc, #68]	; (8002230 <Displ_Orientation+0xa8>)
 80021ec:	22f0      	movs	r2, #240	; 0xf0
 80021ee:	801a      	strh	r2, [r3, #0]
			break;
 80021f0:	e00a      	b.n	8002208 <Displ_Orientation+0x80>
		case Displ_Orientat_270:
			data[0]=ILI9XXX_MADCTL_270DEG;
 80021f2:	4b0d      	ldr	r3, [pc, #52]	; (8002228 <Displ_Orientation+0xa0>)
 80021f4:	2228      	movs	r2, #40	; 0x28
 80021f6:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 80021f8:	4b0c      	ldr	r3, [pc, #48]	; (800222c <Displ_Orientation+0xa4>)
 80021fa:	22f0      	movs	r2, #240	; 0xf0
 80021fc:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 80021fe:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <Displ_Orientation+0xa8>)
 8002200:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002204:	801a      	strh	r2, [r3, #0]
			break;
 8002206:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 8002208:	2036      	movs	r0, #54	; 0x36
 800220a:	f7ff fef1 	bl	8001ff0 <Displ_WriteCommand>
	Displ_WriteData(data,1,0);
 800220e:	2200      	movs	r2, #0
 8002210:	2101      	movs	r1, #1
 8002212:	4805      	ldr	r0, [pc, #20]	; (8002228 <Displ_Orientation+0xa0>)
 8002214:	f7ff fefb 	bl	800200e <Displ_WriteData>
	current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 8002218:	4a06      	ldr	r2, [pc, #24]	; (8002234 <Displ_Orientation+0xac>)
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	7013      	strb	r3, [r2, #0]
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20009cf4 	.word	0x20009cf4
 800222c:	20001cec 	.word	0x20001cec
 8002230:	20001cea 	.word	0x20001cea
 8002234:	20001ce8 	.word	0x20001ce8

08002238 <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a05      	ldr	r2, [pc, #20]	; (800225c <HAL_SPI_ErrorCallback+0x24>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d102      	bne.n	8002250 <HAL_SPI_ErrorCallback+0x18>
		Displ_SpiAvailable=1;
 800224a:	4b05      	ldr	r3, [pc, #20]	; (8002260 <HAL_SPI_ErrorCallback+0x28>)
 800224c:	2201      	movs	r2, #1
 800224e:	701a      	strb	r2, [r3, #0]
	}
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	40013000 	.word	0x40013000
 8002260:	20000004 	.word	0x20000004

08002264 <HAL_SPI_TxCpltCallback>:





void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a05      	ldr	r2, [pc, #20]	; (8002288 <HAL_SPI_TxCpltCallback+0x24>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d102      	bne.n	800227c <HAL_SPI_TxCpltCallback+0x18>
		Displ_SpiAvailable=1;
 8002276:	4b05      	ldr	r3, [pc, #20]	; (800228c <HAL_SPI_TxCpltCallback+0x28>)
 8002278:	2201      	movs	r2, #1
 800227a:	701a      	strb	r2, [r3, #0]
	#ifdef DISPLAY_USING_TOUCHGFX
		DisplayDriver_TransferCompleteCallback();
	#endif

	}
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	40013000 	.word	0x40013000
 800228c:	20000004 	.word	0x20000004

08002290 <Displ_FillArea>:
/*****************************
 * @brief	fill a rectangle with a color
 * @param	x, y	top left corner of the rectangle
 * 			w, h 	width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002290:	b590      	push	{r4, r7, lr}
 8002292:	b08b      	sub	sp, #44	; 0x2c
 8002294:	af00      	add	r7, sp, #0
 8002296:	4604      	mov	r4, r0
 8002298:	4608      	mov	r0, r1
 800229a:	4611      	mov	r1, r2
 800229c:	461a      	mov	r2, r3
 800229e:	4623      	mov	r3, r4
 80022a0:	80fb      	strh	r3, [r7, #6]
 80022a2:	4603      	mov	r3, r0
 80022a4:	80bb      	strh	r3, [r7, #4]
 80022a6:	460b      	mov	r3, r1
 80022a8:	807b      	strh	r3, [r7, #2]
 80022aa:	4613      	mov	r3, r2
 80022ac:	803b      	strh	r3, [r7, #0]
 * -	swap buffers
 */

	uint32_t k,x1,y1,area,times;

	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	4a4f      	ldr	r2, [pc, #316]	; (80023f0 <Displ_FillArea+0x160>)
 80022b2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80022b6:	4293      	cmp	r3, r2
 80022b8:	f280 8096 	bge.w	80023e8 <Displ_FillArea+0x158>
 80022bc:	88bb      	ldrh	r3, [r7, #4]
 80022be:	4a4d      	ldr	r2, [pc, #308]	; (80023f4 <Displ_FillArea+0x164>)
 80022c0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80022c4:	4293      	cmp	r3, r2
 80022c6:	f280 808f 	bge.w	80023e8 <Displ_FillArea+0x158>
 80022ca:	887b      	ldrh	r3, [r7, #2]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 808b 	beq.w	80023e8 <Displ_FillArea+0x158>
 80022d2:	883b      	ldrh	r3, [r7, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 8087 	beq.w	80023e8 <Displ_FillArea+0x158>

	x1=x + w - 1;
 80022da:	88fa      	ldrh	r2, [r7, #6]
 80022dc:	887b      	ldrh	r3, [r7, #2]
 80022de:	4413      	add	r3, r2
 80022e0:	3b01      	subs	r3, #1
 80022e2:	623b      	str	r3, [r7, #32]
	if (x1 > _width) {
 80022e4:	4b42      	ldr	r3, [pc, #264]	; (80023f0 <Displ_FillArea+0x160>)
 80022e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ea:	461a      	mov	r2, r3
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d903      	bls.n	80022fa <Displ_FillArea+0x6a>
		x1=_width;
 80022f2:	4b3f      	ldr	r3, [pc, #252]	; (80023f0 <Displ_FillArea+0x160>)
 80022f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022f8:	623b      	str	r3, [r7, #32]
	}

	y1=y + h - 1;
 80022fa:	88ba      	ldrh	r2, [r7, #4]
 80022fc:	883b      	ldrh	r3, [r7, #0]
 80022fe:	4413      	add	r3, r2
 8002300:	3b01      	subs	r3, #1
 8002302:	61fb      	str	r3, [r7, #28]
	if (y1 > _height) {
 8002304:	4b3b      	ldr	r3, [pc, #236]	; (80023f4 <Displ_FillArea+0x164>)
 8002306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800230a:	461a      	mov	r2, r3
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	4293      	cmp	r3, r2
 8002310:	d903      	bls.n	800231a <Displ_FillArea+0x8a>
		y1=_height;
 8002312:	4b38      	ldr	r3, [pc, #224]	; (80023f4 <Displ_FillArea+0x164>)
 8002314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002318:	61fb      	str	r3, [r7, #28]
// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

	uint32_t data32;

	data32=(color>>8) | (color<<8) | (color<<24); 	// supposing color is 0xABCD, data32 becomes 0xCDABCDAB - set a 32 bit variable with swapped endians
 800231a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800231c:	0a1b      	lsrs	r3, r3, #8
 800231e:	b29b      	uxth	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002324:	021b      	lsls	r3, r3, #8
 8002326:	431a      	orrs	r2, r3
 8002328:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800232a:	061b      	lsls	r3, r3, #24
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
	area=((y1-y+1)*(x1-x+1)); 						// area to fill in 16bit pixels
 8002330:	88bb      	ldrh	r3, [r7, #4]
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	3301      	adds	r3, #1
 8002338:	88fa      	ldrh	r2, [r7, #6]
 800233a:	6a39      	ldr	r1, [r7, #32]
 800233c:	1a8a      	subs	r2, r1, r2
 800233e:	3201      	adds	r2, #1
 8002340:	fb02 f303 	mul.w	r3, r2, r3
 8002344:	60fb      	str	r3, [r7, #12]
	uint32_t *buf32Pos=(uint32_t *)dispBuffer; 		//dispBuffer defined in bytes, buf32Pos access it as 32 bit words
 8002346:	4b2c      	ldr	r3, [pc, #176]	; (80023f8 <Displ_FillArea+0x168>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	617b      	str	r3, [r7, #20]
	if (area<(SIZEBUF>>1)) 							// if area is smaller than dispBuffer
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002352:	d204      	bcs.n	800235e <Displ_FillArea+0xce>
		times=(area>>1)+1; 							// number of times data32 has to be loaded into buffer
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	085b      	lsrs	r3, r3, #1
 8002358:	3301      	adds	r3, #1
 800235a:	61bb      	str	r3, [r7, #24]
 800235c:	e002      	b.n	8002364 <Displ_FillArea+0xd4>
	else
		times=(SIZEBUF>>2);  						// dispBuffer size as 32bit-words
 800235e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002362:	61bb      	str	r3, [r7, #24]
	for (k = 0; k < times; k++)
 8002364:	2300      	movs	r3, #0
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
 8002368:	e007      	b.n	800237a <Displ_FillArea+0xea>
		*(buf32Pos++)=data32; 						// loads buffer moving 32bit-words
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	1d1a      	adds	r2, r3, #4
 800236e:	617a      	str	r2, [r7, #20]
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	601a      	str	r2, [r3, #0]
	for (k = 0; k < times; k++)
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	3301      	adds	r3, #1
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
 800237a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	429a      	cmp	r2, r3
 8002380:	d3f3      	bcc.n	800236a <Displ_FillArea+0xda>
	}
	datasize=(buf8Pos-dispBuffer);
#endif

//START WRITING TO DISPLAY
	Displ_SetAddressWindow(x, y, x1, y1);
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	b29a      	uxth	r2, r3
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	b29b      	uxth	r3, r3
 800238a:	88b9      	ldrh	r1, [r7, #4]
 800238c:	88f8      	ldrh	r0, [r7, #6]
 800238e:	f7ff fe95 	bl	80020bc <Displ_SetAddressWindow>

#ifdef Z_RGB565 // transferring RGB666 format dispBuffer
	times=(area>>(BUFLEVEL-1));  					//how many times buffer must be sent via SPI. It is (BUFFLEVEL-1) because area is 16-bit while dispBuffer is 8-bit
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	0b5b      	lsrs	r3, r3, #13
 8002396:	61bb      	str	r3, [r7, #24]
	for  (k=0;k<times;k++) {
 8002398:	2300      	movs	r3, #0
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
 800239c:	e00a      	b.n	80023b4 <Displ_FillArea+0x124>
		Displ_WriteData(dispBuffer,SIZEBUF,0);
 800239e:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <Displ_FillArea+0x168>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fe30 	bl	800200e <Displ_WriteData>
	for  (k=0;k<times;k++) {
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	3301      	adds	r3, #1
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
 80023b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d3f0      	bcc.n	800239e <Displ_FillArea+0x10e>
	}
	Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
 80023bc:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <Displ_FillArea+0x168>)
 80023be:	6818      	ldr	r0, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	005a      	lsls	r2, r3, #1
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	039b      	lsls	r3, r3, #14
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2200      	movs	r2, #0
 80023cc:	4619      	mov	r1, r3
 80023ce:	f7ff fe1e 	bl	800200e <Displ_WriteData>
	}
	Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
#endif

//BUFFER SWAP
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 80023d2:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <Displ_FillArea+0x168>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a09      	ldr	r2, [pc, #36]	; (80023fc <Displ_FillArea+0x16c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d101      	bne.n	80023e0 <Displ_FillArea+0x150>
 80023dc:	4b08      	ldr	r3, [pc, #32]	; (8002400 <Displ_FillArea+0x170>)
 80023de:	e000      	b.n	80023e2 <Displ_FillArea+0x152>
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <Displ_FillArea+0x16c>)
 80023e2:	4a05      	ldr	r2, [pc, #20]	; (80023f8 <Displ_FillArea+0x168>)
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	e000      	b.n	80023ea <Displ_FillArea+0x15a>
	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 80023e8:	bf00      	nop

}
 80023ea:	372c      	adds	r7, #44	; 0x2c
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd90      	pop	{r4, r7, pc}
 80023f0:	20001cea 	.word	0x20001cea
 80023f4:	20001cec 	.word	0x20001cec
 80023f8:	20000008 	.word	0x20000008
 80023fc:	20001cf0 	.word	0x20001cf0
 8002400:	20005cf0 	.word	0x20005cf0

08002404 <ILI9488_DrawImage>:
#ifndef DISPLAY_USING_TOUCHGFX

/*****************************************
 * WARNING: non tested, never used
 *****************************************/
void ILI9488_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t *data, uint32_t size){
 8002404:	b590      	push	{r4, r7, lr}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4604      	mov	r4, r0
 800240c:	4608      	mov	r0, r1
 800240e:	4611      	mov	r1, r2
 8002410:	461a      	mov	r2, r3
 8002412:	4623      	mov	r3, r4
 8002414:	80fb      	strh	r3, [r7, #6]
 8002416:	4603      	mov	r3, r0
 8002418:	80bb      	strh	r3, [r7, #4]
 800241a:	460b      	mov	r3, r1
 800241c:	807b      	strh	r3, [r7, #2]
 800241e:	4613      	mov	r3, r2
 8002420:	803b      	strh	r3, [r7, #0]
	Displ_SetAddressWindow(x, y, w+x-1, h+y-1);
 8002422:	887a      	ldrh	r2, [r7, #2]
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	4413      	add	r3, r2
 8002428:	b29b      	uxth	r3, r3
 800242a:	3b01      	subs	r3, #1
 800242c:	b29c      	uxth	r4, r3
 800242e:	883a      	ldrh	r2, [r7, #0]
 8002430:	88bb      	ldrh	r3, [r7, #4]
 8002432:	4413      	add	r3, r2
 8002434:	b29b      	uxth	r3, r3
 8002436:	3b01      	subs	r3, #1
 8002438:	b29b      	uxth	r3, r3
 800243a:	88b9      	ldrh	r1, [r7, #4]
 800243c:	88f8      	ldrh	r0, [r7, #6]
 800243e:	4622      	mov	r2, r4
 8002440:	f7ff fe3c 	bl	80020bc <Displ_SetAddressWindow>
	Displ_WriteData(data,size,0);
 8002444:	2200      	movs	r2, #0
 8002446:	69f9      	ldr	r1, [r7, #28]
 8002448:	69b8      	ldr	r0, [r7, #24]
 800244a:	f7ff fde0 	bl	800200e <Displ_WriteData>
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	bd90      	pop	{r4, r7, pc}
	...

08002458 <Displ_CLS>:

/*****************
 * @brief	clear display with a color.
 * @param	bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af02      	add	r7, sp, #8
 800245e:	4603      	mov	r3, r0
 8002460:	80fb      	strh	r3, [r7, #6]
	Displ_FillArea(0, 0, _width, _height, bgcolor);
 8002462:	4b09      	ldr	r3, [pc, #36]	; (8002488 <Displ_CLS+0x30>)
 8002464:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002468:	b29a      	uxth	r2, r3
 800246a:	4b08      	ldr	r3, [pc, #32]	; (800248c <Displ_CLS+0x34>)
 800246c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002470:	b299      	uxth	r1, r3
 8002472:	88fb      	ldrh	r3, [r7, #6]
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	460b      	mov	r3, r1
 8002478:	2100      	movs	r1, #0
 800247a:	2000      	movs	r0, #0
 800247c:	f7ff ff08 	bl	8002290 <Displ_FillArea>
}
 8002480:	bf00      	nop
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20001cea 	.word	0x20001cea
 800248c:	20001cec 	.word	0x20001cec

08002490 <Displ_Line>:

/************************************************************************
 * @brief	draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8002490:	b590      	push	{r4, r7, lr}
 8002492:	b08b      	sub	sp, #44	; 0x2c
 8002494:	af02      	add	r7, sp, #8
 8002496:	4604      	mov	r4, r0
 8002498:	4608      	mov	r0, r1
 800249a:	4611      	mov	r1, r2
 800249c:	461a      	mov	r2, r3
 800249e:	4623      	mov	r3, r4
 80024a0:	80fb      	strh	r3, [r7, #6]
 80024a2:	4603      	mov	r3, r0
 80024a4:	80bb      	strh	r3, [r7, #4]
 80024a6:	460b      	mov	r3, r1
 80024a8:	807b      	strh	r3, [r7, #2]
 80024aa:	4613      	mov	r3, r2
 80024ac:	803b      	strh	r3, [r7, #0]
	int16_t l,x,steep,ystep,err,dx, dy;

    if (x0==x1){  // fast solve vertical lines
 80024ae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80024b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d123      	bne.n	8002502 <Displ_Line+0x72>
    	if (y1>y0){
 80024ba:	f9b7 2000 	ldrsh.w	r2, [r7]
 80024be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	dd0e      	ble.n	80024e4 <Displ_Line+0x54>
    		Displ_FillArea(x0, y0, 1, y1-y0+1, color);
 80024c6:	88f8      	ldrh	r0, [r7, #6]
 80024c8:	88b9      	ldrh	r1, [r7, #4]
 80024ca:	883a      	ldrh	r2, [r7, #0]
 80024cc:	88bb      	ldrh	r3, [r7, #4]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	3301      	adds	r3, #1
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	4613      	mov	r3, r2
 80024dc:	2201      	movs	r2, #1
 80024de:	f7ff fed7 	bl	8002290 <Displ_FillArea>
    	}
    	else {
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
    	}
    	return;
 80024e2:	e103      	b.n	80026ec <Displ_Line+0x25c>
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
 80024e4:	88f8      	ldrh	r0, [r7, #6]
 80024e6:	8839      	ldrh	r1, [r7, #0]
 80024e8:	88ba      	ldrh	r2, [r7, #4]
 80024ea:	883b      	ldrh	r3, [r7, #0]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3301      	adds	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	4613      	mov	r3, r2
 80024fa:	2201      	movs	r2, #1
 80024fc:	f7ff fec8 	bl	8002290 <Displ_FillArea>
    	return;
 8002500:	e0f4      	b.n	80026ec <Displ_Line+0x25c>
    }
    if (y0==y1){ // fast solve horizontal lines
 8002502:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002506:	f9b7 3000 	ldrsh.w	r3, [r7]
 800250a:	429a      	cmp	r2, r3
 800250c:	d121      	bne.n	8002552 <Displ_Line+0xc2>
    	if (x1>x0)
 800250e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002516:	429a      	cmp	r2, r3
 8002518:	dd0d      	ble.n	8002536 <Displ_Line+0xa6>
    		Displ_FillArea(x0, y0, x1-x0+1, 1, color);
 800251a:	88f8      	ldrh	r0, [r7, #6]
 800251c:	88b9      	ldrh	r1, [r7, #4]
 800251e:	887a      	ldrh	r2, [r7, #2]
 8002520:	88fb      	ldrh	r3, [r7, #6]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	b29b      	uxth	r3, r3
 8002526:	3301      	adds	r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	2301      	movs	r3, #1
 8002530:	f7ff feae 	bl	8002290 <Displ_FillArea>
    	else
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
    	return;
 8002534:	e0da      	b.n	80026ec <Displ_Line+0x25c>
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
 8002536:	8878      	ldrh	r0, [r7, #2]
 8002538:	8839      	ldrh	r1, [r7, #0]
 800253a:	88fa      	ldrh	r2, [r7, #6]
 800253c:	887b      	ldrh	r3, [r7, #2]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	b29b      	uxth	r3, r3
 8002542:	3301      	adds	r3, #1
 8002544:	b29a      	uxth	r2, r3
 8002546:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	2301      	movs	r3, #1
 800254c:	f7ff fea0 	bl	8002290 <Displ_FillArea>
    	return;
 8002550:	e0cc      	b.n	80026ec <Displ_Line+0x25c>
    }

    steep = (y1>y0 ? y1-y0 : y0-y1) > (x1>x0 ? x1-x0 : x0-x1);
 8002552:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002556:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800255a:	429a      	cmp	r2, r3
 800255c:	dd05      	ble.n	800256a <Displ_Line+0xda>
 800255e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002562:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002566:	1ad2      	subs	r2, r2, r3
 8002568:	e004      	b.n	8002574 <Displ_Line+0xe4>
 800256a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800256e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002572:	1ad2      	subs	r2, r2, r3
 8002574:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8002578:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800257c:	4299      	cmp	r1, r3
 800257e:	dd05      	ble.n	800258c <Displ_Line+0xfc>
 8002580:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8002584:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002588:	1acb      	subs	r3, r1, r3
 800258a:	e004      	b.n	8002596 <Displ_Line+0x106>
 800258c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8002590:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002594:	1acb      	subs	r3, r1, r3
 8002596:	429a      	cmp	r2, r3
 8002598:	bfcc      	ite	gt
 800259a:	2301      	movgt	r3, #1
 800259c:	2300      	movle	r3, #0
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	82bb      	strh	r3, [r7, #20]

    if (steep) {
 80025a2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00b      	beq.n	80025c2 <Displ_Line+0x132>
        _swap_int16_t(x0, y0);
 80025aa:	88fb      	ldrh	r3, [r7, #6]
 80025ac:	827b      	strh	r3, [r7, #18]
 80025ae:	88bb      	ldrh	r3, [r7, #4]
 80025b0:	80fb      	strh	r3, [r7, #6]
 80025b2:	8a7b      	ldrh	r3, [r7, #18]
 80025b4:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 80025b6:	887b      	ldrh	r3, [r7, #2]
 80025b8:	823b      	strh	r3, [r7, #16]
 80025ba:	883b      	ldrh	r3, [r7, #0]
 80025bc:	807b      	strh	r3, [r7, #2]
 80025be:	8a3b      	ldrh	r3, [r7, #16]
 80025c0:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 80025c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80025c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	dd0b      	ble.n	80025e6 <Displ_Line+0x156>
        _swap_int16_t(x0, x1);
 80025ce:	88fb      	ldrh	r3, [r7, #6]
 80025d0:	81fb      	strh	r3, [r7, #14]
 80025d2:	887b      	ldrh	r3, [r7, #2]
 80025d4:	80fb      	strh	r3, [r7, #6]
 80025d6:	89fb      	ldrh	r3, [r7, #14]
 80025d8:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 80025da:	88bb      	ldrh	r3, [r7, #4]
 80025dc:	81bb      	strh	r3, [r7, #12]
 80025de:	883b      	ldrh	r3, [r7, #0]
 80025e0:	80bb      	strh	r3, [r7, #4]
 80025e2:	89bb      	ldrh	r3, [r7, #12]
 80025e4:	803b      	strh	r3, [r7, #0]
    }

    dx = x1 - x0;
 80025e6:	887a      	ldrh	r2, [r7, #2]
 80025e8:	88fb      	ldrh	r3, [r7, #6]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	817b      	strh	r3, [r7, #10]
    err = dx >> 1;
 80025f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80025f4:	105b      	asrs	r3, r3, #1
 80025f6:	833b      	strh	r3, [r7, #24]
    if (y0 < y1) {
 80025f8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80025fc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002600:	429a      	cmp	r2, r3
 8002602:	da07      	bge.n	8002614 <Displ_Line+0x184>
        dy = y1-y0;
 8002604:	883a      	ldrh	r2, [r7, #0]
 8002606:	88bb      	ldrh	r3, [r7, #4]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	b29b      	uxth	r3, r3
 800260c:	82fb      	strh	r3, [r7, #22]
        ystep =  1 ;
 800260e:	2301      	movs	r3, #1
 8002610:	837b      	strh	r3, [r7, #26]
 8002612:	e007      	b.n	8002624 <Displ_Line+0x194>
    } else {
        dy = y0-y1;
 8002614:	88ba      	ldrh	r2, [r7, #4]
 8002616:	883b      	ldrh	r3, [r7, #0]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	b29b      	uxth	r3, r3
 800261c:	82fb      	strh	r3, [r7, #22]
        ystep =  -1 ;
 800261e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002622:	837b      	strh	r3, [r7, #26]
    }

    l=00;
 8002624:	2300      	movs	r3, #0
 8002626:	83fb      	strh	r3, [r7, #30]
    for (x=x0; x<=x1; x++) {
 8002628:	88fb      	ldrh	r3, [r7, #6]
 800262a:	83bb      	strh	r3, [r7, #28]
 800262c:	e03a      	b.n	80026a4 <Displ_Line+0x214>
    	l++;
 800262e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002632:	b29b      	uxth	r3, r3
 8002634:	3301      	adds	r3, #1
 8002636:	b29b      	uxth	r3, r3
 8002638:	83fb      	strh	r3, [r7, #30]
        err -= dy;
 800263a:	8b3a      	ldrh	r2, [r7, #24]
 800263c:	8afb      	ldrh	r3, [r7, #22]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	b29b      	uxth	r3, r3
 8002642:	833b      	strh	r3, [r7, #24]
        if (err < 0) {
 8002644:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002648:	2b00      	cmp	r3, #0
 800264a:	da25      	bge.n	8002698 <Displ_Line+0x208>
        	if (steep) {
 800264c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d009      	beq.n	8002668 <Displ_Line+0x1d8>
        		Displ_FillArea(y0, x0, 1, l, color);
 8002654:	88b8      	ldrh	r0, [r7, #4]
 8002656:	88f9      	ldrh	r1, [r7, #6]
 8002658:	8bfa      	ldrh	r2, [r7, #30]
 800265a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	4613      	mov	r3, r2
 8002660:	2201      	movs	r2, #1
 8002662:	f7ff fe15 	bl	8002290 <Displ_FillArea>
 8002666:	e007      	b.n	8002678 <Displ_Line+0x1e8>
            } else {
            	Displ_FillArea(x0, y0, l, 1, color);
 8002668:	88f8      	ldrh	r0, [r7, #6]
 800266a:	88b9      	ldrh	r1, [r7, #4]
 800266c:	8bfa      	ldrh	r2, [r7, #30]
 800266e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	2301      	movs	r3, #1
 8002674:	f7ff fe0c 	bl	8002290 <Displ_FillArea>
            }
            y0 += ystep;
 8002678:	88ba      	ldrh	r2, [r7, #4]
 800267a:	8b7b      	ldrh	r3, [r7, #26]
 800267c:	4413      	add	r3, r2
 800267e:	b29b      	uxth	r3, r3
 8002680:	80bb      	strh	r3, [r7, #4]
            l=0;
 8002682:	2300      	movs	r3, #0
 8002684:	83fb      	strh	r3, [r7, #30]
            x0=x+1;
 8002686:	8bbb      	ldrh	r3, [r7, #28]
 8002688:	3301      	adds	r3, #1
 800268a:	b29b      	uxth	r3, r3
 800268c:	80fb      	strh	r3, [r7, #6]
            err += dx;
 800268e:	8b3a      	ldrh	r2, [r7, #24]
 8002690:	897b      	ldrh	r3, [r7, #10]
 8002692:	4413      	add	r3, r2
 8002694:	b29b      	uxth	r3, r3
 8002696:	833b      	strh	r3, [r7, #24]
    for (x=x0; x<=x1; x++) {
 8002698:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800269c:	b29b      	uxth	r3, r3
 800269e:	3301      	adds	r3, #1
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	83bb      	strh	r3, [r7, #28]
 80026a4:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80026a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	ddbe      	ble.n	800262e <Displ_Line+0x19e>
        }
    }
    if (l!=0){
 80026b0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d019      	beq.n	80026ec <Displ_Line+0x25c>
    	if (steep) {
 80026b8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00b      	beq.n	80026d8 <Displ_Line+0x248>
    		Displ_FillArea(y0, x0, 1, l-1, color);
 80026c0:	88b8      	ldrh	r0, [r7, #4]
 80026c2:	88f9      	ldrh	r1, [r7, #6]
 80026c4:	8bfb      	ldrh	r3, [r7, #30]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	4613      	mov	r3, r2
 80026d0:	2201      	movs	r2, #1
 80026d2:	f7ff fddd 	bl	8002290 <Displ_FillArea>
 80026d6:	e009      	b.n	80026ec <Displ_Line+0x25c>
    	} else {
    		Displ_FillArea(x0, y0, l-1,1, color);
 80026d8:	88f8      	ldrh	r0, [r7, #6]
 80026da:	88b9      	ldrh	r1, [r7, #4]
 80026dc:	8bfb      	ldrh	r3, [r7, #30]
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	2301      	movs	r3, #1
 80026e8:	f7ff fdd2 	bl	8002290 <Displ_FillArea>
    	}
    }
}
 80026ec:	3724      	adds	r7, #36	; 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd90      	pop	{r4, r7, pc}
	...

080026f4 <Displ_BackLight>:
 *				'0'		set the display level to 0 (off)
 *				'I'		'Initialize'  IT MUST BE in dimming mode
 *              'Q'		do nothing, just return current level
 * @return		current backlight level
 **************************************/
uint32_t  Displ_BackLight(uint8_t cmd) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	71fb      	strb	r3, [r7, #7]

#ifdef DISPLAY_DIMMING_MODE
	static uint16_t memCCR1=0;  			//it stores CCR1 value while in stand-by
#endif

	switch (cmd) {
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	2b51      	cmp	r3, #81	; 0x51
 8002702:	d00a      	beq.n	800271a <Displ_BackLight+0x26>
 8002704:	2b51      	cmp	r3, #81	; 0x51
 8002706:	dc16      	bgt.n	8002736 <Displ_BackLight+0x42>
 8002708:	2b46      	cmp	r3, #70	; 0x46
 800270a:	d008      	beq.n	800271e <Displ_BackLight+0x2a>
 800270c:	2b46      	cmp	r3, #70	; 0x46
 800270e:	dc12      	bgt.n	8002736 <Displ_BackLight+0x42>
 8002710:	2b30      	cmp	r3, #48	; 0x30
 8002712:	d00a      	beq.n	800272a <Displ_BackLight+0x36>
 8002714:	2b31      	cmp	r3, #49	; 0x31
 8002716:	d002      	beq.n	800271e <Displ_BackLight+0x2a>
	  	HAL_TIM_PWM_Start(&BKLIT_T, BKLIT_CHANNEL);
		BKLIT_TIMER->BKLIT_CCR=BKLIT_INIT_LEVEL;
		break;
#endif
	default:
		break;
 8002718:	e00d      	b.n	8002736 <Displ_BackLight+0x42>
		__NOP();
 800271a:	bf00      	nop
		break;
 800271c:	e00c      	b.n	8002738 <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_SET);
 800271e:	2201      	movs	r2, #1
 8002720:	2110      	movs	r1, #16
 8002722:	480a      	ldr	r0, [pc, #40]	; (800274c <Displ_BackLight+0x58>)
 8002724:	f000 fe04 	bl	8003330 <HAL_GPIO_WritePin>
		break;
 8002728:	e006      	b.n	8002738 <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_RESET);
 800272a:	2200      	movs	r2, #0
 800272c:	2110      	movs	r1, #16
 800272e:	4807      	ldr	r0, [pc, #28]	; (800274c <Displ_BackLight+0x58>)
 8002730:	f000 fdfe 	bl	8003330 <HAL_GPIO_WritePin>
		break;
 8002734:	e000      	b.n	8002738 <Displ_BackLight+0x44>
		break;
 8002736:	bf00      	nop
	}
#ifndef DISPLAY_DIMMING_MODE
	return HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin);
 8002738:	2110      	movs	r1, #16
 800273a:	4804      	ldr	r0, [pc, #16]	; (800274c <Displ_BackLight+0x58>)
 800273c:	f000 fde0 	bl	8003300 <HAL_GPIO_ReadPin>
 8002740:	4603      	mov	r3, r0
#else
	return (BKLIT_TIMER->BKLIT_CCR);
#endif
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	48000400 	.word	0x48000400

08002750 <Touch_HandlePenDownInterrupt>:
volatile uint8_t Touch_PenDown=0;						// set to 1 by pendown interrupt callback, reset to 0 by sw
volatile uint8_t Touch_Int_Enabled=1;					// while reading touch sensor touch interrupt handling is disabled through this flag



void Touch_HandlePenDownInterrupt (){
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
	if (Touch_Int_Enabled) {
 8002754:	4b06      	ldr	r3, [pc, #24]	; (8002770 <Touch_HandlePenDownInterrupt+0x20>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d002      	beq.n	8002764 <Touch_HandlePenDownInterrupt+0x14>
		Touch_PenDown=1;
 800275e:	4b05      	ldr	r3, [pc, #20]	; (8002774 <Touch_HandlePenDownInterrupt+0x24>)
 8002760:	2201      	movs	r2, #1
 8002762:	701a      	strb	r2, [r3, #0]
	}
}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	2000000c 	.word	0x2000000c
 8002774:	20009cf5 	.word	0x20009cf5

08002778 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin==TOUCH_INT_Pin){
 8002782:	88fb      	ldrh	r3, [r7, #6]
 8002784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002788:	d101      	bne.n	800278e <HAL_GPIO_EXTI_Callback+0x16>
		Touch_HandlePenDownInterrupt();
 800278a:	f7ff ffe1 	bl	8002750 <Touch_HandlePenDownInterrupt>
	}
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002798:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800279c:	f7ff faac 	bl	8001cf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027a0:	480c      	ldr	r0, [pc, #48]	; (80027d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80027a2:	490d      	ldr	r1, [pc, #52]	; (80027d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027a4:	4a0d      	ldr	r2, [pc, #52]	; (80027dc <LoopForever+0xe>)
  movs r3, #0
 80027a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027a8:	e002      	b.n	80027b0 <LoopCopyDataInit>

080027aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ae:	3304      	adds	r3, #4

080027b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027b4:	d3f9      	bcc.n	80027aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027b6:	4a0a      	ldr	r2, [pc, #40]	; (80027e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027b8:	4c0a      	ldr	r4, [pc, #40]	; (80027e4 <LoopForever+0x16>)
  movs r3, #0
 80027ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027bc:	e001      	b.n	80027c2 <LoopFillZerobss>

080027be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027c0:	3204      	adds	r2, #4

080027c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027c4:	d3fb      	bcc.n	80027be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027c6:	f004 fd95 	bl	80072f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027ca:	f7fe fbc1 	bl	8000f50 <main>

080027ce <LoopForever>:

LoopForever:
    b LoopForever
 80027ce:	e7fe      	b.n	80027ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80027d0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80027d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027d8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80027dc:	0800f228 	.word	0x0800f228
  ldr r2, =_sbss
 80027e0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80027e4:	20009d0c 	.word	0x20009d0c

080027e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027e8:	e7fe      	b.n	80027e8 <ADC1_IRQHandler>

080027ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027f0:	2300      	movs	r3, #0
 80027f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027f4:	2003      	movs	r0, #3
 80027f6:	f000 f961 	bl	8002abc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027fa:	2000      	movs	r0, #0
 80027fc:	f000 f80e 	bl	800281c <HAL_InitTick>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d002      	beq.n	800280c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	71fb      	strb	r3, [r7, #7]
 800280a:	e001      	b.n	8002810 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800280c:	f7fe ff5e 	bl	80016cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002810:	79fb      	ldrb	r3, [r7, #7]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
	...

0800281c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002824:	2300      	movs	r3, #0
 8002826:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002828:	4b17      	ldr	r3, [pc, #92]	; (8002888 <HAL_InitTick+0x6c>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d023      	beq.n	8002878 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002830:	4b16      	ldr	r3, [pc, #88]	; (800288c <HAL_InitTick+0x70>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4b14      	ldr	r3, [pc, #80]	; (8002888 <HAL_InitTick+0x6c>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	4619      	mov	r1, r3
 800283a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800283e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002842:	fbb2 f3f3 	udiv	r3, r2, r3
 8002846:	4618      	mov	r0, r3
 8002848:	f000 f96d 	bl	8002b26 <HAL_SYSTICK_Config>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10f      	bne.n	8002872 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b0f      	cmp	r3, #15
 8002856:	d809      	bhi.n	800286c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002858:	2200      	movs	r2, #0
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	f04f 30ff 	mov.w	r0, #4294967295
 8002860:	f000 f937 	bl	8002ad2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002864:	4a0a      	ldr	r2, [pc, #40]	; (8002890 <HAL_InitTick+0x74>)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	e007      	b.n	800287c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	73fb      	strb	r3, [r7, #15]
 8002870:	e004      	b.n	800287c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	73fb      	strb	r3, [r7, #15]
 8002876:	e001      	b.n	800287c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800287c:	7bfb      	ldrb	r3, [r7, #15]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000014 	.word	0x20000014
 800288c:	20000000 	.word	0x20000000
 8002890:	20000010 	.word	0x20000010

08002894 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002898:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <HAL_IncTick+0x20>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	461a      	mov	r2, r3
 800289e:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <HAL_IncTick+0x24>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4413      	add	r3, r2
 80028a4:	4a04      	ldr	r2, [pc, #16]	; (80028b8 <HAL_IncTick+0x24>)
 80028a6:	6013      	str	r3, [r2, #0]
}
 80028a8:	bf00      	nop
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	20000014 	.word	0x20000014
 80028b8:	20009cf8 	.word	0x20009cf8

080028bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return uwTick;
 80028c0:	4b03      	ldr	r3, [pc, #12]	; (80028d0 <HAL_GetTick+0x14>)
 80028c2:	681b      	ldr	r3, [r3, #0]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	20009cf8 	.word	0x20009cf8

080028d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028dc:	f7ff ffee 	bl	80028bc <HAL_GetTick>
 80028e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ec:	d005      	beq.n	80028fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80028ee:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <HAL_Delay+0x44>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4413      	add	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028fa:	bf00      	nop
 80028fc:	f7ff ffde 	bl	80028bc <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	429a      	cmp	r2, r3
 800290a:	d8f7      	bhi.n	80028fc <HAL_Delay+0x28>
  {
  }
}
 800290c:	bf00      	nop
 800290e:	bf00      	nop
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	20000014 	.word	0x20000014

0800291c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800292c:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002938:	4013      	ands	r3, r2
 800293a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002944:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800294c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800294e:	4a04      	ldr	r2, [pc, #16]	; (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	60d3      	str	r3, [r2, #12]
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002968:	4b04      	ldr	r3, [pc, #16]	; (800297c <__NVIC_GetPriorityGrouping+0x18>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	0a1b      	lsrs	r3, r3, #8
 800296e:	f003 0307 	and.w	r3, r3, #7
}
 8002972:	4618      	mov	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	2b00      	cmp	r3, #0
 8002990:	db0b      	blt.n	80029aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	f003 021f 	and.w	r2, r3, #31
 8002998:	4907      	ldr	r1, [pc, #28]	; (80029b8 <__NVIC_EnableIRQ+0x38>)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	2001      	movs	r0, #1
 80029a2:	fa00 f202 	lsl.w	r2, r0, r2
 80029a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	e000e100 	.word	0xe000e100

080029bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	6039      	str	r1, [r7, #0]
 80029c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	db0a      	blt.n	80029e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	490c      	ldr	r1, [pc, #48]	; (8002a08 <__NVIC_SetPriority+0x4c>)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	0112      	lsls	r2, r2, #4
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	440b      	add	r3, r1
 80029e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e4:	e00a      	b.n	80029fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	4908      	ldr	r1, [pc, #32]	; (8002a0c <__NVIC_SetPriority+0x50>)
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	3b04      	subs	r3, #4
 80029f4:	0112      	lsls	r2, r2, #4
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	440b      	add	r3, r1
 80029fa:	761a      	strb	r2, [r3, #24]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	e000e100 	.word	0xe000e100
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b089      	sub	sp, #36	; 0x24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f1c3 0307 	rsb	r3, r3, #7
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	bf28      	it	cs
 8002a2e:	2304      	movcs	r3, #4
 8002a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3304      	adds	r3, #4
 8002a36:	2b06      	cmp	r3, #6
 8002a38:	d902      	bls.n	8002a40 <NVIC_EncodePriority+0x30>
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3b03      	subs	r3, #3
 8002a3e:	e000      	b.n	8002a42 <NVIC_EncodePriority+0x32>
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a44:	f04f 32ff 	mov.w	r2, #4294967295
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	401a      	ands	r2, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a58:	f04f 31ff 	mov.w	r1, #4294967295
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a62:	43d9      	mvns	r1, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a68:	4313      	orrs	r3, r2
         );
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3724      	adds	r7, #36	; 0x24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
	...

08002a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a88:	d301      	bcc.n	8002a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e00f      	b.n	8002aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a8e:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <SysTick_Config+0x40>)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a96:	210f      	movs	r1, #15
 8002a98:	f04f 30ff 	mov.w	r0, #4294967295
 8002a9c:	f7ff ff8e 	bl	80029bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aa0:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <SysTick_Config+0x40>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aa6:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <SysTick_Config+0x40>)
 8002aa8:	2207      	movs	r2, #7
 8002aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	e000e010 	.word	0xe000e010

08002abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7ff ff29 	bl	800291c <__NVIC_SetPriorityGrouping>
}
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b086      	sub	sp, #24
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	4603      	mov	r3, r0
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ae4:	f7ff ff3e 	bl	8002964 <__NVIC_GetPriorityGrouping>
 8002ae8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	68b9      	ldr	r1, [r7, #8]
 8002aee:	6978      	ldr	r0, [r7, #20]
 8002af0:	f7ff ff8e 	bl	8002a10 <NVIC_EncodePriority>
 8002af4:	4602      	mov	r2, r0
 8002af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002afa:	4611      	mov	r1, r2
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff ff5d 	bl	80029bc <__NVIC_SetPriority>
}
 8002b02:	bf00      	nop
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	4603      	mov	r3, r0
 8002b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff ff31 	bl	8002980 <__NVIC_EnableIRQ>
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7ff ffa2 	bl	8002a78 <SysTick_Config>
 8002b34:	4603      	mov	r3, r0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e098      	b.n	8002c84 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	4b4d      	ldr	r3, [pc, #308]	; (8002c90 <HAL_DMA_Init+0x150>)
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d80f      	bhi.n	8002b7e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	4b4b      	ldr	r3, [pc, #300]	; (8002c94 <HAL_DMA_Init+0x154>)
 8002b66:	4413      	add	r3, r2
 8002b68:	4a4b      	ldr	r2, [pc, #300]	; (8002c98 <HAL_DMA_Init+0x158>)
 8002b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6e:	091b      	lsrs	r3, r3, #4
 8002b70:	009a      	lsls	r2, r3, #2
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a48      	ldr	r2, [pc, #288]	; (8002c9c <HAL_DMA_Init+0x15c>)
 8002b7a:	641a      	str	r2, [r3, #64]	; 0x40
 8002b7c:	e00e      	b.n	8002b9c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	461a      	mov	r2, r3
 8002b84:	4b46      	ldr	r3, [pc, #280]	; (8002ca0 <HAL_DMA_Init+0x160>)
 8002b86:	4413      	add	r3, r2
 8002b88:	4a43      	ldr	r2, [pc, #268]	; (8002c98 <HAL_DMA_Init+0x158>)
 8002b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8e:	091b      	lsrs	r3, r3, #4
 8002b90:	009a      	lsls	r2, r3, #2
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a42      	ldr	r2, [pc, #264]	; (8002ca4 <HAL_DMA_Init+0x164>)
 8002b9a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002bc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bf6:	d039      	beq.n	8002c6c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	4a27      	ldr	r2, [pc, #156]	; (8002c9c <HAL_DMA_Init+0x15c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d11a      	bne.n	8002c38 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002c02:	4b29      	ldr	r3, [pc, #164]	; (8002ca8 <HAL_DMA_Init+0x168>)
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	f003 031c 	and.w	r3, r3, #28
 8002c0e:	210f      	movs	r1, #15
 8002c10:	fa01 f303 	lsl.w	r3, r1, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	4924      	ldr	r1, [pc, #144]	; (8002ca8 <HAL_DMA_Init+0x168>)
 8002c18:	4013      	ands	r3, r2
 8002c1a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002c1c:	4b22      	ldr	r3, [pc, #136]	; (8002ca8 <HAL_DMA_Init+0x168>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6859      	ldr	r1, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c28:	f003 031c 	and.w	r3, r3, #28
 8002c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c30:	491d      	ldr	r1, [pc, #116]	; (8002ca8 <HAL_DMA_Init+0x168>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	600b      	str	r3, [r1, #0]
 8002c36:	e019      	b.n	8002c6c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002c38:	4b1c      	ldr	r3, [pc, #112]	; (8002cac <HAL_DMA_Init+0x16c>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c40:	f003 031c 	and.w	r3, r3, #28
 8002c44:	210f      	movs	r1, #15
 8002c46:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	4917      	ldr	r1, [pc, #92]	; (8002cac <HAL_DMA_Init+0x16c>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002c52:	4b16      	ldr	r3, [pc, #88]	; (8002cac <HAL_DMA_Init+0x16c>)
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6859      	ldr	r1, [r3, #4]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	f003 031c 	and.w	r3, r3, #28
 8002c62:	fa01 f303 	lsl.w	r3, r1, r3
 8002c66:	4911      	ldr	r1, [pc, #68]	; (8002cac <HAL_DMA_Init+0x16c>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	40020407 	.word	0x40020407
 8002c94:	bffdfff8 	.word	0xbffdfff8
 8002c98:	cccccccd 	.word	0xcccccccd
 8002c9c:	40020000 	.word	0x40020000
 8002ca0:	bffdfbf8 	.word	0xbffdfbf8
 8002ca4:	40020400 	.word	0x40020400
 8002ca8:	400200a8 	.word	0x400200a8
 8002cac:	400204a8 	.word	0x400204a8

08002cb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
 8002cbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_DMA_Start_IT+0x20>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e04b      	b.n	8002d68 <HAL_DMA_Start_IT+0xb8>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d13a      	bne.n	8002d5a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0201 	bic.w	r2, r2, #1
 8002d00:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	68b9      	ldr	r1, [r7, #8]
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 f95f 	bl	8002fcc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d008      	beq.n	8002d28 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 020e 	orr.w	r2, r2, #14
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	e00f      	b.n	8002d48 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0204 	bic.w	r2, r2, #4
 8002d36:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 020a 	orr.w	r2, r2, #10
 8002d46:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 0201 	orr.w	r2, r2, #1
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	e005      	b.n	8002d66 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d62:	2302      	movs	r3, #2
 8002d64:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d008      	beq.n	8002d9a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e022      	b.n	8002de0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 020e 	bic.w	r2, r2, #14
 8002da8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0201 	bic.w	r2, r2, #1
 8002db8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	f003 021c 	and.w	r2, r3, #28
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dcc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002df4:	2300      	movs	r3, #0
 8002df6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d005      	beq.n	8002e10 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2204      	movs	r2, #4
 8002e08:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	73fb      	strb	r3, [r7, #15]
 8002e0e:	e029      	b.n	8002e64 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 020e 	bic.w	r2, r2, #14
 8002e1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0201 	bic.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e34:	f003 021c 	and.w	r2, r3, #28
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e42:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	4798      	blx	r3
    }
  }
  return status;
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b084      	sub	sp, #16
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8a:	f003 031c 	and.w	r3, r3, #28
 8002e8e:	2204      	movs	r2, #4
 8002e90:	409a      	lsls	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4013      	ands	r3, r2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d026      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x7a>
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d021      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0320 	and.w	r3, r3, #32
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d107      	bne.n	8002ec2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0204 	bic.w	r2, r2, #4
 8002ec0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	f003 021c 	and.w	r2, r3, #28
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	2104      	movs	r1, #4
 8002ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d071      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002ee6:	e06c      	b.n	8002fc2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eec:	f003 031c 	and.w	r3, r3, #28
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d02e      	beq.n	8002f5a <HAL_DMA_IRQHandler+0xec>
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d029      	beq.n	8002f5a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0320 	and.w	r3, r3, #32
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10b      	bne.n	8002f2c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 020a 	bic.w	r2, r2, #10
 8002f22:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f30:	f003 021c 	and.w	r2, r3, #28
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	2102      	movs	r1, #2
 8002f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f3e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d038      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f58:	e033      	b.n	8002fc2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5e:	f003 031c 	and.w	r3, r3, #28
 8002f62:	2208      	movs	r2, #8
 8002f64:	409a      	lsls	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d02a      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x156>
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	f003 0308 	and.w	r3, r3, #8
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d025      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 020e 	bic.w	r2, r2, #14
 8002f86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8c:	f003 021c 	and.w	r2, r3, #28
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f94:	2101      	movs	r1, #1
 8002f96:	fa01 f202 	lsl.w	r2, r1, r2
 8002f9a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d004      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002fc2:	bf00      	nop
 8002fc4:	bf00      	nop
}
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fde:	f003 021c 	and.w	r2, r3, #28
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	2b10      	cmp	r3, #16
 8002ffc:	d108      	bne.n	8003010 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800300e:	e007      	b.n	8003020 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	60da      	str	r2, [r3, #12]
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800302c:	b480      	push	{r7}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003036:	2300      	movs	r3, #0
 8003038:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800303a:	e148      	b.n	80032ce <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	2101      	movs	r1, #1
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	fa01 f303 	lsl.w	r3, r1, r3
 8003048:	4013      	ands	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 813a 	beq.w	80032c8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 0303 	and.w	r3, r3, #3
 800305c:	2b01      	cmp	r3, #1
 800305e:	d005      	beq.n	800306c <HAL_GPIO_Init+0x40>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 0303 	and.w	r3, r3, #3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d130      	bne.n	80030ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	2203      	movs	r2, #3
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	4013      	ands	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	68da      	ldr	r2, [r3, #12]
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030a2:	2201      	movs	r2, #1
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43db      	mvns	r3, r3
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	4013      	ands	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	091b      	lsrs	r3, r3, #4
 80030b8:	f003 0201 	and.w	r2, r3, #1
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	2b03      	cmp	r3, #3
 80030d8:	d017      	beq.n	800310a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	2203      	movs	r2, #3
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	43db      	mvns	r3, r3
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4013      	ands	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d123      	bne.n	800315e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	08da      	lsrs	r2, r3, #3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3208      	adds	r2, #8
 800311e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003122:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	220f      	movs	r2, #15
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43db      	mvns	r3, r3
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	4013      	ands	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	691a      	ldr	r2, [r3, #16]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	4313      	orrs	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	08da      	lsrs	r2, r3, #3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3208      	adds	r2, #8
 8003158:	6939      	ldr	r1, [r7, #16]
 800315a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	2203      	movs	r2, #3
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	43db      	mvns	r3, r3
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4013      	ands	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f003 0203 	and.w	r2, r3, #3
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4313      	orrs	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 8094 	beq.w	80032c8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031a0:	4b52      	ldr	r3, [pc, #328]	; (80032ec <HAL_GPIO_Init+0x2c0>)
 80031a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a4:	4a51      	ldr	r2, [pc, #324]	; (80032ec <HAL_GPIO_Init+0x2c0>)
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	6613      	str	r3, [r2, #96]	; 0x60
 80031ac:	4b4f      	ldr	r3, [pc, #316]	; (80032ec <HAL_GPIO_Init+0x2c0>)
 80031ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031b8:	4a4d      	ldr	r2, [pc, #308]	; (80032f0 <HAL_GPIO_Init+0x2c4>)
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	089b      	lsrs	r3, r3, #2
 80031be:	3302      	adds	r3, #2
 80031c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f003 0303 	and.w	r3, r3, #3
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	220f      	movs	r2, #15
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	43db      	mvns	r3, r3
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	4013      	ands	r3, r2
 80031da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031e2:	d00d      	beq.n	8003200 <HAL_GPIO_Init+0x1d4>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a43      	ldr	r2, [pc, #268]	; (80032f4 <HAL_GPIO_Init+0x2c8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d007      	beq.n	80031fc <HAL_GPIO_Init+0x1d0>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a42      	ldr	r2, [pc, #264]	; (80032f8 <HAL_GPIO_Init+0x2cc>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d101      	bne.n	80031f8 <HAL_GPIO_Init+0x1cc>
 80031f4:	2302      	movs	r3, #2
 80031f6:	e004      	b.n	8003202 <HAL_GPIO_Init+0x1d6>
 80031f8:	2307      	movs	r3, #7
 80031fa:	e002      	b.n	8003202 <HAL_GPIO_Init+0x1d6>
 80031fc:	2301      	movs	r3, #1
 80031fe:	e000      	b.n	8003202 <HAL_GPIO_Init+0x1d6>
 8003200:	2300      	movs	r3, #0
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	f002 0203 	and.w	r2, r2, #3
 8003208:	0092      	lsls	r2, r2, #2
 800320a:	4093      	lsls	r3, r2
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	4313      	orrs	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003212:	4937      	ldr	r1, [pc, #220]	; (80032f0 <HAL_GPIO_Init+0x2c4>)
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	089b      	lsrs	r3, r3, #2
 8003218:	3302      	adds	r3, #2
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003220:	4b36      	ldr	r3, [pc, #216]	; (80032fc <HAL_GPIO_Init+0x2d0>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	43db      	mvns	r3, r3
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	4013      	ands	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003244:	4a2d      	ldr	r2, [pc, #180]	; (80032fc <HAL_GPIO_Init+0x2d0>)
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800324a:	4b2c      	ldr	r3, [pc, #176]	; (80032fc <HAL_GPIO_Init+0x2d0>)
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	43db      	mvns	r3, r3
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4013      	ands	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800326e:	4a23      	ldr	r2, [pc, #140]	; (80032fc <HAL_GPIO_Init+0x2d0>)
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003274:	4b21      	ldr	r3, [pc, #132]	; (80032fc <HAL_GPIO_Init+0x2d0>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	43db      	mvns	r3, r3
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4013      	ands	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4313      	orrs	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003298:	4a18      	ldr	r2, [pc, #96]	; (80032fc <HAL_GPIO_Init+0x2d0>)
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800329e:	4b17      	ldr	r3, [pc, #92]	; (80032fc <HAL_GPIO_Init+0x2d0>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	43db      	mvns	r3, r3
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	4013      	ands	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4313      	orrs	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032c2:	4a0e      	ldr	r2, [pc, #56]	; (80032fc <HAL_GPIO_Init+0x2d0>)
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	3301      	adds	r3, #1
 80032cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	fa22 f303 	lsr.w	r3, r2, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f47f aeaf 	bne.w	800303c <HAL_GPIO_Init+0x10>
  }
}
 80032de:	bf00      	nop
 80032e0:	bf00      	nop
 80032e2:	371c      	adds	r7, #28
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	40021000 	.word	0x40021000
 80032f0:	40010000 	.word	0x40010000
 80032f4:	48000400 	.word	0x48000400
 80032f8:	48000800 	.word	0x48000800
 80032fc:	40010400 	.word	0x40010400

08003300 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	460b      	mov	r3, r1
 800330a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691a      	ldr	r2, [r3, #16]
 8003310:	887b      	ldrh	r3, [r7, #2]
 8003312:	4013      	ands	r3, r2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003318:	2301      	movs	r3, #1
 800331a:	73fb      	strb	r3, [r7, #15]
 800331c:	e001      	b.n	8003322 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800331e:	2300      	movs	r3, #0
 8003320:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003322:	7bfb      	ldrb	r3, [r7, #15]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	807b      	strh	r3, [r7, #2]
 800333c:	4613      	mov	r3, r2
 800333e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003340:	787b      	ldrb	r3, [r7, #1]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003346:	887a      	ldrh	r2, [r7, #2]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800334c:	e002      	b.n	8003354 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800334e:	887a      	ldrh	r2, [r7, #2]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800336a:	4b08      	ldr	r3, [pc, #32]	; (800338c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800336c:	695a      	ldr	r2, [r3, #20]
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	4013      	ands	r3, r2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d006      	beq.n	8003384 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003376:	4a05      	ldr	r2, [pc, #20]	; (800338c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003378:	88fb      	ldrh	r3, [r7, #6]
 800337a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800337c:	88fb      	ldrh	r3, [r7, #6]
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff f9fa 	bl	8002778 <HAL_GPIO_EXTI_Callback>
  }
}
 8003384:	bf00      	nop
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40010400 	.word	0x40010400

08003390 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003394:	4b05      	ldr	r3, [pc, #20]	; (80033ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a04      	ldr	r2, [pc, #16]	; (80033ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800339a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800339e:	6013      	str	r3, [r2, #0]
}
 80033a0:	bf00      	nop
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40007000 	.word	0x40007000

080033b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80033b4:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80033bc:	4618      	mov	r0, r3
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	40007000 	.word	0x40007000

080033cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033da:	d130      	bne.n	800343e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80033dc:	4b23      	ldr	r3, [pc, #140]	; (800346c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e8:	d038      	beq.n	800345c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033ea:	4b20      	ldr	r3, [pc, #128]	; (800346c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033f2:	4a1e      	ldr	r2, [pc, #120]	; (800346c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033fa:	4b1d      	ldr	r3, [pc, #116]	; (8003470 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2232      	movs	r2, #50	; 0x32
 8003400:	fb02 f303 	mul.w	r3, r2, r3
 8003404:	4a1b      	ldr	r2, [pc, #108]	; (8003474 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003406:	fba2 2303 	umull	r2, r3, r2, r3
 800340a:	0c9b      	lsrs	r3, r3, #18
 800340c:	3301      	adds	r3, #1
 800340e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003410:	e002      	b.n	8003418 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	3b01      	subs	r3, #1
 8003416:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003418:	4b14      	ldr	r3, [pc, #80]	; (800346c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003424:	d102      	bne.n	800342c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1f2      	bne.n	8003412 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800342c:	4b0f      	ldr	r3, [pc, #60]	; (800346c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003438:	d110      	bne.n	800345c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e00f      	b.n	800345e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800343e:	4b0b      	ldr	r3, [pc, #44]	; (800346c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800344a:	d007      	beq.n	800345c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800344c:	4b07      	ldr	r3, [pc, #28]	; (800346c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003454:	4a05      	ldr	r2, [pc, #20]	; (800346c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003456:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800345a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40007000 	.word	0x40007000
 8003470:	20000000 	.word	0x20000000
 8003474:	431bde83 	.word	0x431bde83

08003478 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b088      	sub	sp, #32
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d102      	bne.n	800348c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	f000 bc02 	b.w	8003c90 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800348c:	4b96      	ldr	r3, [pc, #600]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 030c 	and.w	r3, r3, #12
 8003494:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003496:	4b94      	ldr	r3, [pc, #592]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0310 	and.w	r3, r3, #16
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 80e4 	beq.w	8003676 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d007      	beq.n	80034c4 <HAL_RCC_OscConfig+0x4c>
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	2b0c      	cmp	r3, #12
 80034b8:	f040 808b 	bne.w	80035d2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	f040 8087 	bne.w	80035d2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034c4:	4b88      	ldr	r3, [pc, #544]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_RCC_OscConfig+0x64>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e3d9      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1a      	ldr	r2, [r3, #32]
 80034e0:	4b81      	ldr	r3, [pc, #516]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0308 	and.w	r3, r3, #8
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d004      	beq.n	80034f6 <HAL_RCC_OscConfig+0x7e>
 80034ec:	4b7e      	ldr	r3, [pc, #504]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034f4:	e005      	b.n	8003502 <HAL_RCC_OscConfig+0x8a>
 80034f6:	4b7c      	ldr	r3, [pc, #496]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 80034f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034fc:	091b      	lsrs	r3, r3, #4
 80034fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003502:	4293      	cmp	r3, r2
 8003504:	d223      	bcs.n	800354e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	4618      	mov	r0, r3
 800350c:	f000 fd8c 	bl	8004028 <RCC_SetFlashLatencyFromMSIRange>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e3ba      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800351a:	4b73      	ldr	r3, [pc, #460]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a72      	ldr	r2, [pc, #456]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 8003520:	f043 0308 	orr.w	r3, r3, #8
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	4b70      	ldr	r3, [pc, #448]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	496d      	ldr	r1, [pc, #436]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 8003534:	4313      	orrs	r3, r2
 8003536:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003538:	4b6b      	ldr	r3, [pc, #428]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	021b      	lsls	r3, r3, #8
 8003546:	4968      	ldr	r1, [pc, #416]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 8003548:	4313      	orrs	r3, r2
 800354a:	604b      	str	r3, [r1, #4]
 800354c:	e025      	b.n	800359a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800354e:	4b66      	ldr	r3, [pc, #408]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a65      	ldr	r2, [pc, #404]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 8003554:	f043 0308 	orr.w	r3, r3, #8
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	4b63      	ldr	r3, [pc, #396]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	4960      	ldr	r1, [pc, #384]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 8003568:	4313      	orrs	r3, r2
 800356a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800356c:	4b5e      	ldr	r3, [pc, #376]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	021b      	lsls	r3, r3, #8
 800357a:	495b      	ldr	r1, [pc, #364]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 800357c:	4313      	orrs	r3, r2
 800357e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d109      	bne.n	800359a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	4618      	mov	r0, r3
 800358c:	f000 fd4c 	bl	8004028 <RCC_SetFlashLatencyFromMSIRange>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e37a      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800359a:	f000 fc81 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 800359e:	4602      	mov	r2, r0
 80035a0:	4b51      	ldr	r3, [pc, #324]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	091b      	lsrs	r3, r3, #4
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	4950      	ldr	r1, [pc, #320]	; (80036ec <HAL_RCC_OscConfig+0x274>)
 80035ac:	5ccb      	ldrb	r3, [r1, r3]
 80035ae:	f003 031f 	and.w	r3, r3, #31
 80035b2:	fa22 f303 	lsr.w	r3, r2, r3
 80035b6:	4a4e      	ldr	r2, [pc, #312]	; (80036f0 <HAL_RCC_OscConfig+0x278>)
 80035b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80035ba:	4b4e      	ldr	r3, [pc, #312]	; (80036f4 <HAL_RCC_OscConfig+0x27c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f7ff f92c 	bl	800281c <HAL_InitTick>
 80035c4:	4603      	mov	r3, r0
 80035c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d052      	beq.n	8003674 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
 80035d0:	e35e      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d032      	beq.n	8003640 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035da:	4b43      	ldr	r3, [pc, #268]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a42      	ldr	r2, [pc, #264]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035e6:	f7ff f969 	bl	80028bc <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035ee:	f7ff f965 	bl	80028bc <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e347      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003600:	4b39      	ldr	r3, [pc, #228]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f0      	beq.n	80035ee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800360c:	4b36      	ldr	r3, [pc, #216]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a35      	ldr	r2, [pc, #212]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 8003612:	f043 0308 	orr.w	r3, r3, #8
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	4b33      	ldr	r3, [pc, #204]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	4930      	ldr	r1, [pc, #192]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 8003626:	4313      	orrs	r3, r2
 8003628:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800362a:	4b2f      	ldr	r3, [pc, #188]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	021b      	lsls	r3, r3, #8
 8003638:	492b      	ldr	r1, [pc, #172]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 800363a:	4313      	orrs	r3, r2
 800363c:	604b      	str	r3, [r1, #4]
 800363e:	e01a      	b.n	8003676 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003640:	4b29      	ldr	r3, [pc, #164]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a28      	ldr	r2, [pc, #160]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 8003646:	f023 0301 	bic.w	r3, r3, #1
 800364a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800364c:	f7ff f936 	bl	80028bc <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003654:	f7ff f932 	bl	80028bc <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e314      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003666:	4b20      	ldr	r3, [pc, #128]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1f0      	bne.n	8003654 <HAL_RCC_OscConfig+0x1dc>
 8003672:	e000      	b.n	8003676 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003674:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d073      	beq.n	800376a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	2b08      	cmp	r3, #8
 8003686:	d005      	beq.n	8003694 <HAL_RCC_OscConfig+0x21c>
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	2b0c      	cmp	r3, #12
 800368c:	d10e      	bne.n	80036ac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2b03      	cmp	r3, #3
 8003692:	d10b      	bne.n	80036ac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003694:	4b14      	ldr	r3, [pc, #80]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d063      	beq.n	8003768 <HAL_RCC_OscConfig+0x2f0>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d15f      	bne.n	8003768 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e2f1      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b4:	d106      	bne.n	80036c4 <HAL_RCC_OscConfig+0x24c>
 80036b6:	4b0c      	ldr	r3, [pc, #48]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a0b      	ldr	r2, [pc, #44]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 80036bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	e025      	b.n	8003710 <HAL_RCC_OscConfig+0x298>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036cc:	d114      	bne.n	80036f8 <HAL_RCC_OscConfig+0x280>
 80036ce:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a05      	ldr	r2, [pc, #20]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 80036d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	4b03      	ldr	r3, [pc, #12]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a02      	ldr	r2, [pc, #8]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 80036e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	e013      	b.n	8003710 <HAL_RCC_OscConfig+0x298>
 80036e8:	40021000 	.word	0x40021000
 80036ec:	0800aed8 	.word	0x0800aed8
 80036f0:	20000000 	.word	0x20000000
 80036f4:	20000010 	.word	0x20000010
 80036f8:	4ba0      	ldr	r3, [pc, #640]	; (800397c <HAL_RCC_OscConfig+0x504>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a9f      	ldr	r2, [pc, #636]	; (800397c <HAL_RCC_OscConfig+0x504>)
 80036fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003702:	6013      	str	r3, [r2, #0]
 8003704:	4b9d      	ldr	r3, [pc, #628]	; (800397c <HAL_RCC_OscConfig+0x504>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a9c      	ldr	r2, [pc, #624]	; (800397c <HAL_RCC_OscConfig+0x504>)
 800370a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800370e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d013      	beq.n	8003740 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003718:	f7ff f8d0 	bl	80028bc <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003720:	f7ff f8cc 	bl	80028bc <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b64      	cmp	r3, #100	; 0x64
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e2ae      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003732:	4b92      	ldr	r3, [pc, #584]	; (800397c <HAL_RCC_OscConfig+0x504>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0f0      	beq.n	8003720 <HAL_RCC_OscConfig+0x2a8>
 800373e:	e014      	b.n	800376a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003740:	f7ff f8bc 	bl	80028bc <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003748:	f7ff f8b8 	bl	80028bc <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b64      	cmp	r3, #100	; 0x64
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e29a      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800375a:	4b88      	ldr	r3, [pc, #544]	; (800397c <HAL_RCC_OscConfig+0x504>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f0      	bne.n	8003748 <HAL_RCC_OscConfig+0x2d0>
 8003766:	e000      	b.n	800376a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d060      	beq.n	8003838 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	2b04      	cmp	r3, #4
 800377a:	d005      	beq.n	8003788 <HAL_RCC_OscConfig+0x310>
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	2b0c      	cmp	r3, #12
 8003780:	d119      	bne.n	80037b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2b02      	cmp	r3, #2
 8003786:	d116      	bne.n	80037b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003788:	4b7c      	ldr	r3, [pc, #496]	; (800397c <HAL_RCC_OscConfig+0x504>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_RCC_OscConfig+0x328>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e277      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a0:	4b76      	ldr	r3, [pc, #472]	; (800397c <HAL_RCC_OscConfig+0x504>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	061b      	lsls	r3, r3, #24
 80037ae:	4973      	ldr	r1, [pc, #460]	; (800397c <HAL_RCC_OscConfig+0x504>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037b4:	e040      	b.n	8003838 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d023      	beq.n	8003806 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037be:	4b6f      	ldr	r3, [pc, #444]	; (800397c <HAL_RCC_OscConfig+0x504>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a6e      	ldr	r2, [pc, #440]	; (800397c <HAL_RCC_OscConfig+0x504>)
 80037c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ca:	f7ff f877 	bl	80028bc <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037d2:	f7ff f873 	bl	80028bc <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e255      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037e4:	4b65      	ldr	r3, [pc, #404]	; (800397c <HAL_RCC_OscConfig+0x504>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f0      	beq.n	80037d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f0:	4b62      	ldr	r3, [pc, #392]	; (800397c <HAL_RCC_OscConfig+0x504>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	061b      	lsls	r3, r3, #24
 80037fe:	495f      	ldr	r1, [pc, #380]	; (800397c <HAL_RCC_OscConfig+0x504>)
 8003800:	4313      	orrs	r3, r2
 8003802:	604b      	str	r3, [r1, #4]
 8003804:	e018      	b.n	8003838 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003806:	4b5d      	ldr	r3, [pc, #372]	; (800397c <HAL_RCC_OscConfig+0x504>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a5c      	ldr	r2, [pc, #368]	; (800397c <HAL_RCC_OscConfig+0x504>)
 800380c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003812:	f7ff f853 	bl	80028bc <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800381a:	f7ff f84f 	bl	80028bc <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e231      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800382c:	4b53      	ldr	r3, [pc, #332]	; (800397c <HAL_RCC_OscConfig+0x504>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1f0      	bne.n	800381a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0308 	and.w	r3, r3, #8
 8003840:	2b00      	cmp	r3, #0
 8003842:	d03c      	beq.n	80038be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d01c      	beq.n	8003886 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800384c:	4b4b      	ldr	r3, [pc, #300]	; (800397c <HAL_RCC_OscConfig+0x504>)
 800384e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003852:	4a4a      	ldr	r2, [pc, #296]	; (800397c <HAL_RCC_OscConfig+0x504>)
 8003854:	f043 0301 	orr.w	r3, r3, #1
 8003858:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385c:	f7ff f82e 	bl	80028bc <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003864:	f7ff f82a 	bl	80028bc <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e20c      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003876:	4b41      	ldr	r3, [pc, #260]	; (800397c <HAL_RCC_OscConfig+0x504>)
 8003878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0ef      	beq.n	8003864 <HAL_RCC_OscConfig+0x3ec>
 8003884:	e01b      	b.n	80038be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003886:	4b3d      	ldr	r3, [pc, #244]	; (800397c <HAL_RCC_OscConfig+0x504>)
 8003888:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800388c:	4a3b      	ldr	r2, [pc, #236]	; (800397c <HAL_RCC_OscConfig+0x504>)
 800388e:	f023 0301 	bic.w	r3, r3, #1
 8003892:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003896:	f7ff f811 	bl	80028bc <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800389e:	f7ff f80d 	bl	80028bc <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e1ef      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038b0:	4b32      	ldr	r3, [pc, #200]	; (800397c <HAL_RCC_OscConfig+0x504>)
 80038b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1ef      	bne.n	800389e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 80a6 	beq.w	8003a18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038cc:	2300      	movs	r3, #0
 80038ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038d0:	4b2a      	ldr	r3, [pc, #168]	; (800397c <HAL_RCC_OscConfig+0x504>)
 80038d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10d      	bne.n	80038f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038dc:	4b27      	ldr	r3, [pc, #156]	; (800397c <HAL_RCC_OscConfig+0x504>)
 80038de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e0:	4a26      	ldr	r2, [pc, #152]	; (800397c <HAL_RCC_OscConfig+0x504>)
 80038e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e6:	6593      	str	r3, [r2, #88]	; 0x58
 80038e8:	4b24      	ldr	r3, [pc, #144]	; (800397c <HAL_RCC_OscConfig+0x504>)
 80038ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038f4:	2301      	movs	r3, #1
 80038f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038f8:	4b21      	ldr	r3, [pc, #132]	; (8003980 <HAL_RCC_OscConfig+0x508>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003900:	2b00      	cmp	r3, #0
 8003902:	d118      	bne.n	8003936 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003904:	4b1e      	ldr	r3, [pc, #120]	; (8003980 <HAL_RCC_OscConfig+0x508>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a1d      	ldr	r2, [pc, #116]	; (8003980 <HAL_RCC_OscConfig+0x508>)
 800390a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800390e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003910:	f7fe ffd4 	bl	80028bc <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003918:	f7fe ffd0 	bl	80028bc <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e1b2      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800392a:	4b15      	ldr	r3, [pc, #84]	; (8003980 <HAL_RCC_OscConfig+0x508>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d108      	bne.n	8003950 <HAL_RCC_OscConfig+0x4d8>
 800393e:	4b0f      	ldr	r3, [pc, #60]	; (800397c <HAL_RCC_OscConfig+0x504>)
 8003940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003944:	4a0d      	ldr	r2, [pc, #52]	; (800397c <HAL_RCC_OscConfig+0x504>)
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800394e:	e029      	b.n	80039a4 <HAL_RCC_OscConfig+0x52c>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2b05      	cmp	r3, #5
 8003956:	d115      	bne.n	8003984 <HAL_RCC_OscConfig+0x50c>
 8003958:	4b08      	ldr	r3, [pc, #32]	; (800397c <HAL_RCC_OscConfig+0x504>)
 800395a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395e:	4a07      	ldr	r2, [pc, #28]	; (800397c <HAL_RCC_OscConfig+0x504>)
 8003960:	f043 0304 	orr.w	r3, r3, #4
 8003964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003968:	4b04      	ldr	r3, [pc, #16]	; (800397c <HAL_RCC_OscConfig+0x504>)
 800396a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396e:	4a03      	ldr	r2, [pc, #12]	; (800397c <HAL_RCC_OscConfig+0x504>)
 8003970:	f043 0301 	orr.w	r3, r3, #1
 8003974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003978:	e014      	b.n	80039a4 <HAL_RCC_OscConfig+0x52c>
 800397a:	bf00      	nop
 800397c:	40021000 	.word	0x40021000
 8003980:	40007000 	.word	0x40007000
 8003984:	4b9a      	ldr	r3, [pc, #616]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398a:	4a99      	ldr	r2, [pc, #612]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 800398c:	f023 0301 	bic.w	r3, r3, #1
 8003990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003994:	4b96      	ldr	r3, [pc, #600]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399a:	4a95      	ldr	r2, [pc, #596]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 800399c:	f023 0304 	bic.w	r3, r3, #4
 80039a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d016      	beq.n	80039da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ac:	f7fe ff86 	bl	80028bc <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039b2:	e00a      	b.n	80039ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b4:	f7fe ff82 	bl	80028bc <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e162      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ca:	4b89      	ldr	r3, [pc, #548]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 80039cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0ed      	beq.n	80039b4 <HAL_RCC_OscConfig+0x53c>
 80039d8:	e015      	b.n	8003a06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039da:	f7fe ff6f 	bl	80028bc <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039e0:	e00a      	b.n	80039f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039e2:	f7fe ff6b 	bl	80028bc <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e14b      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039f8:	4b7d      	ldr	r3, [pc, #500]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 80039fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1ed      	bne.n	80039e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a06:	7ffb      	ldrb	r3, [r7, #31]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d105      	bne.n	8003a18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a0c:	4b78      	ldr	r3, [pc, #480]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a10:	4a77      	ldr	r2, [pc, #476]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a16:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d03c      	beq.n	8003a9e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d01c      	beq.n	8003a66 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a2c:	4b70      	ldr	r3, [pc, #448]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003a2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a32:	4a6f      	ldr	r2, [pc, #444]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003a34:	f043 0301 	orr.w	r3, r3, #1
 8003a38:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3c:	f7fe ff3e 	bl	80028bc <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a44:	f7fe ff3a 	bl	80028bc <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e11c      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a56:	4b66      	ldr	r3, [pc, #408]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003a58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0ef      	beq.n	8003a44 <HAL_RCC_OscConfig+0x5cc>
 8003a64:	e01b      	b.n	8003a9e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a66:	4b62      	ldr	r3, [pc, #392]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003a68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a6c:	4a60      	ldr	r2, [pc, #384]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003a6e:	f023 0301 	bic.w	r3, r3, #1
 8003a72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a76:	f7fe ff21 	bl	80028bc <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a7e:	f7fe ff1d 	bl	80028bc <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e0ff      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a90:	4b57      	ldr	r3, [pc, #348]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003a92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1ef      	bne.n	8003a7e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 80f3 	beq.w	8003c8e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	f040 80c9 	bne.w	8003c44 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ab2:	4b4f      	ldr	r3, [pc, #316]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f003 0203 	and.w	r2, r3, #3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d12c      	bne.n	8003b20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d123      	bne.n	8003b20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d11b      	bne.n	8003b20 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d113      	bne.n	8003b20 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b02:	085b      	lsrs	r3, r3, #1
 8003b04:	3b01      	subs	r3, #1
 8003b06:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d109      	bne.n	8003b20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	085b      	lsrs	r3, r3, #1
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d06b      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	2b0c      	cmp	r3, #12
 8003b24:	d062      	beq.n	8003bec <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b26:	4b32      	ldr	r3, [pc, #200]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e0ac      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b36:	4b2e      	ldr	r3, [pc, #184]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a2d      	ldr	r2, [pc, #180]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003b3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b40:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b42:	f7fe febb 	bl	80028bc <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b4a:	f7fe feb7 	bl	80028bc <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e099      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b5c:	4b24      	ldr	r3, [pc, #144]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1f0      	bne.n	8003b4a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b68:	4b21      	ldr	r3, [pc, #132]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	4b21      	ldr	r3, [pc, #132]	; (8003bf4 <HAL_RCC_OscConfig+0x77c>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b78:	3a01      	subs	r2, #1
 8003b7a:	0112      	lsls	r2, r2, #4
 8003b7c:	4311      	orrs	r1, r2
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b82:	0212      	lsls	r2, r2, #8
 8003b84:	4311      	orrs	r1, r2
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b8a:	0852      	lsrs	r2, r2, #1
 8003b8c:	3a01      	subs	r2, #1
 8003b8e:	0552      	lsls	r2, r2, #21
 8003b90:	4311      	orrs	r1, r2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b96:	0852      	lsrs	r2, r2, #1
 8003b98:	3a01      	subs	r2, #1
 8003b9a:	0652      	lsls	r2, r2, #25
 8003b9c:	4311      	orrs	r1, r2
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ba2:	06d2      	lsls	r2, r2, #27
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	4912      	ldr	r1, [pc, #72]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003bac:	4b10      	ldr	r3, [pc, #64]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a0f      	ldr	r2, [pc, #60]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bb6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bb8:	4b0d      	ldr	r3, [pc, #52]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	4a0c      	ldr	r2, [pc, #48]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bc2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bc4:	f7fe fe7a 	bl	80028bc <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bcc:	f7fe fe76 	bl	80028bc <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e058      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bde:	4b04      	ldr	r3, [pc, #16]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0f0      	beq.n	8003bcc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bea:	e050      	b.n	8003c8e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e04f      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bf8:	4b27      	ldr	r3, [pc, #156]	; (8003c98 <HAL_RCC_OscConfig+0x820>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d144      	bne.n	8003c8e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c04:	4b24      	ldr	r3, [pc, #144]	; (8003c98 <HAL_RCC_OscConfig+0x820>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a23      	ldr	r2, [pc, #140]	; (8003c98 <HAL_RCC_OscConfig+0x820>)
 8003c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c10:	4b21      	ldr	r3, [pc, #132]	; (8003c98 <HAL_RCC_OscConfig+0x820>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	4a20      	ldr	r2, [pc, #128]	; (8003c98 <HAL_RCC_OscConfig+0x820>)
 8003c16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c1c:	f7fe fe4e 	bl	80028bc <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c24:	f7fe fe4a 	bl	80028bc <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e02c      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c36:	4b18      	ldr	r3, [pc, #96]	; (8003c98 <HAL_RCC_OscConfig+0x820>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0f0      	beq.n	8003c24 <HAL_RCC_OscConfig+0x7ac>
 8003c42:	e024      	b.n	8003c8e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	2b0c      	cmp	r3, #12
 8003c48:	d01f      	beq.n	8003c8a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c4a:	4b13      	ldr	r3, [pc, #76]	; (8003c98 <HAL_RCC_OscConfig+0x820>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a12      	ldr	r2, [pc, #72]	; (8003c98 <HAL_RCC_OscConfig+0x820>)
 8003c50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c56:	f7fe fe31 	bl	80028bc <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c5e:	f7fe fe2d 	bl	80028bc <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e00f      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c70:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <HAL_RCC_OscConfig+0x820>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1f0      	bne.n	8003c5e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003c7c:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <HAL_RCC_OscConfig+0x820>)
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	4905      	ldr	r1, [pc, #20]	; (8003c98 <HAL_RCC_OscConfig+0x820>)
 8003c82:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <HAL_RCC_OscConfig+0x824>)
 8003c84:	4013      	ands	r3, r2
 8003c86:	60cb      	str	r3, [r1, #12]
 8003c88:	e001      	b.n	8003c8e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3720      	adds	r7, #32
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	feeefffc 	.word	0xfeeefffc

08003ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e0e7      	b.n	8003e84 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cb4:	4b75      	ldr	r3, [pc, #468]	; (8003e8c <HAL_RCC_ClockConfig+0x1ec>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d910      	bls.n	8003ce4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc2:	4b72      	ldr	r3, [pc, #456]	; (8003e8c <HAL_RCC_ClockConfig+0x1ec>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f023 0207 	bic.w	r2, r3, #7
 8003cca:	4970      	ldr	r1, [pc, #448]	; (8003e8c <HAL_RCC_ClockConfig+0x1ec>)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd2:	4b6e      	ldr	r3, [pc, #440]	; (8003e8c <HAL_RCC_ClockConfig+0x1ec>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d001      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0cf      	b.n	8003e84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d010      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	4b66      	ldr	r3, [pc, #408]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d908      	bls.n	8003d12 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d00:	4b63      	ldr	r3, [pc, #396]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	4960      	ldr	r1, [pc, #384]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d04c      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	d107      	bne.n	8003d36 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d26:	4b5a      	ldr	r3, [pc, #360]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d121      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e0a6      	b.n	8003e84 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d107      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d3e:	4b54      	ldr	r3, [pc, #336]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d115      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e09a      	b.n	8003e84 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d107      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d56:	4b4e      	ldr	r3, [pc, #312]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d109      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e08e      	b.n	8003e84 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d66:	4b4a      	ldr	r3, [pc, #296]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e086      	b.n	8003e84 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d76:	4b46      	ldr	r3, [pc, #280]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f023 0203 	bic.w	r2, r3, #3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	4943      	ldr	r1, [pc, #268]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d88:	f7fe fd98 	bl	80028bc <HAL_GetTick>
 8003d8c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8e:	e00a      	b.n	8003da6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d90:	f7fe fd94 	bl	80028bc <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e06e      	b.n	8003e84 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da6:	4b3a      	ldr	r3, [pc, #232]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 020c 	and.w	r2, r3, #12
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d1eb      	bne.n	8003d90 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d010      	beq.n	8003de6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	4b31      	ldr	r3, [pc, #196]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d208      	bcs.n	8003de6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dd4:	4b2e      	ldr	r3, [pc, #184]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	492b      	ldr	r1, [pc, #172]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003de6:	4b29      	ldr	r3, [pc, #164]	; (8003e8c <HAL_RCC_ClockConfig+0x1ec>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d210      	bcs.n	8003e16 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df4:	4b25      	ldr	r3, [pc, #148]	; (8003e8c <HAL_RCC_ClockConfig+0x1ec>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f023 0207 	bic.w	r2, r3, #7
 8003dfc:	4923      	ldr	r1, [pc, #140]	; (8003e8c <HAL_RCC_ClockConfig+0x1ec>)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e04:	4b21      	ldr	r3, [pc, #132]	; (8003e8c <HAL_RCC_ClockConfig+0x1ec>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d001      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e036      	b.n	8003e84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0304 	and.w	r3, r3, #4
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d008      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e22:	4b1b      	ldr	r3, [pc, #108]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	4918      	ldr	r1, [pc, #96]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d009      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e40:	4b13      	ldr	r3, [pc, #76]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	4910      	ldr	r1, [pc, #64]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e54:	f000 f824 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	4b0d      	ldr	r3, [pc, #52]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	091b      	lsrs	r3, r3, #4
 8003e60:	f003 030f 	and.w	r3, r3, #15
 8003e64:	490b      	ldr	r1, [pc, #44]	; (8003e94 <HAL_RCC_ClockConfig+0x1f4>)
 8003e66:	5ccb      	ldrb	r3, [r1, r3]
 8003e68:	f003 031f 	and.w	r3, r3, #31
 8003e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e70:	4a09      	ldr	r2, [pc, #36]	; (8003e98 <HAL_RCC_ClockConfig+0x1f8>)
 8003e72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e74:	4b09      	ldr	r3, [pc, #36]	; (8003e9c <HAL_RCC_ClockConfig+0x1fc>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fe fccf 	bl	800281c <HAL_InitTick>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e82:	7afb      	ldrb	r3, [r7, #11]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40022000 	.word	0x40022000
 8003e90:	40021000 	.word	0x40021000
 8003e94:	0800aed8 	.word	0x0800aed8
 8003e98:	20000000 	.word	0x20000000
 8003e9c:	20000010 	.word	0x20000010

08003ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b089      	sub	sp, #36	; 0x24
 8003ea4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61fb      	str	r3, [r7, #28]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eae:	4b3e      	ldr	r3, [pc, #248]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 030c 	and.w	r3, r3, #12
 8003eb6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003eb8:	4b3b      	ldr	r3, [pc, #236]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f003 0303 	and.w	r3, r3, #3
 8003ec0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d005      	beq.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x34>
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	2b0c      	cmp	r3, #12
 8003ecc:	d121      	bne.n	8003f12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d11e      	bne.n	8003f12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ed4:	4b34      	ldr	r3, [pc, #208]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0308 	and.w	r3, r3, #8
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d107      	bne.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ee0:	4b31      	ldr	r3, [pc, #196]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ee6:	0a1b      	lsrs	r3, r3, #8
 8003ee8:	f003 030f 	and.w	r3, r3, #15
 8003eec:	61fb      	str	r3, [r7, #28]
 8003eee:	e005      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ef0:	4b2d      	ldr	r3, [pc, #180]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	091b      	lsrs	r3, r3, #4
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003efc:	4a2b      	ldr	r2, [pc, #172]	; (8003fac <HAL_RCC_GetSysClockFreq+0x10c>)
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10d      	bne.n	8003f28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f10:	e00a      	b.n	8003f28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	2b04      	cmp	r3, #4
 8003f16:	d102      	bne.n	8003f1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f18:	4b25      	ldr	r3, [pc, #148]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f1a:	61bb      	str	r3, [r7, #24]
 8003f1c:	e004      	b.n	8003f28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d101      	bne.n	8003f28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f24:	4b23      	ldr	r3, [pc, #140]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	2b0c      	cmp	r3, #12
 8003f2c:	d134      	bne.n	8003f98 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f2e:	4b1e      	ldr	r3, [pc, #120]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d003      	beq.n	8003f46 <HAL_RCC_GetSysClockFreq+0xa6>
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	d003      	beq.n	8003f4c <HAL_RCC_GetSysClockFreq+0xac>
 8003f44:	e005      	b.n	8003f52 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f46:	4b1a      	ldr	r3, [pc, #104]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f48:	617b      	str	r3, [r7, #20]
      break;
 8003f4a:	e005      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f4c:	4b19      	ldr	r3, [pc, #100]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f4e:	617b      	str	r3, [r7, #20]
      break;
 8003f50:	e002      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	617b      	str	r3, [r7, #20]
      break;
 8003f56:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f58:	4b13      	ldr	r3, [pc, #76]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	091b      	lsrs	r3, r3, #4
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	3301      	adds	r3, #1
 8003f64:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f66:	4b10      	ldr	r3, [pc, #64]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	0a1b      	lsrs	r3, r3, #8
 8003f6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	fb03 f202 	mul.w	r2, r3, r2
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f7e:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	0e5b      	lsrs	r3, r3, #25
 8003f84:	f003 0303 	and.w	r3, r3, #3
 8003f88:	3301      	adds	r3, #1
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f98:	69bb      	ldr	r3, [r7, #24]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3724      	adds	r7, #36	; 0x24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	0800aef0 	.word	0x0800aef0
 8003fb0:	00f42400 	.word	0x00f42400
 8003fb4:	007a1200 	.word	0x007a1200

08003fb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fbc:	4b03      	ldr	r3, [pc, #12]	; (8003fcc <HAL_RCC_GetHCLKFreq+0x14>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	20000000 	.word	0x20000000

08003fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003fd4:	f7ff fff0 	bl	8003fb8 <HAL_RCC_GetHCLKFreq>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	4b06      	ldr	r3, [pc, #24]	; (8003ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	0a1b      	lsrs	r3, r3, #8
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	4904      	ldr	r1, [pc, #16]	; (8003ff8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fe6:	5ccb      	ldrb	r3, [r1, r3]
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	0800aee8 	.word	0x0800aee8

08003ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004000:	f7ff ffda 	bl	8003fb8 <HAL_RCC_GetHCLKFreq>
 8004004:	4602      	mov	r2, r0
 8004006:	4b06      	ldr	r3, [pc, #24]	; (8004020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	0adb      	lsrs	r3, r3, #11
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	4904      	ldr	r1, [pc, #16]	; (8004024 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004012:	5ccb      	ldrb	r3, [r1, r3]
 8004014:	f003 031f 	and.w	r3, r3, #31
 8004018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800401c:	4618      	mov	r0, r3
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40021000 	.word	0x40021000
 8004024:	0800aee8 	.word	0x0800aee8

08004028 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004030:	2300      	movs	r3, #0
 8004032:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004034:	4b2a      	ldr	r3, [pc, #168]	; (80040e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004040:	f7ff f9b6 	bl	80033b0 <HAL_PWREx_GetVoltageRange>
 8004044:	6178      	str	r0, [r7, #20]
 8004046:	e014      	b.n	8004072 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004048:	4b25      	ldr	r3, [pc, #148]	; (80040e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800404a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404c:	4a24      	ldr	r2, [pc, #144]	; (80040e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800404e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004052:	6593      	str	r3, [r2, #88]	; 0x58
 8004054:	4b22      	ldr	r3, [pc, #136]	; (80040e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004060:	f7ff f9a6 	bl	80033b0 <HAL_PWREx_GetVoltageRange>
 8004064:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004066:	4b1e      	ldr	r3, [pc, #120]	; (80040e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406a:	4a1d      	ldr	r2, [pc, #116]	; (80040e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800406c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004070:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004078:	d10b      	bne.n	8004092 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b80      	cmp	r3, #128	; 0x80
 800407e:	d919      	bls.n	80040b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2ba0      	cmp	r3, #160	; 0xa0
 8004084:	d902      	bls.n	800408c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004086:	2302      	movs	r3, #2
 8004088:	613b      	str	r3, [r7, #16]
 800408a:	e013      	b.n	80040b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800408c:	2301      	movs	r3, #1
 800408e:	613b      	str	r3, [r7, #16]
 8004090:	e010      	b.n	80040b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b80      	cmp	r3, #128	; 0x80
 8004096:	d902      	bls.n	800409e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004098:	2303      	movs	r3, #3
 800409a:	613b      	str	r3, [r7, #16]
 800409c:	e00a      	b.n	80040b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b80      	cmp	r3, #128	; 0x80
 80040a2:	d102      	bne.n	80040aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040a4:	2302      	movs	r3, #2
 80040a6:	613b      	str	r3, [r7, #16]
 80040a8:	e004      	b.n	80040b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b70      	cmp	r3, #112	; 0x70
 80040ae:	d101      	bne.n	80040b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040b0:	2301      	movs	r3, #1
 80040b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80040b4:	4b0b      	ldr	r3, [pc, #44]	; (80040e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f023 0207 	bic.w	r2, r3, #7
 80040bc:	4909      	ldr	r1, [pc, #36]	; (80040e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80040c4:	4b07      	ldr	r3, [pc, #28]	; (80040e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d001      	beq.n	80040d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e000      	b.n	80040d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40021000 	.word	0x40021000
 80040e4:	40022000 	.word	0x40022000

080040e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040f0:	2300      	movs	r3, #0
 80040f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040f4:	2300      	movs	r3, #0
 80040f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004100:	2b00      	cmp	r3, #0
 8004102:	d031      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004108:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800410c:	d01a      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800410e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004112:	d814      	bhi.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004114:	2b00      	cmp	r3, #0
 8004116:	d009      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004118:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800411c:	d10f      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800411e:	4b5d      	ldr	r3, [pc, #372]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	4a5c      	ldr	r2, [pc, #368]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004128:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800412a:	e00c      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3304      	adds	r3, #4
 8004130:	2100      	movs	r1, #0
 8004132:	4618      	mov	r0, r3
 8004134:	f000 fdbc 	bl	8004cb0 <RCCEx_PLLSAI1_Config>
 8004138:	4603      	mov	r3, r0
 800413a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800413c:	e003      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	74fb      	strb	r3, [r7, #19]
      break;
 8004142:	e000      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004144:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004146:	7cfb      	ldrb	r3, [r7, #19]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10b      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800414c:	4b51      	ldr	r3, [pc, #324]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004152:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415a:	494e      	ldr	r1, [pc, #312]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800415c:	4313      	orrs	r3, r2
 800415e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004162:	e001      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004164:	7cfb      	ldrb	r3, [r7, #19]
 8004166:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 809e 	beq.w	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004176:	2300      	movs	r3, #0
 8004178:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800417a:	4b46      	ldr	r3, [pc, #280]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800417c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004186:	2301      	movs	r3, #1
 8004188:	e000      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800418a:	2300      	movs	r3, #0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00d      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004190:	4b40      	ldr	r3, [pc, #256]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004194:	4a3f      	ldr	r2, [pc, #252]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800419a:	6593      	str	r3, [r2, #88]	; 0x58
 800419c:	4b3d      	ldr	r3, [pc, #244]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800419e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a4:	60bb      	str	r3, [r7, #8]
 80041a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041a8:	2301      	movs	r3, #1
 80041aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041ac:	4b3a      	ldr	r3, [pc, #232]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a39      	ldr	r2, [pc, #228]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80041b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041b8:	f7fe fb80 	bl	80028bc <HAL_GetTick>
 80041bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041be:	e009      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c0:	f7fe fb7c 	bl	80028bc <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d902      	bls.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	74fb      	strb	r3, [r7, #19]
        break;
 80041d2:	e005      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041d4:	4b30      	ldr	r3, [pc, #192]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0ef      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80041e0:	7cfb      	ldrb	r3, [r7, #19]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d15a      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041e6:	4b2b      	ldr	r3, [pc, #172]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d01e      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d019      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004202:	4b24      	ldr	r3, [pc, #144]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800420c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800420e:	4b21      	ldr	r3, [pc, #132]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004214:	4a1f      	ldr	r2, [pc, #124]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800421a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800421e:	4b1d      	ldr	r3, [pc, #116]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004224:	4a1b      	ldr	r2, [pc, #108]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800422a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800422e:	4a19      	ldr	r2, [pc, #100]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b00      	cmp	r3, #0
 800423e:	d016      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004240:	f7fe fb3c 	bl	80028bc <HAL_GetTick>
 8004244:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004246:	e00b      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004248:	f7fe fb38 	bl	80028bc <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	f241 3288 	movw	r2, #5000	; 0x1388
 8004256:	4293      	cmp	r3, r2
 8004258:	d902      	bls.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	74fb      	strb	r3, [r7, #19]
            break;
 800425e:	e006      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004260:	4b0c      	ldr	r3, [pc, #48]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0ec      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800426e:	7cfb      	ldrb	r3, [r7, #19]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10b      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004274:	4b07      	ldr	r3, [pc, #28]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004282:	4904      	ldr	r1, [pc, #16]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800428a:	e009      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800428c:	7cfb      	ldrb	r3, [r7, #19]
 800428e:	74bb      	strb	r3, [r7, #18]
 8004290:	e006      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004292:	bf00      	nop
 8004294:	40021000 	.word	0x40021000
 8004298:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429c:	7cfb      	ldrb	r3, [r7, #19]
 800429e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042a0:	7c7b      	ldrb	r3, [r7, #17]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d105      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042a6:	4b8a      	ldr	r3, [pc, #552]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042aa:	4a89      	ldr	r2, [pc, #548]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00a      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042be:	4b84      	ldr	r3, [pc, #528]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c4:	f023 0203 	bic.w	r2, r3, #3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	4980      	ldr	r1, [pc, #512]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00a      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042e0:	4b7b      	ldr	r3, [pc, #492]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e6:	f023 020c 	bic.w	r2, r3, #12
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	4978      	ldr	r1, [pc, #480]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0320 	and.w	r3, r3, #32
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00a      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004302:	4b73      	ldr	r3, [pc, #460]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004308:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004310:	496f      	ldr	r1, [pc, #444]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004312:	4313      	orrs	r3, r2
 8004314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00a      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004324:	4b6a      	ldr	r3, [pc, #424]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004332:	4967      	ldr	r1, [pc, #412]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004334:	4313      	orrs	r3, r2
 8004336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00a      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004346:	4b62      	ldr	r3, [pc, #392]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004354:	495e      	ldr	r1, [pc, #376]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00a      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004368:	4b59      	ldr	r3, [pc, #356]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800436a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004376:	4956      	ldr	r1, [pc, #344]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800438a:	4b51      	ldr	r3, [pc, #324]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800438c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004390:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004398:	494d      	ldr	r1, [pc, #308]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800439a:	4313      	orrs	r3, r2
 800439c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d028      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043ac:	4b48      	ldr	r3, [pc, #288]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	4945      	ldr	r1, [pc, #276]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043ca:	d106      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043cc:	4b40      	ldr	r3, [pc, #256]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	4a3f      	ldr	r2, [pc, #252]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043d6:	60d3      	str	r3, [r2, #12]
 80043d8:	e011      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043e2:	d10c      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	3304      	adds	r3, #4
 80043e8:	2101      	movs	r1, #1
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fc60 	bl	8004cb0 <RCCEx_PLLSAI1_Config>
 80043f0:	4603      	mov	r3, r0
 80043f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80043f4:	7cfb      	ldrb	r3, [r7, #19]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80043fa:	7cfb      	ldrb	r3, [r7, #19]
 80043fc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d028      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800440a:	4b31      	ldr	r3, [pc, #196]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800440c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004410:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004418:	492d      	ldr	r1, [pc, #180]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004424:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004428:	d106      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800442a:	4b29      	ldr	r3, [pc, #164]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	4a28      	ldr	r2, [pc, #160]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004430:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004434:	60d3      	str	r3, [r2, #12]
 8004436:	e011      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004440:	d10c      	bne.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3304      	adds	r3, #4
 8004446:	2101      	movs	r1, #1
 8004448:	4618      	mov	r0, r3
 800444a:	f000 fc31 	bl	8004cb0 <RCCEx_PLLSAI1_Config>
 800444e:	4603      	mov	r3, r0
 8004450:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004452:	7cfb      	ldrb	r3, [r7, #19]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004458:	7cfb      	ldrb	r3, [r7, #19]
 800445a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d01c      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004468:	4b19      	ldr	r3, [pc, #100]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004476:	4916      	ldr	r1, [pc, #88]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004482:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004486:	d10c      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3304      	adds	r3, #4
 800448c:	2102      	movs	r1, #2
 800448e:	4618      	mov	r0, r3
 8004490:	f000 fc0e 	bl	8004cb0 <RCCEx_PLLSAI1_Config>
 8004494:	4603      	mov	r3, r0
 8004496:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004498:	7cfb      	ldrb	r3, [r7, #19]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800449e:	7cfb      	ldrb	r3, [r7, #19]
 80044a0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00a      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044ae:	4b08      	ldr	r3, [pc, #32]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044bc:	4904      	ldr	r1, [pc, #16]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80044c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3718      	adds	r7, #24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	40021000 	.word	0x40021000

080044d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b088      	sub	sp, #32
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044e6:	d13a      	bne.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80044e8:	4b9a      	ldr	r3, [pc, #616]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80044ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f2:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044fa:	d025      	beq.n	8004548 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004502:	f200 83b2 	bhi.w	8004c6a <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800450c:	d004      	beq.n	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004514:	d00c      	beq.n	8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004516:	e3a8      	b.n	8004c6a <HAL_RCCEx_GetPeriphCLKFreq+0x796>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004518:	4b8e      	ldr	r3, [pc, #568]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800451a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b02      	cmp	r3, #2
 8004524:	f040 83a3 	bne.w	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
        frequency = LSE_VALUE;
 8004528:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800452c:	61fb      	str	r3, [r7, #28]
      break;
 800452e:	e39e      	b.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004530:	4b88      	ldr	r3, [pc, #544]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8004532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b02      	cmp	r3, #2
 800453c:	f040 8399 	bne.w	8004c72 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
          frequency = LSI_VALUE;
 8004540:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004544:	61fb      	str	r3, [r7, #28]
      break;
 8004546:	e394      	b.n	8004c72 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004548:	4b82      	ldr	r3, [pc, #520]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004550:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004554:	f040 8394 	bne.w	8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
        frequency = HSE_VALUE / 32U;
 8004558:	4b7f      	ldr	r3, [pc, #508]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800455a:	61fb      	str	r3, [r7, #28]
      break;
 800455c:	e390      	b.n	8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800455e:	4b7d      	ldr	r3, [pc, #500]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	2b03      	cmp	r3, #3
 800456c:	d036      	beq.n	80045dc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2b03      	cmp	r3, #3
 8004572:	d840      	bhi.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d003      	beq.n	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2b02      	cmp	r3, #2
 800457e:	d020      	beq.n	80045c2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8004580:	e039      	b.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004582:	4b74      	ldr	r3, [pc, #464]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b02      	cmp	r3, #2
 800458c:	d116      	bne.n	80045bc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800458e:	4b71      	ldr	r3, [pc, #452]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0308 	and.w	r3, r3, #8
 8004596:	2b00      	cmp	r3, #0
 8004598:	d005      	beq.n	80045a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800459a:	4b6e      	ldr	r3, [pc, #440]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	091b      	lsrs	r3, r3, #4
 80045a0:	f003 030f 	and.w	r3, r3, #15
 80045a4:	e005      	b.n	80045b2 <HAL_RCCEx_GetPeriphCLKFreq+0xde>
 80045a6:	4b6b      	ldr	r3, [pc, #428]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80045a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045ac:	0a1b      	lsrs	r3, r3, #8
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	4a6a      	ldr	r2, [pc, #424]	; (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80045b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045b8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80045ba:	e01f      	b.n	80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
        pllvco = 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	61bb      	str	r3, [r7, #24]
      break;
 80045c0:	e01c      	b.n	80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80045c2:	4b64      	ldr	r3, [pc, #400]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ce:	d102      	bne.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
      {
        pllvco = HSI_VALUE;
 80045d0:	4b63      	ldr	r3, [pc, #396]	; (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80045d2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80045d4:	e012      	b.n	80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
        pllvco = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	61bb      	str	r3, [r7, #24]
      break;
 80045da:	e00f      	b.n	80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80045dc:	4b5d      	ldr	r3, [pc, #372]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045e8:	d102      	bne.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
      {
        pllvco = HSE_VALUE;
 80045ea:	4b5e      	ldr	r3, [pc, #376]	; (8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80045ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80045ee:	e005      	b.n	80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
        pllvco = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	61bb      	str	r3, [r7, #24]
      break;
 80045f4:	e002      	b.n	80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
    default:
      /* No source */
      pllvco = 0U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	61bb      	str	r3, [r7, #24]
      break;
 80045fa:	bf00      	nop
    }

    switch(PeriphClk)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004602:	d068      	beq.n	80046d6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800460a:	f200 833b 	bhi.w	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004614:	f000 830c 	beq.w	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800461e:	f200 8331 	bhi.w	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004628:	f000 81ce 	beq.w	80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004632:	f200 8327 	bhi.w	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800463c:	d04b      	beq.n	80046d6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004644:	f200 831e 	bhi.w	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800464e:	d03b      	beq.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004656:	f200 8315 	bhi.w	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004660:	f000 829c 	beq.w	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800466a:	f200 830b 	bhi.w	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004674:	f000 8248 	beq.w	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800467e:	f200 8301 	bhi.w	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004688:	f000 8212 	beq.w	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004692:	f200 82f7 	bhi.w	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b40      	cmp	r3, #64	; 0x40
 800469a:	f000 81dd 	beq.w	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b40      	cmp	r3, #64	; 0x40
 80046a2:	f200 82ef 	bhi.w	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	f000 814c 	beq.w	8004946 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	f200 82e7 	bhi.w	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	f000 80c3 	beq.w	8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	f000 80f6 	beq.w	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80046c6:	e2dd      	b.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80046c8:	69b9      	ldr	r1, [r7, #24]
 80046ca:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80046ce:	f000 fbe1 	bl	8004e94 <RCCEx_GetSAIxPeriphCLKFreq>
 80046d2:	61f8      	str	r0, [r7, #28]
      break;
 80046d4:	e2d7      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80046d6:	4b1f      	ldr	r3, [pc, #124]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80046d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046dc:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80046e0:	613b      	str	r3, [r7, #16]
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80046e8:	d016      	beq.n	8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80046f0:	f200 809e 	bhi.w	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046fa:	d035      	beq.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004702:	f200 8095 	bhi.w	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 8087 	beq.w	800481c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004714:	d055      	beq.n	80047c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
          break;
 8004716:	e08b      	b.n	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004718:	4b0e      	ldr	r3, [pc, #56]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b02      	cmp	r3, #2
 8004722:	f040 8087 	bne.w	8004834 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004726:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d005      	beq.n	800473e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8004732:	4b08      	ldr	r3, [pc, #32]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	091b      	lsrs	r3, r3, #4
 8004738:	f003 030f 	and.w	r3, r3, #15
 800473c:	e005      	b.n	800474a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800473e:	4b05      	ldr	r3, [pc, #20]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8004740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004744:	0a1b      	lsrs	r3, r3, #8
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	4a04      	ldr	r2, [pc, #16]	; (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800474c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004750:	61fb      	str	r3, [r7, #28]
          break;
 8004752:	e06f      	b.n	8004834 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8004754:	40021000 	.word	0x40021000
 8004758:	0003d090 	.word	0x0003d090
 800475c:	0800aef0 	.word	0x0800aef0
 8004760:	00f42400 	.word	0x00f42400
 8004764:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004768:	4ba0      	ldr	r3, [pc, #640]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004770:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004774:	d160      	bne.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004776:	4b9d      	ldr	r3, [pc, #628]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800477e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004782:	d159      	bne.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004784:	4b99      	ldr	r3, [pc, #612]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	0a1b      	lsrs	r3, r3, #8
 800478a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800478e:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	fb03 f202 	mul.w	r2, r3, r2
 8004798:	4b94      	ldr	r3, [pc, #592]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	091b      	lsrs	r3, r3, #4
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	3301      	adds	r3, #1
 80047a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80047aa:	4b90      	ldr	r3, [pc, #576]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	0d5b      	lsrs	r3, r3, #21
 80047b0:	f003 0303 	and.w	r3, r3, #3
 80047b4:	3301      	adds	r3, #1
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80047be:	61fb      	str	r3, [r7, #28]
          break;
 80047c0:	e03a      	b.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80047c2:	4b8a      	ldr	r3, [pc, #552]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047ce:	d135      	bne.n	800483c <HAL_RCCEx_GetPeriphCLKFreq+0x368>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80047d0:	4b86      	ldr	r3, [pc, #536]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047dc:	d12e      	bne.n	800483c <HAL_RCCEx_GetPeriphCLKFreq+0x368>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80047de:	4b83      	ldr	r3, [pc, #524]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	0a1b      	lsrs	r3, r3, #8
 80047e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047e8:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	fb03 f202 	mul.w	r2, r3, r2
 80047f2:	4b7e      	ldr	r3, [pc, #504]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	091b      	lsrs	r3, r3, #4
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	3301      	adds	r3, #1
 80047fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004802:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004804:	4b79      	ldr	r3, [pc, #484]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	0d5b      	lsrs	r3, r3, #21
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	3301      	adds	r3, #1
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	fbb2 f3f3 	udiv	r3, r2, r3
 8004818:	61fb      	str	r3, [r7, #28]
          break;
 800481a:	e00f      	b.n	800483c <HAL_RCCEx_GetPeriphCLKFreq+0x368>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800481c:	4b73      	ldr	r3, [pc, #460]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800481e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b02      	cmp	r3, #2
 8004828:	d10a      	bne.n	8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
            frequency = HSI48_VALUE;
 800482a:	4b71      	ldr	r3, [pc, #452]	; (80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800482c:	61fb      	str	r3, [r7, #28]
          break;
 800482e:	e007      	b.n	8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
          break;
 8004830:	bf00      	nop
 8004832:	e228      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8004834:	bf00      	nop
 8004836:	e226      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8004838:	bf00      	nop
 800483a:	e224      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 800483c:	bf00      	nop
 800483e:	e222      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8004840:	bf00      	nop
        break;
 8004842:	e220      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004844:	4b69      	ldr	r3, [pc, #420]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8004846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	613b      	str	r3, [r7, #16]
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	2b03      	cmp	r3, #3
 8004854:	d827      	bhi.n	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8004856:	a201      	add	r2, pc, #4	; (adr r2, 800485c <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 8004858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485c:	0800486d 	.word	0x0800486d
 8004860:	08004875 	.word	0x08004875
 8004864:	0800487d 	.word	0x0800487d
 8004868:	08004891 	.word	0x08004891
          frequency = HAL_RCC_GetPCLK2Freq();
 800486c:	f7ff fbc6 	bl	8003ffc <HAL_RCC_GetPCLK2Freq>
 8004870:	61f8      	str	r0, [r7, #28]
          break;
 8004872:	e01d      	b.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8004874:	f7ff fb14 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 8004878:	61f8      	str	r0, [r7, #28]
          break;
 800487a:	e019      	b.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800487c:	4b5b      	ldr	r3, [pc, #364]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004888:	d10f      	bne.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
            frequency = HSI_VALUE;
 800488a:	4b5a      	ldr	r3, [pc, #360]	; (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800488c:	61fb      	str	r3, [r7, #28]
          break;
 800488e:	e00c      	b.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004890:	4b56      	ldr	r3, [pc, #344]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8004892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b02      	cmp	r3, #2
 800489c:	d107      	bne.n	80048ae <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
            frequency = LSE_VALUE;
 800489e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048a2:	61fb      	str	r3, [r7, #28]
          break;
 80048a4:	e003      	b.n	80048ae <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
          break;
 80048a6:	bf00      	nop
 80048a8:	e1ed      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 80048aa:	bf00      	nop
 80048ac:	e1eb      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 80048ae:	bf00      	nop
        break;
 80048b0:	e1e9      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80048b2:	4b4e      	ldr	r3, [pc, #312]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80048b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b8:	f003 030c 	and.w	r3, r3, #12
 80048bc:	613b      	str	r3, [r7, #16]
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	2b0c      	cmp	r3, #12
 80048c2:	d83a      	bhi.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80048c4:	a201      	add	r2, pc, #4	; (adr r2, 80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>)
 80048c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ca:	bf00      	nop
 80048cc:	08004901 	.word	0x08004901
 80048d0:	0800493b 	.word	0x0800493b
 80048d4:	0800493b 	.word	0x0800493b
 80048d8:	0800493b 	.word	0x0800493b
 80048dc:	08004909 	.word	0x08004909
 80048e0:	0800493b 	.word	0x0800493b
 80048e4:	0800493b 	.word	0x0800493b
 80048e8:	0800493b 	.word	0x0800493b
 80048ec:	08004911 	.word	0x08004911
 80048f0:	0800493b 	.word	0x0800493b
 80048f4:	0800493b 	.word	0x0800493b
 80048f8:	0800493b 	.word	0x0800493b
 80048fc:	08004925 	.word	0x08004925
          frequency = HAL_RCC_GetPCLK1Freq();
 8004900:	f7ff fb66 	bl	8003fd0 <HAL_RCC_GetPCLK1Freq>
 8004904:	61f8      	str	r0, [r7, #28]
          break;
 8004906:	e01d      	b.n	8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
          frequency = HAL_RCC_GetSysClockFreq();
 8004908:	f7ff faca 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 800490c:	61f8      	str	r0, [r7, #28]
          break;
 800490e:	e019      	b.n	8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004910:	4b36      	ldr	r3, [pc, #216]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800491c:	d10f      	bne.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
            frequency = HSI_VALUE;
 800491e:	4b35      	ldr	r3, [pc, #212]	; (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8004920:	61fb      	str	r3, [r7, #28]
          break;
 8004922:	e00c      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004924:	4b31      	ldr	r3, [pc, #196]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8004926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b02      	cmp	r3, #2
 8004930:	d107      	bne.n	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            frequency = LSE_VALUE;
 8004932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004936:	61fb      	str	r3, [r7, #28]
          break;
 8004938:	e003      	b.n	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          break;
 800493a:	bf00      	nop
 800493c:	e1a3      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 800493e:	bf00      	nop
 8004940:	e1a1      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8004942:	bf00      	nop
        break;
 8004944:	e19f      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004946:	4b29      	ldr	r3, [pc, #164]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8004948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004950:	613b      	str	r3, [r7, #16]
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004958:	d025      	beq.n	80049a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004960:	d82c      	bhi.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004968:	d013      	beq.n	8004992 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004970:	d824      	bhi.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d004      	beq.n	8004982 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800497e:	d004      	beq.n	800498a <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          break;
 8004980:	e01c      	b.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004982:	f7ff fb25 	bl	8003fd0 <HAL_RCC_GetPCLK1Freq>
 8004986:	61f8      	str	r0, [r7, #28]
          break;
 8004988:	e01d      	b.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          frequency = HAL_RCC_GetSysClockFreq();
 800498a:	f7ff fa89 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 800498e:	61f8      	str	r0, [r7, #28]
          break;
 8004990:	e019      	b.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004992:	4b16      	ldr	r3, [pc, #88]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800499a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800499e:	d10f      	bne.n	80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
            frequency = HSI_VALUE;
 80049a0:	4b14      	ldr	r3, [pc, #80]	; (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80049a2:	61fb      	str	r3, [r7, #28]
          break;
 80049a4:	e00c      	b.n	80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80049a6:	4b11      	ldr	r3, [pc, #68]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80049a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d107      	bne.n	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
            frequency = LSE_VALUE;
 80049b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049b8:	61fb      	str	r3, [r7, #28]
          break;
 80049ba:	e003      	b.n	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
          break;
 80049bc:	bf00      	nop
 80049be:	e162      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 80049c0:	bf00      	nop
 80049c2:	e160      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 80049c4:	bf00      	nop
        break;
 80049c6:	e15e      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80049c8:	4b08      	ldr	r3, [pc, #32]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80049ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80049d2:	613b      	str	r3, [r7, #16]
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049da:	d00d      	beq.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80049e2:	d135      	bne.n	8004a50 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
          frequency = HAL_RCC_GetSysClockFreq();
 80049e4:	f7ff fa5c 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 80049e8:	61f8      	str	r0, [r7, #28]
          break;
 80049ea:	e034      	b.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x582>
 80049ec:	40021000 	.word	0x40021000
 80049f0:	02dc6c00 	.word	0x02dc6c00
 80049f4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80049f8:	4b9f      	ldr	r3, [pc, #636]	; (8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a04:	d126      	bne.n	8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8004a06:	4b9c      	ldr	r3, [pc, #624]	; (8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d020      	beq.n	8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004a12:	4b99      	ldr	r3, [pc, #612]	; (8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	0a1b      	lsrs	r3, r3, #8
 8004a18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a1c:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	fb03 f202 	mul.w	r2, r3, r2
 8004a26:	4b94      	ldr	r3, [pc, #592]	; (8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	091b      	lsrs	r3, r3, #4
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	3301      	adds	r3, #1
 8004a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a36:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004a38:	4b8f      	ldr	r3, [pc, #572]	; (8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	0e5b      	lsrs	r3, r3, #25
 8004a3e:	f003 0303 	and.w	r3, r3, #3
 8004a42:	3301      	adds	r3, #1
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4c:	61fb      	str	r3, [r7, #28]
          break;
 8004a4e:	e001      	b.n	8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
          break;
 8004a50:	bf00      	nop
 8004a52:	e118      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8004a54:	bf00      	nop
        break;
 8004a56:	e116      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004a58:	4b87      	ldr	r3, [pc, #540]	; (8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8004a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004a62:	613b      	str	r3, [r7, #16]
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a6a:	d013      	beq.n	8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a72:	d819      	bhi.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d004      	beq.n	8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a80:	d004      	beq.n	8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          break;
 8004a82:	e011      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004a84:	f7ff faa4 	bl	8003fd0 <HAL_RCC_GetPCLK1Freq>
 8004a88:	61f8      	str	r0, [r7, #28]
          break;
 8004a8a:	e010      	b.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          frequency = HAL_RCC_GetSysClockFreq();
 8004a8c:	f7ff fa08 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 8004a90:	61f8      	str	r0, [r7, #28]
          break;
 8004a92:	e00c      	b.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a94:	4b78      	ldr	r3, [pc, #480]	; (8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aa0:	d104      	bne.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
            frequency = HSI_VALUE;
 8004aa2:	4b76      	ldr	r3, [pc, #472]	; (8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004aa4:	61fb      	str	r3, [r7, #28]
          break;
 8004aa6:	e001      	b.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
          break;
 8004aa8:	bf00      	nop
 8004aaa:	e0ec      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8004aac:	bf00      	nop
        break;
 8004aae:	e0ea      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004ab0:	4b71      	ldr	r3, [pc, #452]	; (8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8004ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004aba:	613b      	str	r3, [r7, #16]
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ac2:	d013      	beq.n	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004aca:	d819      	bhi.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d004      	beq.n	8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x608>
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad8:	d004      	beq.n	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x610>
          break;
 8004ada:	e011      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004adc:	f7ff fa78 	bl	8003fd0 <HAL_RCC_GetPCLK1Freq>
 8004ae0:	61f8      	str	r0, [r7, #28]
          break;
 8004ae2:	e010      	b.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x632>
          frequency = HAL_RCC_GetSysClockFreq();
 8004ae4:	f7ff f9dc 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 8004ae8:	61f8      	str	r0, [r7, #28]
          break;
 8004aea:	e00c      	b.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x632>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004aec:	4b62      	ldr	r3, [pc, #392]	; (8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004af8:	d104      	bne.n	8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
            frequency = HSI_VALUE;
 8004afa:	4b60      	ldr	r3, [pc, #384]	; (8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004afc:	61fb      	str	r3, [r7, #28]
          break;
 8004afe:	e001      	b.n	8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          break;
 8004b00:	bf00      	nop
 8004b02:	e0c0      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8004b04:	bf00      	nop
        break;
 8004b06:	e0be      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004b08:	4b5b      	ldr	r3, [pc, #364]	; (8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8004b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004b12:	613b      	str	r3, [r7, #16]
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004b1a:	d02c      	beq.n	8004b76 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004b22:	d833      	bhi.n	8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b2a:	d01a      	beq.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b32:	d82b      	bhi.n	8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d004      	beq.n	8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b40:	d004      	beq.n	8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
          break;
 8004b42:	e023      	b.n	8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b44:	f7ff fa44 	bl	8003fd0 <HAL_RCC_GetPCLK1Freq>
 8004b48:	61f8      	str	r0, [r7, #28]
          break;
 8004b4a:	e026      	b.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004b4c:	4b4a      	ldr	r3, [pc, #296]	; (8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8004b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d11a      	bne.n	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
              frequency = LSI_VALUE;
 8004b5a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004b5e:	61fb      	str	r3, [r7, #28]
          break;
 8004b60:	e016      	b.n	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b62:	4b45      	ldr	r3, [pc, #276]	; (8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b6e:	d111      	bne.n	8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>
            frequency = HSI_VALUE;
 8004b70:	4b42      	ldr	r3, [pc, #264]	; (8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004b72:	61fb      	str	r3, [r7, #28]
          break;
 8004b74:	e00e      	b.n	8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004b76:	4b40      	ldr	r3, [pc, #256]	; (8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8004b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d109      	bne.n	8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
            frequency = LSE_VALUE;
 8004b84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b88:	61fb      	str	r3, [r7, #28]
          break;
 8004b8a:	e005      	b.n	8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
          break;
 8004b8c:	bf00      	nop
 8004b8e:	e07a      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8004b90:	bf00      	nop
 8004b92:	e078      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8004b94:	bf00      	nop
 8004b96:	e076      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8004b98:	bf00      	nop
        break;
 8004b9a:	e074      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004b9c:	4b36      	ldr	r3, [pc, #216]	; (8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8004b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004ba6:	613b      	str	r3, [r7, #16]
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004bae:	d02c      	beq.n	8004c0a <HAL_RCCEx_GetPeriphCLKFreq+0x736>
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004bb6:	d833      	bhi.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bbe:	d01a      	beq.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bc6:	d82b      	bhi.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d004      	beq.n	8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bd4:	d004      	beq.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
          break;
 8004bd6:	e023      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004bd8:	f7ff f9fa 	bl	8003fd0 <HAL_RCC_GetPCLK1Freq>
 8004bdc:	61f8      	str	r0, [r7, #28]
          break;
 8004bde:	e026      	b.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004be0:	4b25      	ldr	r3, [pc, #148]	; (8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8004be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d11a      	bne.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
              frequency = LSI_VALUE;
 8004bee:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004bf2:	61fb      	str	r3, [r7, #28]
          break;
 8004bf4:	e016      	b.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004bf6:	4b20      	ldr	r3, [pc, #128]	; (8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c02:	d111      	bne.n	8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
            frequency = HSI_VALUE;
 8004c04:	4b1d      	ldr	r3, [pc, #116]	; (8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004c06:	61fb      	str	r3, [r7, #28]
          break;
 8004c08:	e00e      	b.n	8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004c0a:	4b1b      	ldr	r3, [pc, #108]	; (8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8004c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d109      	bne.n	8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0x758>
            frequency = LSE_VALUE;
 8004c18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c1c:	61fb      	str	r3, [r7, #28]
          break;
 8004c1e:	e005      	b.n	8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0x758>
          break;
 8004c20:	bf00      	nop
 8004c22:	e030      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8004c24:	bf00      	nop
 8004c26:	e02e      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8004c28:	bf00      	nop
 8004c2a:	e02c      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8004c2c:	bf00      	nop
        break;
 8004c2e:	e02a      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8004c30:	4b11      	ldr	r3, [pc, #68]	; (8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8004c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004c3a:	613b      	str	r3, [r7, #16]
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d004      	beq.n	8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c48:	d004      	beq.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
          break;
 8004c4a:	e00d      	b.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c4c:	f7ff f9c0 	bl	8003fd0 <HAL_RCC_GetPCLK1Freq>
 8004c50:	61f8      	str	r0, [r7, #28]
          break;
 8004c52:	e009      	b.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c54:	4b08      	ldr	r3, [pc, #32]	; (8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c60:	d101      	bne.n	8004c66 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
            frequency = HSI_VALUE;
 8004c62:	4b06      	ldr	r3, [pc, #24]	; (8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004c64:	61fb      	str	r3, [r7, #28]
          break;
 8004c66:	bf00      	nop
        break;
 8004c68:	e00d      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
      break;
 8004c6a:	bf00      	nop
 8004c6c:	e00b      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
      break;
 8004c6e:	bf00      	nop
 8004c70:	e009      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
      break;
 8004c72:	bf00      	nop
 8004c74:	e007      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8004c76:	bf00      	nop
 8004c78:	40021000 	.word	0x40021000
 8004c7c:	00f42400 	.word	0x00f42400
      break;
 8004c80:	bf00      	nop
 8004c82:	e000      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
      break;
 8004c84:	bf00      	nop
    }
  }

  return(frequency);
 8004c86:	69fb      	ldr	r3, [r7, #28]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3720      	adds	r7, #32
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004c94:	4b05      	ldr	r3, [pc, #20]	; (8004cac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a04      	ldr	r2, [pc, #16]	; (8004cac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004c9a:	f043 0304 	orr.w	r3, r3, #4
 8004c9e:	6013      	str	r3, [r2, #0]
}
 8004ca0:	bf00      	nop
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	40021000 	.word	0x40021000

08004cb0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cbe:	4b74      	ldr	r3, [pc, #464]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f003 0303 	and.w	r3, r3, #3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d018      	beq.n	8004cfc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004cca:	4b71      	ldr	r3, [pc, #452]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f003 0203 	and.w	r2, r3, #3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d10d      	bne.n	8004cf6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
       ||
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d009      	beq.n	8004cf6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004ce2:	4b6b      	ldr	r3, [pc, #428]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	091b      	lsrs	r3, r3, #4
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
       ||
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d047      	beq.n	8004d86 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	73fb      	strb	r3, [r7, #15]
 8004cfa:	e044      	b.n	8004d86 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2b03      	cmp	r3, #3
 8004d02:	d018      	beq.n	8004d36 <RCCEx_PLLSAI1_Config+0x86>
 8004d04:	2b03      	cmp	r3, #3
 8004d06:	d825      	bhi.n	8004d54 <RCCEx_PLLSAI1_Config+0xa4>
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d002      	beq.n	8004d12 <RCCEx_PLLSAI1_Config+0x62>
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d009      	beq.n	8004d24 <RCCEx_PLLSAI1_Config+0x74>
 8004d10:	e020      	b.n	8004d54 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d12:	4b5f      	ldr	r3, [pc, #380]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d11d      	bne.n	8004d5a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d22:	e01a      	b.n	8004d5a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d24:	4b5a      	ldr	r3, [pc, #360]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d116      	bne.n	8004d5e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d34:	e013      	b.n	8004d5e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d36:	4b56      	ldr	r3, [pc, #344]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10f      	bne.n	8004d62 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d42:	4b53      	ldr	r3, [pc, #332]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d109      	bne.n	8004d62 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d52:	e006      	b.n	8004d62 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	73fb      	strb	r3, [r7, #15]
      break;
 8004d58:	e004      	b.n	8004d64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d5a:	bf00      	nop
 8004d5c:	e002      	b.n	8004d64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d5e:	bf00      	nop
 8004d60:	e000      	b.n	8004d64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d62:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10d      	bne.n	8004d86 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d6a:	4b49      	ldr	r3, [pc, #292]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6819      	ldr	r1, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	011b      	lsls	r3, r3, #4
 8004d7e:	430b      	orrs	r3, r1
 8004d80:	4943      	ldr	r1, [pc, #268]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d86:	7bfb      	ldrb	r3, [r7, #15]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d17c      	bne.n	8004e86 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d8c:	4b40      	ldr	r3, [pc, #256]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a3f      	ldr	r2, [pc, #252]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d98:	f7fd fd90 	bl	80028bc <HAL_GetTick>
 8004d9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d9e:	e009      	b.n	8004db4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004da0:	f7fd fd8c 	bl	80028bc <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d902      	bls.n	8004db4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	73fb      	strb	r3, [r7, #15]
        break;
 8004db2:	e005      	b.n	8004dc0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004db4:	4b36      	ldr	r3, [pc, #216]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1ef      	bne.n	8004da0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d15f      	bne.n	8004e86 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d110      	bne.n	8004dee <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dcc:	4b30      	ldr	r3, [pc, #192]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004dd4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6892      	ldr	r2, [r2, #8]
 8004ddc:	0211      	lsls	r1, r2, #8
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	68d2      	ldr	r2, [r2, #12]
 8004de2:	06d2      	lsls	r2, r2, #27
 8004de4:	430a      	orrs	r2, r1
 8004de6:	492a      	ldr	r1, [pc, #168]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	610b      	str	r3, [r1, #16]
 8004dec:	e027      	b.n	8004e3e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d112      	bne.n	8004e1a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004df4:	4b26      	ldr	r3, [pc, #152]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004dfc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6892      	ldr	r2, [r2, #8]
 8004e04:	0211      	lsls	r1, r2, #8
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6912      	ldr	r2, [r2, #16]
 8004e0a:	0852      	lsrs	r2, r2, #1
 8004e0c:	3a01      	subs	r2, #1
 8004e0e:	0552      	lsls	r2, r2, #21
 8004e10:	430a      	orrs	r2, r1
 8004e12:	491f      	ldr	r1, [pc, #124]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	610b      	str	r3, [r1, #16]
 8004e18:	e011      	b.n	8004e3e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e1a:	4b1d      	ldr	r3, [pc, #116]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e22:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6892      	ldr	r2, [r2, #8]
 8004e2a:	0211      	lsls	r1, r2, #8
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6952      	ldr	r2, [r2, #20]
 8004e30:	0852      	lsrs	r2, r2, #1
 8004e32:	3a01      	subs	r2, #1
 8004e34:	0652      	lsls	r2, r2, #25
 8004e36:	430a      	orrs	r2, r1
 8004e38:	4915      	ldr	r1, [pc, #84]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e3e:	4b14      	ldr	r3, [pc, #80]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a13      	ldr	r2, [pc, #76]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e48:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4a:	f7fd fd37 	bl	80028bc <HAL_GetTick>
 8004e4e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e50:	e009      	b.n	8004e66 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e52:	f7fd fd33 	bl	80028bc <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d902      	bls.n	8004e66 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	73fb      	strb	r3, [r7, #15]
          break;
 8004e64:	e005      	b.n	8004e72 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e66:	4b0a      	ldr	r3, [pc, #40]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0ef      	beq.n	8004e52 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004e72:	7bfb      	ldrb	r3, [r7, #15]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d106      	bne.n	8004e86 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e78:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e7a:	691a      	ldr	r2, [r3, #16]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	4903      	ldr	r1, [pc, #12]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	40021000 	.word	0x40021000

08004e94 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b089      	sub	sp, #36	; 0x24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eb0:	d10b      	bne.n	8004eca <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004eb2:	4b53      	ldr	r3, [pc, #332]	; (8005000 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004ebc:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ec4:	d101      	bne.n	8004eca <RCCEx_GetSAIxPeriphCLKFreq+0x36>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004ec6:	4b4f      	ldr	r3, [pc, #316]	; (8005004 <RCCEx_GetSAIxPeriphCLKFreq+0x170>)
 8004ec8:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f040 8090 	bne.w	8004ff2 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
  {
    pllvco = InputFrequency;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	613b      	str	r3, [r7, #16]
      }
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

#else
    if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004edc:	d143      	bne.n	8004f66 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI2CLK) != 0U))
 8004ede:	4b48      	ldr	r3, [pc, #288]	; (8005000 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004eea:	d132      	bne.n	8004f52 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
 8004eec:	4b44      	ldr	r3, [pc, #272]	; (8005000 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d02c      	beq.n	8004f52 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004ef8:	4b41      	ldr	r3, [pc, #260]	; (8005000 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	091b      	lsrs	r3, r3, #4
 8004efe:	f003 0307 	and.w	r3, r3, #7
 8004f02:	3301      	adds	r3, #1
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0a:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI2CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004f0c:	4b3c      	ldr	r3, [pc, #240]	; (8005000 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	0a1b      	lsrs	r3, r3, #8
 8004f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f16:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004f18:	4b39      	ldr	r3, [pc, #228]	; (8005000 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	0edb      	lsrs	r3, r3, #27
 8004f1e:	f003 031f 	and.w	r3, r3, #31
 8004f22:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10a      	bne.n	8004f40 <RCCEx_GetSAIxPeriphCLKFreq+0xac>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004f2a:	4b35      	ldr	r3, [pc, #212]	; (8005000 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d002      	beq.n	8004f3c <RCCEx_GetSAIxPeriphCLKFreq+0xa8>
          {
            pllp = 17U;
 8004f36:	2311      	movs	r3, #17
 8004f38:	617b      	str	r3, [r7, #20]
 8004f3a:	e001      	b.n	8004f40 <RCCEx_GetSAIxPeriphCLKFreq+0xac>
          }
          else
          {
            pllp = 7U;
 8004f3c:	2307      	movs	r3, #7
 8004f3e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	fb03 f202 	mul.w	r2, r3, r2
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4e:	61fb      	str	r3, [r7, #28]
 8004f50:	e04f      	b.n	8004ff2 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      }
      else if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f52:	4b2b      	ldr	r3, [pc, #172]	; (8005000 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f5e:	d148      	bne.n	8004ff2 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      {
        /* HSI automatically selected as clock source if PLLs not enabled */
        frequency = HSI_VALUE;
 8004f60:	4b29      	ldr	r3, [pc, #164]	; (8005008 <RCCEx_GetSAIxPeriphCLKFreq+0x174>)
 8004f62:	61fb      	str	r3, [r7, #28]
 8004f64:	e045      	b.n	8004ff2 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      else
      {
        /* No clock source, frequency default init at 0 */
      }
    }
    else if(srcclk == RCC_SAI1CLKSOURCE_PLLSAI1)
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d142      	bne.n	8004ff2 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004f6c:	4b24      	ldr	r3, [pc, #144]	; (8005000 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f78:	d132      	bne.n	8004fe0 <RCCEx_GetSAIxPeriphCLKFreq+0x14c>
 8004f7a:	4b21      	ldr	r3, [pc, #132]	; (8005000 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d02c      	beq.n	8004fe0 <RCCEx_GetSAIxPeriphCLKFreq+0x14c>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004f86:	4b1e      	ldr	r3, [pc, #120]	; (8005000 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	091b      	lsrs	r3, r3, #4
 8004f8c:	f003 0307 	and.w	r3, r3, #7
 8004f90:	3301      	adds	r3, #1
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f98:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004f9a:	4b19      	ldr	r3, [pc, #100]	; (8005000 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	0a1b      	lsrs	r3, r3, #8
 8004fa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fa4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8004fa6:	4b16      	ldr	r3, [pc, #88]	; (8005000 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	0edb      	lsrs	r3, r3, #27
 8004fac:	f003 031f 	and.w	r3, r3, #31
 8004fb0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10a      	bne.n	8004fce <RCCEx_GetSAIxPeriphCLKFreq+0x13a>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004fb8:	4b11      	ldr	r3, [pc, #68]	; (8005000 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <RCCEx_GetSAIxPeriphCLKFreq+0x136>
          {
            pllp = 17U;
 8004fc4:	2311      	movs	r3, #17
 8004fc6:	617b      	str	r3, [r7, #20]
 8004fc8:	e001      	b.n	8004fce <RCCEx_GetSAIxPeriphCLKFreq+0x13a>
          }
          else
          {
            pllp = 7U;
 8004fca:	2307      	movs	r3, #7
 8004fcc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	fb03 f202 	mul.w	r2, r3, r2
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fdc:	61fb      	str	r3, [r7, #28]
 8004fde:	e008      	b.n	8004ff2 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      }
      else if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004fe0:	4b07      	ldr	r3, [pc, #28]	; (8005000 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fec:	d101      	bne.n	8004ff2 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      {
        /* HSI automatically selected as clock source if PLLs not enabled */
        frequency = HSI_VALUE;
 8004fee:	4b06      	ldr	r3, [pc, #24]	; (8005008 <RCCEx_GetSAIxPeriphCLKFreq+0x174>)
 8004ff0:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004ff2:	69fb      	ldr	r3, [r7, #28]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3724      	adds	r7, #36	; 0x24
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	40021000 	.word	0x40021000
 8005004:	001fff68 	.word	0x001fff68
 8005008:	00f42400 	.word	0x00f42400

0800500c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
 8005018:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	2b02      	cmp	r3, #2
 800501e:	d904      	bls.n	800502a <HAL_SAI_InitProtocol+0x1e>
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	3b03      	subs	r3, #3
 8005024:	2b01      	cmp	r3, #1
 8005026:	d812      	bhi.n	800504e <HAL_SAI_InitProtocol+0x42>
 8005028:	e008      	b.n	800503c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	68b9      	ldr	r1, [r7, #8]
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 fca5 	bl	8005980 <SAI_InitI2S>
 8005036:	4603      	mov	r3, r0
 8005038:	75fb      	strb	r3, [r7, #23]
      break;
 800503a:	e00b      	b.n	8005054 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	68b9      	ldr	r1, [r7, #8]
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 fd4e 	bl	8005ae4 <SAI_InitPCM>
 8005048:	4603      	mov	r3, r0
 800504a:	75fb      	strb	r3, [r7, #23]
      break;
 800504c:	e002      	b.n	8005054 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	75fb      	strb	r3, [r7, #23]
      break;
 8005052:	bf00      	nop
  }

  if (status == HAL_OK)
 8005054:	7dfb      	ldrb	r3, [r7, #23]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d104      	bne.n	8005064 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 f808 	bl	8005070 <HAL_SAI_Init>
 8005060:	4603      	mov	r3, r0
 8005062:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005064:	7dfb      	ldrb	r3, [r7, #23]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3718      	adds	r7, #24
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
	...

08005070 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e10c      	b.n	800529c <HAL_SAI_Init+0x22c>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d106      	bne.n	800509c <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7fc fc1e 	bl	80018d8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 fddb 	bl	8005c58 <SAI_Disable>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d001      	beq.n	80050ac <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e0f7      	b.n	800529c <HAL_SAI_Init+0x22c>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
      tmpregisterGCR = 0;
      break;
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <HAL_SAI_Init+0x52>
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d003      	beq.n	80050c8 <HAL_SAI_Init+0x58>
 80050c0:	e006      	b.n	80050d0 <HAL_SAI_Init+0x60>
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80050c2:	2300      	movs	r3, #0
 80050c4:	613b      	str	r3, [r7, #16]
      break;
 80050c6:	e006      	b.n	80050d6 <HAL_SAI_Init+0x66>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80050c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050cc:	613b      	str	r3, [r7, #16]
      break;
 80050ce:	e002      	b.n	80050d6 <HAL_SAI_Init+0x66>
      syncen_bits = SAI_xCR1_SYNCEN_1;
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
      break;
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 80050d0:	2300      	movs	r3, #0
 80050d2:	613b      	str	r3, [r7, #16]
      break;
 80050d4:	bf00      	nop
  else
  {
    SAI2->GCR = tmpregisterGCR;
  }
#else
  SAI1->GCR = 0;
 80050d6:	4b73      	ldr	r3, [pc, #460]	; (80052a4 <HAL_SAI_Init+0x234>)
 80050d8:	2200      	movs	r2, #0
 80050da:	601a      	str	r2, [r3, #0]
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d031      	beq.n	8005148 <HAL_SAI_Init+0xd8>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
    }

#else

    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80050e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80050e8:	f7ff f9f4 	bl	80044d4 <HAL_RCCEx_GetPeriphCLKFreq>
 80050ec:	60f8      	str	r0, [r7, #12]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	4613      	mov	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	461a      	mov	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	025b      	lsls	r3, r3, #9
 8005100:	fbb2 f3f3 	udiv	r3, r2, r3
 8005104:	60bb      	str	r3, [r7, #8]
    hsai->Init.Mckdiv = tmpval / 10U;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	4a67      	ldr	r2, [pc, #412]	; (80052a8 <HAL_SAI_Init+0x238>)
 800510a:	fba2 2303 	umull	r2, r3, r2, r3
 800510e:	08da      	lsrs	r2, r3, #3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8005114:	68b9      	ldr	r1, [r7, #8]
 8005116:	4b64      	ldr	r3, [pc, #400]	; (80052a8 <HAL_SAI_Init+0x238>)
 8005118:	fba3 2301 	umull	r2, r3, r3, r1
 800511c:	08da      	lsrs	r2, r3, #3
 800511e:	4613      	mov	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4413      	add	r3, r2
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	1aca      	subs	r2, r1, r3
 8005128:	2a08      	cmp	r2, #8
 800512a:	d904      	bls.n	8005136 <HAL_SAI_Init+0xc6>
    {
      hsai->Init.Mckdiv += 1U;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a1b      	ldr	r3, [r3, #32]
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513a:	2b04      	cmp	r3, #4
 800513c:	d104      	bne.n	8005148 <HAL_SAI_Init+0xd8>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	085a      	lsrs	r2, r3, #1
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <HAL_SAI_Init+0xe8>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	2b02      	cmp	r3, #2
 8005156:	d109      	bne.n	800516c <HAL_SAI_Init+0xfc>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <HAL_SAI_Init+0xf4>
 8005160:	2300      	movs	r3, #0
 8005162:	e001      	b.n	8005168 <HAL_SAI_Init+0xf8>
 8005164:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005168:	617b      	str	r3, [r7, #20]
 800516a:	e008      	b.n	800517e <HAL_SAI_Init+0x10e>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005170:	2b01      	cmp	r3, #1
 8005172:	d102      	bne.n	800517a <HAL_SAI_Init+0x10a>
 8005174:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005178:	e000      	b.n	800517c <HAL_SAI_Init+0x10c>
 800517a:	2300      	movs	r3, #0
 800517c:	617b      	str	r3, [r7, #20]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6819      	ldr	r1, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	4b48      	ldr	r3, [pc, #288]	; (80052ac <HAL_SAI_Init+0x23c>)
 800518a:	400b      	ands	r3, r1
 800518c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6819      	ldr	r1, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80051a2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a8:	431a      	orrs	r2, r3
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 80051b6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80051c2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	051b      	lsls	r3, r3, #20
 80051ca:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	6812      	ldr	r2, [r2, #0]
 80051de:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80051e2:	f023 030f 	bic.w	r3, r3, #15
 80051e6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6859      	ldr	r1, [r3, #4]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	699a      	ldr	r2, [r3, #24]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f6:	431a      	orrs	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fc:	431a      	orrs	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	6899      	ldr	r1, [r3, #8]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	4b27      	ldr	r3, [pc, #156]	; (80052b0 <HAL_SAI_Init+0x240>)
 8005212:	400b      	ands	r3, r1
 8005214:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6899      	ldr	r1, [r3, #8]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005220:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005226:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800522c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8005232:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005238:	3b01      	subs	r3, #1
 800523a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800523c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68d9      	ldr	r1, [r3, #12]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005254:	400b      	ands	r3, r1
 8005256:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68d9      	ldr	r1, [r3, #12]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005266:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800526c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800526e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005274:	3b01      	subs	r3, #1
 8005276:	021b      	lsls	r3, r3, #8
 8005278:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	40015400 	.word	0x40015400
 80052a8:	cccccccd 	.word	0xcccccccd
 80052ac:	ff05c010 	.word	0xff05c010
 80052b0:	fff88000 	.word	0xfff88000

080052b4 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052bc:	2300      	movs	r3, #0
 80052be:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d101      	bne.n	80052ce <HAL_SAI_Abort+0x1a>
 80052ca:	2302      	movs	r3, #2
 80052cc:	e053      	b.n	8005376 <HAL_SAI_Abort+0xc2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052e4:	d125      	bne.n	8005332 <HAL_SAI_Abort+0x7e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80052f4:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b12      	cmp	r3, #18
 8005300:	d108      	bne.n	8005314 <HAL_SAI_Abort+0x60>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005306:	2b00      	cmp	r3, #0
 8005308:	d004      	beq.n	8005314 <HAL_SAI_Abort+0x60>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800530e:	4618      	mov	r0, r3
 8005310:	f7fd fd2e 	bl	8002d70 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b22      	cmp	r3, #34	; 0x22
 800531e:	d108      	bne.n	8005332 <HAL_SAI_Abort+0x7e>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005324:	2b00      	cmp	r3, #0
 8005326:	d004      	beq.n	8005332 <HAL_SAI_Abort+0x7e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532c:	4618      	mov	r0, r3
 800532e:	f7fd fd1f 	bl	8002d70 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2200      	movs	r2, #0
 8005338:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f04f 32ff 	mov.w	r2, #4294967295
 8005342:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 fc87 	bl	8005c58 <SAI_Disable>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <HAL_SAI_Abort+0xa0>
  {
    status = HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0208 	orr.w	r2, r2, #8
 8005362:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 8005374:	7bfb      	ldrb	r3, [r7, #15]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
	...

08005380 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	4613      	mov	r3, r2
 800538c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800538e:	f7fd fa95 	bl	80028bc <HAL_GetTick>
 8005392:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d002      	beq.n	80053a0 <HAL_SAI_Transmit_DMA+0x20>
 800539a:	88fb      	ldrh	r3, [r7, #6]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e093      	b.n	80054cc <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	f040 808c 	bne.w	80054ca <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d101      	bne.n	80053c0 <HAL_SAI_Transmit_DMA+0x40>
 80053bc:	2302      	movs	r3, #2
 80053be:	e085      	b.n	80054cc <HAL_SAI_Transmit_DMA+0x14c>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	88fa      	ldrh	r2, [r7, #6]
 80053d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	88fa      	ldrh	r2, [r7, #6]
 80053da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2212      	movs	r2, #18
 80053ea:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053f2:	4a38      	ldr	r2, [pc, #224]	; (80054d4 <HAL_SAI_Transmit_DMA+0x154>)
 80053f4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053fa:	4a37      	ldr	r2, [pc, #220]	; (80054d8 <HAL_SAI_Transmit_DMA+0x158>)
 80053fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005402:	4a36      	ldr	r2, [pc, #216]	; (80054dc <HAL_SAI_Transmit_DMA+0x15c>)
 8005404:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800540a:	2200      	movs	r2, #0
 800540c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005416:	4619      	mov	r1, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	331c      	adds	r3, #28
 800541e:	461a      	mov	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005426:	f7fd fc43 	bl	8002cb0 <HAL_DMA_Start_IT>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d005      	beq.n	800543c <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e047      	b.n	80054cc <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800543c:	2100      	movs	r1, #0
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f000 fbd2 	bl	8005be8 <SAI_InterruptFlag>
 8005444:	4601      	mov	r1, r0
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	691a      	ldr	r2, [r3, #16]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005462:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005464:	e015      	b.n	8005492 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8005466:	f7fd fa29 	bl	80028bc <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005474:	d90d      	bls.n	8005492 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800547c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e01c      	b.n	80054cc <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d0e2      	beq.n	8005466 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d107      	bne.n	80054be <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80054bc:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	e000      	b.n	80054cc <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 80054ca:	2302      	movs	r3, #2
  }
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3718      	adds	r7, #24
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	08005d2b 	.word	0x08005d2b
 80054d8:	08005ccd 	.word	0x08005ccd
 80054dc:	08005dc1 	.word	0x08005dc1

080054e0 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	4613      	mov	r3, r2
 80054ec:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d002      	beq.n	80054fa <HAL_SAI_Receive_DMA+0x1a>
 80054f4:	88fb      	ldrh	r3, [r7, #6]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e074      	b.n	80055e8 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b01      	cmp	r3, #1
 8005508:	d16d      	bne.n	80055e6 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <HAL_SAI_Receive_DMA+0x38>
 8005514:	2302      	movs	r3, #2
 8005516:	e067      	b.n	80055e8 <HAL_SAI_Receive_DMA+0x108>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	88fa      	ldrh	r2, [r7, #6]
 800552a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	88fa      	ldrh	r2, [r7, #6]
 8005532:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2222      	movs	r2, #34	; 0x22
 8005542:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554a:	4a29      	ldr	r2, [pc, #164]	; (80055f0 <HAL_SAI_Receive_DMA+0x110>)
 800554c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005552:	4a28      	ldr	r2, [pc, #160]	; (80055f4 <HAL_SAI_Receive_DMA+0x114>)
 8005554:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555a:	4a27      	ldr	r2, [pc, #156]	; (80055f8 <HAL_SAI_Receive_DMA+0x118>)
 800555c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005562:	2200      	movs	r2, #0
 8005564:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	331c      	adds	r3, #28
 8005570:	4619      	mov	r1, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005576:	461a      	mov	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800557e:	f7fd fb97 	bl	8002cb0 <HAL_DMA_Start_IT>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d005      	beq.n	8005594 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e029      	b.n	80055e8 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005594:	2100      	movs	r1, #0
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f000 fb26 	bl	8005be8 <SAI_InterruptFlag>
 800559c:	4601      	mov	r1, r0
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	691a      	ldr	r2, [r3, #16]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80055ba:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d107      	bne.n	80055da <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80055d8:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80055e2:	2300      	movs	r3, #0
 80055e4:	e000      	b.n	80055e8 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 80055e6:	2302      	movs	r3, #2
  }
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	08005da5 	.word	0x08005da5
 80055f4:	08005d47 	.word	0x08005d47
 80055f8:	08005dc1 	.word	0x08005dc1

080055fc <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 8192 	beq.w	8005936 <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f003 0308 	and.w	r3, r3, #8
 8005630:	2b00      	cmp	r3, #0
 8005632:	d009      	beq.n	8005648 <HAL_SAI_IRQHandler+0x4c>
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f003 0308 	and.w	r3, r3, #8
 800563a:	2b00      	cmp	r3, #0
 800563c:	d004      	beq.n	8005648 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	4798      	blx	r3
 8005646:	e176      	b.n	8005936 <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d01e      	beq.n	8005690 <HAL_SAI_IRQHandler+0x94>
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b00      	cmp	r3, #0
 800565a:	d019      	beq.n	8005690 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2201      	movs	r2, #1
 8005662:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b22      	cmp	r3, #34	; 0x22
 800566e:	d101      	bne.n	8005674 <HAL_SAI_IRQHandler+0x78>
 8005670:	2301      	movs	r3, #1
 8005672:	e000      	b.n	8005676 <HAL_SAI_IRQHandler+0x7a>
 8005674:	2302      	movs	r3, #2
 8005676:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	431a      	orrs	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f96f 	bl	800596c <HAL_SAI_ErrorCallback>
 800568e:	e152      	b.n	8005936 <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d011      	beq.n	80056be <HAL_SAI_IRQHandler+0xc2>
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00c      	beq.n	80056be <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2202      	movs	r2, #2
 80056aa:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 8140 	beq.w	8005936 <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ba:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 80056bc:	e13b      	b.n	8005936 <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f003 0320 	and.w	r3, r3, #32
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d055      	beq.n	8005774 <HAL_SAI_IRQHandler+0x178>
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	f003 0320 	and.w	r3, r3, #32
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d050      	beq.n	8005774 <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2220      	movs	r2, #32
 80056d8:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056e0:	f043 0204 	orr.w	r2, r3, #4
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d038      	beq.n	8005766 <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d016      	beq.n	800572a <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005700:	4a8f      	ldr	r2, [pc, #572]	; (8005940 <HAL_SAI_IRQHandler+0x344>)
 8005702:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005708:	4618      	mov	r0, r3
 800570a:	f7fd fb6f 	bl	8002dec <HAL_DMA_Abort_IT>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00a      	beq.n	800572a <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800571a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f921 	bl	800596c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572e:	2b00      	cmp	r3, #0
 8005730:	f000 80fc 	beq.w	800592c <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005738:	4a81      	ldr	r2, [pc, #516]	; (8005940 <HAL_SAI_IRQHandler+0x344>)
 800573a:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005740:	4618      	mov	r0, r3
 8005742:	f7fd fb53 	bl	8002dec <HAL_DMA_Abort_IT>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 80ef 	beq.w	800592c <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005754:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f904 	bl	800596c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005764:	e0e2      	b.n	800592c <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7ff fda4 	bl	80052b4 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f8fd 	bl	800596c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005772:	e0db      	b.n	800592c <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577a:	2b00      	cmp	r3, #0
 800577c:	d055      	beq.n	800582a <HAL_SAI_IRQHandler+0x22e>
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005784:	2b00      	cmp	r3, #0
 8005786:	d050      	beq.n	800582a <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2240      	movs	r2, #64	; 0x40
 800578e:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005796:	f043 0208 	orr.w	r2, r3, #8
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d038      	beq.n	800581c <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d016      	beq.n	80057e0 <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057b6:	4a62      	ldr	r2, [pc, #392]	; (8005940 <HAL_SAI_IRQHandler+0x344>)
 80057b8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fd fb14 	bl	8002dec <HAL_DMA_Abort_IT>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00a      	beq.n	80057e0 <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f8c6 	bl	800596c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 80a3 	beq.w	8005930 <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ee:	4a54      	ldr	r2, [pc, #336]	; (8005940 <HAL_SAI_IRQHandler+0x344>)
 80057f0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fd faf8 	bl	8002dec <HAL_DMA_Abort_IT>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f000 8096 	beq.w	8005930 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800580a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f8a9 	bl	800596c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800581a:	e089      	b.n	8005930 <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7ff fd49 	bl	80052b4 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f8a2 	bl	800596c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005828:	e082      	b.n	8005930 <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f003 0304 	and.w	r3, r3, #4
 8005830:	2b00      	cmp	r3, #0
 8005832:	d061      	beq.n	80058f8 <HAL_SAI_IRQHandler+0x2fc>
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	f003 0304 	and.w	r3, r3, #4
 800583a:	2b00      	cmp	r3, #0
 800583c:	d05c      	beq.n	80058f8 <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2204      	movs	r2, #4
 8005844:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800584c:	f043 0220 	orr.w	r2, r3, #32
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d036      	beq.n	80058ce <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005864:	2b00      	cmp	r3, #0
 8005866:	d016      	beq.n	8005896 <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800586c:	4a34      	ldr	r2, [pc, #208]	; (8005940 <HAL_SAI_IRQHandler+0x344>)
 800586e:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005874:	4618      	mov	r0, r3
 8005876:	f7fd fab9 	bl	8002dec <HAL_DMA_Abort_IT>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00a      	beq.n	8005896 <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005886:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 f86b 	bl	800596c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589a:	2b00      	cmp	r3, #0
 800589c:	d04a      	beq.n	8005934 <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a2:	4a27      	ldr	r2, [pc, #156]	; (8005940 <HAL_SAI_IRQHandler+0x344>)
 80058a4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fd fa9e 	bl	8002dec <HAL_DMA_Abort_IT>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d03e      	beq.n	8005934 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f850 	bl	800596c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80058cc:	e032      	b.n	8005934 <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2200      	movs	r2, #0
 80058d4:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f04f 32ff 	mov.w	r2, #4294967295
 80058de:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f83b 	bl	800596c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80058f6:	e01d      	b.n	8005934 <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f003 0310 	and.w	r3, r3, #16
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d019      	beq.n	8005936 <HAL_SAI_IRQHandler+0x33a>
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f003 0310 	and.w	r3, r3, #16
 8005908:	2b00      	cmp	r3, #0
 800590a:	d014      	beq.n	8005936 <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2210      	movs	r2, #16
 8005912:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800591a:	f043 0210 	orr.w	r2, r3, #16
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f821 	bl	800596c <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 800592a:	e004      	b.n	8005936 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800592c:	bf00      	nop
 800592e:	e002      	b.n	8005936 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005930:	bf00      	nop
 8005932:	e000      	b.n	8005936 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005934:	bf00      	nop
}
 8005936:	bf00      	nop
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	08005e13 	.word	0x08005e13

08005944 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
 800598c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800598e:	2300      	movs	r3, #0
 8005990:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d003      	beq.n	80059ae <SAI_InitI2S+0x2e>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d103      	bne.n	80059b6 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80059b4:	e002      	b.n	80059bc <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2201      	movs	r2, #1
 80059ba:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80059c2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059ca:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e077      	b.n	8005ad6 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d107      	bne.n	80059fc <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80059f8:	651a      	str	r2, [r3, #80]	; 0x50
 80059fa:	e006      	b.n	8005a0a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a02:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Frame definition */
  switch (datasize)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b03      	cmp	r3, #3
 8005a0e:	d84f      	bhi.n	8005ab0 <SAI_InitI2S+0x130>
 8005a10:	a201      	add	r2, pc, #4	; (adr r2, 8005a18 <SAI_InitI2S+0x98>)
 8005a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a16:	bf00      	nop
 8005a18:	08005a29 	.word	0x08005a29
 8005a1c:	08005a4b 	.word	0x08005a4b
 8005a20:	08005a6d 	.word	0x08005a6d
 8005a24:	08005a8f 	.word	0x08005a8f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2280      	movs	r2, #128	; 0x80
 8005a2c:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	085b      	lsrs	r3, r3, #1
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	085b      	lsrs	r3, r3, #1
 8005a3c:	011a      	lsls	r2, r3, #4
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2240      	movs	r2, #64	; 0x40
 8005a46:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005a48:	e035      	b.n	8005ab6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2280      	movs	r2, #128	; 0x80
 8005a4e:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	085b      	lsrs	r3, r3, #1
 8005a54:	019a      	lsls	r2, r3, #6
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	085b      	lsrs	r3, r3, #1
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2280      	movs	r2, #128	; 0x80
 8005a68:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005a6a:	e024      	b.n	8005ab6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	22c0      	movs	r2, #192	; 0xc0
 8005a70:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	085b      	lsrs	r3, r3, #1
 8005a76:	019a      	lsls	r2, r3, #6
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	085b      	lsrs	r3, r3, #1
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2280      	movs	r2, #128	; 0x80
 8005a8a:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005a8c:	e013      	b.n	8005ab6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	22e0      	movs	r2, #224	; 0xe0
 8005a92:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	085b      	lsrs	r3, r3, #1
 8005a98:	019a      	lsls	r2, r3, #6
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	085b      	lsrs	r3, r3, #1
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2280      	movs	r2, #128	; 0x80
 8005aac:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005aae:	e002      	b.n	8005ab6 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ab4:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d10b      	bne.n	8005ad4 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d102      	bne.n	8005ac8 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2210      	movs	r2, #16
 8005ac6:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d102      	bne.n	8005ad4 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2208      	movs	r2, #8
 8005ad2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return status;
 8005ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	371c      	adds	r7, #28
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop

08005ae4 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
 8005af0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005af2:	2300      	movs	r3, #0
 8005af4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <SAI_InitPCM+0x2e>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d103      	bne.n	8005b1a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2201      	movs	r2, #1
 8005b16:	63da      	str	r2, [r3, #60]	; 0x3c
 8005b18:	e002      	b.n	8005b20 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005b2c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005b34:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b48:	661a      	str	r2, [r3, #96]	; 0x60

  if (protocol == SAI_PCM_SHORT)
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2b04      	cmp	r3, #4
 8005b4e:	d103      	bne.n	8005b58 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2201      	movs	r2, #1
 8005b54:	645a      	str	r2, [r3, #68]	; 0x44
 8005b56:	e002      	b.n	8005b5e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	220d      	movs	r2, #13
 8005b5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  switch (datasize)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b03      	cmp	r3, #3
 8005b62:	d837      	bhi.n	8005bd4 <SAI_InitPCM+0xf0>
 8005b64:	a201      	add	r2, pc, #4	; (adr r2, 8005b6c <SAI_InitPCM+0x88>)
 8005b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6a:	bf00      	nop
 8005b6c:	08005b7d 	.word	0x08005b7d
 8005b70:	08005b93 	.word	0x08005b93
 8005b74:	08005ba9 	.word	0x08005ba9
 8005b78:	08005bbf 	.word	0x08005bbf
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2280      	movs	r2, #128	; 0x80
 8005b80:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	011a      	lsls	r2, r3, #4
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2240      	movs	r2, #64	; 0x40
 8005b8e:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005b90:	e023      	b.n	8005bda <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2280      	movs	r2, #128	; 0x80
 8005b96:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2280      	movs	r2, #128	; 0x80
 8005ba4:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005ba6:	e018      	b.n	8005bda <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	22c0      	movs	r2, #192	; 0xc0
 8005bac:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	015a      	lsls	r2, r3, #5
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2280      	movs	r2, #128	; 0x80
 8005bba:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005bbc:	e00d      	b.n	8005bda <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	22e0      	movs	r2, #224	; 0xe0
 8005bc2:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2280      	movs	r2, #128	; 0x80
 8005bd0:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005bd2:	e002      	b.n	8005bda <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8005bd8:	bf00      	nop
  }

  return status;
 8005bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	371c      	adds	r7, #28
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8005bf8:	78fb      	ldrb	r3, [r7, #3]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d103      	bne.n	8005c06 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f043 0308 	orr.w	r3, r3, #8
 8005c04:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0a:	2b08      	cmp	r3, #8
 8005c0c:	d10b      	bne.n	8005c26 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005c12:	2b03      	cmp	r3, #3
 8005c14:	d003      	beq.n	8005c1e <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d103      	bne.n	8005c26 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f043 0310 	orr.w	r3, r3, #16
 8005c24:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	2b03      	cmp	r3, #3
 8005c2c:	d003      	beq.n	8005c36 <SAI_InterruptFlag+0x4e>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d104      	bne.n	8005c40 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005c3c:	60fb      	str	r3, [r7, #12]
 8005c3e:	e003      	b.n	8005c48 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f043 0304 	orr.w	r3, r3, #4
 8005c46:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8005c48:	68fb      	ldr	r3, [r7, #12]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
	...

08005c58 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005c60:	4b18      	ldr	r3, [pc, #96]	; (8005cc4 <SAI_Disable+0x6c>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a18      	ldr	r2, [pc, #96]	; (8005cc8 <SAI_Disable+0x70>)
 8005c66:	fba2 2303 	umull	r2, r3, r2, r3
 8005c6a:	0b1b      	lsrs	r3, r3, #12
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005c70:	2300      	movs	r3, #0
 8005c72:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005c82:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10a      	bne.n	8005ca0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	72fb      	strb	r3, [r7, #11]
      break;
 8005c9e:	e009      	b.n	8005cb4 <SAI_Disable+0x5c>
    }
    count--;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1e7      	bne.n	8005c84 <SAI_Disable+0x2c>

  return status;
 8005cb4:	7afb      	ldrb	r3, [r7, #11]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3714      	adds	r7, #20
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	20000000 	.word	0x20000000
 8005cc8:	95cbec1b 	.word	0x95cbec1b

08005ccc <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd8:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	69db      	ldr	r3, [r3, #28]
 8005cde:	2b20      	cmp	r3, #32
 8005ce0:	d01c      	beq.n	8005d1c <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005cf8:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f7ff ff73 	bl	8005be8 <SAI_InterruptFlag>
 8005d02:	4603      	mov	r3, r0
 8005d04:	43d9      	mvns	r1, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	691a      	ldr	r2, [r3, #16]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	400a      	ands	r2, r1
 8005d12:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f7ff fe11 	bl	8005944 <HAL_SAI_TxCpltCallback>
#endif
}
 8005d22:	bf00      	nop
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b084      	sub	sp, #16
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d36:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f7ff fe0d 	bl	8005958 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8005d3e:	bf00      	nop
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b084      	sub	sp, #16
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d52:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	69db      	ldr	r3, [r3, #28]
 8005d58:	2b20      	cmp	r3, #32
 8005d5a:	d01c      	beq.n	8005d96 <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005d6a:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005d74:	2100      	movs	r1, #0
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f7ff ff36 	bl	8005be8 <SAI_InterruptFlag>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	43d9      	mvns	r1, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	691a      	ldr	r2, [r3, #16]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	400a      	ands	r2, r1
 8005d8c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f7fb fbc6 	bl	8001528 <HAL_SAI_RxCpltCallback>
#endif
}
 8005d9c:	bf00      	nop
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f7fb fbc8 	bl	8001548 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8005db8:	bf00      	nop
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dcc:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dd4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005dec:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f7ff ff32 	bl	8005c58 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f7ff fdb1 	bl	800596c <HAL_SAI_ErrorCallback>
#endif
}
 8005e0a:	bf00      	nop
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b084      	sub	sp, #16
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005e2e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2200      	movs	r2, #0
 8005e36:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e40:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e48:	2b20      	cmp	r3, #32
 8005e4a:	d00a      	beq.n	8005e62 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f7ff ff03 	bl	8005c58 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f042 0208 	orr.w	r2, r2, #8
 8005e60:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f7ff fd7a 	bl	800596c <HAL_SAI_ErrorCallback>
#endif
}
 8005e78:	bf00      	nop
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e095      	b.n	8005fbe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d108      	bne.n	8005eac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ea2:	d009      	beq.n	8005eb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	61da      	str	r2, [r3, #28]
 8005eaa:	e005      	b.n	8005eb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d106      	bne.n	8005ed8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7fb fc1e 	bl	8001714 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ef8:	d902      	bls.n	8005f00 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005efa:	2300      	movs	r3, #0
 8005efc:	60fb      	str	r3, [r7, #12]
 8005efe:	e002      	b.n	8005f06 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f04:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005f0e:	d007      	beq.n	8005f20 <HAL_SPI_Init+0xa0>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f18:	d002      	beq.n	8005f20 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f30:	431a      	orrs	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	695b      	ldr	r3, [r3, #20]
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	431a      	orrs	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f4e:	431a      	orrs	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	69db      	ldr	r3, [r3, #28]
 8005f54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f62:	ea42 0103 	orr.w	r1, r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	430a      	orrs	r2, r1
 8005f74:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	0c1b      	lsrs	r3, r3, #16
 8005f7c:	f003 0204 	and.w	r2, r3, #4
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f84:	f003 0310 	and.w	r3, r3, #16
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8e:	f003 0308 	and.w	r3, r3, #8
 8005f92:	431a      	orrs	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005f9c:	ea42 0103 	orr.w	r1, r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	430a      	orrs	r2, r1
 8005fac:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b088      	sub	sp, #32
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	60f8      	str	r0, [r7, #12]
 8005fce:	60b9      	str	r1, [r7, #8]
 8005fd0:	603b      	str	r3, [r7, #0]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d101      	bne.n	8005fe8 <HAL_SPI_Transmit+0x22>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e158      	b.n	800629a <HAL_SPI_Transmit+0x2d4>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ff0:	f7fc fc64 	bl	80028bc <HAL_GetTick>
 8005ff4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005ff6:	88fb      	ldrh	r3, [r7, #6]
 8005ff8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b01      	cmp	r3, #1
 8006004:	d002      	beq.n	800600c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006006:	2302      	movs	r3, #2
 8006008:	77fb      	strb	r3, [r7, #31]
    goto error;
 800600a:	e13d      	b.n	8006288 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d002      	beq.n	8006018 <HAL_SPI_Transmit+0x52>
 8006012:	88fb      	ldrh	r3, [r7, #6]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d102      	bne.n	800601e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800601c:	e134      	b.n	8006288 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2203      	movs	r2, #3
 8006022:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	88fa      	ldrh	r2, [r7, #6]
 8006036:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	88fa      	ldrh	r2, [r7, #6]
 800603c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006068:	d10f      	bne.n	800608a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006078:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006088:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006094:	2b40      	cmp	r3, #64	; 0x40
 8006096:	d007      	beq.n	80060a8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060b0:	d94b      	bls.n	800614a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d002      	beq.n	80060c0 <HAL_SPI_Transmit+0xfa>
 80060ba:	8afb      	ldrh	r3, [r7, #22]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d13e      	bne.n	800613e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c4:	881a      	ldrh	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d0:	1c9a      	adds	r2, r3, #2
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060da:	b29b      	uxth	r3, r3
 80060dc:	3b01      	subs	r3, #1
 80060de:	b29a      	uxth	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80060e4:	e02b      	b.n	800613e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d112      	bne.n	800611a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f8:	881a      	ldrh	r2, [r3, #0]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006104:	1c9a      	adds	r2, r3, #2
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800610e:	b29b      	uxth	r3, r3
 8006110:	3b01      	subs	r3, #1
 8006112:	b29a      	uxth	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006118:	e011      	b.n	800613e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800611a:	f7fc fbcf 	bl	80028bc <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	429a      	cmp	r2, r3
 8006128:	d803      	bhi.n	8006132 <HAL_SPI_Transmit+0x16c>
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006130:	d102      	bne.n	8006138 <HAL_SPI_Transmit+0x172>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d102      	bne.n	800613e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800613c:	e0a4      	b.n	8006288 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006142:	b29b      	uxth	r3, r3
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1ce      	bne.n	80060e6 <HAL_SPI_Transmit+0x120>
 8006148:	e07c      	b.n	8006244 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d002      	beq.n	8006158 <HAL_SPI_Transmit+0x192>
 8006152:	8afb      	ldrh	r3, [r7, #22]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d170      	bne.n	800623a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800615c:	b29b      	uxth	r3, r3
 800615e:	2b01      	cmp	r3, #1
 8006160:	d912      	bls.n	8006188 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006166:	881a      	ldrh	r2, [r3, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006172:	1c9a      	adds	r2, r3, #2
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800617c:	b29b      	uxth	r3, r3
 800617e:	3b02      	subs	r3, #2
 8006180:	b29a      	uxth	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006186:	e058      	b.n	800623a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	330c      	adds	r3, #12
 8006192:	7812      	ldrb	r2, [r2, #0]
 8006194:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619a:	1c5a      	adds	r2, r3, #1
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	3b01      	subs	r3, #1
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80061ae:	e044      	b.n	800623a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	f003 0302 	and.w	r3, r3, #2
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d12b      	bne.n	8006216 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d912      	bls.n	80061ee <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061cc:	881a      	ldrh	r2, [r3, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d8:	1c9a      	adds	r2, r3, #2
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	3b02      	subs	r3, #2
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061ec:	e025      	b.n	800623a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	330c      	adds	r3, #12
 80061f8:	7812      	ldrb	r2, [r2, #0]
 80061fa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006200:	1c5a      	adds	r2, r3, #1
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800620a:	b29b      	uxth	r3, r3
 800620c:	3b01      	subs	r3, #1
 800620e:	b29a      	uxth	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006214:	e011      	b.n	800623a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006216:	f7fc fb51 	bl	80028bc <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	683a      	ldr	r2, [r7, #0]
 8006222:	429a      	cmp	r2, r3
 8006224:	d803      	bhi.n	800622e <HAL_SPI_Transmit+0x268>
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622c:	d102      	bne.n	8006234 <HAL_SPI_Transmit+0x26e>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d102      	bne.n	800623a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006238:	e026      	b.n	8006288 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800623e:	b29b      	uxth	r3, r3
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1b5      	bne.n	80061b0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006244:	69ba      	ldr	r2, [r7, #24]
 8006246:	6839      	ldr	r1, [r7, #0]
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f000 fbdd 	bl	8006a08 <SPI_EndRxTxTransaction>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d002      	beq.n	800625a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2220      	movs	r2, #32
 8006258:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10a      	bne.n	8006278 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006262:	2300      	movs	r3, #0
 8006264:	613b      	str	r3, [r7, #16]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	613b      	str	r3, [r7, #16]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	613b      	str	r3, [r7, #16]
 8006276:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	77fb      	strb	r3, [r7, #31]
 8006284:	e000      	b.n	8006288 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006286:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006298:	7ffb      	ldrb	r3, [r7, #31]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3720      	adds	r7, #32
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
	...

080062a4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	4613      	mov	r3, r2
 80062b0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062b2:	2300      	movs	r3, #0
 80062b4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d101      	bne.n	80062c4 <HAL_SPI_Transmit_DMA+0x20>
 80062c0:	2302      	movs	r3, #2
 80062c2:	e0d8      	b.n	8006476 <HAL_SPI_Transmit_DMA+0x1d2>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d002      	beq.n	80062de <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80062d8:	2302      	movs	r3, #2
 80062da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062dc:	e0c6      	b.n	800646c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d002      	beq.n	80062ea <HAL_SPI_Transmit_DMA+0x46>
 80062e4:	88fb      	ldrh	r3, [r7, #6]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d102      	bne.n	80062f0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062ee:	e0bd      	b.n	800646c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2203      	movs	r2, #3
 80062f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	88fa      	ldrh	r2, [r7, #6]
 8006308:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	88fa      	ldrh	r2, [r7, #6]
 800630e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800633a:	d10f      	bne.n	800635c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800634a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800635a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006360:	4a47      	ldr	r2, [pc, #284]	; (8006480 <HAL_SPI_Transmit_DMA+0x1dc>)
 8006362:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006368:	4a46      	ldr	r2, [pc, #280]	; (8006484 <HAL_SPI_Transmit_DMA+0x1e0>)
 800636a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006370:	4a45      	ldr	r2, [pc, #276]	; (8006488 <HAL_SPI_Transmit_DMA+0x1e4>)
 8006372:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006378:	2200      	movs	r2, #0
 800637a:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800638a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006394:	d82d      	bhi.n	80063f2 <HAL_SPI_Transmit_DMA+0x14e>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063a0:	d127      	bne.n	80063f2 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10f      	bne.n	80063d0 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80063be:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	085b      	lsrs	r3, r3, #1
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063ce:	e010      	b.n	80063f2 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	685a      	ldr	r2, [r3, #4]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063de:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	085b      	lsrs	r3, r3, #1
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	3301      	adds	r3, #1
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fa:	4619      	mov	r1, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	330c      	adds	r3, #12
 8006402:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006408:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800640a:	f7fc fc51 	bl	8002cb0 <HAL_DMA_Start_IT>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00c      	beq.n	800642e <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006418:	f043 0210 	orr.w	r2, r3, #16
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800642c:	e01e      	b.n	800646c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006438:	2b40      	cmp	r3, #64	; 0x40
 800643a:	d007      	beq.n	800644c <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800644a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685a      	ldr	r2, [r3, #4]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f042 0220 	orr.w	r2, r2, #32
 800645a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f042 0202 	orr.w	r2, r2, #2
 800646a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006474:	7dfb      	ldrb	r3, [r7, #23]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3718      	adds	r7, #24
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	08006747 	.word	0x08006747
 8006484:	080066a1 	.word	0x080066a1
 8006488:	08006763 	.word	0x08006763

0800648c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b088      	sub	sp, #32
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	099b      	lsrs	r3, r3, #6
 80064a8:	f003 0301 	and.w	r3, r3, #1
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10f      	bne.n	80064d0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00a      	beq.n	80064d0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	099b      	lsrs	r3, r3, #6
 80064be:	f003 0301 	and.w	r3, r3, #1
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d004      	beq.n	80064d0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	4798      	blx	r3
    return;
 80064ce:	e0d7      	b.n	8006680 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	085b      	lsrs	r3, r3, #1
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00a      	beq.n	80064f2 <HAL_SPI_IRQHandler+0x66>
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	09db      	lsrs	r3, r3, #7
 80064e0:	f003 0301 	and.w	r3, r3, #1
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d004      	beq.n	80064f2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	4798      	blx	r3
    return;
 80064f0:	e0c6      	b.n	8006680 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	095b      	lsrs	r3, r3, #5
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10c      	bne.n	8006518 <HAL_SPI_IRQHandler+0x8c>
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	099b      	lsrs	r3, r3, #6
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	2b00      	cmp	r3, #0
 8006508:	d106      	bne.n	8006518 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	0a1b      	lsrs	r3, r3, #8
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 80b4 	beq.w	8006680 <HAL_SPI_IRQHandler+0x1f4>
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	095b      	lsrs	r3, r3, #5
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	2b00      	cmp	r3, #0
 8006522:	f000 80ad 	beq.w	8006680 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	099b      	lsrs	r3, r3, #6
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	d023      	beq.n	800657a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b03      	cmp	r3, #3
 800653c:	d011      	beq.n	8006562 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006542:	f043 0204 	orr.w	r2, r3, #4
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800654a:	2300      	movs	r3, #0
 800654c:	617b      	str	r3, [r7, #20]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	617b      	str	r3, [r7, #20]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	617b      	str	r3, [r7, #20]
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	e00b      	b.n	800657a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006562:	2300      	movs	r3, #0
 8006564:	613b      	str	r3, [r7, #16]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	613b      	str	r3, [r7, #16]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	613b      	str	r3, [r7, #16]
 8006576:	693b      	ldr	r3, [r7, #16]
        return;
 8006578:	e082      	b.n	8006680 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	095b      	lsrs	r3, r3, #5
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b00      	cmp	r3, #0
 8006584:	d014      	beq.n	80065b0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800658a:	f043 0201 	orr.w	r2, r3, #1
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006592:	2300      	movs	r3, #0
 8006594:	60fb      	str	r3, [r7, #12]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	60fb      	str	r3, [r7, #12]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065ac:	601a      	str	r2, [r3, #0]
 80065ae:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	0a1b      	lsrs	r3, r3, #8
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00c      	beq.n	80065d6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065c0:	f043 0208 	orr.w	r2, r3, #8
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80065c8:	2300      	movs	r3, #0
 80065ca:	60bb      	str	r3, [r7, #8]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	60bb      	str	r3, [r7, #8]
 80065d4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d04f      	beq.n	800667e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065ec:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	f003 0302 	and.w	r3, r3, #2
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d104      	bne.n	800660a <HAL_SPI_IRQHandler+0x17e>
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b00      	cmp	r3, #0
 8006608:	d034      	beq.n	8006674 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 0203 	bic.w	r2, r2, #3
 8006618:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800661e:	2b00      	cmp	r3, #0
 8006620:	d011      	beq.n	8006646 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006626:	4a18      	ldr	r2, [pc, #96]	; (8006688 <HAL_SPI_IRQHandler+0x1fc>)
 8006628:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800662e:	4618      	mov	r0, r3
 8006630:	f7fc fbdc 	bl	8002dec <HAL_DMA_Abort_IT>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d005      	beq.n	8006646 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800663e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800664a:	2b00      	cmp	r3, #0
 800664c:	d016      	beq.n	800667c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006652:	4a0d      	ldr	r2, [pc, #52]	; (8006688 <HAL_SPI_IRQHandler+0x1fc>)
 8006654:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800665a:	4618      	mov	r0, r3
 800665c:	f7fc fbc6 	bl	8002dec <HAL_DMA_Abort_IT>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00a      	beq.n	800667c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800666a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006672:	e003      	b.n	800667c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f7fb fddf 	bl	8002238 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800667a:	e000      	b.n	800667e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800667c:	bf00      	nop
    return;
 800667e:	bf00      	nop
  }
}
 8006680:	3720      	adds	r7, #32
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	080067a3 	.word	0x080067a3

0800668c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ac:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066ae:	f7fc f905 	bl	80028bc <HAL_GetTick>
 80066b2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0320 	and.w	r3, r3, #32
 80066be:	2b20      	cmp	r3, #32
 80066c0:	d03b      	beq.n	800673a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 0220 	bic.w	r2, r2, #32
 80066d0:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 0202 	bic.w	r2, r2, #2
 80066e0:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	2164      	movs	r1, #100	; 0x64
 80066e6:	6978      	ldr	r0, [r7, #20]
 80066e8:	f000 f98e 	bl	8006a08 <SPI_EndRxTxTransaction>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d005      	beq.n	80066fe <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066f6:	f043 0220 	orr.w	r2, r3, #32
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d10a      	bne.n	800671c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006706:	2300      	movs	r3, #0
 8006708:	60fb      	str	r3, [r7, #12]
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	60fb      	str	r3, [r7, #12]
 800671a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	2200      	movs	r2, #0
 8006720:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006732:	6978      	ldr	r0, [r7, #20]
 8006734:	f7fb fd80 	bl	8002238 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006738:	e002      	b.n	8006740 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800673a:	6978      	ldr	r0, [r7, #20]
 800673c:	f7fb fd92 	bl	8002264 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006740:	3718      	adds	r7, #24
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b084      	sub	sp, #16
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006752:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f7ff ff99 	bl	800668c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800675a:	bf00      	nop
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b084      	sub	sp, #16
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f022 0203 	bic.w	r2, r2, #3
 800677e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006784:	f043 0210 	orr.w	r2, r3, #16
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f7fb fd4f 	bl	8002238 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800679a:	bf00      	nop
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b084      	sub	sp, #16
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ae:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f7fb fd3a 	bl	8002238 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80067c4:	bf00      	nop
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b088      	sub	sp, #32
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	603b      	str	r3, [r7, #0]
 80067d8:	4613      	mov	r3, r2
 80067da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80067dc:	f7fc f86e 	bl	80028bc <HAL_GetTick>
 80067e0:	4602      	mov	r2, r0
 80067e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e4:	1a9b      	subs	r3, r3, r2
 80067e6:	683a      	ldr	r2, [r7, #0]
 80067e8:	4413      	add	r3, r2
 80067ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80067ec:	f7fc f866 	bl	80028bc <HAL_GetTick>
 80067f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80067f2:	4b39      	ldr	r3, [pc, #228]	; (80068d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	015b      	lsls	r3, r3, #5
 80067f8:	0d1b      	lsrs	r3, r3, #20
 80067fa:	69fa      	ldr	r2, [r7, #28]
 80067fc:	fb02 f303 	mul.w	r3, r2, r3
 8006800:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006802:	e054      	b.n	80068ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800680a:	d050      	beq.n	80068ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800680c:	f7fc f856 	bl	80028bc <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	69fa      	ldr	r2, [r7, #28]
 8006818:	429a      	cmp	r2, r3
 800681a:	d902      	bls.n	8006822 <SPI_WaitFlagStateUntilTimeout+0x56>
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d13d      	bne.n	800689e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	685a      	ldr	r2, [r3, #4]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006830:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800683a:	d111      	bne.n	8006860 <SPI_WaitFlagStateUntilTimeout+0x94>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006844:	d004      	beq.n	8006850 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800684e:	d107      	bne.n	8006860 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800685e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006864:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006868:	d10f      	bne.n	800688a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006878:	601a      	str	r2, [r3, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006888:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e017      	b.n	80068ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80068a4:	2300      	movs	r3, #0
 80068a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	3b01      	subs	r3, #1
 80068ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	689a      	ldr	r2, [r3, #8]
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	4013      	ands	r3, r2
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	bf0c      	ite	eq
 80068be:	2301      	moveq	r3, #1
 80068c0:	2300      	movne	r3, #0
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	461a      	mov	r2, r3
 80068c6:	79fb      	ldrb	r3, [r7, #7]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d19b      	bne.n	8006804 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3720      	adds	r7, #32
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	20000000 	.word	0x20000000

080068dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b08a      	sub	sp, #40	; 0x28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
 80068e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80068ea:	2300      	movs	r3, #0
 80068ec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80068ee:	f7fb ffe5 	bl	80028bc <HAL_GetTick>
 80068f2:	4602      	mov	r2, r0
 80068f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f6:	1a9b      	subs	r3, r3, r2
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	4413      	add	r3, r2
 80068fc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80068fe:	f7fb ffdd 	bl	80028bc <HAL_GetTick>
 8006902:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	330c      	adds	r3, #12
 800690a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800690c:	4b3d      	ldr	r3, [pc, #244]	; (8006a04 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	4613      	mov	r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	00da      	lsls	r2, r3, #3
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	0d1b      	lsrs	r3, r3, #20
 800691c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800691e:	fb02 f303 	mul.w	r3, r2, r3
 8006922:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006924:	e060      	b.n	80069e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800692c:	d107      	bne.n	800693e <SPI_WaitFifoStateUntilTimeout+0x62>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d104      	bne.n	800693e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	b2db      	uxtb	r3, r3
 800693a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800693c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006944:	d050      	beq.n	80069e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006946:	f7fb ffb9 	bl	80028bc <HAL_GetTick>
 800694a:	4602      	mov	r2, r0
 800694c:	6a3b      	ldr	r3, [r7, #32]
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006952:	429a      	cmp	r2, r3
 8006954:	d902      	bls.n	800695c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006958:	2b00      	cmp	r3, #0
 800695a:	d13d      	bne.n	80069d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	685a      	ldr	r2, [r3, #4]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800696a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006974:	d111      	bne.n	800699a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800697e:	d004      	beq.n	800698a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006988:	d107      	bne.n	800699a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006998:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800699e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069a2:	d10f      	bne.n	80069c4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e010      	b.n	80069fa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80069de:	2300      	movs	r3, #0
 80069e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	3b01      	subs	r3, #1
 80069e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689a      	ldr	r2, [r3, #8]
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	4013      	ands	r3, r2
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d196      	bne.n	8006926 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3728      	adds	r7, #40	; 0x28
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	20000000 	.word	0x20000000

08006a08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af02      	add	r7, sp, #8
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	9300      	str	r3, [sp, #0]
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f7ff ff5b 	bl	80068dc <SPI_WaitFifoStateUntilTimeout>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d007      	beq.n	8006a3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a30:	f043 0220 	orr.w	r2, r3, #32
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e027      	b.n	8006a8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	2200      	movs	r2, #0
 8006a44:	2180      	movs	r1, #128	; 0x80
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f7ff fec0 	bl	80067cc <SPI_WaitFlagStateUntilTimeout>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d007      	beq.n	8006a62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a56:	f043 0220 	orr.w	r2, r3, #32
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e014      	b.n	8006a8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f7ff ff34 	bl	80068dc <SPI_WaitFifoStateUntilTimeout>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d007      	beq.n	8006a8a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a7e:	f043 0220 	orr.w	r2, r3, #32
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e000      	b.n	8006a8c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e040      	b.n	8006b28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d106      	bne.n	8006abc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7fa fea4 	bl	8001804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2224      	movs	r2, #36	; 0x24
 8006ac0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f022 0201 	bic.w	r2, r2, #1
 8006ad0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f82c 	bl	8006b30 <UART_SetConfig>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d101      	bne.n	8006ae2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e022      	b.n	8006b28 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d002      	beq.n	8006af0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 fa4c 	bl	8006f88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685a      	ldr	r2, [r3, #4]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006afe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	689a      	ldr	r2, [r3, #8]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f042 0201 	orr.w	r2, r2, #1
 8006b1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fad3 	bl	80070cc <UART_CheckIdleState>
 8006b26:	4603      	mov	r3, r0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b34:	b08a      	sub	sp, #40	; 0x28
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	689a      	ldr	r2, [r3, #8]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	431a      	orrs	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	4bb4      	ldr	r3, [pc, #720]	; (8006e30 <UART_SetConfig+0x300>)
 8006b60:	4013      	ands	r3, r2
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	6812      	ldr	r2, [r2, #0]
 8006b66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b68:	430b      	orrs	r3, r1
 8006b6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	68da      	ldr	r2, [r3, #12]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4aa9      	ldr	r2, [pc, #676]	; (8006e34 <UART_SetConfig+0x304>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d004      	beq.n	8006b9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6a1b      	ldr	r3, [r3, #32]
 8006b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bac:	430a      	orrs	r2, r1
 8006bae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4aa0      	ldr	r2, [pc, #640]	; (8006e38 <UART_SetConfig+0x308>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d126      	bne.n	8006c08 <UART_SetConfig+0xd8>
 8006bba:	4ba0      	ldr	r3, [pc, #640]	; (8006e3c <UART_SetConfig+0x30c>)
 8006bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bc0:	f003 0303 	and.w	r3, r3, #3
 8006bc4:	2b03      	cmp	r3, #3
 8006bc6:	d81b      	bhi.n	8006c00 <UART_SetConfig+0xd0>
 8006bc8:	a201      	add	r2, pc, #4	; (adr r2, 8006bd0 <UART_SetConfig+0xa0>)
 8006bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bce:	bf00      	nop
 8006bd0:	08006be1 	.word	0x08006be1
 8006bd4:	08006bf1 	.word	0x08006bf1
 8006bd8:	08006be9 	.word	0x08006be9
 8006bdc:	08006bf9 	.word	0x08006bf9
 8006be0:	2301      	movs	r3, #1
 8006be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006be6:	e080      	b.n	8006cea <UART_SetConfig+0x1ba>
 8006be8:	2302      	movs	r3, #2
 8006bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bee:	e07c      	b.n	8006cea <UART_SetConfig+0x1ba>
 8006bf0:	2304      	movs	r3, #4
 8006bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bf6:	e078      	b.n	8006cea <UART_SetConfig+0x1ba>
 8006bf8:	2308      	movs	r3, #8
 8006bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bfe:	e074      	b.n	8006cea <UART_SetConfig+0x1ba>
 8006c00:	2310      	movs	r3, #16
 8006c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c06:	e070      	b.n	8006cea <UART_SetConfig+0x1ba>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a8c      	ldr	r2, [pc, #560]	; (8006e40 <UART_SetConfig+0x310>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d138      	bne.n	8006c84 <UART_SetConfig+0x154>
 8006c12:	4b8a      	ldr	r3, [pc, #552]	; (8006e3c <UART_SetConfig+0x30c>)
 8006c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c18:	f003 030c 	and.w	r3, r3, #12
 8006c1c:	2b0c      	cmp	r3, #12
 8006c1e:	d82d      	bhi.n	8006c7c <UART_SetConfig+0x14c>
 8006c20:	a201      	add	r2, pc, #4	; (adr r2, 8006c28 <UART_SetConfig+0xf8>)
 8006c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c26:	bf00      	nop
 8006c28:	08006c5d 	.word	0x08006c5d
 8006c2c:	08006c7d 	.word	0x08006c7d
 8006c30:	08006c7d 	.word	0x08006c7d
 8006c34:	08006c7d 	.word	0x08006c7d
 8006c38:	08006c6d 	.word	0x08006c6d
 8006c3c:	08006c7d 	.word	0x08006c7d
 8006c40:	08006c7d 	.word	0x08006c7d
 8006c44:	08006c7d 	.word	0x08006c7d
 8006c48:	08006c65 	.word	0x08006c65
 8006c4c:	08006c7d 	.word	0x08006c7d
 8006c50:	08006c7d 	.word	0x08006c7d
 8006c54:	08006c7d 	.word	0x08006c7d
 8006c58:	08006c75 	.word	0x08006c75
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c62:	e042      	b.n	8006cea <UART_SetConfig+0x1ba>
 8006c64:	2302      	movs	r3, #2
 8006c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c6a:	e03e      	b.n	8006cea <UART_SetConfig+0x1ba>
 8006c6c:	2304      	movs	r3, #4
 8006c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c72:	e03a      	b.n	8006cea <UART_SetConfig+0x1ba>
 8006c74:	2308      	movs	r3, #8
 8006c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c7a:	e036      	b.n	8006cea <UART_SetConfig+0x1ba>
 8006c7c:	2310      	movs	r3, #16
 8006c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c82:	e032      	b.n	8006cea <UART_SetConfig+0x1ba>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a6a      	ldr	r2, [pc, #424]	; (8006e34 <UART_SetConfig+0x304>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d12a      	bne.n	8006ce4 <UART_SetConfig+0x1b4>
 8006c8e:	4b6b      	ldr	r3, [pc, #428]	; (8006e3c <UART_SetConfig+0x30c>)
 8006c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c9c:	d01a      	beq.n	8006cd4 <UART_SetConfig+0x1a4>
 8006c9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ca2:	d81b      	bhi.n	8006cdc <UART_SetConfig+0x1ac>
 8006ca4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ca8:	d00c      	beq.n	8006cc4 <UART_SetConfig+0x194>
 8006caa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cae:	d815      	bhi.n	8006cdc <UART_SetConfig+0x1ac>
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d003      	beq.n	8006cbc <UART_SetConfig+0x18c>
 8006cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cb8:	d008      	beq.n	8006ccc <UART_SetConfig+0x19c>
 8006cba:	e00f      	b.n	8006cdc <UART_SetConfig+0x1ac>
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cc2:	e012      	b.n	8006cea <UART_SetConfig+0x1ba>
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cca:	e00e      	b.n	8006cea <UART_SetConfig+0x1ba>
 8006ccc:	2304      	movs	r3, #4
 8006cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cd2:	e00a      	b.n	8006cea <UART_SetConfig+0x1ba>
 8006cd4:	2308      	movs	r3, #8
 8006cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cda:	e006      	b.n	8006cea <UART_SetConfig+0x1ba>
 8006cdc:	2310      	movs	r3, #16
 8006cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ce2:	e002      	b.n	8006cea <UART_SetConfig+0x1ba>
 8006ce4:	2310      	movs	r3, #16
 8006ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a51      	ldr	r2, [pc, #324]	; (8006e34 <UART_SetConfig+0x304>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d17a      	bne.n	8006dea <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006cf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cf8:	2b08      	cmp	r3, #8
 8006cfa:	d824      	bhi.n	8006d46 <UART_SetConfig+0x216>
 8006cfc:	a201      	add	r2, pc, #4	; (adr r2, 8006d04 <UART_SetConfig+0x1d4>)
 8006cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d02:	bf00      	nop
 8006d04:	08006d29 	.word	0x08006d29
 8006d08:	08006d47 	.word	0x08006d47
 8006d0c:	08006d31 	.word	0x08006d31
 8006d10:	08006d47 	.word	0x08006d47
 8006d14:	08006d37 	.word	0x08006d37
 8006d18:	08006d47 	.word	0x08006d47
 8006d1c:	08006d47 	.word	0x08006d47
 8006d20:	08006d47 	.word	0x08006d47
 8006d24:	08006d3f 	.word	0x08006d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d28:	f7fd f952 	bl	8003fd0 <HAL_RCC_GetPCLK1Freq>
 8006d2c:	61f8      	str	r0, [r7, #28]
        break;
 8006d2e:	e010      	b.n	8006d52 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d30:	4b44      	ldr	r3, [pc, #272]	; (8006e44 <UART_SetConfig+0x314>)
 8006d32:	61fb      	str	r3, [r7, #28]
        break;
 8006d34:	e00d      	b.n	8006d52 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d36:	f7fd f8b3 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 8006d3a:	61f8      	str	r0, [r7, #28]
        break;
 8006d3c:	e009      	b.n	8006d52 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d42:	61fb      	str	r3, [r7, #28]
        break;
 8006d44:	e005      	b.n	8006d52 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 8107 	beq.w	8006f68 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	685a      	ldr	r2, [r3, #4]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	005b      	lsls	r3, r3, #1
 8006d62:	4413      	add	r3, r2
 8006d64:	69fa      	ldr	r2, [r7, #28]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d305      	bcc.n	8006d76 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006d70:	69fa      	ldr	r2, [r7, #28]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d903      	bls.n	8006d7e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d7c:	e0f4      	b.n	8006f68 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	2200      	movs	r2, #0
 8006d82:	461c      	mov	r4, r3
 8006d84:	4615      	mov	r5, r2
 8006d86:	f04f 0200 	mov.w	r2, #0
 8006d8a:	f04f 0300 	mov.w	r3, #0
 8006d8e:	022b      	lsls	r3, r5, #8
 8006d90:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006d94:	0222      	lsls	r2, r4, #8
 8006d96:	68f9      	ldr	r1, [r7, #12]
 8006d98:	6849      	ldr	r1, [r1, #4]
 8006d9a:	0849      	lsrs	r1, r1, #1
 8006d9c:	2000      	movs	r0, #0
 8006d9e:	4688      	mov	r8, r1
 8006da0:	4681      	mov	r9, r0
 8006da2:	eb12 0a08 	adds.w	sl, r2, r8
 8006da6:	eb43 0b09 	adc.w	fp, r3, r9
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	603b      	str	r3, [r7, #0]
 8006db2:	607a      	str	r2, [r7, #4]
 8006db4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006db8:	4650      	mov	r0, sl
 8006dba:	4659      	mov	r1, fp
 8006dbc:	f7f9 ff44 	bl	8000c48 <__aeabi_uldivmod>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dce:	d308      	bcc.n	8006de2 <UART_SetConfig+0x2b2>
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dd6:	d204      	bcs.n	8006de2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	69ba      	ldr	r2, [r7, #24]
 8006dde:	60da      	str	r2, [r3, #12]
 8006de0:	e0c2      	b.n	8006f68 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006de8:	e0be      	b.n	8006f68 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006df2:	d16a      	bne.n	8006eca <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006df4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006df8:	2b08      	cmp	r3, #8
 8006dfa:	d834      	bhi.n	8006e66 <UART_SetConfig+0x336>
 8006dfc:	a201      	add	r2, pc, #4	; (adr r2, 8006e04 <UART_SetConfig+0x2d4>)
 8006dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e02:	bf00      	nop
 8006e04:	08006e29 	.word	0x08006e29
 8006e08:	08006e49 	.word	0x08006e49
 8006e0c:	08006e51 	.word	0x08006e51
 8006e10:	08006e67 	.word	0x08006e67
 8006e14:	08006e57 	.word	0x08006e57
 8006e18:	08006e67 	.word	0x08006e67
 8006e1c:	08006e67 	.word	0x08006e67
 8006e20:	08006e67 	.word	0x08006e67
 8006e24:	08006e5f 	.word	0x08006e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e28:	f7fd f8d2 	bl	8003fd0 <HAL_RCC_GetPCLK1Freq>
 8006e2c:	61f8      	str	r0, [r7, #28]
        break;
 8006e2e:	e020      	b.n	8006e72 <UART_SetConfig+0x342>
 8006e30:	efff69f3 	.word	0xefff69f3
 8006e34:	40008000 	.word	0x40008000
 8006e38:	40013800 	.word	0x40013800
 8006e3c:	40021000 	.word	0x40021000
 8006e40:	40004400 	.word	0x40004400
 8006e44:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e48:	f7fd f8d8 	bl	8003ffc <HAL_RCC_GetPCLK2Freq>
 8006e4c:	61f8      	str	r0, [r7, #28]
        break;
 8006e4e:	e010      	b.n	8006e72 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e50:	4b4c      	ldr	r3, [pc, #304]	; (8006f84 <UART_SetConfig+0x454>)
 8006e52:	61fb      	str	r3, [r7, #28]
        break;
 8006e54:	e00d      	b.n	8006e72 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e56:	f7fd f823 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 8006e5a:	61f8      	str	r0, [r7, #28]
        break;
 8006e5c:	e009      	b.n	8006e72 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e62:	61fb      	str	r3, [r7, #28]
        break;
 8006e64:	e005      	b.n	8006e72 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006e66:	2300      	movs	r3, #0
 8006e68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006e70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d077      	beq.n	8006f68 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	005a      	lsls	r2, r3, #1
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	085b      	lsrs	r3, r3, #1
 8006e82:	441a      	add	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e8c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	2b0f      	cmp	r3, #15
 8006e92:	d916      	bls.n	8006ec2 <UART_SetConfig+0x392>
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e9a:	d212      	bcs.n	8006ec2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	f023 030f 	bic.w	r3, r3, #15
 8006ea4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	085b      	lsrs	r3, r3, #1
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	f003 0307 	and.w	r3, r3, #7
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	8afb      	ldrh	r3, [r7, #22]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	8afa      	ldrh	r2, [r7, #22]
 8006ebe:	60da      	str	r2, [r3, #12]
 8006ec0:	e052      	b.n	8006f68 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ec8:	e04e      	b.n	8006f68 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006eca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ece:	2b08      	cmp	r3, #8
 8006ed0:	d827      	bhi.n	8006f22 <UART_SetConfig+0x3f2>
 8006ed2:	a201      	add	r2, pc, #4	; (adr r2, 8006ed8 <UART_SetConfig+0x3a8>)
 8006ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed8:	08006efd 	.word	0x08006efd
 8006edc:	08006f05 	.word	0x08006f05
 8006ee0:	08006f0d 	.word	0x08006f0d
 8006ee4:	08006f23 	.word	0x08006f23
 8006ee8:	08006f13 	.word	0x08006f13
 8006eec:	08006f23 	.word	0x08006f23
 8006ef0:	08006f23 	.word	0x08006f23
 8006ef4:	08006f23 	.word	0x08006f23
 8006ef8:	08006f1b 	.word	0x08006f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006efc:	f7fd f868 	bl	8003fd0 <HAL_RCC_GetPCLK1Freq>
 8006f00:	61f8      	str	r0, [r7, #28]
        break;
 8006f02:	e014      	b.n	8006f2e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f04:	f7fd f87a 	bl	8003ffc <HAL_RCC_GetPCLK2Freq>
 8006f08:	61f8      	str	r0, [r7, #28]
        break;
 8006f0a:	e010      	b.n	8006f2e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f0c:	4b1d      	ldr	r3, [pc, #116]	; (8006f84 <UART_SetConfig+0x454>)
 8006f0e:	61fb      	str	r3, [r7, #28]
        break;
 8006f10:	e00d      	b.n	8006f2e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f12:	f7fc ffc5 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 8006f16:	61f8      	str	r0, [r7, #28]
        break;
 8006f18:	e009      	b.n	8006f2e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f1e:	61fb      	str	r3, [r7, #28]
        break;
 8006f20:	e005      	b.n	8006f2e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006f22:	2300      	movs	r3, #0
 8006f24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006f2c:	bf00      	nop
    }

    if (pclk != 0U)
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d019      	beq.n	8006f68 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	085a      	lsrs	r2, r3, #1
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	441a      	add	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f46:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	2b0f      	cmp	r3, #15
 8006f4c:	d909      	bls.n	8006f62 <UART_SetConfig+0x432>
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f54:	d205      	bcs.n	8006f62 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	60da      	str	r2, [r3, #12]
 8006f60:	e002      	b.n	8006f68 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006f74:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3728      	adds	r7, #40	; 0x28
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f82:	bf00      	nop
 8006f84:	00f42400 	.word	0x00f42400

08006f88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f94:	f003 0301 	and.w	r3, r3, #1
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00a      	beq.n	8006fb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	430a      	orrs	r2, r1
 8006fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb6:	f003 0302 	and.w	r3, r3, #2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00a      	beq.n	8006fd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	430a      	orrs	r2, r1
 8006fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd8:	f003 0304 	and.w	r3, r3, #4
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00a      	beq.n	8006ff6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffa:	f003 0308 	and.w	r3, r3, #8
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00a      	beq.n	8007018 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	430a      	orrs	r2, r1
 8007016:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701c:	f003 0310 	and.w	r3, r3, #16
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00a      	beq.n	800703a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	430a      	orrs	r2, r1
 8007038:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703e:	f003 0320 	and.w	r3, r3, #32
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00a      	beq.n	800705c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	430a      	orrs	r2, r1
 800705a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007064:	2b00      	cmp	r3, #0
 8007066:	d01a      	beq.n	800709e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	430a      	orrs	r2, r1
 800707c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007082:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007086:	d10a      	bne.n	800709e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	430a      	orrs	r2, r1
 800709c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00a      	beq.n	80070c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	430a      	orrs	r2, r1
 80070be:	605a      	str	r2, [r3, #4]
  }
}
 80070c0:	bf00      	nop
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af02      	add	r7, sp, #8
 80070d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070dc:	f7fb fbee 	bl	80028bc <HAL_GetTick>
 80070e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0308 	and.w	r3, r3, #8
 80070ec:	2b08      	cmp	r3, #8
 80070ee:	d10e      	bne.n	800710e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070f4:	9300      	str	r3, [sp, #0]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f82d 	bl	800715e <UART_WaitOnFlagUntilTimeout>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d001      	beq.n	800710e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e023      	b.n	8007156 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0304 	and.w	r3, r3, #4
 8007118:	2b04      	cmp	r3, #4
 800711a:	d10e      	bne.n	800713a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800711c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f817 	bl	800715e <UART_WaitOnFlagUntilTimeout>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d001      	beq.n	800713a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e00d      	b.n	8007156 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2220      	movs	r2, #32
 800713e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2220      	movs	r2, #32
 8007144:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b09c      	sub	sp, #112	; 0x70
 8007162:	af00      	add	r7, sp, #0
 8007164:	60f8      	str	r0, [r7, #12]
 8007166:	60b9      	str	r1, [r7, #8]
 8007168:	603b      	str	r3, [r7, #0]
 800716a:	4613      	mov	r3, r2
 800716c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800716e:	e0a5      	b.n	80072bc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007170:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007176:	f000 80a1 	beq.w	80072bc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800717a:	f7fb fb9f 	bl	80028bc <HAL_GetTick>
 800717e:	4602      	mov	r2, r0
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	1ad3      	subs	r3, r2, r3
 8007184:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007186:	429a      	cmp	r2, r3
 8007188:	d302      	bcc.n	8007190 <UART_WaitOnFlagUntilTimeout+0x32>
 800718a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800718c:	2b00      	cmp	r3, #0
 800718e:	d13e      	bne.n	800720e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007198:	e853 3f00 	ldrex	r3, [r3]
 800719c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800719e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071a4:	667b      	str	r3, [r7, #100]	; 0x64
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	461a      	mov	r2, r3
 80071ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071b0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80071b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80071b6:	e841 2300 	strex	r3, r2, [r1]
 80071ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80071bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1e6      	bne.n	8007190 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	3308      	adds	r3, #8
 80071c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071cc:	e853 3f00 	ldrex	r3, [r3]
 80071d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d4:	f023 0301 	bic.w	r3, r3, #1
 80071d8:	663b      	str	r3, [r7, #96]	; 0x60
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	3308      	adds	r3, #8
 80071e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80071e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80071e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80071e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071ea:	e841 2300 	strex	r3, r2, [r1]
 80071ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80071f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1e5      	bne.n	80071c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2220      	movs	r2, #32
 80071fa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2220      	movs	r2, #32
 8007200:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800720a:	2303      	movs	r3, #3
 800720c:	e067      	b.n	80072de <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0304 	and.w	r3, r3, #4
 8007218:	2b00      	cmp	r3, #0
 800721a:	d04f      	beq.n	80072bc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	69db      	ldr	r3, [r3, #28]
 8007222:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800722a:	d147      	bne.n	80072bc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007234:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723e:	e853 3f00 	ldrex	r3, [r3]
 8007242:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800724a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	461a      	mov	r2, r3
 8007252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007254:	637b      	str	r3, [r7, #52]	; 0x34
 8007256:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007258:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800725a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800725c:	e841 2300 	strex	r3, r2, [r1]
 8007260:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1e6      	bne.n	8007236 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	3308      	adds	r3, #8
 800726e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	e853 3f00 	ldrex	r3, [r3]
 8007276:	613b      	str	r3, [r7, #16]
   return(result);
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	f023 0301 	bic.w	r3, r3, #1
 800727e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3308      	adds	r3, #8
 8007286:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007288:	623a      	str	r2, [r7, #32]
 800728a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728c:	69f9      	ldr	r1, [r7, #28]
 800728e:	6a3a      	ldr	r2, [r7, #32]
 8007290:	e841 2300 	strex	r3, r2, [r1]
 8007294:	61bb      	str	r3, [r7, #24]
   return(result);
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1e5      	bne.n	8007268 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2220      	movs	r2, #32
 80072a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2220      	movs	r2, #32
 80072a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2220      	movs	r2, #32
 80072ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e010      	b.n	80072de <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	69da      	ldr	r2, [r3, #28]
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	4013      	ands	r3, r2
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	bf0c      	ite	eq
 80072cc:	2301      	moveq	r3, #1
 80072ce:	2300      	movne	r3, #0
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	461a      	mov	r2, r3
 80072d4:	79fb      	ldrb	r3, [r7, #7]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	f43f af4a 	beq.w	8007170 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3770      	adds	r7, #112	; 0x70
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
	...

080072e8 <__errno>:
 80072e8:	4b01      	ldr	r3, [pc, #4]	; (80072f0 <__errno+0x8>)
 80072ea:	6818      	ldr	r0, [r3, #0]
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	20000018 	.word	0x20000018

080072f4 <__libc_init_array>:
 80072f4:	b570      	push	{r4, r5, r6, lr}
 80072f6:	4d0d      	ldr	r5, [pc, #52]	; (800732c <__libc_init_array+0x38>)
 80072f8:	4c0d      	ldr	r4, [pc, #52]	; (8007330 <__libc_init_array+0x3c>)
 80072fa:	1b64      	subs	r4, r4, r5
 80072fc:	10a4      	asrs	r4, r4, #2
 80072fe:	2600      	movs	r6, #0
 8007300:	42a6      	cmp	r6, r4
 8007302:	d109      	bne.n	8007318 <__libc_init_array+0x24>
 8007304:	4d0b      	ldr	r5, [pc, #44]	; (8007334 <__libc_init_array+0x40>)
 8007306:	4c0c      	ldr	r4, [pc, #48]	; (8007338 <__libc_init_array+0x44>)
 8007308:	f003 fdd4 	bl	800aeb4 <_init>
 800730c:	1b64      	subs	r4, r4, r5
 800730e:	10a4      	asrs	r4, r4, #2
 8007310:	2600      	movs	r6, #0
 8007312:	42a6      	cmp	r6, r4
 8007314:	d105      	bne.n	8007322 <__libc_init_array+0x2e>
 8007316:	bd70      	pop	{r4, r5, r6, pc}
 8007318:	f855 3b04 	ldr.w	r3, [r5], #4
 800731c:	4798      	blx	r3
 800731e:	3601      	adds	r6, #1
 8007320:	e7ee      	b.n	8007300 <__libc_init_array+0xc>
 8007322:	f855 3b04 	ldr.w	r3, [r5], #4
 8007326:	4798      	blx	r3
 8007328:	3601      	adds	r6, #1
 800732a:	e7f2      	b.n	8007312 <__libc_init_array+0x1e>
 800732c:	0800f220 	.word	0x0800f220
 8007330:	0800f220 	.word	0x0800f220
 8007334:	0800f220 	.word	0x0800f220
 8007338:	0800f224 	.word	0x0800f224

0800733c <memset>:
 800733c:	4402      	add	r2, r0
 800733e:	4603      	mov	r3, r0
 8007340:	4293      	cmp	r3, r2
 8007342:	d100      	bne.n	8007346 <memset+0xa>
 8007344:	4770      	bx	lr
 8007346:	f803 1b01 	strb.w	r1, [r3], #1
 800734a:	e7f9      	b.n	8007340 <memset+0x4>

0800734c <__cvt>:
 800734c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007350:	ec55 4b10 	vmov	r4, r5, d0
 8007354:	2d00      	cmp	r5, #0
 8007356:	460e      	mov	r6, r1
 8007358:	4619      	mov	r1, r3
 800735a:	462b      	mov	r3, r5
 800735c:	bfbb      	ittet	lt
 800735e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007362:	461d      	movlt	r5, r3
 8007364:	2300      	movge	r3, #0
 8007366:	232d      	movlt	r3, #45	; 0x2d
 8007368:	700b      	strb	r3, [r1, #0]
 800736a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800736c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007370:	4691      	mov	r9, r2
 8007372:	f023 0820 	bic.w	r8, r3, #32
 8007376:	bfbc      	itt	lt
 8007378:	4622      	movlt	r2, r4
 800737a:	4614      	movlt	r4, r2
 800737c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007380:	d005      	beq.n	800738e <__cvt+0x42>
 8007382:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007386:	d100      	bne.n	800738a <__cvt+0x3e>
 8007388:	3601      	adds	r6, #1
 800738a:	2102      	movs	r1, #2
 800738c:	e000      	b.n	8007390 <__cvt+0x44>
 800738e:	2103      	movs	r1, #3
 8007390:	ab03      	add	r3, sp, #12
 8007392:	9301      	str	r3, [sp, #4]
 8007394:	ab02      	add	r3, sp, #8
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	ec45 4b10 	vmov	d0, r4, r5
 800739c:	4653      	mov	r3, sl
 800739e:	4632      	mov	r2, r6
 80073a0:	f000 fcea 	bl	8007d78 <_dtoa_r>
 80073a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80073a8:	4607      	mov	r7, r0
 80073aa:	d102      	bne.n	80073b2 <__cvt+0x66>
 80073ac:	f019 0f01 	tst.w	r9, #1
 80073b0:	d022      	beq.n	80073f8 <__cvt+0xac>
 80073b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80073b6:	eb07 0906 	add.w	r9, r7, r6
 80073ba:	d110      	bne.n	80073de <__cvt+0x92>
 80073bc:	783b      	ldrb	r3, [r7, #0]
 80073be:	2b30      	cmp	r3, #48	; 0x30
 80073c0:	d10a      	bne.n	80073d8 <__cvt+0x8c>
 80073c2:	2200      	movs	r2, #0
 80073c4:	2300      	movs	r3, #0
 80073c6:	4620      	mov	r0, r4
 80073c8:	4629      	mov	r1, r5
 80073ca:	f7f9 fb7d 	bl	8000ac8 <__aeabi_dcmpeq>
 80073ce:	b918      	cbnz	r0, 80073d8 <__cvt+0x8c>
 80073d0:	f1c6 0601 	rsb	r6, r6, #1
 80073d4:	f8ca 6000 	str.w	r6, [sl]
 80073d8:	f8da 3000 	ldr.w	r3, [sl]
 80073dc:	4499      	add	r9, r3
 80073de:	2200      	movs	r2, #0
 80073e0:	2300      	movs	r3, #0
 80073e2:	4620      	mov	r0, r4
 80073e4:	4629      	mov	r1, r5
 80073e6:	f7f9 fb6f 	bl	8000ac8 <__aeabi_dcmpeq>
 80073ea:	b108      	cbz	r0, 80073f0 <__cvt+0xa4>
 80073ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80073f0:	2230      	movs	r2, #48	; 0x30
 80073f2:	9b03      	ldr	r3, [sp, #12]
 80073f4:	454b      	cmp	r3, r9
 80073f6:	d307      	bcc.n	8007408 <__cvt+0xbc>
 80073f8:	9b03      	ldr	r3, [sp, #12]
 80073fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073fc:	1bdb      	subs	r3, r3, r7
 80073fe:	4638      	mov	r0, r7
 8007400:	6013      	str	r3, [r2, #0]
 8007402:	b004      	add	sp, #16
 8007404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007408:	1c59      	adds	r1, r3, #1
 800740a:	9103      	str	r1, [sp, #12]
 800740c:	701a      	strb	r2, [r3, #0]
 800740e:	e7f0      	b.n	80073f2 <__cvt+0xa6>

08007410 <__exponent>:
 8007410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007412:	4603      	mov	r3, r0
 8007414:	2900      	cmp	r1, #0
 8007416:	bfb8      	it	lt
 8007418:	4249      	neglt	r1, r1
 800741a:	f803 2b02 	strb.w	r2, [r3], #2
 800741e:	bfb4      	ite	lt
 8007420:	222d      	movlt	r2, #45	; 0x2d
 8007422:	222b      	movge	r2, #43	; 0x2b
 8007424:	2909      	cmp	r1, #9
 8007426:	7042      	strb	r2, [r0, #1]
 8007428:	dd2a      	ble.n	8007480 <__exponent+0x70>
 800742a:	f10d 0407 	add.w	r4, sp, #7
 800742e:	46a4      	mov	ip, r4
 8007430:	270a      	movs	r7, #10
 8007432:	46a6      	mov	lr, r4
 8007434:	460a      	mov	r2, r1
 8007436:	fb91 f6f7 	sdiv	r6, r1, r7
 800743a:	fb07 1516 	mls	r5, r7, r6, r1
 800743e:	3530      	adds	r5, #48	; 0x30
 8007440:	2a63      	cmp	r2, #99	; 0x63
 8007442:	f104 34ff 	add.w	r4, r4, #4294967295
 8007446:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800744a:	4631      	mov	r1, r6
 800744c:	dcf1      	bgt.n	8007432 <__exponent+0x22>
 800744e:	3130      	adds	r1, #48	; 0x30
 8007450:	f1ae 0502 	sub.w	r5, lr, #2
 8007454:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007458:	1c44      	adds	r4, r0, #1
 800745a:	4629      	mov	r1, r5
 800745c:	4561      	cmp	r1, ip
 800745e:	d30a      	bcc.n	8007476 <__exponent+0x66>
 8007460:	f10d 0209 	add.w	r2, sp, #9
 8007464:	eba2 020e 	sub.w	r2, r2, lr
 8007468:	4565      	cmp	r5, ip
 800746a:	bf88      	it	hi
 800746c:	2200      	movhi	r2, #0
 800746e:	4413      	add	r3, r2
 8007470:	1a18      	subs	r0, r3, r0
 8007472:	b003      	add	sp, #12
 8007474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007476:	f811 2b01 	ldrb.w	r2, [r1], #1
 800747a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800747e:	e7ed      	b.n	800745c <__exponent+0x4c>
 8007480:	2330      	movs	r3, #48	; 0x30
 8007482:	3130      	adds	r1, #48	; 0x30
 8007484:	7083      	strb	r3, [r0, #2]
 8007486:	70c1      	strb	r1, [r0, #3]
 8007488:	1d03      	adds	r3, r0, #4
 800748a:	e7f1      	b.n	8007470 <__exponent+0x60>

0800748c <_printf_float>:
 800748c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007490:	ed2d 8b02 	vpush	{d8}
 8007494:	b08d      	sub	sp, #52	; 0x34
 8007496:	460c      	mov	r4, r1
 8007498:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800749c:	4616      	mov	r6, r2
 800749e:	461f      	mov	r7, r3
 80074a0:	4605      	mov	r5, r0
 80074a2:	f001 fa69 	bl	8008978 <_localeconv_r>
 80074a6:	f8d0 a000 	ldr.w	sl, [r0]
 80074aa:	4650      	mov	r0, sl
 80074ac:	f7f8 fe90 	bl	80001d0 <strlen>
 80074b0:	2300      	movs	r3, #0
 80074b2:	930a      	str	r3, [sp, #40]	; 0x28
 80074b4:	6823      	ldr	r3, [r4, #0]
 80074b6:	9305      	str	r3, [sp, #20]
 80074b8:	f8d8 3000 	ldr.w	r3, [r8]
 80074bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80074c0:	3307      	adds	r3, #7
 80074c2:	f023 0307 	bic.w	r3, r3, #7
 80074c6:	f103 0208 	add.w	r2, r3, #8
 80074ca:	f8c8 2000 	str.w	r2, [r8]
 80074ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80074d6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80074da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80074de:	9307      	str	r3, [sp, #28]
 80074e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80074e4:	ee08 0a10 	vmov	s16, r0
 80074e8:	4b9f      	ldr	r3, [pc, #636]	; (8007768 <_printf_float+0x2dc>)
 80074ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074ee:	f04f 32ff 	mov.w	r2, #4294967295
 80074f2:	f7f9 fb1b 	bl	8000b2c <__aeabi_dcmpun>
 80074f6:	bb88      	cbnz	r0, 800755c <_printf_float+0xd0>
 80074f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074fc:	4b9a      	ldr	r3, [pc, #616]	; (8007768 <_printf_float+0x2dc>)
 80074fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007502:	f7f9 faf5 	bl	8000af0 <__aeabi_dcmple>
 8007506:	bb48      	cbnz	r0, 800755c <_printf_float+0xd0>
 8007508:	2200      	movs	r2, #0
 800750a:	2300      	movs	r3, #0
 800750c:	4640      	mov	r0, r8
 800750e:	4649      	mov	r1, r9
 8007510:	f7f9 fae4 	bl	8000adc <__aeabi_dcmplt>
 8007514:	b110      	cbz	r0, 800751c <_printf_float+0x90>
 8007516:	232d      	movs	r3, #45	; 0x2d
 8007518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800751c:	4b93      	ldr	r3, [pc, #588]	; (800776c <_printf_float+0x2e0>)
 800751e:	4894      	ldr	r0, [pc, #592]	; (8007770 <_printf_float+0x2e4>)
 8007520:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007524:	bf94      	ite	ls
 8007526:	4698      	movls	r8, r3
 8007528:	4680      	movhi	r8, r0
 800752a:	2303      	movs	r3, #3
 800752c:	6123      	str	r3, [r4, #16]
 800752e:	9b05      	ldr	r3, [sp, #20]
 8007530:	f023 0204 	bic.w	r2, r3, #4
 8007534:	6022      	str	r2, [r4, #0]
 8007536:	f04f 0900 	mov.w	r9, #0
 800753a:	9700      	str	r7, [sp, #0]
 800753c:	4633      	mov	r3, r6
 800753e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007540:	4621      	mov	r1, r4
 8007542:	4628      	mov	r0, r5
 8007544:	f000 f9d8 	bl	80078f8 <_printf_common>
 8007548:	3001      	adds	r0, #1
 800754a:	f040 8090 	bne.w	800766e <_printf_float+0x1e2>
 800754e:	f04f 30ff 	mov.w	r0, #4294967295
 8007552:	b00d      	add	sp, #52	; 0x34
 8007554:	ecbd 8b02 	vpop	{d8}
 8007558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800755c:	4642      	mov	r2, r8
 800755e:	464b      	mov	r3, r9
 8007560:	4640      	mov	r0, r8
 8007562:	4649      	mov	r1, r9
 8007564:	f7f9 fae2 	bl	8000b2c <__aeabi_dcmpun>
 8007568:	b140      	cbz	r0, 800757c <_printf_float+0xf0>
 800756a:	464b      	mov	r3, r9
 800756c:	2b00      	cmp	r3, #0
 800756e:	bfbc      	itt	lt
 8007570:	232d      	movlt	r3, #45	; 0x2d
 8007572:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007576:	487f      	ldr	r0, [pc, #508]	; (8007774 <_printf_float+0x2e8>)
 8007578:	4b7f      	ldr	r3, [pc, #508]	; (8007778 <_printf_float+0x2ec>)
 800757a:	e7d1      	b.n	8007520 <_printf_float+0x94>
 800757c:	6863      	ldr	r3, [r4, #4]
 800757e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007582:	9206      	str	r2, [sp, #24]
 8007584:	1c5a      	adds	r2, r3, #1
 8007586:	d13f      	bne.n	8007608 <_printf_float+0x17c>
 8007588:	2306      	movs	r3, #6
 800758a:	6063      	str	r3, [r4, #4]
 800758c:	9b05      	ldr	r3, [sp, #20]
 800758e:	6861      	ldr	r1, [r4, #4]
 8007590:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007594:	2300      	movs	r3, #0
 8007596:	9303      	str	r3, [sp, #12]
 8007598:	ab0a      	add	r3, sp, #40	; 0x28
 800759a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800759e:	ab09      	add	r3, sp, #36	; 0x24
 80075a0:	ec49 8b10 	vmov	d0, r8, r9
 80075a4:	9300      	str	r3, [sp, #0]
 80075a6:	6022      	str	r2, [r4, #0]
 80075a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80075ac:	4628      	mov	r0, r5
 80075ae:	f7ff fecd 	bl	800734c <__cvt>
 80075b2:	9b06      	ldr	r3, [sp, #24]
 80075b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075b6:	2b47      	cmp	r3, #71	; 0x47
 80075b8:	4680      	mov	r8, r0
 80075ba:	d108      	bne.n	80075ce <_printf_float+0x142>
 80075bc:	1cc8      	adds	r0, r1, #3
 80075be:	db02      	blt.n	80075c6 <_printf_float+0x13a>
 80075c0:	6863      	ldr	r3, [r4, #4]
 80075c2:	4299      	cmp	r1, r3
 80075c4:	dd41      	ble.n	800764a <_printf_float+0x1be>
 80075c6:	f1ab 0b02 	sub.w	fp, fp, #2
 80075ca:	fa5f fb8b 	uxtb.w	fp, fp
 80075ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80075d2:	d820      	bhi.n	8007616 <_printf_float+0x18a>
 80075d4:	3901      	subs	r1, #1
 80075d6:	465a      	mov	r2, fp
 80075d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80075dc:	9109      	str	r1, [sp, #36]	; 0x24
 80075de:	f7ff ff17 	bl	8007410 <__exponent>
 80075e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075e4:	1813      	adds	r3, r2, r0
 80075e6:	2a01      	cmp	r2, #1
 80075e8:	4681      	mov	r9, r0
 80075ea:	6123      	str	r3, [r4, #16]
 80075ec:	dc02      	bgt.n	80075f4 <_printf_float+0x168>
 80075ee:	6822      	ldr	r2, [r4, #0]
 80075f0:	07d2      	lsls	r2, r2, #31
 80075f2:	d501      	bpl.n	80075f8 <_printf_float+0x16c>
 80075f4:	3301      	adds	r3, #1
 80075f6:	6123      	str	r3, [r4, #16]
 80075f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d09c      	beq.n	800753a <_printf_float+0xae>
 8007600:	232d      	movs	r3, #45	; 0x2d
 8007602:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007606:	e798      	b.n	800753a <_printf_float+0xae>
 8007608:	9a06      	ldr	r2, [sp, #24]
 800760a:	2a47      	cmp	r2, #71	; 0x47
 800760c:	d1be      	bne.n	800758c <_printf_float+0x100>
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1bc      	bne.n	800758c <_printf_float+0x100>
 8007612:	2301      	movs	r3, #1
 8007614:	e7b9      	b.n	800758a <_printf_float+0xfe>
 8007616:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800761a:	d118      	bne.n	800764e <_printf_float+0x1c2>
 800761c:	2900      	cmp	r1, #0
 800761e:	6863      	ldr	r3, [r4, #4]
 8007620:	dd0b      	ble.n	800763a <_printf_float+0x1ae>
 8007622:	6121      	str	r1, [r4, #16]
 8007624:	b913      	cbnz	r3, 800762c <_printf_float+0x1a0>
 8007626:	6822      	ldr	r2, [r4, #0]
 8007628:	07d0      	lsls	r0, r2, #31
 800762a:	d502      	bpl.n	8007632 <_printf_float+0x1a6>
 800762c:	3301      	adds	r3, #1
 800762e:	440b      	add	r3, r1
 8007630:	6123      	str	r3, [r4, #16]
 8007632:	65a1      	str	r1, [r4, #88]	; 0x58
 8007634:	f04f 0900 	mov.w	r9, #0
 8007638:	e7de      	b.n	80075f8 <_printf_float+0x16c>
 800763a:	b913      	cbnz	r3, 8007642 <_printf_float+0x1b6>
 800763c:	6822      	ldr	r2, [r4, #0]
 800763e:	07d2      	lsls	r2, r2, #31
 8007640:	d501      	bpl.n	8007646 <_printf_float+0x1ba>
 8007642:	3302      	adds	r3, #2
 8007644:	e7f4      	b.n	8007630 <_printf_float+0x1a4>
 8007646:	2301      	movs	r3, #1
 8007648:	e7f2      	b.n	8007630 <_printf_float+0x1a4>
 800764a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800764e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007650:	4299      	cmp	r1, r3
 8007652:	db05      	blt.n	8007660 <_printf_float+0x1d4>
 8007654:	6823      	ldr	r3, [r4, #0]
 8007656:	6121      	str	r1, [r4, #16]
 8007658:	07d8      	lsls	r0, r3, #31
 800765a:	d5ea      	bpl.n	8007632 <_printf_float+0x1a6>
 800765c:	1c4b      	adds	r3, r1, #1
 800765e:	e7e7      	b.n	8007630 <_printf_float+0x1a4>
 8007660:	2900      	cmp	r1, #0
 8007662:	bfd4      	ite	le
 8007664:	f1c1 0202 	rsble	r2, r1, #2
 8007668:	2201      	movgt	r2, #1
 800766a:	4413      	add	r3, r2
 800766c:	e7e0      	b.n	8007630 <_printf_float+0x1a4>
 800766e:	6823      	ldr	r3, [r4, #0]
 8007670:	055a      	lsls	r2, r3, #21
 8007672:	d407      	bmi.n	8007684 <_printf_float+0x1f8>
 8007674:	6923      	ldr	r3, [r4, #16]
 8007676:	4642      	mov	r2, r8
 8007678:	4631      	mov	r1, r6
 800767a:	4628      	mov	r0, r5
 800767c:	47b8      	blx	r7
 800767e:	3001      	adds	r0, #1
 8007680:	d12c      	bne.n	80076dc <_printf_float+0x250>
 8007682:	e764      	b.n	800754e <_printf_float+0xc2>
 8007684:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007688:	f240 80e0 	bls.w	800784c <_printf_float+0x3c0>
 800768c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007690:	2200      	movs	r2, #0
 8007692:	2300      	movs	r3, #0
 8007694:	f7f9 fa18 	bl	8000ac8 <__aeabi_dcmpeq>
 8007698:	2800      	cmp	r0, #0
 800769a:	d034      	beq.n	8007706 <_printf_float+0x27a>
 800769c:	4a37      	ldr	r2, [pc, #220]	; (800777c <_printf_float+0x2f0>)
 800769e:	2301      	movs	r3, #1
 80076a0:	4631      	mov	r1, r6
 80076a2:	4628      	mov	r0, r5
 80076a4:	47b8      	blx	r7
 80076a6:	3001      	adds	r0, #1
 80076a8:	f43f af51 	beq.w	800754e <_printf_float+0xc2>
 80076ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076b0:	429a      	cmp	r2, r3
 80076b2:	db02      	blt.n	80076ba <_printf_float+0x22e>
 80076b4:	6823      	ldr	r3, [r4, #0]
 80076b6:	07d8      	lsls	r0, r3, #31
 80076b8:	d510      	bpl.n	80076dc <_printf_float+0x250>
 80076ba:	ee18 3a10 	vmov	r3, s16
 80076be:	4652      	mov	r2, sl
 80076c0:	4631      	mov	r1, r6
 80076c2:	4628      	mov	r0, r5
 80076c4:	47b8      	blx	r7
 80076c6:	3001      	adds	r0, #1
 80076c8:	f43f af41 	beq.w	800754e <_printf_float+0xc2>
 80076cc:	f04f 0800 	mov.w	r8, #0
 80076d0:	f104 091a 	add.w	r9, r4, #26
 80076d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076d6:	3b01      	subs	r3, #1
 80076d8:	4543      	cmp	r3, r8
 80076da:	dc09      	bgt.n	80076f0 <_printf_float+0x264>
 80076dc:	6823      	ldr	r3, [r4, #0]
 80076de:	079b      	lsls	r3, r3, #30
 80076e0:	f100 8105 	bmi.w	80078ee <_printf_float+0x462>
 80076e4:	68e0      	ldr	r0, [r4, #12]
 80076e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076e8:	4298      	cmp	r0, r3
 80076ea:	bfb8      	it	lt
 80076ec:	4618      	movlt	r0, r3
 80076ee:	e730      	b.n	8007552 <_printf_float+0xc6>
 80076f0:	2301      	movs	r3, #1
 80076f2:	464a      	mov	r2, r9
 80076f4:	4631      	mov	r1, r6
 80076f6:	4628      	mov	r0, r5
 80076f8:	47b8      	blx	r7
 80076fa:	3001      	adds	r0, #1
 80076fc:	f43f af27 	beq.w	800754e <_printf_float+0xc2>
 8007700:	f108 0801 	add.w	r8, r8, #1
 8007704:	e7e6      	b.n	80076d4 <_printf_float+0x248>
 8007706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007708:	2b00      	cmp	r3, #0
 800770a:	dc39      	bgt.n	8007780 <_printf_float+0x2f4>
 800770c:	4a1b      	ldr	r2, [pc, #108]	; (800777c <_printf_float+0x2f0>)
 800770e:	2301      	movs	r3, #1
 8007710:	4631      	mov	r1, r6
 8007712:	4628      	mov	r0, r5
 8007714:	47b8      	blx	r7
 8007716:	3001      	adds	r0, #1
 8007718:	f43f af19 	beq.w	800754e <_printf_float+0xc2>
 800771c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007720:	4313      	orrs	r3, r2
 8007722:	d102      	bne.n	800772a <_printf_float+0x29e>
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	07d9      	lsls	r1, r3, #31
 8007728:	d5d8      	bpl.n	80076dc <_printf_float+0x250>
 800772a:	ee18 3a10 	vmov	r3, s16
 800772e:	4652      	mov	r2, sl
 8007730:	4631      	mov	r1, r6
 8007732:	4628      	mov	r0, r5
 8007734:	47b8      	blx	r7
 8007736:	3001      	adds	r0, #1
 8007738:	f43f af09 	beq.w	800754e <_printf_float+0xc2>
 800773c:	f04f 0900 	mov.w	r9, #0
 8007740:	f104 0a1a 	add.w	sl, r4, #26
 8007744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007746:	425b      	negs	r3, r3
 8007748:	454b      	cmp	r3, r9
 800774a:	dc01      	bgt.n	8007750 <_printf_float+0x2c4>
 800774c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800774e:	e792      	b.n	8007676 <_printf_float+0x1ea>
 8007750:	2301      	movs	r3, #1
 8007752:	4652      	mov	r2, sl
 8007754:	4631      	mov	r1, r6
 8007756:	4628      	mov	r0, r5
 8007758:	47b8      	blx	r7
 800775a:	3001      	adds	r0, #1
 800775c:	f43f aef7 	beq.w	800754e <_printf_float+0xc2>
 8007760:	f109 0901 	add.w	r9, r9, #1
 8007764:	e7ee      	b.n	8007744 <_printf_float+0x2b8>
 8007766:	bf00      	nop
 8007768:	7fefffff 	.word	0x7fefffff
 800776c:	0800ec64 	.word	0x0800ec64
 8007770:	0800ec68 	.word	0x0800ec68
 8007774:	0800ec70 	.word	0x0800ec70
 8007778:	0800ec6c 	.word	0x0800ec6c
 800777c:	0800ec74 	.word	0x0800ec74
 8007780:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007782:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007784:	429a      	cmp	r2, r3
 8007786:	bfa8      	it	ge
 8007788:	461a      	movge	r2, r3
 800778a:	2a00      	cmp	r2, #0
 800778c:	4691      	mov	r9, r2
 800778e:	dc37      	bgt.n	8007800 <_printf_float+0x374>
 8007790:	f04f 0b00 	mov.w	fp, #0
 8007794:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007798:	f104 021a 	add.w	r2, r4, #26
 800779c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800779e:	9305      	str	r3, [sp, #20]
 80077a0:	eba3 0309 	sub.w	r3, r3, r9
 80077a4:	455b      	cmp	r3, fp
 80077a6:	dc33      	bgt.n	8007810 <_printf_float+0x384>
 80077a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077ac:	429a      	cmp	r2, r3
 80077ae:	db3b      	blt.n	8007828 <_printf_float+0x39c>
 80077b0:	6823      	ldr	r3, [r4, #0]
 80077b2:	07da      	lsls	r2, r3, #31
 80077b4:	d438      	bmi.n	8007828 <_printf_float+0x39c>
 80077b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077b8:	9a05      	ldr	r2, [sp, #20]
 80077ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077bc:	1a9a      	subs	r2, r3, r2
 80077be:	eba3 0901 	sub.w	r9, r3, r1
 80077c2:	4591      	cmp	r9, r2
 80077c4:	bfa8      	it	ge
 80077c6:	4691      	movge	r9, r2
 80077c8:	f1b9 0f00 	cmp.w	r9, #0
 80077cc:	dc35      	bgt.n	800783a <_printf_float+0x3ae>
 80077ce:	f04f 0800 	mov.w	r8, #0
 80077d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077d6:	f104 0a1a 	add.w	sl, r4, #26
 80077da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077de:	1a9b      	subs	r3, r3, r2
 80077e0:	eba3 0309 	sub.w	r3, r3, r9
 80077e4:	4543      	cmp	r3, r8
 80077e6:	f77f af79 	ble.w	80076dc <_printf_float+0x250>
 80077ea:	2301      	movs	r3, #1
 80077ec:	4652      	mov	r2, sl
 80077ee:	4631      	mov	r1, r6
 80077f0:	4628      	mov	r0, r5
 80077f2:	47b8      	blx	r7
 80077f4:	3001      	adds	r0, #1
 80077f6:	f43f aeaa 	beq.w	800754e <_printf_float+0xc2>
 80077fa:	f108 0801 	add.w	r8, r8, #1
 80077fe:	e7ec      	b.n	80077da <_printf_float+0x34e>
 8007800:	4613      	mov	r3, r2
 8007802:	4631      	mov	r1, r6
 8007804:	4642      	mov	r2, r8
 8007806:	4628      	mov	r0, r5
 8007808:	47b8      	blx	r7
 800780a:	3001      	adds	r0, #1
 800780c:	d1c0      	bne.n	8007790 <_printf_float+0x304>
 800780e:	e69e      	b.n	800754e <_printf_float+0xc2>
 8007810:	2301      	movs	r3, #1
 8007812:	4631      	mov	r1, r6
 8007814:	4628      	mov	r0, r5
 8007816:	9205      	str	r2, [sp, #20]
 8007818:	47b8      	blx	r7
 800781a:	3001      	adds	r0, #1
 800781c:	f43f ae97 	beq.w	800754e <_printf_float+0xc2>
 8007820:	9a05      	ldr	r2, [sp, #20]
 8007822:	f10b 0b01 	add.w	fp, fp, #1
 8007826:	e7b9      	b.n	800779c <_printf_float+0x310>
 8007828:	ee18 3a10 	vmov	r3, s16
 800782c:	4652      	mov	r2, sl
 800782e:	4631      	mov	r1, r6
 8007830:	4628      	mov	r0, r5
 8007832:	47b8      	blx	r7
 8007834:	3001      	adds	r0, #1
 8007836:	d1be      	bne.n	80077b6 <_printf_float+0x32a>
 8007838:	e689      	b.n	800754e <_printf_float+0xc2>
 800783a:	9a05      	ldr	r2, [sp, #20]
 800783c:	464b      	mov	r3, r9
 800783e:	4442      	add	r2, r8
 8007840:	4631      	mov	r1, r6
 8007842:	4628      	mov	r0, r5
 8007844:	47b8      	blx	r7
 8007846:	3001      	adds	r0, #1
 8007848:	d1c1      	bne.n	80077ce <_printf_float+0x342>
 800784a:	e680      	b.n	800754e <_printf_float+0xc2>
 800784c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800784e:	2a01      	cmp	r2, #1
 8007850:	dc01      	bgt.n	8007856 <_printf_float+0x3ca>
 8007852:	07db      	lsls	r3, r3, #31
 8007854:	d538      	bpl.n	80078c8 <_printf_float+0x43c>
 8007856:	2301      	movs	r3, #1
 8007858:	4642      	mov	r2, r8
 800785a:	4631      	mov	r1, r6
 800785c:	4628      	mov	r0, r5
 800785e:	47b8      	blx	r7
 8007860:	3001      	adds	r0, #1
 8007862:	f43f ae74 	beq.w	800754e <_printf_float+0xc2>
 8007866:	ee18 3a10 	vmov	r3, s16
 800786a:	4652      	mov	r2, sl
 800786c:	4631      	mov	r1, r6
 800786e:	4628      	mov	r0, r5
 8007870:	47b8      	blx	r7
 8007872:	3001      	adds	r0, #1
 8007874:	f43f ae6b 	beq.w	800754e <_printf_float+0xc2>
 8007878:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800787c:	2200      	movs	r2, #0
 800787e:	2300      	movs	r3, #0
 8007880:	f7f9 f922 	bl	8000ac8 <__aeabi_dcmpeq>
 8007884:	b9d8      	cbnz	r0, 80078be <_printf_float+0x432>
 8007886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007888:	f108 0201 	add.w	r2, r8, #1
 800788c:	3b01      	subs	r3, #1
 800788e:	4631      	mov	r1, r6
 8007890:	4628      	mov	r0, r5
 8007892:	47b8      	blx	r7
 8007894:	3001      	adds	r0, #1
 8007896:	d10e      	bne.n	80078b6 <_printf_float+0x42a>
 8007898:	e659      	b.n	800754e <_printf_float+0xc2>
 800789a:	2301      	movs	r3, #1
 800789c:	4652      	mov	r2, sl
 800789e:	4631      	mov	r1, r6
 80078a0:	4628      	mov	r0, r5
 80078a2:	47b8      	blx	r7
 80078a4:	3001      	adds	r0, #1
 80078a6:	f43f ae52 	beq.w	800754e <_printf_float+0xc2>
 80078aa:	f108 0801 	add.w	r8, r8, #1
 80078ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078b0:	3b01      	subs	r3, #1
 80078b2:	4543      	cmp	r3, r8
 80078b4:	dcf1      	bgt.n	800789a <_printf_float+0x40e>
 80078b6:	464b      	mov	r3, r9
 80078b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80078bc:	e6dc      	b.n	8007678 <_printf_float+0x1ec>
 80078be:	f04f 0800 	mov.w	r8, #0
 80078c2:	f104 0a1a 	add.w	sl, r4, #26
 80078c6:	e7f2      	b.n	80078ae <_printf_float+0x422>
 80078c8:	2301      	movs	r3, #1
 80078ca:	4642      	mov	r2, r8
 80078cc:	e7df      	b.n	800788e <_printf_float+0x402>
 80078ce:	2301      	movs	r3, #1
 80078d0:	464a      	mov	r2, r9
 80078d2:	4631      	mov	r1, r6
 80078d4:	4628      	mov	r0, r5
 80078d6:	47b8      	blx	r7
 80078d8:	3001      	adds	r0, #1
 80078da:	f43f ae38 	beq.w	800754e <_printf_float+0xc2>
 80078de:	f108 0801 	add.w	r8, r8, #1
 80078e2:	68e3      	ldr	r3, [r4, #12]
 80078e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80078e6:	1a5b      	subs	r3, r3, r1
 80078e8:	4543      	cmp	r3, r8
 80078ea:	dcf0      	bgt.n	80078ce <_printf_float+0x442>
 80078ec:	e6fa      	b.n	80076e4 <_printf_float+0x258>
 80078ee:	f04f 0800 	mov.w	r8, #0
 80078f2:	f104 0919 	add.w	r9, r4, #25
 80078f6:	e7f4      	b.n	80078e2 <_printf_float+0x456>

080078f8 <_printf_common>:
 80078f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078fc:	4616      	mov	r6, r2
 80078fe:	4699      	mov	r9, r3
 8007900:	688a      	ldr	r2, [r1, #8]
 8007902:	690b      	ldr	r3, [r1, #16]
 8007904:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007908:	4293      	cmp	r3, r2
 800790a:	bfb8      	it	lt
 800790c:	4613      	movlt	r3, r2
 800790e:	6033      	str	r3, [r6, #0]
 8007910:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007914:	4607      	mov	r7, r0
 8007916:	460c      	mov	r4, r1
 8007918:	b10a      	cbz	r2, 800791e <_printf_common+0x26>
 800791a:	3301      	adds	r3, #1
 800791c:	6033      	str	r3, [r6, #0]
 800791e:	6823      	ldr	r3, [r4, #0]
 8007920:	0699      	lsls	r1, r3, #26
 8007922:	bf42      	ittt	mi
 8007924:	6833      	ldrmi	r3, [r6, #0]
 8007926:	3302      	addmi	r3, #2
 8007928:	6033      	strmi	r3, [r6, #0]
 800792a:	6825      	ldr	r5, [r4, #0]
 800792c:	f015 0506 	ands.w	r5, r5, #6
 8007930:	d106      	bne.n	8007940 <_printf_common+0x48>
 8007932:	f104 0a19 	add.w	sl, r4, #25
 8007936:	68e3      	ldr	r3, [r4, #12]
 8007938:	6832      	ldr	r2, [r6, #0]
 800793a:	1a9b      	subs	r3, r3, r2
 800793c:	42ab      	cmp	r3, r5
 800793e:	dc26      	bgt.n	800798e <_printf_common+0x96>
 8007940:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007944:	1e13      	subs	r3, r2, #0
 8007946:	6822      	ldr	r2, [r4, #0]
 8007948:	bf18      	it	ne
 800794a:	2301      	movne	r3, #1
 800794c:	0692      	lsls	r2, r2, #26
 800794e:	d42b      	bmi.n	80079a8 <_printf_common+0xb0>
 8007950:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007954:	4649      	mov	r1, r9
 8007956:	4638      	mov	r0, r7
 8007958:	47c0      	blx	r8
 800795a:	3001      	adds	r0, #1
 800795c:	d01e      	beq.n	800799c <_printf_common+0xa4>
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	68e5      	ldr	r5, [r4, #12]
 8007962:	6832      	ldr	r2, [r6, #0]
 8007964:	f003 0306 	and.w	r3, r3, #6
 8007968:	2b04      	cmp	r3, #4
 800796a:	bf08      	it	eq
 800796c:	1aad      	subeq	r5, r5, r2
 800796e:	68a3      	ldr	r3, [r4, #8]
 8007970:	6922      	ldr	r2, [r4, #16]
 8007972:	bf0c      	ite	eq
 8007974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007978:	2500      	movne	r5, #0
 800797a:	4293      	cmp	r3, r2
 800797c:	bfc4      	itt	gt
 800797e:	1a9b      	subgt	r3, r3, r2
 8007980:	18ed      	addgt	r5, r5, r3
 8007982:	2600      	movs	r6, #0
 8007984:	341a      	adds	r4, #26
 8007986:	42b5      	cmp	r5, r6
 8007988:	d11a      	bne.n	80079c0 <_printf_common+0xc8>
 800798a:	2000      	movs	r0, #0
 800798c:	e008      	b.n	80079a0 <_printf_common+0xa8>
 800798e:	2301      	movs	r3, #1
 8007990:	4652      	mov	r2, sl
 8007992:	4649      	mov	r1, r9
 8007994:	4638      	mov	r0, r7
 8007996:	47c0      	blx	r8
 8007998:	3001      	adds	r0, #1
 800799a:	d103      	bne.n	80079a4 <_printf_common+0xac>
 800799c:	f04f 30ff 	mov.w	r0, #4294967295
 80079a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079a4:	3501      	adds	r5, #1
 80079a6:	e7c6      	b.n	8007936 <_printf_common+0x3e>
 80079a8:	18e1      	adds	r1, r4, r3
 80079aa:	1c5a      	adds	r2, r3, #1
 80079ac:	2030      	movs	r0, #48	; 0x30
 80079ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079b2:	4422      	add	r2, r4
 80079b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079bc:	3302      	adds	r3, #2
 80079be:	e7c7      	b.n	8007950 <_printf_common+0x58>
 80079c0:	2301      	movs	r3, #1
 80079c2:	4622      	mov	r2, r4
 80079c4:	4649      	mov	r1, r9
 80079c6:	4638      	mov	r0, r7
 80079c8:	47c0      	blx	r8
 80079ca:	3001      	adds	r0, #1
 80079cc:	d0e6      	beq.n	800799c <_printf_common+0xa4>
 80079ce:	3601      	adds	r6, #1
 80079d0:	e7d9      	b.n	8007986 <_printf_common+0x8e>
	...

080079d4 <_printf_i>:
 80079d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079d8:	7e0f      	ldrb	r7, [r1, #24]
 80079da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079dc:	2f78      	cmp	r7, #120	; 0x78
 80079de:	4691      	mov	r9, r2
 80079e0:	4680      	mov	r8, r0
 80079e2:	460c      	mov	r4, r1
 80079e4:	469a      	mov	sl, r3
 80079e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079ea:	d807      	bhi.n	80079fc <_printf_i+0x28>
 80079ec:	2f62      	cmp	r7, #98	; 0x62
 80079ee:	d80a      	bhi.n	8007a06 <_printf_i+0x32>
 80079f0:	2f00      	cmp	r7, #0
 80079f2:	f000 80d8 	beq.w	8007ba6 <_printf_i+0x1d2>
 80079f6:	2f58      	cmp	r7, #88	; 0x58
 80079f8:	f000 80a3 	beq.w	8007b42 <_printf_i+0x16e>
 80079fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a04:	e03a      	b.n	8007a7c <_printf_i+0xa8>
 8007a06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a0a:	2b15      	cmp	r3, #21
 8007a0c:	d8f6      	bhi.n	80079fc <_printf_i+0x28>
 8007a0e:	a101      	add	r1, pc, #4	; (adr r1, 8007a14 <_printf_i+0x40>)
 8007a10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a14:	08007a6d 	.word	0x08007a6d
 8007a18:	08007a81 	.word	0x08007a81
 8007a1c:	080079fd 	.word	0x080079fd
 8007a20:	080079fd 	.word	0x080079fd
 8007a24:	080079fd 	.word	0x080079fd
 8007a28:	080079fd 	.word	0x080079fd
 8007a2c:	08007a81 	.word	0x08007a81
 8007a30:	080079fd 	.word	0x080079fd
 8007a34:	080079fd 	.word	0x080079fd
 8007a38:	080079fd 	.word	0x080079fd
 8007a3c:	080079fd 	.word	0x080079fd
 8007a40:	08007b8d 	.word	0x08007b8d
 8007a44:	08007ab1 	.word	0x08007ab1
 8007a48:	08007b6f 	.word	0x08007b6f
 8007a4c:	080079fd 	.word	0x080079fd
 8007a50:	080079fd 	.word	0x080079fd
 8007a54:	08007baf 	.word	0x08007baf
 8007a58:	080079fd 	.word	0x080079fd
 8007a5c:	08007ab1 	.word	0x08007ab1
 8007a60:	080079fd 	.word	0x080079fd
 8007a64:	080079fd 	.word	0x080079fd
 8007a68:	08007b77 	.word	0x08007b77
 8007a6c:	682b      	ldr	r3, [r5, #0]
 8007a6e:	1d1a      	adds	r2, r3, #4
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	602a      	str	r2, [r5, #0]
 8007a74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e0a3      	b.n	8007bc8 <_printf_i+0x1f4>
 8007a80:	6820      	ldr	r0, [r4, #0]
 8007a82:	6829      	ldr	r1, [r5, #0]
 8007a84:	0606      	lsls	r6, r0, #24
 8007a86:	f101 0304 	add.w	r3, r1, #4
 8007a8a:	d50a      	bpl.n	8007aa2 <_printf_i+0xce>
 8007a8c:	680e      	ldr	r6, [r1, #0]
 8007a8e:	602b      	str	r3, [r5, #0]
 8007a90:	2e00      	cmp	r6, #0
 8007a92:	da03      	bge.n	8007a9c <_printf_i+0xc8>
 8007a94:	232d      	movs	r3, #45	; 0x2d
 8007a96:	4276      	negs	r6, r6
 8007a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a9c:	485e      	ldr	r0, [pc, #376]	; (8007c18 <_printf_i+0x244>)
 8007a9e:	230a      	movs	r3, #10
 8007aa0:	e019      	b.n	8007ad6 <_printf_i+0x102>
 8007aa2:	680e      	ldr	r6, [r1, #0]
 8007aa4:	602b      	str	r3, [r5, #0]
 8007aa6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007aaa:	bf18      	it	ne
 8007aac:	b236      	sxthne	r6, r6
 8007aae:	e7ef      	b.n	8007a90 <_printf_i+0xbc>
 8007ab0:	682b      	ldr	r3, [r5, #0]
 8007ab2:	6820      	ldr	r0, [r4, #0]
 8007ab4:	1d19      	adds	r1, r3, #4
 8007ab6:	6029      	str	r1, [r5, #0]
 8007ab8:	0601      	lsls	r1, r0, #24
 8007aba:	d501      	bpl.n	8007ac0 <_printf_i+0xec>
 8007abc:	681e      	ldr	r6, [r3, #0]
 8007abe:	e002      	b.n	8007ac6 <_printf_i+0xf2>
 8007ac0:	0646      	lsls	r6, r0, #25
 8007ac2:	d5fb      	bpl.n	8007abc <_printf_i+0xe8>
 8007ac4:	881e      	ldrh	r6, [r3, #0]
 8007ac6:	4854      	ldr	r0, [pc, #336]	; (8007c18 <_printf_i+0x244>)
 8007ac8:	2f6f      	cmp	r7, #111	; 0x6f
 8007aca:	bf0c      	ite	eq
 8007acc:	2308      	moveq	r3, #8
 8007ace:	230a      	movne	r3, #10
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ad6:	6865      	ldr	r5, [r4, #4]
 8007ad8:	60a5      	str	r5, [r4, #8]
 8007ada:	2d00      	cmp	r5, #0
 8007adc:	bfa2      	ittt	ge
 8007ade:	6821      	ldrge	r1, [r4, #0]
 8007ae0:	f021 0104 	bicge.w	r1, r1, #4
 8007ae4:	6021      	strge	r1, [r4, #0]
 8007ae6:	b90e      	cbnz	r6, 8007aec <_printf_i+0x118>
 8007ae8:	2d00      	cmp	r5, #0
 8007aea:	d04d      	beq.n	8007b88 <_printf_i+0x1b4>
 8007aec:	4615      	mov	r5, r2
 8007aee:	fbb6 f1f3 	udiv	r1, r6, r3
 8007af2:	fb03 6711 	mls	r7, r3, r1, r6
 8007af6:	5dc7      	ldrb	r7, [r0, r7]
 8007af8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007afc:	4637      	mov	r7, r6
 8007afe:	42bb      	cmp	r3, r7
 8007b00:	460e      	mov	r6, r1
 8007b02:	d9f4      	bls.n	8007aee <_printf_i+0x11a>
 8007b04:	2b08      	cmp	r3, #8
 8007b06:	d10b      	bne.n	8007b20 <_printf_i+0x14c>
 8007b08:	6823      	ldr	r3, [r4, #0]
 8007b0a:	07de      	lsls	r6, r3, #31
 8007b0c:	d508      	bpl.n	8007b20 <_printf_i+0x14c>
 8007b0e:	6923      	ldr	r3, [r4, #16]
 8007b10:	6861      	ldr	r1, [r4, #4]
 8007b12:	4299      	cmp	r1, r3
 8007b14:	bfde      	ittt	le
 8007b16:	2330      	movle	r3, #48	; 0x30
 8007b18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b20:	1b52      	subs	r2, r2, r5
 8007b22:	6122      	str	r2, [r4, #16]
 8007b24:	f8cd a000 	str.w	sl, [sp]
 8007b28:	464b      	mov	r3, r9
 8007b2a:	aa03      	add	r2, sp, #12
 8007b2c:	4621      	mov	r1, r4
 8007b2e:	4640      	mov	r0, r8
 8007b30:	f7ff fee2 	bl	80078f8 <_printf_common>
 8007b34:	3001      	adds	r0, #1
 8007b36:	d14c      	bne.n	8007bd2 <_printf_i+0x1fe>
 8007b38:	f04f 30ff 	mov.w	r0, #4294967295
 8007b3c:	b004      	add	sp, #16
 8007b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b42:	4835      	ldr	r0, [pc, #212]	; (8007c18 <_printf_i+0x244>)
 8007b44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007b48:	6829      	ldr	r1, [r5, #0]
 8007b4a:	6823      	ldr	r3, [r4, #0]
 8007b4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b50:	6029      	str	r1, [r5, #0]
 8007b52:	061d      	lsls	r5, r3, #24
 8007b54:	d514      	bpl.n	8007b80 <_printf_i+0x1ac>
 8007b56:	07df      	lsls	r7, r3, #31
 8007b58:	bf44      	itt	mi
 8007b5a:	f043 0320 	orrmi.w	r3, r3, #32
 8007b5e:	6023      	strmi	r3, [r4, #0]
 8007b60:	b91e      	cbnz	r6, 8007b6a <_printf_i+0x196>
 8007b62:	6823      	ldr	r3, [r4, #0]
 8007b64:	f023 0320 	bic.w	r3, r3, #32
 8007b68:	6023      	str	r3, [r4, #0]
 8007b6a:	2310      	movs	r3, #16
 8007b6c:	e7b0      	b.n	8007ad0 <_printf_i+0xfc>
 8007b6e:	6823      	ldr	r3, [r4, #0]
 8007b70:	f043 0320 	orr.w	r3, r3, #32
 8007b74:	6023      	str	r3, [r4, #0]
 8007b76:	2378      	movs	r3, #120	; 0x78
 8007b78:	4828      	ldr	r0, [pc, #160]	; (8007c1c <_printf_i+0x248>)
 8007b7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b7e:	e7e3      	b.n	8007b48 <_printf_i+0x174>
 8007b80:	0659      	lsls	r1, r3, #25
 8007b82:	bf48      	it	mi
 8007b84:	b2b6      	uxthmi	r6, r6
 8007b86:	e7e6      	b.n	8007b56 <_printf_i+0x182>
 8007b88:	4615      	mov	r5, r2
 8007b8a:	e7bb      	b.n	8007b04 <_printf_i+0x130>
 8007b8c:	682b      	ldr	r3, [r5, #0]
 8007b8e:	6826      	ldr	r6, [r4, #0]
 8007b90:	6961      	ldr	r1, [r4, #20]
 8007b92:	1d18      	adds	r0, r3, #4
 8007b94:	6028      	str	r0, [r5, #0]
 8007b96:	0635      	lsls	r5, r6, #24
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	d501      	bpl.n	8007ba0 <_printf_i+0x1cc>
 8007b9c:	6019      	str	r1, [r3, #0]
 8007b9e:	e002      	b.n	8007ba6 <_printf_i+0x1d2>
 8007ba0:	0670      	lsls	r0, r6, #25
 8007ba2:	d5fb      	bpl.n	8007b9c <_printf_i+0x1c8>
 8007ba4:	8019      	strh	r1, [r3, #0]
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	6123      	str	r3, [r4, #16]
 8007baa:	4615      	mov	r5, r2
 8007bac:	e7ba      	b.n	8007b24 <_printf_i+0x150>
 8007bae:	682b      	ldr	r3, [r5, #0]
 8007bb0:	1d1a      	adds	r2, r3, #4
 8007bb2:	602a      	str	r2, [r5, #0]
 8007bb4:	681d      	ldr	r5, [r3, #0]
 8007bb6:	6862      	ldr	r2, [r4, #4]
 8007bb8:	2100      	movs	r1, #0
 8007bba:	4628      	mov	r0, r5
 8007bbc:	f7f8 fb10 	bl	80001e0 <memchr>
 8007bc0:	b108      	cbz	r0, 8007bc6 <_printf_i+0x1f2>
 8007bc2:	1b40      	subs	r0, r0, r5
 8007bc4:	6060      	str	r0, [r4, #4]
 8007bc6:	6863      	ldr	r3, [r4, #4]
 8007bc8:	6123      	str	r3, [r4, #16]
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bd0:	e7a8      	b.n	8007b24 <_printf_i+0x150>
 8007bd2:	6923      	ldr	r3, [r4, #16]
 8007bd4:	462a      	mov	r2, r5
 8007bd6:	4649      	mov	r1, r9
 8007bd8:	4640      	mov	r0, r8
 8007bda:	47d0      	blx	sl
 8007bdc:	3001      	adds	r0, #1
 8007bde:	d0ab      	beq.n	8007b38 <_printf_i+0x164>
 8007be0:	6823      	ldr	r3, [r4, #0]
 8007be2:	079b      	lsls	r3, r3, #30
 8007be4:	d413      	bmi.n	8007c0e <_printf_i+0x23a>
 8007be6:	68e0      	ldr	r0, [r4, #12]
 8007be8:	9b03      	ldr	r3, [sp, #12]
 8007bea:	4298      	cmp	r0, r3
 8007bec:	bfb8      	it	lt
 8007bee:	4618      	movlt	r0, r3
 8007bf0:	e7a4      	b.n	8007b3c <_printf_i+0x168>
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	4632      	mov	r2, r6
 8007bf6:	4649      	mov	r1, r9
 8007bf8:	4640      	mov	r0, r8
 8007bfa:	47d0      	blx	sl
 8007bfc:	3001      	adds	r0, #1
 8007bfe:	d09b      	beq.n	8007b38 <_printf_i+0x164>
 8007c00:	3501      	adds	r5, #1
 8007c02:	68e3      	ldr	r3, [r4, #12]
 8007c04:	9903      	ldr	r1, [sp, #12]
 8007c06:	1a5b      	subs	r3, r3, r1
 8007c08:	42ab      	cmp	r3, r5
 8007c0a:	dcf2      	bgt.n	8007bf2 <_printf_i+0x21e>
 8007c0c:	e7eb      	b.n	8007be6 <_printf_i+0x212>
 8007c0e:	2500      	movs	r5, #0
 8007c10:	f104 0619 	add.w	r6, r4, #25
 8007c14:	e7f5      	b.n	8007c02 <_printf_i+0x22e>
 8007c16:	bf00      	nop
 8007c18:	0800ec76 	.word	0x0800ec76
 8007c1c:	0800ec87 	.word	0x0800ec87

08007c20 <__assert_func>:
 8007c20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c22:	4614      	mov	r4, r2
 8007c24:	461a      	mov	r2, r3
 8007c26:	4b09      	ldr	r3, [pc, #36]	; (8007c4c <__assert_func+0x2c>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4605      	mov	r5, r0
 8007c2c:	68d8      	ldr	r0, [r3, #12]
 8007c2e:	b14c      	cbz	r4, 8007c44 <__assert_func+0x24>
 8007c30:	4b07      	ldr	r3, [pc, #28]	; (8007c50 <__assert_func+0x30>)
 8007c32:	9100      	str	r1, [sp, #0]
 8007c34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c38:	4906      	ldr	r1, [pc, #24]	; (8007c54 <__assert_func+0x34>)
 8007c3a:	462b      	mov	r3, r5
 8007c3c:	f000 fe8a 	bl	8008954 <fiprintf>
 8007c40:	f001 fd58 	bl	80096f4 <abort>
 8007c44:	4b04      	ldr	r3, [pc, #16]	; (8007c58 <__assert_func+0x38>)
 8007c46:	461c      	mov	r4, r3
 8007c48:	e7f3      	b.n	8007c32 <__assert_func+0x12>
 8007c4a:	bf00      	nop
 8007c4c:	20000018 	.word	0x20000018
 8007c50:	0800ec98 	.word	0x0800ec98
 8007c54:	0800eca5 	.word	0x0800eca5
 8007c58:	0800ecd3 	.word	0x0800ecd3

08007c5c <quorem>:
 8007c5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c60:	6903      	ldr	r3, [r0, #16]
 8007c62:	690c      	ldr	r4, [r1, #16]
 8007c64:	42a3      	cmp	r3, r4
 8007c66:	4607      	mov	r7, r0
 8007c68:	f2c0 8081 	blt.w	8007d6e <quorem+0x112>
 8007c6c:	3c01      	subs	r4, #1
 8007c6e:	f101 0814 	add.w	r8, r1, #20
 8007c72:	f100 0514 	add.w	r5, r0, #20
 8007c76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c7a:	9301      	str	r3, [sp, #4]
 8007c7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c84:	3301      	adds	r3, #1
 8007c86:	429a      	cmp	r2, r3
 8007c88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007c8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c90:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c94:	d331      	bcc.n	8007cfa <quorem+0x9e>
 8007c96:	f04f 0e00 	mov.w	lr, #0
 8007c9a:	4640      	mov	r0, r8
 8007c9c:	46ac      	mov	ip, r5
 8007c9e:	46f2      	mov	sl, lr
 8007ca0:	f850 2b04 	ldr.w	r2, [r0], #4
 8007ca4:	b293      	uxth	r3, r2
 8007ca6:	fb06 e303 	mla	r3, r6, r3, lr
 8007caa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	ebaa 0303 	sub.w	r3, sl, r3
 8007cb4:	f8dc a000 	ldr.w	sl, [ip]
 8007cb8:	0c12      	lsrs	r2, r2, #16
 8007cba:	fa13 f38a 	uxtah	r3, r3, sl
 8007cbe:	fb06 e202 	mla	r2, r6, r2, lr
 8007cc2:	9300      	str	r3, [sp, #0]
 8007cc4:	9b00      	ldr	r3, [sp, #0]
 8007cc6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007cca:	b292      	uxth	r2, r2
 8007ccc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007cd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007cd4:	f8bd 3000 	ldrh.w	r3, [sp]
 8007cd8:	4581      	cmp	r9, r0
 8007cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cde:	f84c 3b04 	str.w	r3, [ip], #4
 8007ce2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007ce6:	d2db      	bcs.n	8007ca0 <quorem+0x44>
 8007ce8:	f855 300b 	ldr.w	r3, [r5, fp]
 8007cec:	b92b      	cbnz	r3, 8007cfa <quorem+0x9e>
 8007cee:	9b01      	ldr	r3, [sp, #4]
 8007cf0:	3b04      	subs	r3, #4
 8007cf2:	429d      	cmp	r5, r3
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	d32e      	bcc.n	8007d56 <quorem+0xfa>
 8007cf8:	613c      	str	r4, [r7, #16]
 8007cfa:	4638      	mov	r0, r7
 8007cfc:	f001 f8d8 	bl	8008eb0 <__mcmp>
 8007d00:	2800      	cmp	r0, #0
 8007d02:	db24      	blt.n	8007d4e <quorem+0xf2>
 8007d04:	3601      	adds	r6, #1
 8007d06:	4628      	mov	r0, r5
 8007d08:	f04f 0c00 	mov.w	ip, #0
 8007d0c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d10:	f8d0 e000 	ldr.w	lr, [r0]
 8007d14:	b293      	uxth	r3, r2
 8007d16:	ebac 0303 	sub.w	r3, ip, r3
 8007d1a:	0c12      	lsrs	r2, r2, #16
 8007d1c:	fa13 f38e 	uxtah	r3, r3, lr
 8007d20:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007d24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d2e:	45c1      	cmp	r9, r8
 8007d30:	f840 3b04 	str.w	r3, [r0], #4
 8007d34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007d38:	d2e8      	bcs.n	8007d0c <quorem+0xb0>
 8007d3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d42:	b922      	cbnz	r2, 8007d4e <quorem+0xf2>
 8007d44:	3b04      	subs	r3, #4
 8007d46:	429d      	cmp	r5, r3
 8007d48:	461a      	mov	r2, r3
 8007d4a:	d30a      	bcc.n	8007d62 <quorem+0x106>
 8007d4c:	613c      	str	r4, [r7, #16]
 8007d4e:	4630      	mov	r0, r6
 8007d50:	b003      	add	sp, #12
 8007d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d56:	6812      	ldr	r2, [r2, #0]
 8007d58:	3b04      	subs	r3, #4
 8007d5a:	2a00      	cmp	r2, #0
 8007d5c:	d1cc      	bne.n	8007cf8 <quorem+0x9c>
 8007d5e:	3c01      	subs	r4, #1
 8007d60:	e7c7      	b.n	8007cf2 <quorem+0x96>
 8007d62:	6812      	ldr	r2, [r2, #0]
 8007d64:	3b04      	subs	r3, #4
 8007d66:	2a00      	cmp	r2, #0
 8007d68:	d1f0      	bne.n	8007d4c <quorem+0xf0>
 8007d6a:	3c01      	subs	r4, #1
 8007d6c:	e7eb      	b.n	8007d46 <quorem+0xea>
 8007d6e:	2000      	movs	r0, #0
 8007d70:	e7ee      	b.n	8007d50 <quorem+0xf4>
 8007d72:	0000      	movs	r0, r0
 8007d74:	0000      	movs	r0, r0
	...

08007d78 <_dtoa_r>:
 8007d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7c:	ed2d 8b04 	vpush	{d8-d9}
 8007d80:	ec57 6b10 	vmov	r6, r7, d0
 8007d84:	b093      	sub	sp, #76	; 0x4c
 8007d86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007d88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007d8c:	9106      	str	r1, [sp, #24]
 8007d8e:	ee10 aa10 	vmov	sl, s0
 8007d92:	4604      	mov	r4, r0
 8007d94:	9209      	str	r2, [sp, #36]	; 0x24
 8007d96:	930c      	str	r3, [sp, #48]	; 0x30
 8007d98:	46bb      	mov	fp, r7
 8007d9a:	b975      	cbnz	r5, 8007dba <_dtoa_r+0x42>
 8007d9c:	2010      	movs	r0, #16
 8007d9e:	f000 fdef 	bl	8008980 <malloc>
 8007da2:	4602      	mov	r2, r0
 8007da4:	6260      	str	r0, [r4, #36]	; 0x24
 8007da6:	b920      	cbnz	r0, 8007db2 <_dtoa_r+0x3a>
 8007da8:	4ba7      	ldr	r3, [pc, #668]	; (8008048 <_dtoa_r+0x2d0>)
 8007daa:	21ea      	movs	r1, #234	; 0xea
 8007dac:	48a7      	ldr	r0, [pc, #668]	; (800804c <_dtoa_r+0x2d4>)
 8007dae:	f7ff ff37 	bl	8007c20 <__assert_func>
 8007db2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007db6:	6005      	str	r5, [r0, #0]
 8007db8:	60c5      	str	r5, [r0, #12]
 8007dba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dbc:	6819      	ldr	r1, [r3, #0]
 8007dbe:	b151      	cbz	r1, 8007dd6 <_dtoa_r+0x5e>
 8007dc0:	685a      	ldr	r2, [r3, #4]
 8007dc2:	604a      	str	r2, [r1, #4]
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	4093      	lsls	r3, r2
 8007dc8:	608b      	str	r3, [r1, #8]
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f000 fe2e 	bl	8008a2c <_Bfree>
 8007dd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	601a      	str	r2, [r3, #0]
 8007dd6:	1e3b      	subs	r3, r7, #0
 8007dd8:	bfaa      	itet	ge
 8007dda:	2300      	movge	r3, #0
 8007ddc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007de0:	f8c8 3000 	strge.w	r3, [r8]
 8007de4:	4b9a      	ldr	r3, [pc, #616]	; (8008050 <_dtoa_r+0x2d8>)
 8007de6:	bfbc      	itt	lt
 8007de8:	2201      	movlt	r2, #1
 8007dea:	f8c8 2000 	strlt.w	r2, [r8]
 8007dee:	ea33 030b 	bics.w	r3, r3, fp
 8007df2:	d11b      	bne.n	8007e2c <_dtoa_r+0xb4>
 8007df4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007df6:	f242 730f 	movw	r3, #9999	; 0x270f
 8007dfa:	6013      	str	r3, [r2, #0]
 8007dfc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e00:	4333      	orrs	r3, r6
 8007e02:	f000 8592 	beq.w	800892a <_dtoa_r+0xbb2>
 8007e06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e08:	b963      	cbnz	r3, 8007e24 <_dtoa_r+0xac>
 8007e0a:	4b92      	ldr	r3, [pc, #584]	; (8008054 <_dtoa_r+0x2dc>)
 8007e0c:	e022      	b.n	8007e54 <_dtoa_r+0xdc>
 8007e0e:	4b92      	ldr	r3, [pc, #584]	; (8008058 <_dtoa_r+0x2e0>)
 8007e10:	9301      	str	r3, [sp, #4]
 8007e12:	3308      	adds	r3, #8
 8007e14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007e16:	6013      	str	r3, [r2, #0]
 8007e18:	9801      	ldr	r0, [sp, #4]
 8007e1a:	b013      	add	sp, #76	; 0x4c
 8007e1c:	ecbd 8b04 	vpop	{d8-d9}
 8007e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e24:	4b8b      	ldr	r3, [pc, #556]	; (8008054 <_dtoa_r+0x2dc>)
 8007e26:	9301      	str	r3, [sp, #4]
 8007e28:	3303      	adds	r3, #3
 8007e2a:	e7f3      	b.n	8007e14 <_dtoa_r+0x9c>
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	2300      	movs	r3, #0
 8007e30:	4650      	mov	r0, sl
 8007e32:	4659      	mov	r1, fp
 8007e34:	f7f8 fe48 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e38:	ec4b ab19 	vmov	d9, sl, fp
 8007e3c:	4680      	mov	r8, r0
 8007e3e:	b158      	cbz	r0, 8007e58 <_dtoa_r+0xe0>
 8007e40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e42:	2301      	movs	r3, #1
 8007e44:	6013      	str	r3, [r2, #0]
 8007e46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f000 856b 	beq.w	8008924 <_dtoa_r+0xbac>
 8007e4e:	4883      	ldr	r0, [pc, #524]	; (800805c <_dtoa_r+0x2e4>)
 8007e50:	6018      	str	r0, [r3, #0]
 8007e52:	1e43      	subs	r3, r0, #1
 8007e54:	9301      	str	r3, [sp, #4]
 8007e56:	e7df      	b.n	8007e18 <_dtoa_r+0xa0>
 8007e58:	ec4b ab10 	vmov	d0, sl, fp
 8007e5c:	aa10      	add	r2, sp, #64	; 0x40
 8007e5e:	a911      	add	r1, sp, #68	; 0x44
 8007e60:	4620      	mov	r0, r4
 8007e62:	f001 f8cb 	bl	8008ffc <__d2b>
 8007e66:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007e6a:	ee08 0a10 	vmov	s16, r0
 8007e6e:	2d00      	cmp	r5, #0
 8007e70:	f000 8084 	beq.w	8007f7c <_dtoa_r+0x204>
 8007e74:	ee19 3a90 	vmov	r3, s19
 8007e78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e7c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007e80:	4656      	mov	r6, sl
 8007e82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007e86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007e8a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007e8e:	4b74      	ldr	r3, [pc, #464]	; (8008060 <_dtoa_r+0x2e8>)
 8007e90:	2200      	movs	r2, #0
 8007e92:	4630      	mov	r0, r6
 8007e94:	4639      	mov	r1, r7
 8007e96:	f7f8 f9f7 	bl	8000288 <__aeabi_dsub>
 8007e9a:	a365      	add	r3, pc, #404	; (adr r3, 8008030 <_dtoa_r+0x2b8>)
 8007e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea0:	f7f8 fbaa 	bl	80005f8 <__aeabi_dmul>
 8007ea4:	a364      	add	r3, pc, #400	; (adr r3, 8008038 <_dtoa_r+0x2c0>)
 8007ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eaa:	f7f8 f9ef 	bl	800028c <__adddf3>
 8007eae:	4606      	mov	r6, r0
 8007eb0:	4628      	mov	r0, r5
 8007eb2:	460f      	mov	r7, r1
 8007eb4:	f7f8 fb36 	bl	8000524 <__aeabi_i2d>
 8007eb8:	a361      	add	r3, pc, #388	; (adr r3, 8008040 <_dtoa_r+0x2c8>)
 8007eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebe:	f7f8 fb9b 	bl	80005f8 <__aeabi_dmul>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	4639      	mov	r1, r7
 8007eca:	f7f8 f9df 	bl	800028c <__adddf3>
 8007ece:	4606      	mov	r6, r0
 8007ed0:	460f      	mov	r7, r1
 8007ed2:	f7f8 fe41 	bl	8000b58 <__aeabi_d2iz>
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	9000      	str	r0, [sp, #0]
 8007eda:	2300      	movs	r3, #0
 8007edc:	4630      	mov	r0, r6
 8007ede:	4639      	mov	r1, r7
 8007ee0:	f7f8 fdfc 	bl	8000adc <__aeabi_dcmplt>
 8007ee4:	b150      	cbz	r0, 8007efc <_dtoa_r+0x184>
 8007ee6:	9800      	ldr	r0, [sp, #0]
 8007ee8:	f7f8 fb1c 	bl	8000524 <__aeabi_i2d>
 8007eec:	4632      	mov	r2, r6
 8007eee:	463b      	mov	r3, r7
 8007ef0:	f7f8 fdea 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ef4:	b910      	cbnz	r0, 8007efc <_dtoa_r+0x184>
 8007ef6:	9b00      	ldr	r3, [sp, #0]
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	9300      	str	r3, [sp, #0]
 8007efc:	9b00      	ldr	r3, [sp, #0]
 8007efe:	2b16      	cmp	r3, #22
 8007f00:	d85a      	bhi.n	8007fb8 <_dtoa_r+0x240>
 8007f02:	9a00      	ldr	r2, [sp, #0]
 8007f04:	4b57      	ldr	r3, [pc, #348]	; (8008064 <_dtoa_r+0x2ec>)
 8007f06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0e:	ec51 0b19 	vmov	r0, r1, d9
 8007f12:	f7f8 fde3 	bl	8000adc <__aeabi_dcmplt>
 8007f16:	2800      	cmp	r0, #0
 8007f18:	d050      	beq.n	8007fbc <_dtoa_r+0x244>
 8007f1a:	9b00      	ldr	r3, [sp, #0]
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	9300      	str	r3, [sp, #0]
 8007f20:	2300      	movs	r3, #0
 8007f22:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f26:	1b5d      	subs	r5, r3, r5
 8007f28:	1e6b      	subs	r3, r5, #1
 8007f2a:	9305      	str	r3, [sp, #20]
 8007f2c:	bf45      	ittet	mi
 8007f2e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007f32:	9304      	strmi	r3, [sp, #16]
 8007f34:	2300      	movpl	r3, #0
 8007f36:	2300      	movmi	r3, #0
 8007f38:	bf4c      	ite	mi
 8007f3a:	9305      	strmi	r3, [sp, #20]
 8007f3c:	9304      	strpl	r3, [sp, #16]
 8007f3e:	9b00      	ldr	r3, [sp, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	db3d      	blt.n	8007fc0 <_dtoa_r+0x248>
 8007f44:	9b05      	ldr	r3, [sp, #20]
 8007f46:	9a00      	ldr	r2, [sp, #0]
 8007f48:	920a      	str	r2, [sp, #40]	; 0x28
 8007f4a:	4413      	add	r3, r2
 8007f4c:	9305      	str	r3, [sp, #20]
 8007f4e:	2300      	movs	r3, #0
 8007f50:	9307      	str	r3, [sp, #28]
 8007f52:	9b06      	ldr	r3, [sp, #24]
 8007f54:	2b09      	cmp	r3, #9
 8007f56:	f200 8089 	bhi.w	800806c <_dtoa_r+0x2f4>
 8007f5a:	2b05      	cmp	r3, #5
 8007f5c:	bfc4      	itt	gt
 8007f5e:	3b04      	subgt	r3, #4
 8007f60:	9306      	strgt	r3, [sp, #24]
 8007f62:	9b06      	ldr	r3, [sp, #24]
 8007f64:	f1a3 0302 	sub.w	r3, r3, #2
 8007f68:	bfcc      	ite	gt
 8007f6a:	2500      	movgt	r5, #0
 8007f6c:	2501      	movle	r5, #1
 8007f6e:	2b03      	cmp	r3, #3
 8007f70:	f200 8087 	bhi.w	8008082 <_dtoa_r+0x30a>
 8007f74:	e8df f003 	tbb	[pc, r3]
 8007f78:	59383a2d 	.word	0x59383a2d
 8007f7c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007f80:	441d      	add	r5, r3
 8007f82:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007f86:	2b20      	cmp	r3, #32
 8007f88:	bfc1      	itttt	gt
 8007f8a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007f8e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007f92:	fa0b f303 	lslgt.w	r3, fp, r3
 8007f96:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007f9a:	bfda      	itte	le
 8007f9c:	f1c3 0320 	rsble	r3, r3, #32
 8007fa0:	fa06 f003 	lslle.w	r0, r6, r3
 8007fa4:	4318      	orrgt	r0, r3
 8007fa6:	f7f8 faad 	bl	8000504 <__aeabi_ui2d>
 8007faa:	2301      	movs	r3, #1
 8007fac:	4606      	mov	r6, r0
 8007fae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007fb2:	3d01      	subs	r5, #1
 8007fb4:	930e      	str	r3, [sp, #56]	; 0x38
 8007fb6:	e76a      	b.n	8007e8e <_dtoa_r+0x116>
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e7b2      	b.n	8007f22 <_dtoa_r+0x1aa>
 8007fbc:	900b      	str	r0, [sp, #44]	; 0x2c
 8007fbe:	e7b1      	b.n	8007f24 <_dtoa_r+0x1ac>
 8007fc0:	9b04      	ldr	r3, [sp, #16]
 8007fc2:	9a00      	ldr	r2, [sp, #0]
 8007fc4:	1a9b      	subs	r3, r3, r2
 8007fc6:	9304      	str	r3, [sp, #16]
 8007fc8:	4253      	negs	r3, r2
 8007fca:	9307      	str	r3, [sp, #28]
 8007fcc:	2300      	movs	r3, #0
 8007fce:	930a      	str	r3, [sp, #40]	; 0x28
 8007fd0:	e7bf      	b.n	8007f52 <_dtoa_r+0x1da>
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	9308      	str	r3, [sp, #32]
 8007fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	dc55      	bgt.n	8008088 <_dtoa_r+0x310>
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	9209      	str	r2, [sp, #36]	; 0x24
 8007fe6:	e00c      	b.n	8008002 <_dtoa_r+0x28a>
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e7f3      	b.n	8007fd4 <_dtoa_r+0x25c>
 8007fec:	2300      	movs	r3, #0
 8007fee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ff0:	9308      	str	r3, [sp, #32]
 8007ff2:	9b00      	ldr	r3, [sp, #0]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	9302      	str	r3, [sp, #8]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	9303      	str	r3, [sp, #12]
 8007ffe:	bfb8      	it	lt
 8008000:	2301      	movlt	r3, #1
 8008002:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008004:	2200      	movs	r2, #0
 8008006:	6042      	str	r2, [r0, #4]
 8008008:	2204      	movs	r2, #4
 800800a:	f102 0614 	add.w	r6, r2, #20
 800800e:	429e      	cmp	r6, r3
 8008010:	6841      	ldr	r1, [r0, #4]
 8008012:	d93d      	bls.n	8008090 <_dtoa_r+0x318>
 8008014:	4620      	mov	r0, r4
 8008016:	f000 fcc9 	bl	80089ac <_Balloc>
 800801a:	9001      	str	r0, [sp, #4]
 800801c:	2800      	cmp	r0, #0
 800801e:	d13b      	bne.n	8008098 <_dtoa_r+0x320>
 8008020:	4b11      	ldr	r3, [pc, #68]	; (8008068 <_dtoa_r+0x2f0>)
 8008022:	4602      	mov	r2, r0
 8008024:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008028:	e6c0      	b.n	8007dac <_dtoa_r+0x34>
 800802a:	2301      	movs	r3, #1
 800802c:	e7df      	b.n	8007fee <_dtoa_r+0x276>
 800802e:	bf00      	nop
 8008030:	636f4361 	.word	0x636f4361
 8008034:	3fd287a7 	.word	0x3fd287a7
 8008038:	8b60c8b3 	.word	0x8b60c8b3
 800803c:	3fc68a28 	.word	0x3fc68a28
 8008040:	509f79fb 	.word	0x509f79fb
 8008044:	3fd34413 	.word	0x3fd34413
 8008048:	0800ece1 	.word	0x0800ece1
 800804c:	0800ecf8 	.word	0x0800ecf8
 8008050:	7ff00000 	.word	0x7ff00000
 8008054:	0800ecdd 	.word	0x0800ecdd
 8008058:	0800ecd4 	.word	0x0800ecd4
 800805c:	0800ec75 	.word	0x0800ec75
 8008060:	3ff80000 	.word	0x3ff80000
 8008064:	0800ede8 	.word	0x0800ede8
 8008068:	0800ed53 	.word	0x0800ed53
 800806c:	2501      	movs	r5, #1
 800806e:	2300      	movs	r3, #0
 8008070:	9306      	str	r3, [sp, #24]
 8008072:	9508      	str	r5, [sp, #32]
 8008074:	f04f 33ff 	mov.w	r3, #4294967295
 8008078:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800807c:	2200      	movs	r2, #0
 800807e:	2312      	movs	r3, #18
 8008080:	e7b0      	b.n	8007fe4 <_dtoa_r+0x26c>
 8008082:	2301      	movs	r3, #1
 8008084:	9308      	str	r3, [sp, #32]
 8008086:	e7f5      	b.n	8008074 <_dtoa_r+0x2fc>
 8008088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800808a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800808e:	e7b8      	b.n	8008002 <_dtoa_r+0x28a>
 8008090:	3101      	adds	r1, #1
 8008092:	6041      	str	r1, [r0, #4]
 8008094:	0052      	lsls	r2, r2, #1
 8008096:	e7b8      	b.n	800800a <_dtoa_r+0x292>
 8008098:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800809a:	9a01      	ldr	r2, [sp, #4]
 800809c:	601a      	str	r2, [r3, #0]
 800809e:	9b03      	ldr	r3, [sp, #12]
 80080a0:	2b0e      	cmp	r3, #14
 80080a2:	f200 809d 	bhi.w	80081e0 <_dtoa_r+0x468>
 80080a6:	2d00      	cmp	r5, #0
 80080a8:	f000 809a 	beq.w	80081e0 <_dtoa_r+0x468>
 80080ac:	9b00      	ldr	r3, [sp, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	dd32      	ble.n	8008118 <_dtoa_r+0x3a0>
 80080b2:	4ab7      	ldr	r2, [pc, #732]	; (8008390 <_dtoa_r+0x618>)
 80080b4:	f003 030f 	and.w	r3, r3, #15
 80080b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80080bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80080c0:	9b00      	ldr	r3, [sp, #0]
 80080c2:	05d8      	lsls	r0, r3, #23
 80080c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80080c8:	d516      	bpl.n	80080f8 <_dtoa_r+0x380>
 80080ca:	4bb2      	ldr	r3, [pc, #712]	; (8008394 <_dtoa_r+0x61c>)
 80080cc:	ec51 0b19 	vmov	r0, r1, d9
 80080d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80080d4:	f7f8 fbba 	bl	800084c <__aeabi_ddiv>
 80080d8:	f007 070f 	and.w	r7, r7, #15
 80080dc:	4682      	mov	sl, r0
 80080de:	468b      	mov	fp, r1
 80080e0:	2503      	movs	r5, #3
 80080e2:	4eac      	ldr	r6, [pc, #688]	; (8008394 <_dtoa_r+0x61c>)
 80080e4:	b957      	cbnz	r7, 80080fc <_dtoa_r+0x384>
 80080e6:	4642      	mov	r2, r8
 80080e8:	464b      	mov	r3, r9
 80080ea:	4650      	mov	r0, sl
 80080ec:	4659      	mov	r1, fp
 80080ee:	f7f8 fbad 	bl	800084c <__aeabi_ddiv>
 80080f2:	4682      	mov	sl, r0
 80080f4:	468b      	mov	fp, r1
 80080f6:	e028      	b.n	800814a <_dtoa_r+0x3d2>
 80080f8:	2502      	movs	r5, #2
 80080fa:	e7f2      	b.n	80080e2 <_dtoa_r+0x36a>
 80080fc:	07f9      	lsls	r1, r7, #31
 80080fe:	d508      	bpl.n	8008112 <_dtoa_r+0x39a>
 8008100:	4640      	mov	r0, r8
 8008102:	4649      	mov	r1, r9
 8008104:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008108:	f7f8 fa76 	bl	80005f8 <__aeabi_dmul>
 800810c:	3501      	adds	r5, #1
 800810e:	4680      	mov	r8, r0
 8008110:	4689      	mov	r9, r1
 8008112:	107f      	asrs	r7, r7, #1
 8008114:	3608      	adds	r6, #8
 8008116:	e7e5      	b.n	80080e4 <_dtoa_r+0x36c>
 8008118:	f000 809b 	beq.w	8008252 <_dtoa_r+0x4da>
 800811c:	9b00      	ldr	r3, [sp, #0]
 800811e:	4f9d      	ldr	r7, [pc, #628]	; (8008394 <_dtoa_r+0x61c>)
 8008120:	425e      	negs	r6, r3
 8008122:	4b9b      	ldr	r3, [pc, #620]	; (8008390 <_dtoa_r+0x618>)
 8008124:	f006 020f 	and.w	r2, r6, #15
 8008128:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800812c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008130:	ec51 0b19 	vmov	r0, r1, d9
 8008134:	f7f8 fa60 	bl	80005f8 <__aeabi_dmul>
 8008138:	1136      	asrs	r6, r6, #4
 800813a:	4682      	mov	sl, r0
 800813c:	468b      	mov	fp, r1
 800813e:	2300      	movs	r3, #0
 8008140:	2502      	movs	r5, #2
 8008142:	2e00      	cmp	r6, #0
 8008144:	d17a      	bne.n	800823c <_dtoa_r+0x4c4>
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1d3      	bne.n	80080f2 <_dtoa_r+0x37a>
 800814a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800814c:	2b00      	cmp	r3, #0
 800814e:	f000 8082 	beq.w	8008256 <_dtoa_r+0x4de>
 8008152:	4b91      	ldr	r3, [pc, #580]	; (8008398 <_dtoa_r+0x620>)
 8008154:	2200      	movs	r2, #0
 8008156:	4650      	mov	r0, sl
 8008158:	4659      	mov	r1, fp
 800815a:	f7f8 fcbf 	bl	8000adc <__aeabi_dcmplt>
 800815e:	2800      	cmp	r0, #0
 8008160:	d079      	beq.n	8008256 <_dtoa_r+0x4de>
 8008162:	9b03      	ldr	r3, [sp, #12]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d076      	beq.n	8008256 <_dtoa_r+0x4de>
 8008168:	9b02      	ldr	r3, [sp, #8]
 800816a:	2b00      	cmp	r3, #0
 800816c:	dd36      	ble.n	80081dc <_dtoa_r+0x464>
 800816e:	9b00      	ldr	r3, [sp, #0]
 8008170:	4650      	mov	r0, sl
 8008172:	4659      	mov	r1, fp
 8008174:	1e5f      	subs	r7, r3, #1
 8008176:	2200      	movs	r2, #0
 8008178:	4b88      	ldr	r3, [pc, #544]	; (800839c <_dtoa_r+0x624>)
 800817a:	f7f8 fa3d 	bl	80005f8 <__aeabi_dmul>
 800817e:	9e02      	ldr	r6, [sp, #8]
 8008180:	4682      	mov	sl, r0
 8008182:	468b      	mov	fp, r1
 8008184:	3501      	adds	r5, #1
 8008186:	4628      	mov	r0, r5
 8008188:	f7f8 f9cc 	bl	8000524 <__aeabi_i2d>
 800818c:	4652      	mov	r2, sl
 800818e:	465b      	mov	r3, fp
 8008190:	f7f8 fa32 	bl	80005f8 <__aeabi_dmul>
 8008194:	4b82      	ldr	r3, [pc, #520]	; (80083a0 <_dtoa_r+0x628>)
 8008196:	2200      	movs	r2, #0
 8008198:	f7f8 f878 	bl	800028c <__adddf3>
 800819c:	46d0      	mov	r8, sl
 800819e:	46d9      	mov	r9, fp
 80081a0:	4682      	mov	sl, r0
 80081a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80081a6:	2e00      	cmp	r6, #0
 80081a8:	d158      	bne.n	800825c <_dtoa_r+0x4e4>
 80081aa:	4b7e      	ldr	r3, [pc, #504]	; (80083a4 <_dtoa_r+0x62c>)
 80081ac:	2200      	movs	r2, #0
 80081ae:	4640      	mov	r0, r8
 80081b0:	4649      	mov	r1, r9
 80081b2:	f7f8 f869 	bl	8000288 <__aeabi_dsub>
 80081b6:	4652      	mov	r2, sl
 80081b8:	465b      	mov	r3, fp
 80081ba:	4680      	mov	r8, r0
 80081bc:	4689      	mov	r9, r1
 80081be:	f7f8 fcab 	bl	8000b18 <__aeabi_dcmpgt>
 80081c2:	2800      	cmp	r0, #0
 80081c4:	f040 8295 	bne.w	80086f2 <_dtoa_r+0x97a>
 80081c8:	4652      	mov	r2, sl
 80081ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80081ce:	4640      	mov	r0, r8
 80081d0:	4649      	mov	r1, r9
 80081d2:	f7f8 fc83 	bl	8000adc <__aeabi_dcmplt>
 80081d6:	2800      	cmp	r0, #0
 80081d8:	f040 8289 	bne.w	80086ee <_dtoa_r+0x976>
 80081dc:	ec5b ab19 	vmov	sl, fp, d9
 80081e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f2c0 8148 	blt.w	8008478 <_dtoa_r+0x700>
 80081e8:	9a00      	ldr	r2, [sp, #0]
 80081ea:	2a0e      	cmp	r2, #14
 80081ec:	f300 8144 	bgt.w	8008478 <_dtoa_r+0x700>
 80081f0:	4b67      	ldr	r3, [pc, #412]	; (8008390 <_dtoa_r+0x618>)
 80081f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80081fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f280 80d5 	bge.w	80083ac <_dtoa_r+0x634>
 8008202:	9b03      	ldr	r3, [sp, #12]
 8008204:	2b00      	cmp	r3, #0
 8008206:	f300 80d1 	bgt.w	80083ac <_dtoa_r+0x634>
 800820a:	f040 826f 	bne.w	80086ec <_dtoa_r+0x974>
 800820e:	4b65      	ldr	r3, [pc, #404]	; (80083a4 <_dtoa_r+0x62c>)
 8008210:	2200      	movs	r2, #0
 8008212:	4640      	mov	r0, r8
 8008214:	4649      	mov	r1, r9
 8008216:	f7f8 f9ef 	bl	80005f8 <__aeabi_dmul>
 800821a:	4652      	mov	r2, sl
 800821c:	465b      	mov	r3, fp
 800821e:	f7f8 fc71 	bl	8000b04 <__aeabi_dcmpge>
 8008222:	9e03      	ldr	r6, [sp, #12]
 8008224:	4637      	mov	r7, r6
 8008226:	2800      	cmp	r0, #0
 8008228:	f040 8245 	bne.w	80086b6 <_dtoa_r+0x93e>
 800822c:	9d01      	ldr	r5, [sp, #4]
 800822e:	2331      	movs	r3, #49	; 0x31
 8008230:	f805 3b01 	strb.w	r3, [r5], #1
 8008234:	9b00      	ldr	r3, [sp, #0]
 8008236:	3301      	adds	r3, #1
 8008238:	9300      	str	r3, [sp, #0]
 800823a:	e240      	b.n	80086be <_dtoa_r+0x946>
 800823c:	07f2      	lsls	r2, r6, #31
 800823e:	d505      	bpl.n	800824c <_dtoa_r+0x4d4>
 8008240:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008244:	f7f8 f9d8 	bl	80005f8 <__aeabi_dmul>
 8008248:	3501      	adds	r5, #1
 800824a:	2301      	movs	r3, #1
 800824c:	1076      	asrs	r6, r6, #1
 800824e:	3708      	adds	r7, #8
 8008250:	e777      	b.n	8008142 <_dtoa_r+0x3ca>
 8008252:	2502      	movs	r5, #2
 8008254:	e779      	b.n	800814a <_dtoa_r+0x3d2>
 8008256:	9f00      	ldr	r7, [sp, #0]
 8008258:	9e03      	ldr	r6, [sp, #12]
 800825a:	e794      	b.n	8008186 <_dtoa_r+0x40e>
 800825c:	9901      	ldr	r1, [sp, #4]
 800825e:	4b4c      	ldr	r3, [pc, #304]	; (8008390 <_dtoa_r+0x618>)
 8008260:	4431      	add	r1, r6
 8008262:	910d      	str	r1, [sp, #52]	; 0x34
 8008264:	9908      	ldr	r1, [sp, #32]
 8008266:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800826a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800826e:	2900      	cmp	r1, #0
 8008270:	d043      	beq.n	80082fa <_dtoa_r+0x582>
 8008272:	494d      	ldr	r1, [pc, #308]	; (80083a8 <_dtoa_r+0x630>)
 8008274:	2000      	movs	r0, #0
 8008276:	f7f8 fae9 	bl	800084c <__aeabi_ddiv>
 800827a:	4652      	mov	r2, sl
 800827c:	465b      	mov	r3, fp
 800827e:	f7f8 f803 	bl	8000288 <__aeabi_dsub>
 8008282:	9d01      	ldr	r5, [sp, #4]
 8008284:	4682      	mov	sl, r0
 8008286:	468b      	mov	fp, r1
 8008288:	4649      	mov	r1, r9
 800828a:	4640      	mov	r0, r8
 800828c:	f7f8 fc64 	bl	8000b58 <__aeabi_d2iz>
 8008290:	4606      	mov	r6, r0
 8008292:	f7f8 f947 	bl	8000524 <__aeabi_i2d>
 8008296:	4602      	mov	r2, r0
 8008298:	460b      	mov	r3, r1
 800829a:	4640      	mov	r0, r8
 800829c:	4649      	mov	r1, r9
 800829e:	f7f7 fff3 	bl	8000288 <__aeabi_dsub>
 80082a2:	3630      	adds	r6, #48	; 0x30
 80082a4:	f805 6b01 	strb.w	r6, [r5], #1
 80082a8:	4652      	mov	r2, sl
 80082aa:	465b      	mov	r3, fp
 80082ac:	4680      	mov	r8, r0
 80082ae:	4689      	mov	r9, r1
 80082b0:	f7f8 fc14 	bl	8000adc <__aeabi_dcmplt>
 80082b4:	2800      	cmp	r0, #0
 80082b6:	d163      	bne.n	8008380 <_dtoa_r+0x608>
 80082b8:	4642      	mov	r2, r8
 80082ba:	464b      	mov	r3, r9
 80082bc:	4936      	ldr	r1, [pc, #216]	; (8008398 <_dtoa_r+0x620>)
 80082be:	2000      	movs	r0, #0
 80082c0:	f7f7 ffe2 	bl	8000288 <__aeabi_dsub>
 80082c4:	4652      	mov	r2, sl
 80082c6:	465b      	mov	r3, fp
 80082c8:	f7f8 fc08 	bl	8000adc <__aeabi_dcmplt>
 80082cc:	2800      	cmp	r0, #0
 80082ce:	f040 80b5 	bne.w	800843c <_dtoa_r+0x6c4>
 80082d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082d4:	429d      	cmp	r5, r3
 80082d6:	d081      	beq.n	80081dc <_dtoa_r+0x464>
 80082d8:	4b30      	ldr	r3, [pc, #192]	; (800839c <_dtoa_r+0x624>)
 80082da:	2200      	movs	r2, #0
 80082dc:	4650      	mov	r0, sl
 80082de:	4659      	mov	r1, fp
 80082e0:	f7f8 f98a 	bl	80005f8 <__aeabi_dmul>
 80082e4:	4b2d      	ldr	r3, [pc, #180]	; (800839c <_dtoa_r+0x624>)
 80082e6:	4682      	mov	sl, r0
 80082e8:	468b      	mov	fp, r1
 80082ea:	4640      	mov	r0, r8
 80082ec:	4649      	mov	r1, r9
 80082ee:	2200      	movs	r2, #0
 80082f0:	f7f8 f982 	bl	80005f8 <__aeabi_dmul>
 80082f4:	4680      	mov	r8, r0
 80082f6:	4689      	mov	r9, r1
 80082f8:	e7c6      	b.n	8008288 <_dtoa_r+0x510>
 80082fa:	4650      	mov	r0, sl
 80082fc:	4659      	mov	r1, fp
 80082fe:	f7f8 f97b 	bl	80005f8 <__aeabi_dmul>
 8008302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008304:	9d01      	ldr	r5, [sp, #4]
 8008306:	930f      	str	r3, [sp, #60]	; 0x3c
 8008308:	4682      	mov	sl, r0
 800830a:	468b      	mov	fp, r1
 800830c:	4649      	mov	r1, r9
 800830e:	4640      	mov	r0, r8
 8008310:	f7f8 fc22 	bl	8000b58 <__aeabi_d2iz>
 8008314:	4606      	mov	r6, r0
 8008316:	f7f8 f905 	bl	8000524 <__aeabi_i2d>
 800831a:	3630      	adds	r6, #48	; 0x30
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
 8008320:	4640      	mov	r0, r8
 8008322:	4649      	mov	r1, r9
 8008324:	f7f7 ffb0 	bl	8000288 <__aeabi_dsub>
 8008328:	f805 6b01 	strb.w	r6, [r5], #1
 800832c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800832e:	429d      	cmp	r5, r3
 8008330:	4680      	mov	r8, r0
 8008332:	4689      	mov	r9, r1
 8008334:	f04f 0200 	mov.w	r2, #0
 8008338:	d124      	bne.n	8008384 <_dtoa_r+0x60c>
 800833a:	4b1b      	ldr	r3, [pc, #108]	; (80083a8 <_dtoa_r+0x630>)
 800833c:	4650      	mov	r0, sl
 800833e:	4659      	mov	r1, fp
 8008340:	f7f7 ffa4 	bl	800028c <__adddf3>
 8008344:	4602      	mov	r2, r0
 8008346:	460b      	mov	r3, r1
 8008348:	4640      	mov	r0, r8
 800834a:	4649      	mov	r1, r9
 800834c:	f7f8 fbe4 	bl	8000b18 <__aeabi_dcmpgt>
 8008350:	2800      	cmp	r0, #0
 8008352:	d173      	bne.n	800843c <_dtoa_r+0x6c4>
 8008354:	4652      	mov	r2, sl
 8008356:	465b      	mov	r3, fp
 8008358:	4913      	ldr	r1, [pc, #76]	; (80083a8 <_dtoa_r+0x630>)
 800835a:	2000      	movs	r0, #0
 800835c:	f7f7 ff94 	bl	8000288 <__aeabi_dsub>
 8008360:	4602      	mov	r2, r0
 8008362:	460b      	mov	r3, r1
 8008364:	4640      	mov	r0, r8
 8008366:	4649      	mov	r1, r9
 8008368:	f7f8 fbb8 	bl	8000adc <__aeabi_dcmplt>
 800836c:	2800      	cmp	r0, #0
 800836e:	f43f af35 	beq.w	80081dc <_dtoa_r+0x464>
 8008372:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008374:	1e6b      	subs	r3, r5, #1
 8008376:	930f      	str	r3, [sp, #60]	; 0x3c
 8008378:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800837c:	2b30      	cmp	r3, #48	; 0x30
 800837e:	d0f8      	beq.n	8008372 <_dtoa_r+0x5fa>
 8008380:	9700      	str	r7, [sp, #0]
 8008382:	e049      	b.n	8008418 <_dtoa_r+0x6a0>
 8008384:	4b05      	ldr	r3, [pc, #20]	; (800839c <_dtoa_r+0x624>)
 8008386:	f7f8 f937 	bl	80005f8 <__aeabi_dmul>
 800838a:	4680      	mov	r8, r0
 800838c:	4689      	mov	r9, r1
 800838e:	e7bd      	b.n	800830c <_dtoa_r+0x594>
 8008390:	0800ede8 	.word	0x0800ede8
 8008394:	0800edc0 	.word	0x0800edc0
 8008398:	3ff00000 	.word	0x3ff00000
 800839c:	40240000 	.word	0x40240000
 80083a0:	401c0000 	.word	0x401c0000
 80083a4:	40140000 	.word	0x40140000
 80083a8:	3fe00000 	.word	0x3fe00000
 80083ac:	9d01      	ldr	r5, [sp, #4]
 80083ae:	4656      	mov	r6, sl
 80083b0:	465f      	mov	r7, fp
 80083b2:	4642      	mov	r2, r8
 80083b4:	464b      	mov	r3, r9
 80083b6:	4630      	mov	r0, r6
 80083b8:	4639      	mov	r1, r7
 80083ba:	f7f8 fa47 	bl	800084c <__aeabi_ddiv>
 80083be:	f7f8 fbcb 	bl	8000b58 <__aeabi_d2iz>
 80083c2:	4682      	mov	sl, r0
 80083c4:	f7f8 f8ae 	bl	8000524 <__aeabi_i2d>
 80083c8:	4642      	mov	r2, r8
 80083ca:	464b      	mov	r3, r9
 80083cc:	f7f8 f914 	bl	80005f8 <__aeabi_dmul>
 80083d0:	4602      	mov	r2, r0
 80083d2:	460b      	mov	r3, r1
 80083d4:	4630      	mov	r0, r6
 80083d6:	4639      	mov	r1, r7
 80083d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80083dc:	f7f7 ff54 	bl	8000288 <__aeabi_dsub>
 80083e0:	f805 6b01 	strb.w	r6, [r5], #1
 80083e4:	9e01      	ldr	r6, [sp, #4]
 80083e6:	9f03      	ldr	r7, [sp, #12]
 80083e8:	1bae      	subs	r6, r5, r6
 80083ea:	42b7      	cmp	r7, r6
 80083ec:	4602      	mov	r2, r0
 80083ee:	460b      	mov	r3, r1
 80083f0:	d135      	bne.n	800845e <_dtoa_r+0x6e6>
 80083f2:	f7f7 ff4b 	bl	800028c <__adddf3>
 80083f6:	4642      	mov	r2, r8
 80083f8:	464b      	mov	r3, r9
 80083fa:	4606      	mov	r6, r0
 80083fc:	460f      	mov	r7, r1
 80083fe:	f7f8 fb8b 	bl	8000b18 <__aeabi_dcmpgt>
 8008402:	b9d0      	cbnz	r0, 800843a <_dtoa_r+0x6c2>
 8008404:	4642      	mov	r2, r8
 8008406:	464b      	mov	r3, r9
 8008408:	4630      	mov	r0, r6
 800840a:	4639      	mov	r1, r7
 800840c:	f7f8 fb5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008410:	b110      	cbz	r0, 8008418 <_dtoa_r+0x6a0>
 8008412:	f01a 0f01 	tst.w	sl, #1
 8008416:	d110      	bne.n	800843a <_dtoa_r+0x6c2>
 8008418:	4620      	mov	r0, r4
 800841a:	ee18 1a10 	vmov	r1, s16
 800841e:	f000 fb05 	bl	8008a2c <_Bfree>
 8008422:	2300      	movs	r3, #0
 8008424:	9800      	ldr	r0, [sp, #0]
 8008426:	702b      	strb	r3, [r5, #0]
 8008428:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800842a:	3001      	adds	r0, #1
 800842c:	6018      	str	r0, [r3, #0]
 800842e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008430:	2b00      	cmp	r3, #0
 8008432:	f43f acf1 	beq.w	8007e18 <_dtoa_r+0xa0>
 8008436:	601d      	str	r5, [r3, #0]
 8008438:	e4ee      	b.n	8007e18 <_dtoa_r+0xa0>
 800843a:	9f00      	ldr	r7, [sp, #0]
 800843c:	462b      	mov	r3, r5
 800843e:	461d      	mov	r5, r3
 8008440:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008444:	2a39      	cmp	r2, #57	; 0x39
 8008446:	d106      	bne.n	8008456 <_dtoa_r+0x6de>
 8008448:	9a01      	ldr	r2, [sp, #4]
 800844a:	429a      	cmp	r2, r3
 800844c:	d1f7      	bne.n	800843e <_dtoa_r+0x6c6>
 800844e:	9901      	ldr	r1, [sp, #4]
 8008450:	2230      	movs	r2, #48	; 0x30
 8008452:	3701      	adds	r7, #1
 8008454:	700a      	strb	r2, [r1, #0]
 8008456:	781a      	ldrb	r2, [r3, #0]
 8008458:	3201      	adds	r2, #1
 800845a:	701a      	strb	r2, [r3, #0]
 800845c:	e790      	b.n	8008380 <_dtoa_r+0x608>
 800845e:	4ba6      	ldr	r3, [pc, #664]	; (80086f8 <_dtoa_r+0x980>)
 8008460:	2200      	movs	r2, #0
 8008462:	f7f8 f8c9 	bl	80005f8 <__aeabi_dmul>
 8008466:	2200      	movs	r2, #0
 8008468:	2300      	movs	r3, #0
 800846a:	4606      	mov	r6, r0
 800846c:	460f      	mov	r7, r1
 800846e:	f7f8 fb2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008472:	2800      	cmp	r0, #0
 8008474:	d09d      	beq.n	80083b2 <_dtoa_r+0x63a>
 8008476:	e7cf      	b.n	8008418 <_dtoa_r+0x6a0>
 8008478:	9a08      	ldr	r2, [sp, #32]
 800847a:	2a00      	cmp	r2, #0
 800847c:	f000 80d7 	beq.w	800862e <_dtoa_r+0x8b6>
 8008480:	9a06      	ldr	r2, [sp, #24]
 8008482:	2a01      	cmp	r2, #1
 8008484:	f300 80ba 	bgt.w	80085fc <_dtoa_r+0x884>
 8008488:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800848a:	2a00      	cmp	r2, #0
 800848c:	f000 80b2 	beq.w	80085f4 <_dtoa_r+0x87c>
 8008490:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008494:	9e07      	ldr	r6, [sp, #28]
 8008496:	9d04      	ldr	r5, [sp, #16]
 8008498:	9a04      	ldr	r2, [sp, #16]
 800849a:	441a      	add	r2, r3
 800849c:	9204      	str	r2, [sp, #16]
 800849e:	9a05      	ldr	r2, [sp, #20]
 80084a0:	2101      	movs	r1, #1
 80084a2:	441a      	add	r2, r3
 80084a4:	4620      	mov	r0, r4
 80084a6:	9205      	str	r2, [sp, #20]
 80084a8:	f000 fb78 	bl	8008b9c <__i2b>
 80084ac:	4607      	mov	r7, r0
 80084ae:	2d00      	cmp	r5, #0
 80084b0:	dd0c      	ble.n	80084cc <_dtoa_r+0x754>
 80084b2:	9b05      	ldr	r3, [sp, #20]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	dd09      	ble.n	80084cc <_dtoa_r+0x754>
 80084b8:	42ab      	cmp	r3, r5
 80084ba:	9a04      	ldr	r2, [sp, #16]
 80084bc:	bfa8      	it	ge
 80084be:	462b      	movge	r3, r5
 80084c0:	1ad2      	subs	r2, r2, r3
 80084c2:	9204      	str	r2, [sp, #16]
 80084c4:	9a05      	ldr	r2, [sp, #20]
 80084c6:	1aed      	subs	r5, r5, r3
 80084c8:	1ad3      	subs	r3, r2, r3
 80084ca:	9305      	str	r3, [sp, #20]
 80084cc:	9b07      	ldr	r3, [sp, #28]
 80084ce:	b31b      	cbz	r3, 8008518 <_dtoa_r+0x7a0>
 80084d0:	9b08      	ldr	r3, [sp, #32]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f000 80af 	beq.w	8008636 <_dtoa_r+0x8be>
 80084d8:	2e00      	cmp	r6, #0
 80084da:	dd13      	ble.n	8008504 <_dtoa_r+0x78c>
 80084dc:	4639      	mov	r1, r7
 80084de:	4632      	mov	r2, r6
 80084e0:	4620      	mov	r0, r4
 80084e2:	f000 fc1b 	bl	8008d1c <__pow5mult>
 80084e6:	ee18 2a10 	vmov	r2, s16
 80084ea:	4601      	mov	r1, r0
 80084ec:	4607      	mov	r7, r0
 80084ee:	4620      	mov	r0, r4
 80084f0:	f000 fb6a 	bl	8008bc8 <__multiply>
 80084f4:	ee18 1a10 	vmov	r1, s16
 80084f8:	4680      	mov	r8, r0
 80084fa:	4620      	mov	r0, r4
 80084fc:	f000 fa96 	bl	8008a2c <_Bfree>
 8008500:	ee08 8a10 	vmov	s16, r8
 8008504:	9b07      	ldr	r3, [sp, #28]
 8008506:	1b9a      	subs	r2, r3, r6
 8008508:	d006      	beq.n	8008518 <_dtoa_r+0x7a0>
 800850a:	ee18 1a10 	vmov	r1, s16
 800850e:	4620      	mov	r0, r4
 8008510:	f000 fc04 	bl	8008d1c <__pow5mult>
 8008514:	ee08 0a10 	vmov	s16, r0
 8008518:	2101      	movs	r1, #1
 800851a:	4620      	mov	r0, r4
 800851c:	f000 fb3e 	bl	8008b9c <__i2b>
 8008520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008522:	2b00      	cmp	r3, #0
 8008524:	4606      	mov	r6, r0
 8008526:	f340 8088 	ble.w	800863a <_dtoa_r+0x8c2>
 800852a:	461a      	mov	r2, r3
 800852c:	4601      	mov	r1, r0
 800852e:	4620      	mov	r0, r4
 8008530:	f000 fbf4 	bl	8008d1c <__pow5mult>
 8008534:	9b06      	ldr	r3, [sp, #24]
 8008536:	2b01      	cmp	r3, #1
 8008538:	4606      	mov	r6, r0
 800853a:	f340 8081 	ble.w	8008640 <_dtoa_r+0x8c8>
 800853e:	f04f 0800 	mov.w	r8, #0
 8008542:	6933      	ldr	r3, [r6, #16]
 8008544:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008548:	6918      	ldr	r0, [r3, #16]
 800854a:	f000 fad7 	bl	8008afc <__hi0bits>
 800854e:	f1c0 0020 	rsb	r0, r0, #32
 8008552:	9b05      	ldr	r3, [sp, #20]
 8008554:	4418      	add	r0, r3
 8008556:	f010 001f 	ands.w	r0, r0, #31
 800855a:	f000 8092 	beq.w	8008682 <_dtoa_r+0x90a>
 800855e:	f1c0 0320 	rsb	r3, r0, #32
 8008562:	2b04      	cmp	r3, #4
 8008564:	f340 808a 	ble.w	800867c <_dtoa_r+0x904>
 8008568:	f1c0 001c 	rsb	r0, r0, #28
 800856c:	9b04      	ldr	r3, [sp, #16]
 800856e:	4403      	add	r3, r0
 8008570:	9304      	str	r3, [sp, #16]
 8008572:	9b05      	ldr	r3, [sp, #20]
 8008574:	4403      	add	r3, r0
 8008576:	4405      	add	r5, r0
 8008578:	9305      	str	r3, [sp, #20]
 800857a:	9b04      	ldr	r3, [sp, #16]
 800857c:	2b00      	cmp	r3, #0
 800857e:	dd07      	ble.n	8008590 <_dtoa_r+0x818>
 8008580:	ee18 1a10 	vmov	r1, s16
 8008584:	461a      	mov	r2, r3
 8008586:	4620      	mov	r0, r4
 8008588:	f000 fc22 	bl	8008dd0 <__lshift>
 800858c:	ee08 0a10 	vmov	s16, r0
 8008590:	9b05      	ldr	r3, [sp, #20]
 8008592:	2b00      	cmp	r3, #0
 8008594:	dd05      	ble.n	80085a2 <_dtoa_r+0x82a>
 8008596:	4631      	mov	r1, r6
 8008598:	461a      	mov	r2, r3
 800859a:	4620      	mov	r0, r4
 800859c:	f000 fc18 	bl	8008dd0 <__lshift>
 80085a0:	4606      	mov	r6, r0
 80085a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d06e      	beq.n	8008686 <_dtoa_r+0x90e>
 80085a8:	ee18 0a10 	vmov	r0, s16
 80085ac:	4631      	mov	r1, r6
 80085ae:	f000 fc7f 	bl	8008eb0 <__mcmp>
 80085b2:	2800      	cmp	r0, #0
 80085b4:	da67      	bge.n	8008686 <_dtoa_r+0x90e>
 80085b6:	9b00      	ldr	r3, [sp, #0]
 80085b8:	3b01      	subs	r3, #1
 80085ba:	ee18 1a10 	vmov	r1, s16
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	220a      	movs	r2, #10
 80085c2:	2300      	movs	r3, #0
 80085c4:	4620      	mov	r0, r4
 80085c6:	f000 fa53 	bl	8008a70 <__multadd>
 80085ca:	9b08      	ldr	r3, [sp, #32]
 80085cc:	ee08 0a10 	vmov	s16, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f000 81b1 	beq.w	8008938 <_dtoa_r+0xbc0>
 80085d6:	2300      	movs	r3, #0
 80085d8:	4639      	mov	r1, r7
 80085da:	220a      	movs	r2, #10
 80085dc:	4620      	mov	r0, r4
 80085de:	f000 fa47 	bl	8008a70 <__multadd>
 80085e2:	9b02      	ldr	r3, [sp, #8]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	4607      	mov	r7, r0
 80085e8:	f300 808e 	bgt.w	8008708 <_dtoa_r+0x990>
 80085ec:	9b06      	ldr	r3, [sp, #24]
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	dc51      	bgt.n	8008696 <_dtoa_r+0x91e>
 80085f2:	e089      	b.n	8008708 <_dtoa_r+0x990>
 80085f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80085f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80085fa:	e74b      	b.n	8008494 <_dtoa_r+0x71c>
 80085fc:	9b03      	ldr	r3, [sp, #12]
 80085fe:	1e5e      	subs	r6, r3, #1
 8008600:	9b07      	ldr	r3, [sp, #28]
 8008602:	42b3      	cmp	r3, r6
 8008604:	bfbf      	itttt	lt
 8008606:	9b07      	ldrlt	r3, [sp, #28]
 8008608:	9607      	strlt	r6, [sp, #28]
 800860a:	1af2      	sublt	r2, r6, r3
 800860c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800860e:	bfb6      	itet	lt
 8008610:	189b      	addlt	r3, r3, r2
 8008612:	1b9e      	subge	r6, r3, r6
 8008614:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008616:	9b03      	ldr	r3, [sp, #12]
 8008618:	bfb8      	it	lt
 800861a:	2600      	movlt	r6, #0
 800861c:	2b00      	cmp	r3, #0
 800861e:	bfb7      	itett	lt
 8008620:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008624:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008628:	1a9d      	sublt	r5, r3, r2
 800862a:	2300      	movlt	r3, #0
 800862c:	e734      	b.n	8008498 <_dtoa_r+0x720>
 800862e:	9e07      	ldr	r6, [sp, #28]
 8008630:	9d04      	ldr	r5, [sp, #16]
 8008632:	9f08      	ldr	r7, [sp, #32]
 8008634:	e73b      	b.n	80084ae <_dtoa_r+0x736>
 8008636:	9a07      	ldr	r2, [sp, #28]
 8008638:	e767      	b.n	800850a <_dtoa_r+0x792>
 800863a:	9b06      	ldr	r3, [sp, #24]
 800863c:	2b01      	cmp	r3, #1
 800863e:	dc18      	bgt.n	8008672 <_dtoa_r+0x8fa>
 8008640:	f1ba 0f00 	cmp.w	sl, #0
 8008644:	d115      	bne.n	8008672 <_dtoa_r+0x8fa>
 8008646:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800864a:	b993      	cbnz	r3, 8008672 <_dtoa_r+0x8fa>
 800864c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008650:	0d1b      	lsrs	r3, r3, #20
 8008652:	051b      	lsls	r3, r3, #20
 8008654:	b183      	cbz	r3, 8008678 <_dtoa_r+0x900>
 8008656:	9b04      	ldr	r3, [sp, #16]
 8008658:	3301      	adds	r3, #1
 800865a:	9304      	str	r3, [sp, #16]
 800865c:	9b05      	ldr	r3, [sp, #20]
 800865e:	3301      	adds	r3, #1
 8008660:	9305      	str	r3, [sp, #20]
 8008662:	f04f 0801 	mov.w	r8, #1
 8008666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008668:	2b00      	cmp	r3, #0
 800866a:	f47f af6a 	bne.w	8008542 <_dtoa_r+0x7ca>
 800866e:	2001      	movs	r0, #1
 8008670:	e76f      	b.n	8008552 <_dtoa_r+0x7da>
 8008672:	f04f 0800 	mov.w	r8, #0
 8008676:	e7f6      	b.n	8008666 <_dtoa_r+0x8ee>
 8008678:	4698      	mov	r8, r3
 800867a:	e7f4      	b.n	8008666 <_dtoa_r+0x8ee>
 800867c:	f43f af7d 	beq.w	800857a <_dtoa_r+0x802>
 8008680:	4618      	mov	r0, r3
 8008682:	301c      	adds	r0, #28
 8008684:	e772      	b.n	800856c <_dtoa_r+0x7f4>
 8008686:	9b03      	ldr	r3, [sp, #12]
 8008688:	2b00      	cmp	r3, #0
 800868a:	dc37      	bgt.n	80086fc <_dtoa_r+0x984>
 800868c:	9b06      	ldr	r3, [sp, #24]
 800868e:	2b02      	cmp	r3, #2
 8008690:	dd34      	ble.n	80086fc <_dtoa_r+0x984>
 8008692:	9b03      	ldr	r3, [sp, #12]
 8008694:	9302      	str	r3, [sp, #8]
 8008696:	9b02      	ldr	r3, [sp, #8]
 8008698:	b96b      	cbnz	r3, 80086b6 <_dtoa_r+0x93e>
 800869a:	4631      	mov	r1, r6
 800869c:	2205      	movs	r2, #5
 800869e:	4620      	mov	r0, r4
 80086a0:	f000 f9e6 	bl	8008a70 <__multadd>
 80086a4:	4601      	mov	r1, r0
 80086a6:	4606      	mov	r6, r0
 80086a8:	ee18 0a10 	vmov	r0, s16
 80086ac:	f000 fc00 	bl	8008eb0 <__mcmp>
 80086b0:	2800      	cmp	r0, #0
 80086b2:	f73f adbb 	bgt.w	800822c <_dtoa_r+0x4b4>
 80086b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086b8:	9d01      	ldr	r5, [sp, #4]
 80086ba:	43db      	mvns	r3, r3
 80086bc:	9300      	str	r3, [sp, #0]
 80086be:	f04f 0800 	mov.w	r8, #0
 80086c2:	4631      	mov	r1, r6
 80086c4:	4620      	mov	r0, r4
 80086c6:	f000 f9b1 	bl	8008a2c <_Bfree>
 80086ca:	2f00      	cmp	r7, #0
 80086cc:	f43f aea4 	beq.w	8008418 <_dtoa_r+0x6a0>
 80086d0:	f1b8 0f00 	cmp.w	r8, #0
 80086d4:	d005      	beq.n	80086e2 <_dtoa_r+0x96a>
 80086d6:	45b8      	cmp	r8, r7
 80086d8:	d003      	beq.n	80086e2 <_dtoa_r+0x96a>
 80086da:	4641      	mov	r1, r8
 80086dc:	4620      	mov	r0, r4
 80086de:	f000 f9a5 	bl	8008a2c <_Bfree>
 80086e2:	4639      	mov	r1, r7
 80086e4:	4620      	mov	r0, r4
 80086e6:	f000 f9a1 	bl	8008a2c <_Bfree>
 80086ea:	e695      	b.n	8008418 <_dtoa_r+0x6a0>
 80086ec:	2600      	movs	r6, #0
 80086ee:	4637      	mov	r7, r6
 80086f0:	e7e1      	b.n	80086b6 <_dtoa_r+0x93e>
 80086f2:	9700      	str	r7, [sp, #0]
 80086f4:	4637      	mov	r7, r6
 80086f6:	e599      	b.n	800822c <_dtoa_r+0x4b4>
 80086f8:	40240000 	.word	0x40240000
 80086fc:	9b08      	ldr	r3, [sp, #32]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	f000 80ca 	beq.w	8008898 <_dtoa_r+0xb20>
 8008704:	9b03      	ldr	r3, [sp, #12]
 8008706:	9302      	str	r3, [sp, #8]
 8008708:	2d00      	cmp	r5, #0
 800870a:	dd05      	ble.n	8008718 <_dtoa_r+0x9a0>
 800870c:	4639      	mov	r1, r7
 800870e:	462a      	mov	r2, r5
 8008710:	4620      	mov	r0, r4
 8008712:	f000 fb5d 	bl	8008dd0 <__lshift>
 8008716:	4607      	mov	r7, r0
 8008718:	f1b8 0f00 	cmp.w	r8, #0
 800871c:	d05b      	beq.n	80087d6 <_dtoa_r+0xa5e>
 800871e:	6879      	ldr	r1, [r7, #4]
 8008720:	4620      	mov	r0, r4
 8008722:	f000 f943 	bl	80089ac <_Balloc>
 8008726:	4605      	mov	r5, r0
 8008728:	b928      	cbnz	r0, 8008736 <_dtoa_r+0x9be>
 800872a:	4b87      	ldr	r3, [pc, #540]	; (8008948 <_dtoa_r+0xbd0>)
 800872c:	4602      	mov	r2, r0
 800872e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008732:	f7ff bb3b 	b.w	8007dac <_dtoa_r+0x34>
 8008736:	693a      	ldr	r2, [r7, #16]
 8008738:	3202      	adds	r2, #2
 800873a:	0092      	lsls	r2, r2, #2
 800873c:	f107 010c 	add.w	r1, r7, #12
 8008740:	300c      	adds	r0, #12
 8008742:	f000 f925 	bl	8008990 <memcpy>
 8008746:	2201      	movs	r2, #1
 8008748:	4629      	mov	r1, r5
 800874a:	4620      	mov	r0, r4
 800874c:	f000 fb40 	bl	8008dd0 <__lshift>
 8008750:	9b01      	ldr	r3, [sp, #4]
 8008752:	f103 0901 	add.w	r9, r3, #1
 8008756:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800875a:	4413      	add	r3, r2
 800875c:	9305      	str	r3, [sp, #20]
 800875e:	f00a 0301 	and.w	r3, sl, #1
 8008762:	46b8      	mov	r8, r7
 8008764:	9304      	str	r3, [sp, #16]
 8008766:	4607      	mov	r7, r0
 8008768:	4631      	mov	r1, r6
 800876a:	ee18 0a10 	vmov	r0, s16
 800876e:	f7ff fa75 	bl	8007c5c <quorem>
 8008772:	4641      	mov	r1, r8
 8008774:	9002      	str	r0, [sp, #8]
 8008776:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800877a:	ee18 0a10 	vmov	r0, s16
 800877e:	f000 fb97 	bl	8008eb0 <__mcmp>
 8008782:	463a      	mov	r2, r7
 8008784:	9003      	str	r0, [sp, #12]
 8008786:	4631      	mov	r1, r6
 8008788:	4620      	mov	r0, r4
 800878a:	f000 fbad 	bl	8008ee8 <__mdiff>
 800878e:	68c2      	ldr	r2, [r0, #12]
 8008790:	f109 3bff 	add.w	fp, r9, #4294967295
 8008794:	4605      	mov	r5, r0
 8008796:	bb02      	cbnz	r2, 80087da <_dtoa_r+0xa62>
 8008798:	4601      	mov	r1, r0
 800879a:	ee18 0a10 	vmov	r0, s16
 800879e:	f000 fb87 	bl	8008eb0 <__mcmp>
 80087a2:	4602      	mov	r2, r0
 80087a4:	4629      	mov	r1, r5
 80087a6:	4620      	mov	r0, r4
 80087a8:	9207      	str	r2, [sp, #28]
 80087aa:	f000 f93f 	bl	8008a2c <_Bfree>
 80087ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80087b2:	ea43 0102 	orr.w	r1, r3, r2
 80087b6:	9b04      	ldr	r3, [sp, #16]
 80087b8:	430b      	orrs	r3, r1
 80087ba:	464d      	mov	r5, r9
 80087bc:	d10f      	bne.n	80087de <_dtoa_r+0xa66>
 80087be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80087c2:	d02a      	beq.n	800881a <_dtoa_r+0xaa2>
 80087c4:	9b03      	ldr	r3, [sp, #12]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	dd02      	ble.n	80087d0 <_dtoa_r+0xa58>
 80087ca:	9b02      	ldr	r3, [sp, #8]
 80087cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80087d0:	f88b a000 	strb.w	sl, [fp]
 80087d4:	e775      	b.n	80086c2 <_dtoa_r+0x94a>
 80087d6:	4638      	mov	r0, r7
 80087d8:	e7ba      	b.n	8008750 <_dtoa_r+0x9d8>
 80087da:	2201      	movs	r2, #1
 80087dc:	e7e2      	b.n	80087a4 <_dtoa_r+0xa2c>
 80087de:	9b03      	ldr	r3, [sp, #12]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	db04      	blt.n	80087ee <_dtoa_r+0xa76>
 80087e4:	9906      	ldr	r1, [sp, #24]
 80087e6:	430b      	orrs	r3, r1
 80087e8:	9904      	ldr	r1, [sp, #16]
 80087ea:	430b      	orrs	r3, r1
 80087ec:	d122      	bne.n	8008834 <_dtoa_r+0xabc>
 80087ee:	2a00      	cmp	r2, #0
 80087f0:	ddee      	ble.n	80087d0 <_dtoa_r+0xa58>
 80087f2:	ee18 1a10 	vmov	r1, s16
 80087f6:	2201      	movs	r2, #1
 80087f8:	4620      	mov	r0, r4
 80087fa:	f000 fae9 	bl	8008dd0 <__lshift>
 80087fe:	4631      	mov	r1, r6
 8008800:	ee08 0a10 	vmov	s16, r0
 8008804:	f000 fb54 	bl	8008eb0 <__mcmp>
 8008808:	2800      	cmp	r0, #0
 800880a:	dc03      	bgt.n	8008814 <_dtoa_r+0xa9c>
 800880c:	d1e0      	bne.n	80087d0 <_dtoa_r+0xa58>
 800880e:	f01a 0f01 	tst.w	sl, #1
 8008812:	d0dd      	beq.n	80087d0 <_dtoa_r+0xa58>
 8008814:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008818:	d1d7      	bne.n	80087ca <_dtoa_r+0xa52>
 800881a:	2339      	movs	r3, #57	; 0x39
 800881c:	f88b 3000 	strb.w	r3, [fp]
 8008820:	462b      	mov	r3, r5
 8008822:	461d      	mov	r5, r3
 8008824:	3b01      	subs	r3, #1
 8008826:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800882a:	2a39      	cmp	r2, #57	; 0x39
 800882c:	d071      	beq.n	8008912 <_dtoa_r+0xb9a>
 800882e:	3201      	adds	r2, #1
 8008830:	701a      	strb	r2, [r3, #0]
 8008832:	e746      	b.n	80086c2 <_dtoa_r+0x94a>
 8008834:	2a00      	cmp	r2, #0
 8008836:	dd07      	ble.n	8008848 <_dtoa_r+0xad0>
 8008838:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800883c:	d0ed      	beq.n	800881a <_dtoa_r+0xaa2>
 800883e:	f10a 0301 	add.w	r3, sl, #1
 8008842:	f88b 3000 	strb.w	r3, [fp]
 8008846:	e73c      	b.n	80086c2 <_dtoa_r+0x94a>
 8008848:	9b05      	ldr	r3, [sp, #20]
 800884a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800884e:	4599      	cmp	r9, r3
 8008850:	d047      	beq.n	80088e2 <_dtoa_r+0xb6a>
 8008852:	ee18 1a10 	vmov	r1, s16
 8008856:	2300      	movs	r3, #0
 8008858:	220a      	movs	r2, #10
 800885a:	4620      	mov	r0, r4
 800885c:	f000 f908 	bl	8008a70 <__multadd>
 8008860:	45b8      	cmp	r8, r7
 8008862:	ee08 0a10 	vmov	s16, r0
 8008866:	f04f 0300 	mov.w	r3, #0
 800886a:	f04f 020a 	mov.w	r2, #10
 800886e:	4641      	mov	r1, r8
 8008870:	4620      	mov	r0, r4
 8008872:	d106      	bne.n	8008882 <_dtoa_r+0xb0a>
 8008874:	f000 f8fc 	bl	8008a70 <__multadd>
 8008878:	4680      	mov	r8, r0
 800887a:	4607      	mov	r7, r0
 800887c:	f109 0901 	add.w	r9, r9, #1
 8008880:	e772      	b.n	8008768 <_dtoa_r+0x9f0>
 8008882:	f000 f8f5 	bl	8008a70 <__multadd>
 8008886:	4639      	mov	r1, r7
 8008888:	4680      	mov	r8, r0
 800888a:	2300      	movs	r3, #0
 800888c:	220a      	movs	r2, #10
 800888e:	4620      	mov	r0, r4
 8008890:	f000 f8ee 	bl	8008a70 <__multadd>
 8008894:	4607      	mov	r7, r0
 8008896:	e7f1      	b.n	800887c <_dtoa_r+0xb04>
 8008898:	9b03      	ldr	r3, [sp, #12]
 800889a:	9302      	str	r3, [sp, #8]
 800889c:	9d01      	ldr	r5, [sp, #4]
 800889e:	ee18 0a10 	vmov	r0, s16
 80088a2:	4631      	mov	r1, r6
 80088a4:	f7ff f9da 	bl	8007c5c <quorem>
 80088a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80088ac:	9b01      	ldr	r3, [sp, #4]
 80088ae:	f805 ab01 	strb.w	sl, [r5], #1
 80088b2:	1aea      	subs	r2, r5, r3
 80088b4:	9b02      	ldr	r3, [sp, #8]
 80088b6:	4293      	cmp	r3, r2
 80088b8:	dd09      	ble.n	80088ce <_dtoa_r+0xb56>
 80088ba:	ee18 1a10 	vmov	r1, s16
 80088be:	2300      	movs	r3, #0
 80088c0:	220a      	movs	r2, #10
 80088c2:	4620      	mov	r0, r4
 80088c4:	f000 f8d4 	bl	8008a70 <__multadd>
 80088c8:	ee08 0a10 	vmov	s16, r0
 80088cc:	e7e7      	b.n	800889e <_dtoa_r+0xb26>
 80088ce:	9b02      	ldr	r3, [sp, #8]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	bfc8      	it	gt
 80088d4:	461d      	movgt	r5, r3
 80088d6:	9b01      	ldr	r3, [sp, #4]
 80088d8:	bfd8      	it	le
 80088da:	2501      	movle	r5, #1
 80088dc:	441d      	add	r5, r3
 80088de:	f04f 0800 	mov.w	r8, #0
 80088e2:	ee18 1a10 	vmov	r1, s16
 80088e6:	2201      	movs	r2, #1
 80088e8:	4620      	mov	r0, r4
 80088ea:	f000 fa71 	bl	8008dd0 <__lshift>
 80088ee:	4631      	mov	r1, r6
 80088f0:	ee08 0a10 	vmov	s16, r0
 80088f4:	f000 fadc 	bl	8008eb0 <__mcmp>
 80088f8:	2800      	cmp	r0, #0
 80088fa:	dc91      	bgt.n	8008820 <_dtoa_r+0xaa8>
 80088fc:	d102      	bne.n	8008904 <_dtoa_r+0xb8c>
 80088fe:	f01a 0f01 	tst.w	sl, #1
 8008902:	d18d      	bne.n	8008820 <_dtoa_r+0xaa8>
 8008904:	462b      	mov	r3, r5
 8008906:	461d      	mov	r5, r3
 8008908:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800890c:	2a30      	cmp	r2, #48	; 0x30
 800890e:	d0fa      	beq.n	8008906 <_dtoa_r+0xb8e>
 8008910:	e6d7      	b.n	80086c2 <_dtoa_r+0x94a>
 8008912:	9a01      	ldr	r2, [sp, #4]
 8008914:	429a      	cmp	r2, r3
 8008916:	d184      	bne.n	8008822 <_dtoa_r+0xaaa>
 8008918:	9b00      	ldr	r3, [sp, #0]
 800891a:	3301      	adds	r3, #1
 800891c:	9300      	str	r3, [sp, #0]
 800891e:	2331      	movs	r3, #49	; 0x31
 8008920:	7013      	strb	r3, [r2, #0]
 8008922:	e6ce      	b.n	80086c2 <_dtoa_r+0x94a>
 8008924:	4b09      	ldr	r3, [pc, #36]	; (800894c <_dtoa_r+0xbd4>)
 8008926:	f7ff ba95 	b.w	8007e54 <_dtoa_r+0xdc>
 800892a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800892c:	2b00      	cmp	r3, #0
 800892e:	f47f aa6e 	bne.w	8007e0e <_dtoa_r+0x96>
 8008932:	4b07      	ldr	r3, [pc, #28]	; (8008950 <_dtoa_r+0xbd8>)
 8008934:	f7ff ba8e 	b.w	8007e54 <_dtoa_r+0xdc>
 8008938:	9b02      	ldr	r3, [sp, #8]
 800893a:	2b00      	cmp	r3, #0
 800893c:	dcae      	bgt.n	800889c <_dtoa_r+0xb24>
 800893e:	9b06      	ldr	r3, [sp, #24]
 8008940:	2b02      	cmp	r3, #2
 8008942:	f73f aea8 	bgt.w	8008696 <_dtoa_r+0x91e>
 8008946:	e7a9      	b.n	800889c <_dtoa_r+0xb24>
 8008948:	0800ed53 	.word	0x0800ed53
 800894c:	0800ec74 	.word	0x0800ec74
 8008950:	0800ecd4 	.word	0x0800ecd4

08008954 <fiprintf>:
 8008954:	b40e      	push	{r1, r2, r3}
 8008956:	b503      	push	{r0, r1, lr}
 8008958:	4601      	mov	r1, r0
 800895a:	ab03      	add	r3, sp, #12
 800895c:	4805      	ldr	r0, [pc, #20]	; (8008974 <fiprintf+0x20>)
 800895e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008962:	6800      	ldr	r0, [r0, #0]
 8008964:	9301      	str	r3, [sp, #4]
 8008966:	f000 fcc5 	bl	80092f4 <_vfiprintf_r>
 800896a:	b002      	add	sp, #8
 800896c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008970:	b003      	add	sp, #12
 8008972:	4770      	bx	lr
 8008974:	20000018 	.word	0x20000018

08008978 <_localeconv_r>:
 8008978:	4800      	ldr	r0, [pc, #0]	; (800897c <_localeconv_r+0x4>)
 800897a:	4770      	bx	lr
 800897c:	2000016c 	.word	0x2000016c

08008980 <malloc>:
 8008980:	4b02      	ldr	r3, [pc, #8]	; (800898c <malloc+0xc>)
 8008982:	4601      	mov	r1, r0
 8008984:	6818      	ldr	r0, [r3, #0]
 8008986:	f000 bc17 	b.w	80091b8 <_malloc_r>
 800898a:	bf00      	nop
 800898c:	20000018 	.word	0x20000018

08008990 <memcpy>:
 8008990:	440a      	add	r2, r1
 8008992:	4291      	cmp	r1, r2
 8008994:	f100 33ff 	add.w	r3, r0, #4294967295
 8008998:	d100      	bne.n	800899c <memcpy+0xc>
 800899a:	4770      	bx	lr
 800899c:	b510      	push	{r4, lr}
 800899e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089a6:	4291      	cmp	r1, r2
 80089a8:	d1f9      	bne.n	800899e <memcpy+0xe>
 80089aa:	bd10      	pop	{r4, pc}

080089ac <_Balloc>:
 80089ac:	b570      	push	{r4, r5, r6, lr}
 80089ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80089b0:	4604      	mov	r4, r0
 80089b2:	460d      	mov	r5, r1
 80089b4:	b976      	cbnz	r6, 80089d4 <_Balloc+0x28>
 80089b6:	2010      	movs	r0, #16
 80089b8:	f7ff ffe2 	bl	8008980 <malloc>
 80089bc:	4602      	mov	r2, r0
 80089be:	6260      	str	r0, [r4, #36]	; 0x24
 80089c0:	b920      	cbnz	r0, 80089cc <_Balloc+0x20>
 80089c2:	4b18      	ldr	r3, [pc, #96]	; (8008a24 <_Balloc+0x78>)
 80089c4:	4818      	ldr	r0, [pc, #96]	; (8008a28 <_Balloc+0x7c>)
 80089c6:	2166      	movs	r1, #102	; 0x66
 80089c8:	f7ff f92a 	bl	8007c20 <__assert_func>
 80089cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089d0:	6006      	str	r6, [r0, #0]
 80089d2:	60c6      	str	r6, [r0, #12]
 80089d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80089d6:	68f3      	ldr	r3, [r6, #12]
 80089d8:	b183      	cbz	r3, 80089fc <_Balloc+0x50>
 80089da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80089e2:	b9b8      	cbnz	r0, 8008a14 <_Balloc+0x68>
 80089e4:	2101      	movs	r1, #1
 80089e6:	fa01 f605 	lsl.w	r6, r1, r5
 80089ea:	1d72      	adds	r2, r6, #5
 80089ec:	0092      	lsls	r2, r2, #2
 80089ee:	4620      	mov	r0, r4
 80089f0:	f000 fb60 	bl	80090b4 <_calloc_r>
 80089f4:	b160      	cbz	r0, 8008a10 <_Balloc+0x64>
 80089f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80089fa:	e00e      	b.n	8008a1a <_Balloc+0x6e>
 80089fc:	2221      	movs	r2, #33	; 0x21
 80089fe:	2104      	movs	r1, #4
 8008a00:	4620      	mov	r0, r4
 8008a02:	f000 fb57 	bl	80090b4 <_calloc_r>
 8008a06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a08:	60f0      	str	r0, [r6, #12]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d1e4      	bne.n	80089da <_Balloc+0x2e>
 8008a10:	2000      	movs	r0, #0
 8008a12:	bd70      	pop	{r4, r5, r6, pc}
 8008a14:	6802      	ldr	r2, [r0, #0]
 8008a16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a20:	e7f7      	b.n	8008a12 <_Balloc+0x66>
 8008a22:	bf00      	nop
 8008a24:	0800ece1 	.word	0x0800ece1
 8008a28:	0800ed64 	.word	0x0800ed64

08008a2c <_Bfree>:
 8008a2c:	b570      	push	{r4, r5, r6, lr}
 8008a2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008a30:	4605      	mov	r5, r0
 8008a32:	460c      	mov	r4, r1
 8008a34:	b976      	cbnz	r6, 8008a54 <_Bfree+0x28>
 8008a36:	2010      	movs	r0, #16
 8008a38:	f7ff ffa2 	bl	8008980 <malloc>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	6268      	str	r0, [r5, #36]	; 0x24
 8008a40:	b920      	cbnz	r0, 8008a4c <_Bfree+0x20>
 8008a42:	4b09      	ldr	r3, [pc, #36]	; (8008a68 <_Bfree+0x3c>)
 8008a44:	4809      	ldr	r0, [pc, #36]	; (8008a6c <_Bfree+0x40>)
 8008a46:	218a      	movs	r1, #138	; 0x8a
 8008a48:	f7ff f8ea 	bl	8007c20 <__assert_func>
 8008a4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a50:	6006      	str	r6, [r0, #0]
 8008a52:	60c6      	str	r6, [r0, #12]
 8008a54:	b13c      	cbz	r4, 8008a66 <_Bfree+0x3a>
 8008a56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008a58:	6862      	ldr	r2, [r4, #4]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a60:	6021      	str	r1, [r4, #0]
 8008a62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a66:	bd70      	pop	{r4, r5, r6, pc}
 8008a68:	0800ece1 	.word	0x0800ece1
 8008a6c:	0800ed64 	.word	0x0800ed64

08008a70 <__multadd>:
 8008a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a74:	690d      	ldr	r5, [r1, #16]
 8008a76:	4607      	mov	r7, r0
 8008a78:	460c      	mov	r4, r1
 8008a7a:	461e      	mov	r6, r3
 8008a7c:	f101 0c14 	add.w	ip, r1, #20
 8008a80:	2000      	movs	r0, #0
 8008a82:	f8dc 3000 	ldr.w	r3, [ip]
 8008a86:	b299      	uxth	r1, r3
 8008a88:	fb02 6101 	mla	r1, r2, r1, r6
 8008a8c:	0c1e      	lsrs	r6, r3, #16
 8008a8e:	0c0b      	lsrs	r3, r1, #16
 8008a90:	fb02 3306 	mla	r3, r2, r6, r3
 8008a94:	b289      	uxth	r1, r1
 8008a96:	3001      	adds	r0, #1
 8008a98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a9c:	4285      	cmp	r5, r0
 8008a9e:	f84c 1b04 	str.w	r1, [ip], #4
 8008aa2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008aa6:	dcec      	bgt.n	8008a82 <__multadd+0x12>
 8008aa8:	b30e      	cbz	r6, 8008aee <__multadd+0x7e>
 8008aaa:	68a3      	ldr	r3, [r4, #8]
 8008aac:	42ab      	cmp	r3, r5
 8008aae:	dc19      	bgt.n	8008ae4 <__multadd+0x74>
 8008ab0:	6861      	ldr	r1, [r4, #4]
 8008ab2:	4638      	mov	r0, r7
 8008ab4:	3101      	adds	r1, #1
 8008ab6:	f7ff ff79 	bl	80089ac <_Balloc>
 8008aba:	4680      	mov	r8, r0
 8008abc:	b928      	cbnz	r0, 8008aca <__multadd+0x5a>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	4b0c      	ldr	r3, [pc, #48]	; (8008af4 <__multadd+0x84>)
 8008ac2:	480d      	ldr	r0, [pc, #52]	; (8008af8 <__multadd+0x88>)
 8008ac4:	21b5      	movs	r1, #181	; 0xb5
 8008ac6:	f7ff f8ab 	bl	8007c20 <__assert_func>
 8008aca:	6922      	ldr	r2, [r4, #16]
 8008acc:	3202      	adds	r2, #2
 8008ace:	f104 010c 	add.w	r1, r4, #12
 8008ad2:	0092      	lsls	r2, r2, #2
 8008ad4:	300c      	adds	r0, #12
 8008ad6:	f7ff ff5b 	bl	8008990 <memcpy>
 8008ada:	4621      	mov	r1, r4
 8008adc:	4638      	mov	r0, r7
 8008ade:	f7ff ffa5 	bl	8008a2c <_Bfree>
 8008ae2:	4644      	mov	r4, r8
 8008ae4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008ae8:	3501      	adds	r5, #1
 8008aea:	615e      	str	r6, [r3, #20]
 8008aec:	6125      	str	r5, [r4, #16]
 8008aee:	4620      	mov	r0, r4
 8008af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008af4:	0800ed53 	.word	0x0800ed53
 8008af8:	0800ed64 	.word	0x0800ed64

08008afc <__hi0bits>:
 8008afc:	0c03      	lsrs	r3, r0, #16
 8008afe:	041b      	lsls	r3, r3, #16
 8008b00:	b9d3      	cbnz	r3, 8008b38 <__hi0bits+0x3c>
 8008b02:	0400      	lsls	r0, r0, #16
 8008b04:	2310      	movs	r3, #16
 8008b06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008b0a:	bf04      	itt	eq
 8008b0c:	0200      	lsleq	r0, r0, #8
 8008b0e:	3308      	addeq	r3, #8
 8008b10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008b14:	bf04      	itt	eq
 8008b16:	0100      	lsleq	r0, r0, #4
 8008b18:	3304      	addeq	r3, #4
 8008b1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008b1e:	bf04      	itt	eq
 8008b20:	0080      	lsleq	r0, r0, #2
 8008b22:	3302      	addeq	r3, #2
 8008b24:	2800      	cmp	r0, #0
 8008b26:	db05      	blt.n	8008b34 <__hi0bits+0x38>
 8008b28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008b2c:	f103 0301 	add.w	r3, r3, #1
 8008b30:	bf08      	it	eq
 8008b32:	2320      	moveq	r3, #32
 8008b34:	4618      	mov	r0, r3
 8008b36:	4770      	bx	lr
 8008b38:	2300      	movs	r3, #0
 8008b3a:	e7e4      	b.n	8008b06 <__hi0bits+0xa>

08008b3c <__lo0bits>:
 8008b3c:	6803      	ldr	r3, [r0, #0]
 8008b3e:	f013 0207 	ands.w	r2, r3, #7
 8008b42:	4601      	mov	r1, r0
 8008b44:	d00b      	beq.n	8008b5e <__lo0bits+0x22>
 8008b46:	07da      	lsls	r2, r3, #31
 8008b48:	d423      	bmi.n	8008b92 <__lo0bits+0x56>
 8008b4a:	0798      	lsls	r0, r3, #30
 8008b4c:	bf49      	itett	mi
 8008b4e:	085b      	lsrmi	r3, r3, #1
 8008b50:	089b      	lsrpl	r3, r3, #2
 8008b52:	2001      	movmi	r0, #1
 8008b54:	600b      	strmi	r3, [r1, #0]
 8008b56:	bf5c      	itt	pl
 8008b58:	600b      	strpl	r3, [r1, #0]
 8008b5a:	2002      	movpl	r0, #2
 8008b5c:	4770      	bx	lr
 8008b5e:	b298      	uxth	r0, r3
 8008b60:	b9a8      	cbnz	r0, 8008b8e <__lo0bits+0x52>
 8008b62:	0c1b      	lsrs	r3, r3, #16
 8008b64:	2010      	movs	r0, #16
 8008b66:	b2da      	uxtb	r2, r3
 8008b68:	b90a      	cbnz	r2, 8008b6e <__lo0bits+0x32>
 8008b6a:	3008      	adds	r0, #8
 8008b6c:	0a1b      	lsrs	r3, r3, #8
 8008b6e:	071a      	lsls	r2, r3, #28
 8008b70:	bf04      	itt	eq
 8008b72:	091b      	lsreq	r3, r3, #4
 8008b74:	3004      	addeq	r0, #4
 8008b76:	079a      	lsls	r2, r3, #30
 8008b78:	bf04      	itt	eq
 8008b7a:	089b      	lsreq	r3, r3, #2
 8008b7c:	3002      	addeq	r0, #2
 8008b7e:	07da      	lsls	r2, r3, #31
 8008b80:	d403      	bmi.n	8008b8a <__lo0bits+0x4e>
 8008b82:	085b      	lsrs	r3, r3, #1
 8008b84:	f100 0001 	add.w	r0, r0, #1
 8008b88:	d005      	beq.n	8008b96 <__lo0bits+0x5a>
 8008b8a:	600b      	str	r3, [r1, #0]
 8008b8c:	4770      	bx	lr
 8008b8e:	4610      	mov	r0, r2
 8008b90:	e7e9      	b.n	8008b66 <__lo0bits+0x2a>
 8008b92:	2000      	movs	r0, #0
 8008b94:	4770      	bx	lr
 8008b96:	2020      	movs	r0, #32
 8008b98:	4770      	bx	lr
	...

08008b9c <__i2b>:
 8008b9c:	b510      	push	{r4, lr}
 8008b9e:	460c      	mov	r4, r1
 8008ba0:	2101      	movs	r1, #1
 8008ba2:	f7ff ff03 	bl	80089ac <_Balloc>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	b928      	cbnz	r0, 8008bb6 <__i2b+0x1a>
 8008baa:	4b05      	ldr	r3, [pc, #20]	; (8008bc0 <__i2b+0x24>)
 8008bac:	4805      	ldr	r0, [pc, #20]	; (8008bc4 <__i2b+0x28>)
 8008bae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008bb2:	f7ff f835 	bl	8007c20 <__assert_func>
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	6144      	str	r4, [r0, #20]
 8008bba:	6103      	str	r3, [r0, #16]
 8008bbc:	bd10      	pop	{r4, pc}
 8008bbe:	bf00      	nop
 8008bc0:	0800ed53 	.word	0x0800ed53
 8008bc4:	0800ed64 	.word	0x0800ed64

08008bc8 <__multiply>:
 8008bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bcc:	4691      	mov	r9, r2
 8008bce:	690a      	ldr	r2, [r1, #16]
 8008bd0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	bfb8      	it	lt
 8008bd8:	460b      	movlt	r3, r1
 8008bda:	460c      	mov	r4, r1
 8008bdc:	bfbc      	itt	lt
 8008bde:	464c      	movlt	r4, r9
 8008be0:	4699      	movlt	r9, r3
 8008be2:	6927      	ldr	r7, [r4, #16]
 8008be4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008be8:	68a3      	ldr	r3, [r4, #8]
 8008bea:	6861      	ldr	r1, [r4, #4]
 8008bec:	eb07 060a 	add.w	r6, r7, sl
 8008bf0:	42b3      	cmp	r3, r6
 8008bf2:	b085      	sub	sp, #20
 8008bf4:	bfb8      	it	lt
 8008bf6:	3101      	addlt	r1, #1
 8008bf8:	f7ff fed8 	bl	80089ac <_Balloc>
 8008bfc:	b930      	cbnz	r0, 8008c0c <__multiply+0x44>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	4b44      	ldr	r3, [pc, #272]	; (8008d14 <__multiply+0x14c>)
 8008c02:	4845      	ldr	r0, [pc, #276]	; (8008d18 <__multiply+0x150>)
 8008c04:	f240 115d 	movw	r1, #349	; 0x15d
 8008c08:	f7ff f80a 	bl	8007c20 <__assert_func>
 8008c0c:	f100 0514 	add.w	r5, r0, #20
 8008c10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008c14:	462b      	mov	r3, r5
 8008c16:	2200      	movs	r2, #0
 8008c18:	4543      	cmp	r3, r8
 8008c1a:	d321      	bcc.n	8008c60 <__multiply+0x98>
 8008c1c:	f104 0314 	add.w	r3, r4, #20
 8008c20:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008c24:	f109 0314 	add.w	r3, r9, #20
 8008c28:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008c2c:	9202      	str	r2, [sp, #8]
 8008c2e:	1b3a      	subs	r2, r7, r4
 8008c30:	3a15      	subs	r2, #21
 8008c32:	f022 0203 	bic.w	r2, r2, #3
 8008c36:	3204      	adds	r2, #4
 8008c38:	f104 0115 	add.w	r1, r4, #21
 8008c3c:	428f      	cmp	r7, r1
 8008c3e:	bf38      	it	cc
 8008c40:	2204      	movcc	r2, #4
 8008c42:	9201      	str	r2, [sp, #4]
 8008c44:	9a02      	ldr	r2, [sp, #8]
 8008c46:	9303      	str	r3, [sp, #12]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d80c      	bhi.n	8008c66 <__multiply+0x9e>
 8008c4c:	2e00      	cmp	r6, #0
 8008c4e:	dd03      	ble.n	8008c58 <__multiply+0x90>
 8008c50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d05a      	beq.n	8008d0e <__multiply+0x146>
 8008c58:	6106      	str	r6, [r0, #16]
 8008c5a:	b005      	add	sp, #20
 8008c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c60:	f843 2b04 	str.w	r2, [r3], #4
 8008c64:	e7d8      	b.n	8008c18 <__multiply+0x50>
 8008c66:	f8b3 a000 	ldrh.w	sl, [r3]
 8008c6a:	f1ba 0f00 	cmp.w	sl, #0
 8008c6e:	d024      	beq.n	8008cba <__multiply+0xf2>
 8008c70:	f104 0e14 	add.w	lr, r4, #20
 8008c74:	46a9      	mov	r9, r5
 8008c76:	f04f 0c00 	mov.w	ip, #0
 8008c7a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008c7e:	f8d9 1000 	ldr.w	r1, [r9]
 8008c82:	fa1f fb82 	uxth.w	fp, r2
 8008c86:	b289      	uxth	r1, r1
 8008c88:	fb0a 110b 	mla	r1, sl, fp, r1
 8008c8c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008c90:	f8d9 2000 	ldr.w	r2, [r9]
 8008c94:	4461      	add	r1, ip
 8008c96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c9a:	fb0a c20b 	mla	r2, sl, fp, ip
 8008c9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008ca2:	b289      	uxth	r1, r1
 8008ca4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008ca8:	4577      	cmp	r7, lr
 8008caa:	f849 1b04 	str.w	r1, [r9], #4
 8008cae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008cb2:	d8e2      	bhi.n	8008c7a <__multiply+0xb2>
 8008cb4:	9a01      	ldr	r2, [sp, #4]
 8008cb6:	f845 c002 	str.w	ip, [r5, r2]
 8008cba:	9a03      	ldr	r2, [sp, #12]
 8008cbc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008cc0:	3304      	adds	r3, #4
 8008cc2:	f1b9 0f00 	cmp.w	r9, #0
 8008cc6:	d020      	beq.n	8008d0a <__multiply+0x142>
 8008cc8:	6829      	ldr	r1, [r5, #0]
 8008cca:	f104 0c14 	add.w	ip, r4, #20
 8008cce:	46ae      	mov	lr, r5
 8008cd0:	f04f 0a00 	mov.w	sl, #0
 8008cd4:	f8bc b000 	ldrh.w	fp, [ip]
 8008cd8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008cdc:	fb09 220b 	mla	r2, r9, fp, r2
 8008ce0:	4492      	add	sl, r2
 8008ce2:	b289      	uxth	r1, r1
 8008ce4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008ce8:	f84e 1b04 	str.w	r1, [lr], #4
 8008cec:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008cf0:	f8be 1000 	ldrh.w	r1, [lr]
 8008cf4:	0c12      	lsrs	r2, r2, #16
 8008cf6:	fb09 1102 	mla	r1, r9, r2, r1
 8008cfa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008cfe:	4567      	cmp	r7, ip
 8008d00:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008d04:	d8e6      	bhi.n	8008cd4 <__multiply+0x10c>
 8008d06:	9a01      	ldr	r2, [sp, #4]
 8008d08:	50a9      	str	r1, [r5, r2]
 8008d0a:	3504      	adds	r5, #4
 8008d0c:	e79a      	b.n	8008c44 <__multiply+0x7c>
 8008d0e:	3e01      	subs	r6, #1
 8008d10:	e79c      	b.n	8008c4c <__multiply+0x84>
 8008d12:	bf00      	nop
 8008d14:	0800ed53 	.word	0x0800ed53
 8008d18:	0800ed64 	.word	0x0800ed64

08008d1c <__pow5mult>:
 8008d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d20:	4615      	mov	r5, r2
 8008d22:	f012 0203 	ands.w	r2, r2, #3
 8008d26:	4606      	mov	r6, r0
 8008d28:	460f      	mov	r7, r1
 8008d2a:	d007      	beq.n	8008d3c <__pow5mult+0x20>
 8008d2c:	4c25      	ldr	r4, [pc, #148]	; (8008dc4 <__pow5mult+0xa8>)
 8008d2e:	3a01      	subs	r2, #1
 8008d30:	2300      	movs	r3, #0
 8008d32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d36:	f7ff fe9b 	bl	8008a70 <__multadd>
 8008d3a:	4607      	mov	r7, r0
 8008d3c:	10ad      	asrs	r5, r5, #2
 8008d3e:	d03d      	beq.n	8008dbc <__pow5mult+0xa0>
 8008d40:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008d42:	b97c      	cbnz	r4, 8008d64 <__pow5mult+0x48>
 8008d44:	2010      	movs	r0, #16
 8008d46:	f7ff fe1b 	bl	8008980 <malloc>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	6270      	str	r0, [r6, #36]	; 0x24
 8008d4e:	b928      	cbnz	r0, 8008d5c <__pow5mult+0x40>
 8008d50:	4b1d      	ldr	r3, [pc, #116]	; (8008dc8 <__pow5mult+0xac>)
 8008d52:	481e      	ldr	r0, [pc, #120]	; (8008dcc <__pow5mult+0xb0>)
 8008d54:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008d58:	f7fe ff62 	bl	8007c20 <__assert_func>
 8008d5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d60:	6004      	str	r4, [r0, #0]
 8008d62:	60c4      	str	r4, [r0, #12]
 8008d64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008d68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d6c:	b94c      	cbnz	r4, 8008d82 <__pow5mult+0x66>
 8008d6e:	f240 2171 	movw	r1, #625	; 0x271
 8008d72:	4630      	mov	r0, r6
 8008d74:	f7ff ff12 	bl	8008b9c <__i2b>
 8008d78:	2300      	movs	r3, #0
 8008d7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d7e:	4604      	mov	r4, r0
 8008d80:	6003      	str	r3, [r0, #0]
 8008d82:	f04f 0900 	mov.w	r9, #0
 8008d86:	07eb      	lsls	r3, r5, #31
 8008d88:	d50a      	bpl.n	8008da0 <__pow5mult+0x84>
 8008d8a:	4639      	mov	r1, r7
 8008d8c:	4622      	mov	r2, r4
 8008d8e:	4630      	mov	r0, r6
 8008d90:	f7ff ff1a 	bl	8008bc8 <__multiply>
 8008d94:	4639      	mov	r1, r7
 8008d96:	4680      	mov	r8, r0
 8008d98:	4630      	mov	r0, r6
 8008d9a:	f7ff fe47 	bl	8008a2c <_Bfree>
 8008d9e:	4647      	mov	r7, r8
 8008da0:	106d      	asrs	r5, r5, #1
 8008da2:	d00b      	beq.n	8008dbc <__pow5mult+0xa0>
 8008da4:	6820      	ldr	r0, [r4, #0]
 8008da6:	b938      	cbnz	r0, 8008db8 <__pow5mult+0x9c>
 8008da8:	4622      	mov	r2, r4
 8008daa:	4621      	mov	r1, r4
 8008dac:	4630      	mov	r0, r6
 8008dae:	f7ff ff0b 	bl	8008bc8 <__multiply>
 8008db2:	6020      	str	r0, [r4, #0]
 8008db4:	f8c0 9000 	str.w	r9, [r0]
 8008db8:	4604      	mov	r4, r0
 8008dba:	e7e4      	b.n	8008d86 <__pow5mult+0x6a>
 8008dbc:	4638      	mov	r0, r7
 8008dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dc2:	bf00      	nop
 8008dc4:	0800eeb0 	.word	0x0800eeb0
 8008dc8:	0800ece1 	.word	0x0800ece1
 8008dcc:	0800ed64 	.word	0x0800ed64

08008dd0 <__lshift>:
 8008dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd4:	460c      	mov	r4, r1
 8008dd6:	6849      	ldr	r1, [r1, #4]
 8008dd8:	6923      	ldr	r3, [r4, #16]
 8008dda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008dde:	68a3      	ldr	r3, [r4, #8]
 8008de0:	4607      	mov	r7, r0
 8008de2:	4691      	mov	r9, r2
 8008de4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008de8:	f108 0601 	add.w	r6, r8, #1
 8008dec:	42b3      	cmp	r3, r6
 8008dee:	db0b      	blt.n	8008e08 <__lshift+0x38>
 8008df0:	4638      	mov	r0, r7
 8008df2:	f7ff fddb 	bl	80089ac <_Balloc>
 8008df6:	4605      	mov	r5, r0
 8008df8:	b948      	cbnz	r0, 8008e0e <__lshift+0x3e>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	4b2a      	ldr	r3, [pc, #168]	; (8008ea8 <__lshift+0xd8>)
 8008dfe:	482b      	ldr	r0, [pc, #172]	; (8008eac <__lshift+0xdc>)
 8008e00:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008e04:	f7fe ff0c 	bl	8007c20 <__assert_func>
 8008e08:	3101      	adds	r1, #1
 8008e0a:	005b      	lsls	r3, r3, #1
 8008e0c:	e7ee      	b.n	8008dec <__lshift+0x1c>
 8008e0e:	2300      	movs	r3, #0
 8008e10:	f100 0114 	add.w	r1, r0, #20
 8008e14:	f100 0210 	add.w	r2, r0, #16
 8008e18:	4618      	mov	r0, r3
 8008e1a:	4553      	cmp	r3, sl
 8008e1c:	db37      	blt.n	8008e8e <__lshift+0xbe>
 8008e1e:	6920      	ldr	r0, [r4, #16]
 8008e20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e24:	f104 0314 	add.w	r3, r4, #20
 8008e28:	f019 091f 	ands.w	r9, r9, #31
 8008e2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008e34:	d02f      	beq.n	8008e96 <__lshift+0xc6>
 8008e36:	f1c9 0e20 	rsb	lr, r9, #32
 8008e3a:	468a      	mov	sl, r1
 8008e3c:	f04f 0c00 	mov.w	ip, #0
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	fa02 f209 	lsl.w	r2, r2, r9
 8008e46:	ea42 020c 	orr.w	r2, r2, ip
 8008e4a:	f84a 2b04 	str.w	r2, [sl], #4
 8008e4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e52:	4298      	cmp	r0, r3
 8008e54:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008e58:	d8f2      	bhi.n	8008e40 <__lshift+0x70>
 8008e5a:	1b03      	subs	r3, r0, r4
 8008e5c:	3b15      	subs	r3, #21
 8008e5e:	f023 0303 	bic.w	r3, r3, #3
 8008e62:	3304      	adds	r3, #4
 8008e64:	f104 0215 	add.w	r2, r4, #21
 8008e68:	4290      	cmp	r0, r2
 8008e6a:	bf38      	it	cc
 8008e6c:	2304      	movcc	r3, #4
 8008e6e:	f841 c003 	str.w	ip, [r1, r3]
 8008e72:	f1bc 0f00 	cmp.w	ip, #0
 8008e76:	d001      	beq.n	8008e7c <__lshift+0xac>
 8008e78:	f108 0602 	add.w	r6, r8, #2
 8008e7c:	3e01      	subs	r6, #1
 8008e7e:	4638      	mov	r0, r7
 8008e80:	612e      	str	r6, [r5, #16]
 8008e82:	4621      	mov	r1, r4
 8008e84:	f7ff fdd2 	bl	8008a2c <_Bfree>
 8008e88:	4628      	mov	r0, r5
 8008e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e92:	3301      	adds	r3, #1
 8008e94:	e7c1      	b.n	8008e1a <__lshift+0x4a>
 8008e96:	3904      	subs	r1, #4
 8008e98:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e9c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ea0:	4298      	cmp	r0, r3
 8008ea2:	d8f9      	bhi.n	8008e98 <__lshift+0xc8>
 8008ea4:	e7ea      	b.n	8008e7c <__lshift+0xac>
 8008ea6:	bf00      	nop
 8008ea8:	0800ed53 	.word	0x0800ed53
 8008eac:	0800ed64 	.word	0x0800ed64

08008eb0 <__mcmp>:
 8008eb0:	b530      	push	{r4, r5, lr}
 8008eb2:	6902      	ldr	r2, [r0, #16]
 8008eb4:	690c      	ldr	r4, [r1, #16]
 8008eb6:	1b12      	subs	r2, r2, r4
 8008eb8:	d10e      	bne.n	8008ed8 <__mcmp+0x28>
 8008eba:	f100 0314 	add.w	r3, r0, #20
 8008ebe:	3114      	adds	r1, #20
 8008ec0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008ec4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008ec8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008ecc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008ed0:	42a5      	cmp	r5, r4
 8008ed2:	d003      	beq.n	8008edc <__mcmp+0x2c>
 8008ed4:	d305      	bcc.n	8008ee2 <__mcmp+0x32>
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	4610      	mov	r0, r2
 8008eda:	bd30      	pop	{r4, r5, pc}
 8008edc:	4283      	cmp	r3, r0
 8008ede:	d3f3      	bcc.n	8008ec8 <__mcmp+0x18>
 8008ee0:	e7fa      	b.n	8008ed8 <__mcmp+0x28>
 8008ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ee6:	e7f7      	b.n	8008ed8 <__mcmp+0x28>

08008ee8 <__mdiff>:
 8008ee8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eec:	460c      	mov	r4, r1
 8008eee:	4606      	mov	r6, r0
 8008ef0:	4611      	mov	r1, r2
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	4690      	mov	r8, r2
 8008ef6:	f7ff ffdb 	bl	8008eb0 <__mcmp>
 8008efa:	1e05      	subs	r5, r0, #0
 8008efc:	d110      	bne.n	8008f20 <__mdiff+0x38>
 8008efe:	4629      	mov	r1, r5
 8008f00:	4630      	mov	r0, r6
 8008f02:	f7ff fd53 	bl	80089ac <_Balloc>
 8008f06:	b930      	cbnz	r0, 8008f16 <__mdiff+0x2e>
 8008f08:	4b3a      	ldr	r3, [pc, #232]	; (8008ff4 <__mdiff+0x10c>)
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	f240 2132 	movw	r1, #562	; 0x232
 8008f10:	4839      	ldr	r0, [pc, #228]	; (8008ff8 <__mdiff+0x110>)
 8008f12:	f7fe fe85 	bl	8007c20 <__assert_func>
 8008f16:	2301      	movs	r3, #1
 8008f18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f20:	bfa4      	itt	ge
 8008f22:	4643      	movge	r3, r8
 8008f24:	46a0      	movge	r8, r4
 8008f26:	4630      	mov	r0, r6
 8008f28:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008f2c:	bfa6      	itte	ge
 8008f2e:	461c      	movge	r4, r3
 8008f30:	2500      	movge	r5, #0
 8008f32:	2501      	movlt	r5, #1
 8008f34:	f7ff fd3a 	bl	80089ac <_Balloc>
 8008f38:	b920      	cbnz	r0, 8008f44 <__mdiff+0x5c>
 8008f3a:	4b2e      	ldr	r3, [pc, #184]	; (8008ff4 <__mdiff+0x10c>)
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008f42:	e7e5      	b.n	8008f10 <__mdiff+0x28>
 8008f44:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008f48:	6926      	ldr	r6, [r4, #16]
 8008f4a:	60c5      	str	r5, [r0, #12]
 8008f4c:	f104 0914 	add.w	r9, r4, #20
 8008f50:	f108 0514 	add.w	r5, r8, #20
 8008f54:	f100 0e14 	add.w	lr, r0, #20
 8008f58:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008f5c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008f60:	f108 0210 	add.w	r2, r8, #16
 8008f64:	46f2      	mov	sl, lr
 8008f66:	2100      	movs	r1, #0
 8008f68:	f859 3b04 	ldr.w	r3, [r9], #4
 8008f6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008f70:	fa1f f883 	uxth.w	r8, r3
 8008f74:	fa11 f18b 	uxtah	r1, r1, fp
 8008f78:	0c1b      	lsrs	r3, r3, #16
 8008f7a:	eba1 0808 	sub.w	r8, r1, r8
 8008f7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008f82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008f86:	fa1f f888 	uxth.w	r8, r8
 8008f8a:	1419      	asrs	r1, r3, #16
 8008f8c:	454e      	cmp	r6, r9
 8008f8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008f92:	f84a 3b04 	str.w	r3, [sl], #4
 8008f96:	d8e7      	bhi.n	8008f68 <__mdiff+0x80>
 8008f98:	1b33      	subs	r3, r6, r4
 8008f9a:	3b15      	subs	r3, #21
 8008f9c:	f023 0303 	bic.w	r3, r3, #3
 8008fa0:	3304      	adds	r3, #4
 8008fa2:	3415      	adds	r4, #21
 8008fa4:	42a6      	cmp	r6, r4
 8008fa6:	bf38      	it	cc
 8008fa8:	2304      	movcc	r3, #4
 8008faa:	441d      	add	r5, r3
 8008fac:	4473      	add	r3, lr
 8008fae:	469e      	mov	lr, r3
 8008fb0:	462e      	mov	r6, r5
 8008fb2:	4566      	cmp	r6, ip
 8008fb4:	d30e      	bcc.n	8008fd4 <__mdiff+0xec>
 8008fb6:	f10c 0203 	add.w	r2, ip, #3
 8008fba:	1b52      	subs	r2, r2, r5
 8008fbc:	f022 0203 	bic.w	r2, r2, #3
 8008fc0:	3d03      	subs	r5, #3
 8008fc2:	45ac      	cmp	ip, r5
 8008fc4:	bf38      	it	cc
 8008fc6:	2200      	movcc	r2, #0
 8008fc8:	441a      	add	r2, r3
 8008fca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008fce:	b17b      	cbz	r3, 8008ff0 <__mdiff+0x108>
 8008fd0:	6107      	str	r7, [r0, #16]
 8008fd2:	e7a3      	b.n	8008f1c <__mdiff+0x34>
 8008fd4:	f856 8b04 	ldr.w	r8, [r6], #4
 8008fd8:	fa11 f288 	uxtah	r2, r1, r8
 8008fdc:	1414      	asrs	r4, r2, #16
 8008fde:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008fe2:	b292      	uxth	r2, r2
 8008fe4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008fe8:	f84e 2b04 	str.w	r2, [lr], #4
 8008fec:	1421      	asrs	r1, r4, #16
 8008fee:	e7e0      	b.n	8008fb2 <__mdiff+0xca>
 8008ff0:	3f01      	subs	r7, #1
 8008ff2:	e7ea      	b.n	8008fca <__mdiff+0xe2>
 8008ff4:	0800ed53 	.word	0x0800ed53
 8008ff8:	0800ed64 	.word	0x0800ed64

08008ffc <__d2b>:
 8008ffc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009000:	4689      	mov	r9, r1
 8009002:	2101      	movs	r1, #1
 8009004:	ec57 6b10 	vmov	r6, r7, d0
 8009008:	4690      	mov	r8, r2
 800900a:	f7ff fccf 	bl	80089ac <_Balloc>
 800900e:	4604      	mov	r4, r0
 8009010:	b930      	cbnz	r0, 8009020 <__d2b+0x24>
 8009012:	4602      	mov	r2, r0
 8009014:	4b25      	ldr	r3, [pc, #148]	; (80090ac <__d2b+0xb0>)
 8009016:	4826      	ldr	r0, [pc, #152]	; (80090b0 <__d2b+0xb4>)
 8009018:	f240 310a 	movw	r1, #778	; 0x30a
 800901c:	f7fe fe00 	bl	8007c20 <__assert_func>
 8009020:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009024:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009028:	bb35      	cbnz	r5, 8009078 <__d2b+0x7c>
 800902a:	2e00      	cmp	r6, #0
 800902c:	9301      	str	r3, [sp, #4]
 800902e:	d028      	beq.n	8009082 <__d2b+0x86>
 8009030:	4668      	mov	r0, sp
 8009032:	9600      	str	r6, [sp, #0]
 8009034:	f7ff fd82 	bl	8008b3c <__lo0bits>
 8009038:	9900      	ldr	r1, [sp, #0]
 800903a:	b300      	cbz	r0, 800907e <__d2b+0x82>
 800903c:	9a01      	ldr	r2, [sp, #4]
 800903e:	f1c0 0320 	rsb	r3, r0, #32
 8009042:	fa02 f303 	lsl.w	r3, r2, r3
 8009046:	430b      	orrs	r3, r1
 8009048:	40c2      	lsrs	r2, r0
 800904a:	6163      	str	r3, [r4, #20]
 800904c:	9201      	str	r2, [sp, #4]
 800904e:	9b01      	ldr	r3, [sp, #4]
 8009050:	61a3      	str	r3, [r4, #24]
 8009052:	2b00      	cmp	r3, #0
 8009054:	bf14      	ite	ne
 8009056:	2202      	movne	r2, #2
 8009058:	2201      	moveq	r2, #1
 800905a:	6122      	str	r2, [r4, #16]
 800905c:	b1d5      	cbz	r5, 8009094 <__d2b+0x98>
 800905e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009062:	4405      	add	r5, r0
 8009064:	f8c9 5000 	str.w	r5, [r9]
 8009068:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800906c:	f8c8 0000 	str.w	r0, [r8]
 8009070:	4620      	mov	r0, r4
 8009072:	b003      	add	sp, #12
 8009074:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009078:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800907c:	e7d5      	b.n	800902a <__d2b+0x2e>
 800907e:	6161      	str	r1, [r4, #20]
 8009080:	e7e5      	b.n	800904e <__d2b+0x52>
 8009082:	a801      	add	r0, sp, #4
 8009084:	f7ff fd5a 	bl	8008b3c <__lo0bits>
 8009088:	9b01      	ldr	r3, [sp, #4]
 800908a:	6163      	str	r3, [r4, #20]
 800908c:	2201      	movs	r2, #1
 800908e:	6122      	str	r2, [r4, #16]
 8009090:	3020      	adds	r0, #32
 8009092:	e7e3      	b.n	800905c <__d2b+0x60>
 8009094:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009098:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800909c:	f8c9 0000 	str.w	r0, [r9]
 80090a0:	6918      	ldr	r0, [r3, #16]
 80090a2:	f7ff fd2b 	bl	8008afc <__hi0bits>
 80090a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80090aa:	e7df      	b.n	800906c <__d2b+0x70>
 80090ac:	0800ed53 	.word	0x0800ed53
 80090b0:	0800ed64 	.word	0x0800ed64

080090b4 <_calloc_r>:
 80090b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090b6:	fba1 2402 	umull	r2, r4, r1, r2
 80090ba:	b94c      	cbnz	r4, 80090d0 <_calloc_r+0x1c>
 80090bc:	4611      	mov	r1, r2
 80090be:	9201      	str	r2, [sp, #4]
 80090c0:	f000 f87a 	bl	80091b8 <_malloc_r>
 80090c4:	9a01      	ldr	r2, [sp, #4]
 80090c6:	4605      	mov	r5, r0
 80090c8:	b930      	cbnz	r0, 80090d8 <_calloc_r+0x24>
 80090ca:	4628      	mov	r0, r5
 80090cc:	b003      	add	sp, #12
 80090ce:	bd30      	pop	{r4, r5, pc}
 80090d0:	220c      	movs	r2, #12
 80090d2:	6002      	str	r2, [r0, #0]
 80090d4:	2500      	movs	r5, #0
 80090d6:	e7f8      	b.n	80090ca <_calloc_r+0x16>
 80090d8:	4621      	mov	r1, r4
 80090da:	f7fe f92f 	bl	800733c <memset>
 80090de:	e7f4      	b.n	80090ca <_calloc_r+0x16>

080090e0 <_free_r>:
 80090e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090e2:	2900      	cmp	r1, #0
 80090e4:	d044      	beq.n	8009170 <_free_r+0x90>
 80090e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090ea:	9001      	str	r0, [sp, #4]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f1a1 0404 	sub.w	r4, r1, #4
 80090f2:	bfb8      	it	lt
 80090f4:	18e4      	addlt	r4, r4, r3
 80090f6:	f000 fd37 	bl	8009b68 <__malloc_lock>
 80090fa:	4a1e      	ldr	r2, [pc, #120]	; (8009174 <_free_r+0x94>)
 80090fc:	9801      	ldr	r0, [sp, #4]
 80090fe:	6813      	ldr	r3, [r2, #0]
 8009100:	b933      	cbnz	r3, 8009110 <_free_r+0x30>
 8009102:	6063      	str	r3, [r4, #4]
 8009104:	6014      	str	r4, [r2, #0]
 8009106:	b003      	add	sp, #12
 8009108:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800910c:	f000 bd32 	b.w	8009b74 <__malloc_unlock>
 8009110:	42a3      	cmp	r3, r4
 8009112:	d908      	bls.n	8009126 <_free_r+0x46>
 8009114:	6825      	ldr	r5, [r4, #0]
 8009116:	1961      	adds	r1, r4, r5
 8009118:	428b      	cmp	r3, r1
 800911a:	bf01      	itttt	eq
 800911c:	6819      	ldreq	r1, [r3, #0]
 800911e:	685b      	ldreq	r3, [r3, #4]
 8009120:	1949      	addeq	r1, r1, r5
 8009122:	6021      	streq	r1, [r4, #0]
 8009124:	e7ed      	b.n	8009102 <_free_r+0x22>
 8009126:	461a      	mov	r2, r3
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	b10b      	cbz	r3, 8009130 <_free_r+0x50>
 800912c:	42a3      	cmp	r3, r4
 800912e:	d9fa      	bls.n	8009126 <_free_r+0x46>
 8009130:	6811      	ldr	r1, [r2, #0]
 8009132:	1855      	adds	r5, r2, r1
 8009134:	42a5      	cmp	r5, r4
 8009136:	d10b      	bne.n	8009150 <_free_r+0x70>
 8009138:	6824      	ldr	r4, [r4, #0]
 800913a:	4421      	add	r1, r4
 800913c:	1854      	adds	r4, r2, r1
 800913e:	42a3      	cmp	r3, r4
 8009140:	6011      	str	r1, [r2, #0]
 8009142:	d1e0      	bne.n	8009106 <_free_r+0x26>
 8009144:	681c      	ldr	r4, [r3, #0]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	6053      	str	r3, [r2, #4]
 800914a:	4421      	add	r1, r4
 800914c:	6011      	str	r1, [r2, #0]
 800914e:	e7da      	b.n	8009106 <_free_r+0x26>
 8009150:	d902      	bls.n	8009158 <_free_r+0x78>
 8009152:	230c      	movs	r3, #12
 8009154:	6003      	str	r3, [r0, #0]
 8009156:	e7d6      	b.n	8009106 <_free_r+0x26>
 8009158:	6825      	ldr	r5, [r4, #0]
 800915a:	1961      	adds	r1, r4, r5
 800915c:	428b      	cmp	r3, r1
 800915e:	bf04      	itt	eq
 8009160:	6819      	ldreq	r1, [r3, #0]
 8009162:	685b      	ldreq	r3, [r3, #4]
 8009164:	6063      	str	r3, [r4, #4]
 8009166:	bf04      	itt	eq
 8009168:	1949      	addeq	r1, r1, r5
 800916a:	6021      	streq	r1, [r4, #0]
 800916c:	6054      	str	r4, [r2, #4]
 800916e:	e7ca      	b.n	8009106 <_free_r+0x26>
 8009170:	b003      	add	sp, #12
 8009172:	bd30      	pop	{r4, r5, pc}
 8009174:	20009cfc 	.word	0x20009cfc

08009178 <sbrk_aligned>:
 8009178:	b570      	push	{r4, r5, r6, lr}
 800917a:	4e0e      	ldr	r6, [pc, #56]	; (80091b4 <sbrk_aligned+0x3c>)
 800917c:	460c      	mov	r4, r1
 800917e:	6831      	ldr	r1, [r6, #0]
 8009180:	4605      	mov	r5, r0
 8009182:	b911      	cbnz	r1, 800918a <sbrk_aligned+0x12>
 8009184:	f000 f9e6 	bl	8009554 <_sbrk_r>
 8009188:	6030      	str	r0, [r6, #0]
 800918a:	4621      	mov	r1, r4
 800918c:	4628      	mov	r0, r5
 800918e:	f000 f9e1 	bl	8009554 <_sbrk_r>
 8009192:	1c43      	adds	r3, r0, #1
 8009194:	d00a      	beq.n	80091ac <sbrk_aligned+0x34>
 8009196:	1cc4      	adds	r4, r0, #3
 8009198:	f024 0403 	bic.w	r4, r4, #3
 800919c:	42a0      	cmp	r0, r4
 800919e:	d007      	beq.n	80091b0 <sbrk_aligned+0x38>
 80091a0:	1a21      	subs	r1, r4, r0
 80091a2:	4628      	mov	r0, r5
 80091a4:	f000 f9d6 	bl	8009554 <_sbrk_r>
 80091a8:	3001      	adds	r0, #1
 80091aa:	d101      	bne.n	80091b0 <sbrk_aligned+0x38>
 80091ac:	f04f 34ff 	mov.w	r4, #4294967295
 80091b0:	4620      	mov	r0, r4
 80091b2:	bd70      	pop	{r4, r5, r6, pc}
 80091b4:	20009d00 	.word	0x20009d00

080091b8 <_malloc_r>:
 80091b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091bc:	1ccd      	adds	r5, r1, #3
 80091be:	f025 0503 	bic.w	r5, r5, #3
 80091c2:	3508      	adds	r5, #8
 80091c4:	2d0c      	cmp	r5, #12
 80091c6:	bf38      	it	cc
 80091c8:	250c      	movcc	r5, #12
 80091ca:	2d00      	cmp	r5, #0
 80091cc:	4607      	mov	r7, r0
 80091ce:	db01      	blt.n	80091d4 <_malloc_r+0x1c>
 80091d0:	42a9      	cmp	r1, r5
 80091d2:	d905      	bls.n	80091e0 <_malloc_r+0x28>
 80091d4:	230c      	movs	r3, #12
 80091d6:	603b      	str	r3, [r7, #0]
 80091d8:	2600      	movs	r6, #0
 80091da:	4630      	mov	r0, r6
 80091dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091e0:	4e2e      	ldr	r6, [pc, #184]	; (800929c <_malloc_r+0xe4>)
 80091e2:	f000 fcc1 	bl	8009b68 <__malloc_lock>
 80091e6:	6833      	ldr	r3, [r6, #0]
 80091e8:	461c      	mov	r4, r3
 80091ea:	bb34      	cbnz	r4, 800923a <_malloc_r+0x82>
 80091ec:	4629      	mov	r1, r5
 80091ee:	4638      	mov	r0, r7
 80091f0:	f7ff ffc2 	bl	8009178 <sbrk_aligned>
 80091f4:	1c43      	adds	r3, r0, #1
 80091f6:	4604      	mov	r4, r0
 80091f8:	d14d      	bne.n	8009296 <_malloc_r+0xde>
 80091fa:	6834      	ldr	r4, [r6, #0]
 80091fc:	4626      	mov	r6, r4
 80091fe:	2e00      	cmp	r6, #0
 8009200:	d140      	bne.n	8009284 <_malloc_r+0xcc>
 8009202:	6823      	ldr	r3, [r4, #0]
 8009204:	4631      	mov	r1, r6
 8009206:	4638      	mov	r0, r7
 8009208:	eb04 0803 	add.w	r8, r4, r3
 800920c:	f000 f9a2 	bl	8009554 <_sbrk_r>
 8009210:	4580      	cmp	r8, r0
 8009212:	d13a      	bne.n	800928a <_malloc_r+0xd2>
 8009214:	6821      	ldr	r1, [r4, #0]
 8009216:	3503      	adds	r5, #3
 8009218:	1a6d      	subs	r5, r5, r1
 800921a:	f025 0503 	bic.w	r5, r5, #3
 800921e:	3508      	adds	r5, #8
 8009220:	2d0c      	cmp	r5, #12
 8009222:	bf38      	it	cc
 8009224:	250c      	movcc	r5, #12
 8009226:	4629      	mov	r1, r5
 8009228:	4638      	mov	r0, r7
 800922a:	f7ff ffa5 	bl	8009178 <sbrk_aligned>
 800922e:	3001      	adds	r0, #1
 8009230:	d02b      	beq.n	800928a <_malloc_r+0xd2>
 8009232:	6823      	ldr	r3, [r4, #0]
 8009234:	442b      	add	r3, r5
 8009236:	6023      	str	r3, [r4, #0]
 8009238:	e00e      	b.n	8009258 <_malloc_r+0xa0>
 800923a:	6822      	ldr	r2, [r4, #0]
 800923c:	1b52      	subs	r2, r2, r5
 800923e:	d41e      	bmi.n	800927e <_malloc_r+0xc6>
 8009240:	2a0b      	cmp	r2, #11
 8009242:	d916      	bls.n	8009272 <_malloc_r+0xba>
 8009244:	1961      	adds	r1, r4, r5
 8009246:	42a3      	cmp	r3, r4
 8009248:	6025      	str	r5, [r4, #0]
 800924a:	bf18      	it	ne
 800924c:	6059      	strne	r1, [r3, #4]
 800924e:	6863      	ldr	r3, [r4, #4]
 8009250:	bf08      	it	eq
 8009252:	6031      	streq	r1, [r6, #0]
 8009254:	5162      	str	r2, [r4, r5]
 8009256:	604b      	str	r3, [r1, #4]
 8009258:	4638      	mov	r0, r7
 800925a:	f104 060b 	add.w	r6, r4, #11
 800925e:	f000 fc89 	bl	8009b74 <__malloc_unlock>
 8009262:	f026 0607 	bic.w	r6, r6, #7
 8009266:	1d23      	adds	r3, r4, #4
 8009268:	1af2      	subs	r2, r6, r3
 800926a:	d0b6      	beq.n	80091da <_malloc_r+0x22>
 800926c:	1b9b      	subs	r3, r3, r6
 800926e:	50a3      	str	r3, [r4, r2]
 8009270:	e7b3      	b.n	80091da <_malloc_r+0x22>
 8009272:	6862      	ldr	r2, [r4, #4]
 8009274:	42a3      	cmp	r3, r4
 8009276:	bf0c      	ite	eq
 8009278:	6032      	streq	r2, [r6, #0]
 800927a:	605a      	strne	r2, [r3, #4]
 800927c:	e7ec      	b.n	8009258 <_malloc_r+0xa0>
 800927e:	4623      	mov	r3, r4
 8009280:	6864      	ldr	r4, [r4, #4]
 8009282:	e7b2      	b.n	80091ea <_malloc_r+0x32>
 8009284:	4634      	mov	r4, r6
 8009286:	6876      	ldr	r6, [r6, #4]
 8009288:	e7b9      	b.n	80091fe <_malloc_r+0x46>
 800928a:	230c      	movs	r3, #12
 800928c:	603b      	str	r3, [r7, #0]
 800928e:	4638      	mov	r0, r7
 8009290:	f000 fc70 	bl	8009b74 <__malloc_unlock>
 8009294:	e7a1      	b.n	80091da <_malloc_r+0x22>
 8009296:	6025      	str	r5, [r4, #0]
 8009298:	e7de      	b.n	8009258 <_malloc_r+0xa0>
 800929a:	bf00      	nop
 800929c:	20009cfc 	.word	0x20009cfc

080092a0 <__sfputc_r>:
 80092a0:	6893      	ldr	r3, [r2, #8]
 80092a2:	3b01      	subs	r3, #1
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	b410      	push	{r4}
 80092a8:	6093      	str	r3, [r2, #8]
 80092aa:	da08      	bge.n	80092be <__sfputc_r+0x1e>
 80092ac:	6994      	ldr	r4, [r2, #24]
 80092ae:	42a3      	cmp	r3, r4
 80092b0:	db01      	blt.n	80092b6 <__sfputc_r+0x16>
 80092b2:	290a      	cmp	r1, #10
 80092b4:	d103      	bne.n	80092be <__sfputc_r+0x1e>
 80092b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092ba:	f000 b95b 	b.w	8009574 <__swbuf_r>
 80092be:	6813      	ldr	r3, [r2, #0]
 80092c0:	1c58      	adds	r0, r3, #1
 80092c2:	6010      	str	r0, [r2, #0]
 80092c4:	7019      	strb	r1, [r3, #0]
 80092c6:	4608      	mov	r0, r1
 80092c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092cc:	4770      	bx	lr

080092ce <__sfputs_r>:
 80092ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092d0:	4606      	mov	r6, r0
 80092d2:	460f      	mov	r7, r1
 80092d4:	4614      	mov	r4, r2
 80092d6:	18d5      	adds	r5, r2, r3
 80092d8:	42ac      	cmp	r4, r5
 80092da:	d101      	bne.n	80092e0 <__sfputs_r+0x12>
 80092dc:	2000      	movs	r0, #0
 80092de:	e007      	b.n	80092f0 <__sfputs_r+0x22>
 80092e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092e4:	463a      	mov	r2, r7
 80092e6:	4630      	mov	r0, r6
 80092e8:	f7ff ffda 	bl	80092a0 <__sfputc_r>
 80092ec:	1c43      	adds	r3, r0, #1
 80092ee:	d1f3      	bne.n	80092d8 <__sfputs_r+0xa>
 80092f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080092f4 <_vfiprintf_r>:
 80092f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f8:	460d      	mov	r5, r1
 80092fa:	b09d      	sub	sp, #116	; 0x74
 80092fc:	4614      	mov	r4, r2
 80092fe:	4698      	mov	r8, r3
 8009300:	4606      	mov	r6, r0
 8009302:	b118      	cbz	r0, 800930c <_vfiprintf_r+0x18>
 8009304:	6983      	ldr	r3, [r0, #24]
 8009306:	b90b      	cbnz	r3, 800930c <_vfiprintf_r+0x18>
 8009308:	f000 fb16 	bl	8009938 <__sinit>
 800930c:	4b89      	ldr	r3, [pc, #548]	; (8009534 <_vfiprintf_r+0x240>)
 800930e:	429d      	cmp	r5, r3
 8009310:	d11b      	bne.n	800934a <_vfiprintf_r+0x56>
 8009312:	6875      	ldr	r5, [r6, #4]
 8009314:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009316:	07d9      	lsls	r1, r3, #31
 8009318:	d405      	bmi.n	8009326 <_vfiprintf_r+0x32>
 800931a:	89ab      	ldrh	r3, [r5, #12]
 800931c:	059a      	lsls	r2, r3, #22
 800931e:	d402      	bmi.n	8009326 <_vfiprintf_r+0x32>
 8009320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009322:	f000 fba7 	bl	8009a74 <__retarget_lock_acquire_recursive>
 8009326:	89ab      	ldrh	r3, [r5, #12]
 8009328:	071b      	lsls	r3, r3, #28
 800932a:	d501      	bpl.n	8009330 <_vfiprintf_r+0x3c>
 800932c:	692b      	ldr	r3, [r5, #16]
 800932e:	b9eb      	cbnz	r3, 800936c <_vfiprintf_r+0x78>
 8009330:	4629      	mov	r1, r5
 8009332:	4630      	mov	r0, r6
 8009334:	f000 f970 	bl	8009618 <__swsetup_r>
 8009338:	b1c0      	cbz	r0, 800936c <_vfiprintf_r+0x78>
 800933a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800933c:	07dc      	lsls	r4, r3, #31
 800933e:	d50e      	bpl.n	800935e <_vfiprintf_r+0x6a>
 8009340:	f04f 30ff 	mov.w	r0, #4294967295
 8009344:	b01d      	add	sp, #116	; 0x74
 8009346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800934a:	4b7b      	ldr	r3, [pc, #492]	; (8009538 <_vfiprintf_r+0x244>)
 800934c:	429d      	cmp	r5, r3
 800934e:	d101      	bne.n	8009354 <_vfiprintf_r+0x60>
 8009350:	68b5      	ldr	r5, [r6, #8]
 8009352:	e7df      	b.n	8009314 <_vfiprintf_r+0x20>
 8009354:	4b79      	ldr	r3, [pc, #484]	; (800953c <_vfiprintf_r+0x248>)
 8009356:	429d      	cmp	r5, r3
 8009358:	bf08      	it	eq
 800935a:	68f5      	ldreq	r5, [r6, #12]
 800935c:	e7da      	b.n	8009314 <_vfiprintf_r+0x20>
 800935e:	89ab      	ldrh	r3, [r5, #12]
 8009360:	0598      	lsls	r0, r3, #22
 8009362:	d4ed      	bmi.n	8009340 <_vfiprintf_r+0x4c>
 8009364:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009366:	f000 fb86 	bl	8009a76 <__retarget_lock_release_recursive>
 800936a:	e7e9      	b.n	8009340 <_vfiprintf_r+0x4c>
 800936c:	2300      	movs	r3, #0
 800936e:	9309      	str	r3, [sp, #36]	; 0x24
 8009370:	2320      	movs	r3, #32
 8009372:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009376:	f8cd 800c 	str.w	r8, [sp, #12]
 800937a:	2330      	movs	r3, #48	; 0x30
 800937c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009540 <_vfiprintf_r+0x24c>
 8009380:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009384:	f04f 0901 	mov.w	r9, #1
 8009388:	4623      	mov	r3, r4
 800938a:	469a      	mov	sl, r3
 800938c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009390:	b10a      	cbz	r2, 8009396 <_vfiprintf_r+0xa2>
 8009392:	2a25      	cmp	r2, #37	; 0x25
 8009394:	d1f9      	bne.n	800938a <_vfiprintf_r+0x96>
 8009396:	ebba 0b04 	subs.w	fp, sl, r4
 800939a:	d00b      	beq.n	80093b4 <_vfiprintf_r+0xc0>
 800939c:	465b      	mov	r3, fp
 800939e:	4622      	mov	r2, r4
 80093a0:	4629      	mov	r1, r5
 80093a2:	4630      	mov	r0, r6
 80093a4:	f7ff ff93 	bl	80092ce <__sfputs_r>
 80093a8:	3001      	adds	r0, #1
 80093aa:	f000 80aa 	beq.w	8009502 <_vfiprintf_r+0x20e>
 80093ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093b0:	445a      	add	r2, fp
 80093b2:	9209      	str	r2, [sp, #36]	; 0x24
 80093b4:	f89a 3000 	ldrb.w	r3, [sl]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	f000 80a2 	beq.w	8009502 <_vfiprintf_r+0x20e>
 80093be:	2300      	movs	r3, #0
 80093c0:	f04f 32ff 	mov.w	r2, #4294967295
 80093c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093c8:	f10a 0a01 	add.w	sl, sl, #1
 80093cc:	9304      	str	r3, [sp, #16]
 80093ce:	9307      	str	r3, [sp, #28]
 80093d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093d4:	931a      	str	r3, [sp, #104]	; 0x68
 80093d6:	4654      	mov	r4, sl
 80093d8:	2205      	movs	r2, #5
 80093da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093de:	4858      	ldr	r0, [pc, #352]	; (8009540 <_vfiprintf_r+0x24c>)
 80093e0:	f7f6 fefe 	bl	80001e0 <memchr>
 80093e4:	9a04      	ldr	r2, [sp, #16]
 80093e6:	b9d8      	cbnz	r0, 8009420 <_vfiprintf_r+0x12c>
 80093e8:	06d1      	lsls	r1, r2, #27
 80093ea:	bf44      	itt	mi
 80093ec:	2320      	movmi	r3, #32
 80093ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093f2:	0713      	lsls	r3, r2, #28
 80093f4:	bf44      	itt	mi
 80093f6:	232b      	movmi	r3, #43	; 0x2b
 80093f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093fc:	f89a 3000 	ldrb.w	r3, [sl]
 8009400:	2b2a      	cmp	r3, #42	; 0x2a
 8009402:	d015      	beq.n	8009430 <_vfiprintf_r+0x13c>
 8009404:	9a07      	ldr	r2, [sp, #28]
 8009406:	4654      	mov	r4, sl
 8009408:	2000      	movs	r0, #0
 800940a:	f04f 0c0a 	mov.w	ip, #10
 800940e:	4621      	mov	r1, r4
 8009410:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009414:	3b30      	subs	r3, #48	; 0x30
 8009416:	2b09      	cmp	r3, #9
 8009418:	d94e      	bls.n	80094b8 <_vfiprintf_r+0x1c4>
 800941a:	b1b0      	cbz	r0, 800944a <_vfiprintf_r+0x156>
 800941c:	9207      	str	r2, [sp, #28]
 800941e:	e014      	b.n	800944a <_vfiprintf_r+0x156>
 8009420:	eba0 0308 	sub.w	r3, r0, r8
 8009424:	fa09 f303 	lsl.w	r3, r9, r3
 8009428:	4313      	orrs	r3, r2
 800942a:	9304      	str	r3, [sp, #16]
 800942c:	46a2      	mov	sl, r4
 800942e:	e7d2      	b.n	80093d6 <_vfiprintf_r+0xe2>
 8009430:	9b03      	ldr	r3, [sp, #12]
 8009432:	1d19      	adds	r1, r3, #4
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	9103      	str	r1, [sp, #12]
 8009438:	2b00      	cmp	r3, #0
 800943a:	bfbb      	ittet	lt
 800943c:	425b      	neglt	r3, r3
 800943e:	f042 0202 	orrlt.w	r2, r2, #2
 8009442:	9307      	strge	r3, [sp, #28]
 8009444:	9307      	strlt	r3, [sp, #28]
 8009446:	bfb8      	it	lt
 8009448:	9204      	strlt	r2, [sp, #16]
 800944a:	7823      	ldrb	r3, [r4, #0]
 800944c:	2b2e      	cmp	r3, #46	; 0x2e
 800944e:	d10c      	bne.n	800946a <_vfiprintf_r+0x176>
 8009450:	7863      	ldrb	r3, [r4, #1]
 8009452:	2b2a      	cmp	r3, #42	; 0x2a
 8009454:	d135      	bne.n	80094c2 <_vfiprintf_r+0x1ce>
 8009456:	9b03      	ldr	r3, [sp, #12]
 8009458:	1d1a      	adds	r2, r3, #4
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	9203      	str	r2, [sp, #12]
 800945e:	2b00      	cmp	r3, #0
 8009460:	bfb8      	it	lt
 8009462:	f04f 33ff 	movlt.w	r3, #4294967295
 8009466:	3402      	adds	r4, #2
 8009468:	9305      	str	r3, [sp, #20]
 800946a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009550 <_vfiprintf_r+0x25c>
 800946e:	7821      	ldrb	r1, [r4, #0]
 8009470:	2203      	movs	r2, #3
 8009472:	4650      	mov	r0, sl
 8009474:	f7f6 feb4 	bl	80001e0 <memchr>
 8009478:	b140      	cbz	r0, 800948c <_vfiprintf_r+0x198>
 800947a:	2340      	movs	r3, #64	; 0x40
 800947c:	eba0 000a 	sub.w	r0, r0, sl
 8009480:	fa03 f000 	lsl.w	r0, r3, r0
 8009484:	9b04      	ldr	r3, [sp, #16]
 8009486:	4303      	orrs	r3, r0
 8009488:	3401      	adds	r4, #1
 800948a:	9304      	str	r3, [sp, #16]
 800948c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009490:	482c      	ldr	r0, [pc, #176]	; (8009544 <_vfiprintf_r+0x250>)
 8009492:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009496:	2206      	movs	r2, #6
 8009498:	f7f6 fea2 	bl	80001e0 <memchr>
 800949c:	2800      	cmp	r0, #0
 800949e:	d03f      	beq.n	8009520 <_vfiprintf_r+0x22c>
 80094a0:	4b29      	ldr	r3, [pc, #164]	; (8009548 <_vfiprintf_r+0x254>)
 80094a2:	bb1b      	cbnz	r3, 80094ec <_vfiprintf_r+0x1f8>
 80094a4:	9b03      	ldr	r3, [sp, #12]
 80094a6:	3307      	adds	r3, #7
 80094a8:	f023 0307 	bic.w	r3, r3, #7
 80094ac:	3308      	adds	r3, #8
 80094ae:	9303      	str	r3, [sp, #12]
 80094b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094b2:	443b      	add	r3, r7
 80094b4:	9309      	str	r3, [sp, #36]	; 0x24
 80094b6:	e767      	b.n	8009388 <_vfiprintf_r+0x94>
 80094b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80094bc:	460c      	mov	r4, r1
 80094be:	2001      	movs	r0, #1
 80094c0:	e7a5      	b.n	800940e <_vfiprintf_r+0x11a>
 80094c2:	2300      	movs	r3, #0
 80094c4:	3401      	adds	r4, #1
 80094c6:	9305      	str	r3, [sp, #20]
 80094c8:	4619      	mov	r1, r3
 80094ca:	f04f 0c0a 	mov.w	ip, #10
 80094ce:	4620      	mov	r0, r4
 80094d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094d4:	3a30      	subs	r2, #48	; 0x30
 80094d6:	2a09      	cmp	r2, #9
 80094d8:	d903      	bls.n	80094e2 <_vfiprintf_r+0x1ee>
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d0c5      	beq.n	800946a <_vfiprintf_r+0x176>
 80094de:	9105      	str	r1, [sp, #20]
 80094e0:	e7c3      	b.n	800946a <_vfiprintf_r+0x176>
 80094e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80094e6:	4604      	mov	r4, r0
 80094e8:	2301      	movs	r3, #1
 80094ea:	e7f0      	b.n	80094ce <_vfiprintf_r+0x1da>
 80094ec:	ab03      	add	r3, sp, #12
 80094ee:	9300      	str	r3, [sp, #0]
 80094f0:	462a      	mov	r2, r5
 80094f2:	4b16      	ldr	r3, [pc, #88]	; (800954c <_vfiprintf_r+0x258>)
 80094f4:	a904      	add	r1, sp, #16
 80094f6:	4630      	mov	r0, r6
 80094f8:	f7fd ffc8 	bl	800748c <_printf_float>
 80094fc:	4607      	mov	r7, r0
 80094fe:	1c78      	adds	r0, r7, #1
 8009500:	d1d6      	bne.n	80094b0 <_vfiprintf_r+0x1bc>
 8009502:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009504:	07d9      	lsls	r1, r3, #31
 8009506:	d405      	bmi.n	8009514 <_vfiprintf_r+0x220>
 8009508:	89ab      	ldrh	r3, [r5, #12]
 800950a:	059a      	lsls	r2, r3, #22
 800950c:	d402      	bmi.n	8009514 <_vfiprintf_r+0x220>
 800950e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009510:	f000 fab1 	bl	8009a76 <__retarget_lock_release_recursive>
 8009514:	89ab      	ldrh	r3, [r5, #12]
 8009516:	065b      	lsls	r3, r3, #25
 8009518:	f53f af12 	bmi.w	8009340 <_vfiprintf_r+0x4c>
 800951c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800951e:	e711      	b.n	8009344 <_vfiprintf_r+0x50>
 8009520:	ab03      	add	r3, sp, #12
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	462a      	mov	r2, r5
 8009526:	4b09      	ldr	r3, [pc, #36]	; (800954c <_vfiprintf_r+0x258>)
 8009528:	a904      	add	r1, sp, #16
 800952a:	4630      	mov	r0, r6
 800952c:	f7fe fa52 	bl	80079d4 <_printf_i>
 8009530:	e7e4      	b.n	80094fc <_vfiprintf_r+0x208>
 8009532:	bf00      	nop
 8009534:	0800eef0 	.word	0x0800eef0
 8009538:	0800ef10 	.word	0x0800ef10
 800953c:	0800eed0 	.word	0x0800eed0
 8009540:	0800eebc 	.word	0x0800eebc
 8009544:	0800eec6 	.word	0x0800eec6
 8009548:	0800748d 	.word	0x0800748d
 800954c:	080092cf 	.word	0x080092cf
 8009550:	0800eec2 	.word	0x0800eec2

08009554 <_sbrk_r>:
 8009554:	b538      	push	{r3, r4, r5, lr}
 8009556:	4d06      	ldr	r5, [pc, #24]	; (8009570 <_sbrk_r+0x1c>)
 8009558:	2300      	movs	r3, #0
 800955a:	4604      	mov	r4, r0
 800955c:	4608      	mov	r0, r1
 800955e:	602b      	str	r3, [r5, #0]
 8009560:	f7f8 fb94 	bl	8001c8c <_sbrk>
 8009564:	1c43      	adds	r3, r0, #1
 8009566:	d102      	bne.n	800956e <_sbrk_r+0x1a>
 8009568:	682b      	ldr	r3, [r5, #0]
 800956a:	b103      	cbz	r3, 800956e <_sbrk_r+0x1a>
 800956c:	6023      	str	r3, [r4, #0]
 800956e:	bd38      	pop	{r3, r4, r5, pc}
 8009570:	20009d08 	.word	0x20009d08

08009574 <__swbuf_r>:
 8009574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009576:	460e      	mov	r6, r1
 8009578:	4614      	mov	r4, r2
 800957a:	4605      	mov	r5, r0
 800957c:	b118      	cbz	r0, 8009586 <__swbuf_r+0x12>
 800957e:	6983      	ldr	r3, [r0, #24]
 8009580:	b90b      	cbnz	r3, 8009586 <__swbuf_r+0x12>
 8009582:	f000 f9d9 	bl	8009938 <__sinit>
 8009586:	4b21      	ldr	r3, [pc, #132]	; (800960c <__swbuf_r+0x98>)
 8009588:	429c      	cmp	r4, r3
 800958a:	d12b      	bne.n	80095e4 <__swbuf_r+0x70>
 800958c:	686c      	ldr	r4, [r5, #4]
 800958e:	69a3      	ldr	r3, [r4, #24]
 8009590:	60a3      	str	r3, [r4, #8]
 8009592:	89a3      	ldrh	r3, [r4, #12]
 8009594:	071a      	lsls	r2, r3, #28
 8009596:	d52f      	bpl.n	80095f8 <__swbuf_r+0x84>
 8009598:	6923      	ldr	r3, [r4, #16]
 800959a:	b36b      	cbz	r3, 80095f8 <__swbuf_r+0x84>
 800959c:	6923      	ldr	r3, [r4, #16]
 800959e:	6820      	ldr	r0, [r4, #0]
 80095a0:	1ac0      	subs	r0, r0, r3
 80095a2:	6963      	ldr	r3, [r4, #20]
 80095a4:	b2f6      	uxtb	r6, r6
 80095a6:	4283      	cmp	r3, r0
 80095a8:	4637      	mov	r7, r6
 80095aa:	dc04      	bgt.n	80095b6 <__swbuf_r+0x42>
 80095ac:	4621      	mov	r1, r4
 80095ae:	4628      	mov	r0, r5
 80095b0:	f000 f92e 	bl	8009810 <_fflush_r>
 80095b4:	bb30      	cbnz	r0, 8009604 <__swbuf_r+0x90>
 80095b6:	68a3      	ldr	r3, [r4, #8]
 80095b8:	3b01      	subs	r3, #1
 80095ba:	60a3      	str	r3, [r4, #8]
 80095bc:	6823      	ldr	r3, [r4, #0]
 80095be:	1c5a      	adds	r2, r3, #1
 80095c0:	6022      	str	r2, [r4, #0]
 80095c2:	701e      	strb	r6, [r3, #0]
 80095c4:	6963      	ldr	r3, [r4, #20]
 80095c6:	3001      	adds	r0, #1
 80095c8:	4283      	cmp	r3, r0
 80095ca:	d004      	beq.n	80095d6 <__swbuf_r+0x62>
 80095cc:	89a3      	ldrh	r3, [r4, #12]
 80095ce:	07db      	lsls	r3, r3, #31
 80095d0:	d506      	bpl.n	80095e0 <__swbuf_r+0x6c>
 80095d2:	2e0a      	cmp	r6, #10
 80095d4:	d104      	bne.n	80095e0 <__swbuf_r+0x6c>
 80095d6:	4621      	mov	r1, r4
 80095d8:	4628      	mov	r0, r5
 80095da:	f000 f919 	bl	8009810 <_fflush_r>
 80095de:	b988      	cbnz	r0, 8009604 <__swbuf_r+0x90>
 80095e0:	4638      	mov	r0, r7
 80095e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095e4:	4b0a      	ldr	r3, [pc, #40]	; (8009610 <__swbuf_r+0x9c>)
 80095e6:	429c      	cmp	r4, r3
 80095e8:	d101      	bne.n	80095ee <__swbuf_r+0x7a>
 80095ea:	68ac      	ldr	r4, [r5, #8]
 80095ec:	e7cf      	b.n	800958e <__swbuf_r+0x1a>
 80095ee:	4b09      	ldr	r3, [pc, #36]	; (8009614 <__swbuf_r+0xa0>)
 80095f0:	429c      	cmp	r4, r3
 80095f2:	bf08      	it	eq
 80095f4:	68ec      	ldreq	r4, [r5, #12]
 80095f6:	e7ca      	b.n	800958e <__swbuf_r+0x1a>
 80095f8:	4621      	mov	r1, r4
 80095fa:	4628      	mov	r0, r5
 80095fc:	f000 f80c 	bl	8009618 <__swsetup_r>
 8009600:	2800      	cmp	r0, #0
 8009602:	d0cb      	beq.n	800959c <__swbuf_r+0x28>
 8009604:	f04f 37ff 	mov.w	r7, #4294967295
 8009608:	e7ea      	b.n	80095e0 <__swbuf_r+0x6c>
 800960a:	bf00      	nop
 800960c:	0800eef0 	.word	0x0800eef0
 8009610:	0800ef10 	.word	0x0800ef10
 8009614:	0800eed0 	.word	0x0800eed0

08009618 <__swsetup_r>:
 8009618:	4b32      	ldr	r3, [pc, #200]	; (80096e4 <__swsetup_r+0xcc>)
 800961a:	b570      	push	{r4, r5, r6, lr}
 800961c:	681d      	ldr	r5, [r3, #0]
 800961e:	4606      	mov	r6, r0
 8009620:	460c      	mov	r4, r1
 8009622:	b125      	cbz	r5, 800962e <__swsetup_r+0x16>
 8009624:	69ab      	ldr	r3, [r5, #24]
 8009626:	b913      	cbnz	r3, 800962e <__swsetup_r+0x16>
 8009628:	4628      	mov	r0, r5
 800962a:	f000 f985 	bl	8009938 <__sinit>
 800962e:	4b2e      	ldr	r3, [pc, #184]	; (80096e8 <__swsetup_r+0xd0>)
 8009630:	429c      	cmp	r4, r3
 8009632:	d10f      	bne.n	8009654 <__swsetup_r+0x3c>
 8009634:	686c      	ldr	r4, [r5, #4]
 8009636:	89a3      	ldrh	r3, [r4, #12]
 8009638:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800963c:	0719      	lsls	r1, r3, #28
 800963e:	d42c      	bmi.n	800969a <__swsetup_r+0x82>
 8009640:	06dd      	lsls	r5, r3, #27
 8009642:	d411      	bmi.n	8009668 <__swsetup_r+0x50>
 8009644:	2309      	movs	r3, #9
 8009646:	6033      	str	r3, [r6, #0]
 8009648:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800964c:	81a3      	strh	r3, [r4, #12]
 800964e:	f04f 30ff 	mov.w	r0, #4294967295
 8009652:	e03e      	b.n	80096d2 <__swsetup_r+0xba>
 8009654:	4b25      	ldr	r3, [pc, #148]	; (80096ec <__swsetup_r+0xd4>)
 8009656:	429c      	cmp	r4, r3
 8009658:	d101      	bne.n	800965e <__swsetup_r+0x46>
 800965a:	68ac      	ldr	r4, [r5, #8]
 800965c:	e7eb      	b.n	8009636 <__swsetup_r+0x1e>
 800965e:	4b24      	ldr	r3, [pc, #144]	; (80096f0 <__swsetup_r+0xd8>)
 8009660:	429c      	cmp	r4, r3
 8009662:	bf08      	it	eq
 8009664:	68ec      	ldreq	r4, [r5, #12]
 8009666:	e7e6      	b.n	8009636 <__swsetup_r+0x1e>
 8009668:	0758      	lsls	r0, r3, #29
 800966a:	d512      	bpl.n	8009692 <__swsetup_r+0x7a>
 800966c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800966e:	b141      	cbz	r1, 8009682 <__swsetup_r+0x6a>
 8009670:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009674:	4299      	cmp	r1, r3
 8009676:	d002      	beq.n	800967e <__swsetup_r+0x66>
 8009678:	4630      	mov	r0, r6
 800967a:	f7ff fd31 	bl	80090e0 <_free_r>
 800967e:	2300      	movs	r3, #0
 8009680:	6363      	str	r3, [r4, #52]	; 0x34
 8009682:	89a3      	ldrh	r3, [r4, #12]
 8009684:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009688:	81a3      	strh	r3, [r4, #12]
 800968a:	2300      	movs	r3, #0
 800968c:	6063      	str	r3, [r4, #4]
 800968e:	6923      	ldr	r3, [r4, #16]
 8009690:	6023      	str	r3, [r4, #0]
 8009692:	89a3      	ldrh	r3, [r4, #12]
 8009694:	f043 0308 	orr.w	r3, r3, #8
 8009698:	81a3      	strh	r3, [r4, #12]
 800969a:	6923      	ldr	r3, [r4, #16]
 800969c:	b94b      	cbnz	r3, 80096b2 <__swsetup_r+0x9a>
 800969e:	89a3      	ldrh	r3, [r4, #12]
 80096a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80096a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096a8:	d003      	beq.n	80096b2 <__swsetup_r+0x9a>
 80096aa:	4621      	mov	r1, r4
 80096ac:	4630      	mov	r0, r6
 80096ae:	f000 fa09 	bl	8009ac4 <__smakebuf_r>
 80096b2:	89a0      	ldrh	r0, [r4, #12]
 80096b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096b8:	f010 0301 	ands.w	r3, r0, #1
 80096bc:	d00a      	beq.n	80096d4 <__swsetup_r+0xbc>
 80096be:	2300      	movs	r3, #0
 80096c0:	60a3      	str	r3, [r4, #8]
 80096c2:	6963      	ldr	r3, [r4, #20]
 80096c4:	425b      	negs	r3, r3
 80096c6:	61a3      	str	r3, [r4, #24]
 80096c8:	6923      	ldr	r3, [r4, #16]
 80096ca:	b943      	cbnz	r3, 80096de <__swsetup_r+0xc6>
 80096cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80096d0:	d1ba      	bne.n	8009648 <__swsetup_r+0x30>
 80096d2:	bd70      	pop	{r4, r5, r6, pc}
 80096d4:	0781      	lsls	r1, r0, #30
 80096d6:	bf58      	it	pl
 80096d8:	6963      	ldrpl	r3, [r4, #20]
 80096da:	60a3      	str	r3, [r4, #8]
 80096dc:	e7f4      	b.n	80096c8 <__swsetup_r+0xb0>
 80096de:	2000      	movs	r0, #0
 80096e0:	e7f7      	b.n	80096d2 <__swsetup_r+0xba>
 80096e2:	bf00      	nop
 80096e4:	20000018 	.word	0x20000018
 80096e8:	0800eef0 	.word	0x0800eef0
 80096ec:	0800ef10 	.word	0x0800ef10
 80096f0:	0800eed0 	.word	0x0800eed0

080096f4 <abort>:
 80096f4:	b508      	push	{r3, lr}
 80096f6:	2006      	movs	r0, #6
 80096f8:	f000 fa6a 	bl	8009bd0 <raise>
 80096fc:	2001      	movs	r0, #1
 80096fe:	f7f8 fa4d 	bl	8001b9c <_exit>
	...

08009704 <__sflush_r>:
 8009704:	898a      	ldrh	r2, [r1, #12]
 8009706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800970a:	4605      	mov	r5, r0
 800970c:	0710      	lsls	r0, r2, #28
 800970e:	460c      	mov	r4, r1
 8009710:	d458      	bmi.n	80097c4 <__sflush_r+0xc0>
 8009712:	684b      	ldr	r3, [r1, #4]
 8009714:	2b00      	cmp	r3, #0
 8009716:	dc05      	bgt.n	8009724 <__sflush_r+0x20>
 8009718:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800971a:	2b00      	cmp	r3, #0
 800971c:	dc02      	bgt.n	8009724 <__sflush_r+0x20>
 800971e:	2000      	movs	r0, #0
 8009720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009724:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009726:	2e00      	cmp	r6, #0
 8009728:	d0f9      	beq.n	800971e <__sflush_r+0x1a>
 800972a:	2300      	movs	r3, #0
 800972c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009730:	682f      	ldr	r7, [r5, #0]
 8009732:	602b      	str	r3, [r5, #0]
 8009734:	d032      	beq.n	800979c <__sflush_r+0x98>
 8009736:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009738:	89a3      	ldrh	r3, [r4, #12]
 800973a:	075a      	lsls	r2, r3, #29
 800973c:	d505      	bpl.n	800974a <__sflush_r+0x46>
 800973e:	6863      	ldr	r3, [r4, #4]
 8009740:	1ac0      	subs	r0, r0, r3
 8009742:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009744:	b10b      	cbz	r3, 800974a <__sflush_r+0x46>
 8009746:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009748:	1ac0      	subs	r0, r0, r3
 800974a:	2300      	movs	r3, #0
 800974c:	4602      	mov	r2, r0
 800974e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009750:	6a21      	ldr	r1, [r4, #32]
 8009752:	4628      	mov	r0, r5
 8009754:	47b0      	blx	r6
 8009756:	1c43      	adds	r3, r0, #1
 8009758:	89a3      	ldrh	r3, [r4, #12]
 800975a:	d106      	bne.n	800976a <__sflush_r+0x66>
 800975c:	6829      	ldr	r1, [r5, #0]
 800975e:	291d      	cmp	r1, #29
 8009760:	d82c      	bhi.n	80097bc <__sflush_r+0xb8>
 8009762:	4a2a      	ldr	r2, [pc, #168]	; (800980c <__sflush_r+0x108>)
 8009764:	40ca      	lsrs	r2, r1
 8009766:	07d6      	lsls	r6, r2, #31
 8009768:	d528      	bpl.n	80097bc <__sflush_r+0xb8>
 800976a:	2200      	movs	r2, #0
 800976c:	6062      	str	r2, [r4, #4]
 800976e:	04d9      	lsls	r1, r3, #19
 8009770:	6922      	ldr	r2, [r4, #16]
 8009772:	6022      	str	r2, [r4, #0]
 8009774:	d504      	bpl.n	8009780 <__sflush_r+0x7c>
 8009776:	1c42      	adds	r2, r0, #1
 8009778:	d101      	bne.n	800977e <__sflush_r+0x7a>
 800977a:	682b      	ldr	r3, [r5, #0]
 800977c:	b903      	cbnz	r3, 8009780 <__sflush_r+0x7c>
 800977e:	6560      	str	r0, [r4, #84]	; 0x54
 8009780:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009782:	602f      	str	r7, [r5, #0]
 8009784:	2900      	cmp	r1, #0
 8009786:	d0ca      	beq.n	800971e <__sflush_r+0x1a>
 8009788:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800978c:	4299      	cmp	r1, r3
 800978e:	d002      	beq.n	8009796 <__sflush_r+0x92>
 8009790:	4628      	mov	r0, r5
 8009792:	f7ff fca5 	bl	80090e0 <_free_r>
 8009796:	2000      	movs	r0, #0
 8009798:	6360      	str	r0, [r4, #52]	; 0x34
 800979a:	e7c1      	b.n	8009720 <__sflush_r+0x1c>
 800979c:	6a21      	ldr	r1, [r4, #32]
 800979e:	2301      	movs	r3, #1
 80097a0:	4628      	mov	r0, r5
 80097a2:	47b0      	blx	r6
 80097a4:	1c41      	adds	r1, r0, #1
 80097a6:	d1c7      	bne.n	8009738 <__sflush_r+0x34>
 80097a8:	682b      	ldr	r3, [r5, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d0c4      	beq.n	8009738 <__sflush_r+0x34>
 80097ae:	2b1d      	cmp	r3, #29
 80097b0:	d001      	beq.n	80097b6 <__sflush_r+0xb2>
 80097b2:	2b16      	cmp	r3, #22
 80097b4:	d101      	bne.n	80097ba <__sflush_r+0xb6>
 80097b6:	602f      	str	r7, [r5, #0]
 80097b8:	e7b1      	b.n	800971e <__sflush_r+0x1a>
 80097ba:	89a3      	ldrh	r3, [r4, #12]
 80097bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097c0:	81a3      	strh	r3, [r4, #12]
 80097c2:	e7ad      	b.n	8009720 <__sflush_r+0x1c>
 80097c4:	690f      	ldr	r7, [r1, #16]
 80097c6:	2f00      	cmp	r7, #0
 80097c8:	d0a9      	beq.n	800971e <__sflush_r+0x1a>
 80097ca:	0793      	lsls	r3, r2, #30
 80097cc:	680e      	ldr	r6, [r1, #0]
 80097ce:	bf08      	it	eq
 80097d0:	694b      	ldreq	r3, [r1, #20]
 80097d2:	600f      	str	r7, [r1, #0]
 80097d4:	bf18      	it	ne
 80097d6:	2300      	movne	r3, #0
 80097d8:	eba6 0807 	sub.w	r8, r6, r7
 80097dc:	608b      	str	r3, [r1, #8]
 80097de:	f1b8 0f00 	cmp.w	r8, #0
 80097e2:	dd9c      	ble.n	800971e <__sflush_r+0x1a>
 80097e4:	6a21      	ldr	r1, [r4, #32]
 80097e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80097e8:	4643      	mov	r3, r8
 80097ea:	463a      	mov	r2, r7
 80097ec:	4628      	mov	r0, r5
 80097ee:	47b0      	blx	r6
 80097f0:	2800      	cmp	r0, #0
 80097f2:	dc06      	bgt.n	8009802 <__sflush_r+0xfe>
 80097f4:	89a3      	ldrh	r3, [r4, #12]
 80097f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097fa:	81a3      	strh	r3, [r4, #12]
 80097fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009800:	e78e      	b.n	8009720 <__sflush_r+0x1c>
 8009802:	4407      	add	r7, r0
 8009804:	eba8 0800 	sub.w	r8, r8, r0
 8009808:	e7e9      	b.n	80097de <__sflush_r+0xda>
 800980a:	bf00      	nop
 800980c:	20400001 	.word	0x20400001

08009810 <_fflush_r>:
 8009810:	b538      	push	{r3, r4, r5, lr}
 8009812:	690b      	ldr	r3, [r1, #16]
 8009814:	4605      	mov	r5, r0
 8009816:	460c      	mov	r4, r1
 8009818:	b913      	cbnz	r3, 8009820 <_fflush_r+0x10>
 800981a:	2500      	movs	r5, #0
 800981c:	4628      	mov	r0, r5
 800981e:	bd38      	pop	{r3, r4, r5, pc}
 8009820:	b118      	cbz	r0, 800982a <_fflush_r+0x1a>
 8009822:	6983      	ldr	r3, [r0, #24]
 8009824:	b90b      	cbnz	r3, 800982a <_fflush_r+0x1a>
 8009826:	f000 f887 	bl	8009938 <__sinit>
 800982a:	4b14      	ldr	r3, [pc, #80]	; (800987c <_fflush_r+0x6c>)
 800982c:	429c      	cmp	r4, r3
 800982e:	d11b      	bne.n	8009868 <_fflush_r+0x58>
 8009830:	686c      	ldr	r4, [r5, #4]
 8009832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d0ef      	beq.n	800981a <_fflush_r+0xa>
 800983a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800983c:	07d0      	lsls	r0, r2, #31
 800983e:	d404      	bmi.n	800984a <_fflush_r+0x3a>
 8009840:	0599      	lsls	r1, r3, #22
 8009842:	d402      	bmi.n	800984a <_fflush_r+0x3a>
 8009844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009846:	f000 f915 	bl	8009a74 <__retarget_lock_acquire_recursive>
 800984a:	4628      	mov	r0, r5
 800984c:	4621      	mov	r1, r4
 800984e:	f7ff ff59 	bl	8009704 <__sflush_r>
 8009852:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009854:	07da      	lsls	r2, r3, #31
 8009856:	4605      	mov	r5, r0
 8009858:	d4e0      	bmi.n	800981c <_fflush_r+0xc>
 800985a:	89a3      	ldrh	r3, [r4, #12]
 800985c:	059b      	lsls	r3, r3, #22
 800985e:	d4dd      	bmi.n	800981c <_fflush_r+0xc>
 8009860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009862:	f000 f908 	bl	8009a76 <__retarget_lock_release_recursive>
 8009866:	e7d9      	b.n	800981c <_fflush_r+0xc>
 8009868:	4b05      	ldr	r3, [pc, #20]	; (8009880 <_fflush_r+0x70>)
 800986a:	429c      	cmp	r4, r3
 800986c:	d101      	bne.n	8009872 <_fflush_r+0x62>
 800986e:	68ac      	ldr	r4, [r5, #8]
 8009870:	e7df      	b.n	8009832 <_fflush_r+0x22>
 8009872:	4b04      	ldr	r3, [pc, #16]	; (8009884 <_fflush_r+0x74>)
 8009874:	429c      	cmp	r4, r3
 8009876:	bf08      	it	eq
 8009878:	68ec      	ldreq	r4, [r5, #12]
 800987a:	e7da      	b.n	8009832 <_fflush_r+0x22>
 800987c:	0800eef0 	.word	0x0800eef0
 8009880:	0800ef10 	.word	0x0800ef10
 8009884:	0800eed0 	.word	0x0800eed0

08009888 <std>:
 8009888:	2300      	movs	r3, #0
 800988a:	b510      	push	{r4, lr}
 800988c:	4604      	mov	r4, r0
 800988e:	e9c0 3300 	strd	r3, r3, [r0]
 8009892:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009896:	6083      	str	r3, [r0, #8]
 8009898:	8181      	strh	r1, [r0, #12]
 800989a:	6643      	str	r3, [r0, #100]	; 0x64
 800989c:	81c2      	strh	r2, [r0, #14]
 800989e:	6183      	str	r3, [r0, #24]
 80098a0:	4619      	mov	r1, r3
 80098a2:	2208      	movs	r2, #8
 80098a4:	305c      	adds	r0, #92	; 0x5c
 80098a6:	f7fd fd49 	bl	800733c <memset>
 80098aa:	4b05      	ldr	r3, [pc, #20]	; (80098c0 <std+0x38>)
 80098ac:	6263      	str	r3, [r4, #36]	; 0x24
 80098ae:	4b05      	ldr	r3, [pc, #20]	; (80098c4 <std+0x3c>)
 80098b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80098b2:	4b05      	ldr	r3, [pc, #20]	; (80098c8 <std+0x40>)
 80098b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80098b6:	4b05      	ldr	r3, [pc, #20]	; (80098cc <std+0x44>)
 80098b8:	6224      	str	r4, [r4, #32]
 80098ba:	6323      	str	r3, [r4, #48]	; 0x30
 80098bc:	bd10      	pop	{r4, pc}
 80098be:	bf00      	nop
 80098c0:	08009c09 	.word	0x08009c09
 80098c4:	08009c2b 	.word	0x08009c2b
 80098c8:	08009c63 	.word	0x08009c63
 80098cc:	08009c87 	.word	0x08009c87

080098d0 <_cleanup_r>:
 80098d0:	4901      	ldr	r1, [pc, #4]	; (80098d8 <_cleanup_r+0x8>)
 80098d2:	f000 b8af 	b.w	8009a34 <_fwalk_reent>
 80098d6:	bf00      	nop
 80098d8:	08009811 	.word	0x08009811

080098dc <__sfmoreglue>:
 80098dc:	b570      	push	{r4, r5, r6, lr}
 80098de:	2268      	movs	r2, #104	; 0x68
 80098e0:	1e4d      	subs	r5, r1, #1
 80098e2:	4355      	muls	r5, r2
 80098e4:	460e      	mov	r6, r1
 80098e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80098ea:	f7ff fc65 	bl	80091b8 <_malloc_r>
 80098ee:	4604      	mov	r4, r0
 80098f0:	b140      	cbz	r0, 8009904 <__sfmoreglue+0x28>
 80098f2:	2100      	movs	r1, #0
 80098f4:	e9c0 1600 	strd	r1, r6, [r0]
 80098f8:	300c      	adds	r0, #12
 80098fa:	60a0      	str	r0, [r4, #8]
 80098fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009900:	f7fd fd1c 	bl	800733c <memset>
 8009904:	4620      	mov	r0, r4
 8009906:	bd70      	pop	{r4, r5, r6, pc}

08009908 <__sfp_lock_acquire>:
 8009908:	4801      	ldr	r0, [pc, #4]	; (8009910 <__sfp_lock_acquire+0x8>)
 800990a:	f000 b8b3 	b.w	8009a74 <__retarget_lock_acquire_recursive>
 800990e:	bf00      	nop
 8009910:	20009d05 	.word	0x20009d05

08009914 <__sfp_lock_release>:
 8009914:	4801      	ldr	r0, [pc, #4]	; (800991c <__sfp_lock_release+0x8>)
 8009916:	f000 b8ae 	b.w	8009a76 <__retarget_lock_release_recursive>
 800991a:	bf00      	nop
 800991c:	20009d05 	.word	0x20009d05

08009920 <__sinit_lock_acquire>:
 8009920:	4801      	ldr	r0, [pc, #4]	; (8009928 <__sinit_lock_acquire+0x8>)
 8009922:	f000 b8a7 	b.w	8009a74 <__retarget_lock_acquire_recursive>
 8009926:	bf00      	nop
 8009928:	20009d06 	.word	0x20009d06

0800992c <__sinit_lock_release>:
 800992c:	4801      	ldr	r0, [pc, #4]	; (8009934 <__sinit_lock_release+0x8>)
 800992e:	f000 b8a2 	b.w	8009a76 <__retarget_lock_release_recursive>
 8009932:	bf00      	nop
 8009934:	20009d06 	.word	0x20009d06

08009938 <__sinit>:
 8009938:	b510      	push	{r4, lr}
 800993a:	4604      	mov	r4, r0
 800993c:	f7ff fff0 	bl	8009920 <__sinit_lock_acquire>
 8009940:	69a3      	ldr	r3, [r4, #24]
 8009942:	b11b      	cbz	r3, 800994c <__sinit+0x14>
 8009944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009948:	f7ff bff0 	b.w	800992c <__sinit_lock_release>
 800994c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009950:	6523      	str	r3, [r4, #80]	; 0x50
 8009952:	4b13      	ldr	r3, [pc, #76]	; (80099a0 <__sinit+0x68>)
 8009954:	4a13      	ldr	r2, [pc, #76]	; (80099a4 <__sinit+0x6c>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	62a2      	str	r2, [r4, #40]	; 0x28
 800995a:	42a3      	cmp	r3, r4
 800995c:	bf04      	itt	eq
 800995e:	2301      	moveq	r3, #1
 8009960:	61a3      	streq	r3, [r4, #24]
 8009962:	4620      	mov	r0, r4
 8009964:	f000 f820 	bl	80099a8 <__sfp>
 8009968:	6060      	str	r0, [r4, #4]
 800996a:	4620      	mov	r0, r4
 800996c:	f000 f81c 	bl	80099a8 <__sfp>
 8009970:	60a0      	str	r0, [r4, #8]
 8009972:	4620      	mov	r0, r4
 8009974:	f000 f818 	bl	80099a8 <__sfp>
 8009978:	2200      	movs	r2, #0
 800997a:	60e0      	str	r0, [r4, #12]
 800997c:	2104      	movs	r1, #4
 800997e:	6860      	ldr	r0, [r4, #4]
 8009980:	f7ff ff82 	bl	8009888 <std>
 8009984:	68a0      	ldr	r0, [r4, #8]
 8009986:	2201      	movs	r2, #1
 8009988:	2109      	movs	r1, #9
 800998a:	f7ff ff7d 	bl	8009888 <std>
 800998e:	68e0      	ldr	r0, [r4, #12]
 8009990:	2202      	movs	r2, #2
 8009992:	2112      	movs	r1, #18
 8009994:	f7ff ff78 	bl	8009888 <std>
 8009998:	2301      	movs	r3, #1
 800999a:	61a3      	str	r3, [r4, #24]
 800999c:	e7d2      	b.n	8009944 <__sinit+0xc>
 800999e:	bf00      	nop
 80099a0:	0800ec60 	.word	0x0800ec60
 80099a4:	080098d1 	.word	0x080098d1

080099a8 <__sfp>:
 80099a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099aa:	4607      	mov	r7, r0
 80099ac:	f7ff ffac 	bl	8009908 <__sfp_lock_acquire>
 80099b0:	4b1e      	ldr	r3, [pc, #120]	; (8009a2c <__sfp+0x84>)
 80099b2:	681e      	ldr	r6, [r3, #0]
 80099b4:	69b3      	ldr	r3, [r6, #24]
 80099b6:	b913      	cbnz	r3, 80099be <__sfp+0x16>
 80099b8:	4630      	mov	r0, r6
 80099ba:	f7ff ffbd 	bl	8009938 <__sinit>
 80099be:	3648      	adds	r6, #72	; 0x48
 80099c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80099c4:	3b01      	subs	r3, #1
 80099c6:	d503      	bpl.n	80099d0 <__sfp+0x28>
 80099c8:	6833      	ldr	r3, [r6, #0]
 80099ca:	b30b      	cbz	r3, 8009a10 <__sfp+0x68>
 80099cc:	6836      	ldr	r6, [r6, #0]
 80099ce:	e7f7      	b.n	80099c0 <__sfp+0x18>
 80099d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80099d4:	b9d5      	cbnz	r5, 8009a0c <__sfp+0x64>
 80099d6:	4b16      	ldr	r3, [pc, #88]	; (8009a30 <__sfp+0x88>)
 80099d8:	60e3      	str	r3, [r4, #12]
 80099da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80099de:	6665      	str	r5, [r4, #100]	; 0x64
 80099e0:	f000 f847 	bl	8009a72 <__retarget_lock_init_recursive>
 80099e4:	f7ff ff96 	bl	8009914 <__sfp_lock_release>
 80099e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80099ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80099f0:	6025      	str	r5, [r4, #0]
 80099f2:	61a5      	str	r5, [r4, #24]
 80099f4:	2208      	movs	r2, #8
 80099f6:	4629      	mov	r1, r5
 80099f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80099fc:	f7fd fc9e 	bl	800733c <memset>
 8009a00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a08:	4620      	mov	r0, r4
 8009a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a0c:	3468      	adds	r4, #104	; 0x68
 8009a0e:	e7d9      	b.n	80099c4 <__sfp+0x1c>
 8009a10:	2104      	movs	r1, #4
 8009a12:	4638      	mov	r0, r7
 8009a14:	f7ff ff62 	bl	80098dc <__sfmoreglue>
 8009a18:	4604      	mov	r4, r0
 8009a1a:	6030      	str	r0, [r6, #0]
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	d1d5      	bne.n	80099cc <__sfp+0x24>
 8009a20:	f7ff ff78 	bl	8009914 <__sfp_lock_release>
 8009a24:	230c      	movs	r3, #12
 8009a26:	603b      	str	r3, [r7, #0]
 8009a28:	e7ee      	b.n	8009a08 <__sfp+0x60>
 8009a2a:	bf00      	nop
 8009a2c:	0800ec60 	.word	0x0800ec60
 8009a30:	ffff0001 	.word	0xffff0001

08009a34 <_fwalk_reent>:
 8009a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a38:	4606      	mov	r6, r0
 8009a3a:	4688      	mov	r8, r1
 8009a3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009a40:	2700      	movs	r7, #0
 8009a42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a46:	f1b9 0901 	subs.w	r9, r9, #1
 8009a4a:	d505      	bpl.n	8009a58 <_fwalk_reent+0x24>
 8009a4c:	6824      	ldr	r4, [r4, #0]
 8009a4e:	2c00      	cmp	r4, #0
 8009a50:	d1f7      	bne.n	8009a42 <_fwalk_reent+0xe>
 8009a52:	4638      	mov	r0, r7
 8009a54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a58:	89ab      	ldrh	r3, [r5, #12]
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d907      	bls.n	8009a6e <_fwalk_reent+0x3a>
 8009a5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a62:	3301      	adds	r3, #1
 8009a64:	d003      	beq.n	8009a6e <_fwalk_reent+0x3a>
 8009a66:	4629      	mov	r1, r5
 8009a68:	4630      	mov	r0, r6
 8009a6a:	47c0      	blx	r8
 8009a6c:	4307      	orrs	r7, r0
 8009a6e:	3568      	adds	r5, #104	; 0x68
 8009a70:	e7e9      	b.n	8009a46 <_fwalk_reent+0x12>

08009a72 <__retarget_lock_init_recursive>:
 8009a72:	4770      	bx	lr

08009a74 <__retarget_lock_acquire_recursive>:
 8009a74:	4770      	bx	lr

08009a76 <__retarget_lock_release_recursive>:
 8009a76:	4770      	bx	lr

08009a78 <__swhatbuf_r>:
 8009a78:	b570      	push	{r4, r5, r6, lr}
 8009a7a:	460e      	mov	r6, r1
 8009a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a80:	2900      	cmp	r1, #0
 8009a82:	b096      	sub	sp, #88	; 0x58
 8009a84:	4614      	mov	r4, r2
 8009a86:	461d      	mov	r5, r3
 8009a88:	da08      	bge.n	8009a9c <__swhatbuf_r+0x24>
 8009a8a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	602a      	str	r2, [r5, #0]
 8009a92:	061a      	lsls	r2, r3, #24
 8009a94:	d410      	bmi.n	8009ab8 <__swhatbuf_r+0x40>
 8009a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a9a:	e00e      	b.n	8009aba <__swhatbuf_r+0x42>
 8009a9c:	466a      	mov	r2, sp
 8009a9e:	f000 f925 	bl	8009cec <_fstat_r>
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	dbf1      	blt.n	8009a8a <__swhatbuf_r+0x12>
 8009aa6:	9a01      	ldr	r2, [sp, #4]
 8009aa8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009aac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009ab0:	425a      	negs	r2, r3
 8009ab2:	415a      	adcs	r2, r3
 8009ab4:	602a      	str	r2, [r5, #0]
 8009ab6:	e7ee      	b.n	8009a96 <__swhatbuf_r+0x1e>
 8009ab8:	2340      	movs	r3, #64	; 0x40
 8009aba:	2000      	movs	r0, #0
 8009abc:	6023      	str	r3, [r4, #0]
 8009abe:	b016      	add	sp, #88	; 0x58
 8009ac0:	bd70      	pop	{r4, r5, r6, pc}
	...

08009ac4 <__smakebuf_r>:
 8009ac4:	898b      	ldrh	r3, [r1, #12]
 8009ac6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ac8:	079d      	lsls	r5, r3, #30
 8009aca:	4606      	mov	r6, r0
 8009acc:	460c      	mov	r4, r1
 8009ace:	d507      	bpl.n	8009ae0 <__smakebuf_r+0x1c>
 8009ad0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ad4:	6023      	str	r3, [r4, #0]
 8009ad6:	6123      	str	r3, [r4, #16]
 8009ad8:	2301      	movs	r3, #1
 8009ada:	6163      	str	r3, [r4, #20]
 8009adc:	b002      	add	sp, #8
 8009ade:	bd70      	pop	{r4, r5, r6, pc}
 8009ae0:	ab01      	add	r3, sp, #4
 8009ae2:	466a      	mov	r2, sp
 8009ae4:	f7ff ffc8 	bl	8009a78 <__swhatbuf_r>
 8009ae8:	9900      	ldr	r1, [sp, #0]
 8009aea:	4605      	mov	r5, r0
 8009aec:	4630      	mov	r0, r6
 8009aee:	f7ff fb63 	bl	80091b8 <_malloc_r>
 8009af2:	b948      	cbnz	r0, 8009b08 <__smakebuf_r+0x44>
 8009af4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009af8:	059a      	lsls	r2, r3, #22
 8009afa:	d4ef      	bmi.n	8009adc <__smakebuf_r+0x18>
 8009afc:	f023 0303 	bic.w	r3, r3, #3
 8009b00:	f043 0302 	orr.w	r3, r3, #2
 8009b04:	81a3      	strh	r3, [r4, #12]
 8009b06:	e7e3      	b.n	8009ad0 <__smakebuf_r+0xc>
 8009b08:	4b0d      	ldr	r3, [pc, #52]	; (8009b40 <__smakebuf_r+0x7c>)
 8009b0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009b0c:	89a3      	ldrh	r3, [r4, #12]
 8009b0e:	6020      	str	r0, [r4, #0]
 8009b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b14:	81a3      	strh	r3, [r4, #12]
 8009b16:	9b00      	ldr	r3, [sp, #0]
 8009b18:	6163      	str	r3, [r4, #20]
 8009b1a:	9b01      	ldr	r3, [sp, #4]
 8009b1c:	6120      	str	r0, [r4, #16]
 8009b1e:	b15b      	cbz	r3, 8009b38 <__smakebuf_r+0x74>
 8009b20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b24:	4630      	mov	r0, r6
 8009b26:	f000 f8f3 	bl	8009d10 <_isatty_r>
 8009b2a:	b128      	cbz	r0, 8009b38 <__smakebuf_r+0x74>
 8009b2c:	89a3      	ldrh	r3, [r4, #12]
 8009b2e:	f023 0303 	bic.w	r3, r3, #3
 8009b32:	f043 0301 	orr.w	r3, r3, #1
 8009b36:	81a3      	strh	r3, [r4, #12]
 8009b38:	89a0      	ldrh	r0, [r4, #12]
 8009b3a:	4305      	orrs	r5, r0
 8009b3c:	81a5      	strh	r5, [r4, #12]
 8009b3e:	e7cd      	b.n	8009adc <__smakebuf_r+0x18>
 8009b40:	080098d1 	.word	0x080098d1

08009b44 <__ascii_mbtowc>:
 8009b44:	b082      	sub	sp, #8
 8009b46:	b901      	cbnz	r1, 8009b4a <__ascii_mbtowc+0x6>
 8009b48:	a901      	add	r1, sp, #4
 8009b4a:	b142      	cbz	r2, 8009b5e <__ascii_mbtowc+0x1a>
 8009b4c:	b14b      	cbz	r3, 8009b62 <__ascii_mbtowc+0x1e>
 8009b4e:	7813      	ldrb	r3, [r2, #0]
 8009b50:	600b      	str	r3, [r1, #0]
 8009b52:	7812      	ldrb	r2, [r2, #0]
 8009b54:	1e10      	subs	r0, r2, #0
 8009b56:	bf18      	it	ne
 8009b58:	2001      	movne	r0, #1
 8009b5a:	b002      	add	sp, #8
 8009b5c:	4770      	bx	lr
 8009b5e:	4610      	mov	r0, r2
 8009b60:	e7fb      	b.n	8009b5a <__ascii_mbtowc+0x16>
 8009b62:	f06f 0001 	mvn.w	r0, #1
 8009b66:	e7f8      	b.n	8009b5a <__ascii_mbtowc+0x16>

08009b68 <__malloc_lock>:
 8009b68:	4801      	ldr	r0, [pc, #4]	; (8009b70 <__malloc_lock+0x8>)
 8009b6a:	f7ff bf83 	b.w	8009a74 <__retarget_lock_acquire_recursive>
 8009b6e:	bf00      	nop
 8009b70:	20009d04 	.word	0x20009d04

08009b74 <__malloc_unlock>:
 8009b74:	4801      	ldr	r0, [pc, #4]	; (8009b7c <__malloc_unlock+0x8>)
 8009b76:	f7ff bf7e 	b.w	8009a76 <__retarget_lock_release_recursive>
 8009b7a:	bf00      	nop
 8009b7c:	20009d04 	.word	0x20009d04

08009b80 <_raise_r>:
 8009b80:	291f      	cmp	r1, #31
 8009b82:	b538      	push	{r3, r4, r5, lr}
 8009b84:	4604      	mov	r4, r0
 8009b86:	460d      	mov	r5, r1
 8009b88:	d904      	bls.n	8009b94 <_raise_r+0x14>
 8009b8a:	2316      	movs	r3, #22
 8009b8c:	6003      	str	r3, [r0, #0]
 8009b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b92:	bd38      	pop	{r3, r4, r5, pc}
 8009b94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009b96:	b112      	cbz	r2, 8009b9e <_raise_r+0x1e>
 8009b98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b9c:	b94b      	cbnz	r3, 8009bb2 <_raise_r+0x32>
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	f000 f830 	bl	8009c04 <_getpid_r>
 8009ba4:	462a      	mov	r2, r5
 8009ba6:	4601      	mov	r1, r0
 8009ba8:	4620      	mov	r0, r4
 8009baa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bae:	f000 b817 	b.w	8009be0 <_kill_r>
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d00a      	beq.n	8009bcc <_raise_r+0x4c>
 8009bb6:	1c59      	adds	r1, r3, #1
 8009bb8:	d103      	bne.n	8009bc2 <_raise_r+0x42>
 8009bba:	2316      	movs	r3, #22
 8009bbc:	6003      	str	r3, [r0, #0]
 8009bbe:	2001      	movs	r0, #1
 8009bc0:	e7e7      	b.n	8009b92 <_raise_r+0x12>
 8009bc2:	2400      	movs	r4, #0
 8009bc4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009bc8:	4628      	mov	r0, r5
 8009bca:	4798      	blx	r3
 8009bcc:	2000      	movs	r0, #0
 8009bce:	e7e0      	b.n	8009b92 <_raise_r+0x12>

08009bd0 <raise>:
 8009bd0:	4b02      	ldr	r3, [pc, #8]	; (8009bdc <raise+0xc>)
 8009bd2:	4601      	mov	r1, r0
 8009bd4:	6818      	ldr	r0, [r3, #0]
 8009bd6:	f7ff bfd3 	b.w	8009b80 <_raise_r>
 8009bda:	bf00      	nop
 8009bdc:	20000018 	.word	0x20000018

08009be0 <_kill_r>:
 8009be0:	b538      	push	{r3, r4, r5, lr}
 8009be2:	4d07      	ldr	r5, [pc, #28]	; (8009c00 <_kill_r+0x20>)
 8009be4:	2300      	movs	r3, #0
 8009be6:	4604      	mov	r4, r0
 8009be8:	4608      	mov	r0, r1
 8009bea:	4611      	mov	r1, r2
 8009bec:	602b      	str	r3, [r5, #0]
 8009bee:	f7f7 ffc5 	bl	8001b7c <_kill>
 8009bf2:	1c43      	adds	r3, r0, #1
 8009bf4:	d102      	bne.n	8009bfc <_kill_r+0x1c>
 8009bf6:	682b      	ldr	r3, [r5, #0]
 8009bf8:	b103      	cbz	r3, 8009bfc <_kill_r+0x1c>
 8009bfa:	6023      	str	r3, [r4, #0]
 8009bfc:	bd38      	pop	{r3, r4, r5, pc}
 8009bfe:	bf00      	nop
 8009c00:	20009d08 	.word	0x20009d08

08009c04 <_getpid_r>:
 8009c04:	f7f7 bfb2 	b.w	8001b6c <_getpid>

08009c08 <__sread>:
 8009c08:	b510      	push	{r4, lr}
 8009c0a:	460c      	mov	r4, r1
 8009c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c10:	f000 f8a0 	bl	8009d54 <_read_r>
 8009c14:	2800      	cmp	r0, #0
 8009c16:	bfab      	itete	ge
 8009c18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c1a:	89a3      	ldrhlt	r3, [r4, #12]
 8009c1c:	181b      	addge	r3, r3, r0
 8009c1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c22:	bfac      	ite	ge
 8009c24:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c26:	81a3      	strhlt	r3, [r4, #12]
 8009c28:	bd10      	pop	{r4, pc}

08009c2a <__swrite>:
 8009c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c2e:	461f      	mov	r7, r3
 8009c30:	898b      	ldrh	r3, [r1, #12]
 8009c32:	05db      	lsls	r3, r3, #23
 8009c34:	4605      	mov	r5, r0
 8009c36:	460c      	mov	r4, r1
 8009c38:	4616      	mov	r6, r2
 8009c3a:	d505      	bpl.n	8009c48 <__swrite+0x1e>
 8009c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c40:	2302      	movs	r3, #2
 8009c42:	2200      	movs	r2, #0
 8009c44:	f000 f874 	bl	8009d30 <_lseek_r>
 8009c48:	89a3      	ldrh	r3, [r4, #12]
 8009c4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c52:	81a3      	strh	r3, [r4, #12]
 8009c54:	4632      	mov	r2, r6
 8009c56:	463b      	mov	r3, r7
 8009c58:	4628      	mov	r0, r5
 8009c5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c5e:	f000 b823 	b.w	8009ca8 <_write_r>

08009c62 <__sseek>:
 8009c62:	b510      	push	{r4, lr}
 8009c64:	460c      	mov	r4, r1
 8009c66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c6a:	f000 f861 	bl	8009d30 <_lseek_r>
 8009c6e:	1c43      	adds	r3, r0, #1
 8009c70:	89a3      	ldrh	r3, [r4, #12]
 8009c72:	bf15      	itete	ne
 8009c74:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c7e:	81a3      	strheq	r3, [r4, #12]
 8009c80:	bf18      	it	ne
 8009c82:	81a3      	strhne	r3, [r4, #12]
 8009c84:	bd10      	pop	{r4, pc}

08009c86 <__sclose>:
 8009c86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c8a:	f000 b81f 	b.w	8009ccc <_close_r>

08009c8e <__ascii_wctomb>:
 8009c8e:	b149      	cbz	r1, 8009ca4 <__ascii_wctomb+0x16>
 8009c90:	2aff      	cmp	r2, #255	; 0xff
 8009c92:	bf85      	ittet	hi
 8009c94:	238a      	movhi	r3, #138	; 0x8a
 8009c96:	6003      	strhi	r3, [r0, #0]
 8009c98:	700a      	strbls	r2, [r1, #0]
 8009c9a:	f04f 30ff 	movhi.w	r0, #4294967295
 8009c9e:	bf98      	it	ls
 8009ca0:	2001      	movls	r0, #1
 8009ca2:	4770      	bx	lr
 8009ca4:	4608      	mov	r0, r1
 8009ca6:	4770      	bx	lr

08009ca8 <_write_r>:
 8009ca8:	b538      	push	{r3, r4, r5, lr}
 8009caa:	4d07      	ldr	r5, [pc, #28]	; (8009cc8 <_write_r+0x20>)
 8009cac:	4604      	mov	r4, r0
 8009cae:	4608      	mov	r0, r1
 8009cb0:	4611      	mov	r1, r2
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	602a      	str	r2, [r5, #0]
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	f7f7 ff97 	bl	8001bea <_write>
 8009cbc:	1c43      	adds	r3, r0, #1
 8009cbe:	d102      	bne.n	8009cc6 <_write_r+0x1e>
 8009cc0:	682b      	ldr	r3, [r5, #0]
 8009cc2:	b103      	cbz	r3, 8009cc6 <_write_r+0x1e>
 8009cc4:	6023      	str	r3, [r4, #0]
 8009cc6:	bd38      	pop	{r3, r4, r5, pc}
 8009cc8:	20009d08 	.word	0x20009d08

08009ccc <_close_r>:
 8009ccc:	b538      	push	{r3, r4, r5, lr}
 8009cce:	4d06      	ldr	r5, [pc, #24]	; (8009ce8 <_close_r+0x1c>)
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	4604      	mov	r4, r0
 8009cd4:	4608      	mov	r0, r1
 8009cd6:	602b      	str	r3, [r5, #0]
 8009cd8:	f7f7 ffa3 	bl	8001c22 <_close>
 8009cdc:	1c43      	adds	r3, r0, #1
 8009cde:	d102      	bne.n	8009ce6 <_close_r+0x1a>
 8009ce0:	682b      	ldr	r3, [r5, #0]
 8009ce2:	b103      	cbz	r3, 8009ce6 <_close_r+0x1a>
 8009ce4:	6023      	str	r3, [r4, #0]
 8009ce6:	bd38      	pop	{r3, r4, r5, pc}
 8009ce8:	20009d08 	.word	0x20009d08

08009cec <_fstat_r>:
 8009cec:	b538      	push	{r3, r4, r5, lr}
 8009cee:	4d07      	ldr	r5, [pc, #28]	; (8009d0c <_fstat_r+0x20>)
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	4604      	mov	r4, r0
 8009cf4:	4608      	mov	r0, r1
 8009cf6:	4611      	mov	r1, r2
 8009cf8:	602b      	str	r3, [r5, #0]
 8009cfa:	f7f7 ff9e 	bl	8001c3a <_fstat>
 8009cfe:	1c43      	adds	r3, r0, #1
 8009d00:	d102      	bne.n	8009d08 <_fstat_r+0x1c>
 8009d02:	682b      	ldr	r3, [r5, #0]
 8009d04:	b103      	cbz	r3, 8009d08 <_fstat_r+0x1c>
 8009d06:	6023      	str	r3, [r4, #0]
 8009d08:	bd38      	pop	{r3, r4, r5, pc}
 8009d0a:	bf00      	nop
 8009d0c:	20009d08 	.word	0x20009d08

08009d10 <_isatty_r>:
 8009d10:	b538      	push	{r3, r4, r5, lr}
 8009d12:	4d06      	ldr	r5, [pc, #24]	; (8009d2c <_isatty_r+0x1c>)
 8009d14:	2300      	movs	r3, #0
 8009d16:	4604      	mov	r4, r0
 8009d18:	4608      	mov	r0, r1
 8009d1a:	602b      	str	r3, [r5, #0]
 8009d1c:	f7f7 ff9d 	bl	8001c5a <_isatty>
 8009d20:	1c43      	adds	r3, r0, #1
 8009d22:	d102      	bne.n	8009d2a <_isatty_r+0x1a>
 8009d24:	682b      	ldr	r3, [r5, #0]
 8009d26:	b103      	cbz	r3, 8009d2a <_isatty_r+0x1a>
 8009d28:	6023      	str	r3, [r4, #0]
 8009d2a:	bd38      	pop	{r3, r4, r5, pc}
 8009d2c:	20009d08 	.word	0x20009d08

08009d30 <_lseek_r>:
 8009d30:	b538      	push	{r3, r4, r5, lr}
 8009d32:	4d07      	ldr	r5, [pc, #28]	; (8009d50 <_lseek_r+0x20>)
 8009d34:	4604      	mov	r4, r0
 8009d36:	4608      	mov	r0, r1
 8009d38:	4611      	mov	r1, r2
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	602a      	str	r2, [r5, #0]
 8009d3e:	461a      	mov	r2, r3
 8009d40:	f7f7 ff96 	bl	8001c70 <_lseek>
 8009d44:	1c43      	adds	r3, r0, #1
 8009d46:	d102      	bne.n	8009d4e <_lseek_r+0x1e>
 8009d48:	682b      	ldr	r3, [r5, #0]
 8009d4a:	b103      	cbz	r3, 8009d4e <_lseek_r+0x1e>
 8009d4c:	6023      	str	r3, [r4, #0]
 8009d4e:	bd38      	pop	{r3, r4, r5, pc}
 8009d50:	20009d08 	.word	0x20009d08

08009d54 <_read_r>:
 8009d54:	b538      	push	{r3, r4, r5, lr}
 8009d56:	4d07      	ldr	r5, [pc, #28]	; (8009d74 <_read_r+0x20>)
 8009d58:	4604      	mov	r4, r0
 8009d5a:	4608      	mov	r0, r1
 8009d5c:	4611      	mov	r1, r2
 8009d5e:	2200      	movs	r2, #0
 8009d60:	602a      	str	r2, [r5, #0]
 8009d62:	461a      	mov	r2, r3
 8009d64:	f7f7 ff24 	bl	8001bb0 <_read>
 8009d68:	1c43      	adds	r3, r0, #1
 8009d6a:	d102      	bne.n	8009d72 <_read_r+0x1e>
 8009d6c:	682b      	ldr	r3, [r5, #0]
 8009d6e:	b103      	cbz	r3, 8009d72 <_read_r+0x1e>
 8009d70:	6023      	str	r3, [r4, #0]
 8009d72:	bd38      	pop	{r3, r4, r5, pc}
 8009d74:	20009d08 	.word	0x20009d08

08009d78 <cos>:
 8009d78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d7a:	ec53 2b10 	vmov	r2, r3, d0
 8009d7e:	4826      	ldr	r0, [pc, #152]	; (8009e18 <cos+0xa0>)
 8009d80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009d84:	4281      	cmp	r1, r0
 8009d86:	dc06      	bgt.n	8009d96 <cos+0x1e>
 8009d88:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009e10 <cos+0x98>
 8009d8c:	b005      	add	sp, #20
 8009d8e:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d92:	f000 baa9 	b.w	800a2e8 <__kernel_cos>
 8009d96:	4821      	ldr	r0, [pc, #132]	; (8009e1c <cos+0xa4>)
 8009d98:	4281      	cmp	r1, r0
 8009d9a:	dd09      	ble.n	8009db0 <cos+0x38>
 8009d9c:	ee10 0a10 	vmov	r0, s0
 8009da0:	4619      	mov	r1, r3
 8009da2:	f7f6 fa71 	bl	8000288 <__aeabi_dsub>
 8009da6:	ec41 0b10 	vmov	d0, r0, r1
 8009daa:	b005      	add	sp, #20
 8009dac:	f85d fb04 	ldr.w	pc, [sp], #4
 8009db0:	4668      	mov	r0, sp
 8009db2:	f000 f88d 	bl	8009ed0 <__ieee754_rem_pio2>
 8009db6:	f000 0003 	and.w	r0, r0, #3
 8009dba:	2801      	cmp	r0, #1
 8009dbc:	d00b      	beq.n	8009dd6 <cos+0x5e>
 8009dbe:	2802      	cmp	r0, #2
 8009dc0:	d016      	beq.n	8009df0 <cos+0x78>
 8009dc2:	b9e0      	cbnz	r0, 8009dfe <cos+0x86>
 8009dc4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009dc8:	ed9d 0b00 	vldr	d0, [sp]
 8009dcc:	f000 fa8c 	bl	800a2e8 <__kernel_cos>
 8009dd0:	ec51 0b10 	vmov	r0, r1, d0
 8009dd4:	e7e7      	b.n	8009da6 <cos+0x2e>
 8009dd6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009dda:	ed9d 0b00 	vldr	d0, [sp]
 8009dde:	f000 fe9b 	bl	800ab18 <__kernel_sin>
 8009de2:	ec53 2b10 	vmov	r2, r3, d0
 8009de6:	ee10 0a10 	vmov	r0, s0
 8009dea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009dee:	e7da      	b.n	8009da6 <cos+0x2e>
 8009df0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009df4:	ed9d 0b00 	vldr	d0, [sp]
 8009df8:	f000 fa76 	bl	800a2e8 <__kernel_cos>
 8009dfc:	e7f1      	b.n	8009de2 <cos+0x6a>
 8009dfe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009e02:	ed9d 0b00 	vldr	d0, [sp]
 8009e06:	2001      	movs	r0, #1
 8009e08:	f000 fe86 	bl	800ab18 <__kernel_sin>
 8009e0c:	e7e0      	b.n	8009dd0 <cos+0x58>
 8009e0e:	bf00      	nop
	...
 8009e18:	3fe921fb 	.word	0x3fe921fb
 8009e1c:	7fefffff 	.word	0x7fefffff

08009e20 <sin>:
 8009e20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e22:	ec53 2b10 	vmov	r2, r3, d0
 8009e26:	4828      	ldr	r0, [pc, #160]	; (8009ec8 <sin+0xa8>)
 8009e28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009e2c:	4281      	cmp	r1, r0
 8009e2e:	dc07      	bgt.n	8009e40 <sin+0x20>
 8009e30:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009ec0 <sin+0xa0>
 8009e34:	2000      	movs	r0, #0
 8009e36:	b005      	add	sp, #20
 8009e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e3c:	f000 be6c 	b.w	800ab18 <__kernel_sin>
 8009e40:	4822      	ldr	r0, [pc, #136]	; (8009ecc <sin+0xac>)
 8009e42:	4281      	cmp	r1, r0
 8009e44:	dd09      	ble.n	8009e5a <sin+0x3a>
 8009e46:	ee10 0a10 	vmov	r0, s0
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	f7f6 fa1c 	bl	8000288 <__aeabi_dsub>
 8009e50:	ec41 0b10 	vmov	d0, r0, r1
 8009e54:	b005      	add	sp, #20
 8009e56:	f85d fb04 	ldr.w	pc, [sp], #4
 8009e5a:	4668      	mov	r0, sp
 8009e5c:	f000 f838 	bl	8009ed0 <__ieee754_rem_pio2>
 8009e60:	f000 0003 	and.w	r0, r0, #3
 8009e64:	2801      	cmp	r0, #1
 8009e66:	d00c      	beq.n	8009e82 <sin+0x62>
 8009e68:	2802      	cmp	r0, #2
 8009e6a:	d011      	beq.n	8009e90 <sin+0x70>
 8009e6c:	b9f0      	cbnz	r0, 8009eac <sin+0x8c>
 8009e6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009e72:	ed9d 0b00 	vldr	d0, [sp]
 8009e76:	2001      	movs	r0, #1
 8009e78:	f000 fe4e 	bl	800ab18 <__kernel_sin>
 8009e7c:	ec51 0b10 	vmov	r0, r1, d0
 8009e80:	e7e6      	b.n	8009e50 <sin+0x30>
 8009e82:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009e86:	ed9d 0b00 	vldr	d0, [sp]
 8009e8a:	f000 fa2d 	bl	800a2e8 <__kernel_cos>
 8009e8e:	e7f5      	b.n	8009e7c <sin+0x5c>
 8009e90:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009e94:	ed9d 0b00 	vldr	d0, [sp]
 8009e98:	2001      	movs	r0, #1
 8009e9a:	f000 fe3d 	bl	800ab18 <__kernel_sin>
 8009e9e:	ec53 2b10 	vmov	r2, r3, d0
 8009ea2:	ee10 0a10 	vmov	r0, s0
 8009ea6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009eaa:	e7d1      	b.n	8009e50 <sin+0x30>
 8009eac:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009eb0:	ed9d 0b00 	vldr	d0, [sp]
 8009eb4:	f000 fa18 	bl	800a2e8 <__kernel_cos>
 8009eb8:	e7f1      	b.n	8009e9e <sin+0x7e>
 8009eba:	bf00      	nop
 8009ebc:	f3af 8000 	nop.w
	...
 8009ec8:	3fe921fb 	.word	0x3fe921fb
 8009ecc:	7fefffff 	.word	0x7fefffff

08009ed0 <__ieee754_rem_pio2>:
 8009ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ed4:	ed2d 8b02 	vpush	{d8}
 8009ed8:	ec55 4b10 	vmov	r4, r5, d0
 8009edc:	4bca      	ldr	r3, [pc, #808]	; (800a208 <__ieee754_rem_pio2+0x338>)
 8009ede:	b08b      	sub	sp, #44	; 0x2c
 8009ee0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009ee4:	4598      	cmp	r8, r3
 8009ee6:	4682      	mov	sl, r0
 8009ee8:	9502      	str	r5, [sp, #8]
 8009eea:	dc08      	bgt.n	8009efe <__ieee754_rem_pio2+0x2e>
 8009eec:	2200      	movs	r2, #0
 8009eee:	2300      	movs	r3, #0
 8009ef0:	ed80 0b00 	vstr	d0, [r0]
 8009ef4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009ef8:	f04f 0b00 	mov.w	fp, #0
 8009efc:	e028      	b.n	8009f50 <__ieee754_rem_pio2+0x80>
 8009efe:	4bc3      	ldr	r3, [pc, #780]	; (800a20c <__ieee754_rem_pio2+0x33c>)
 8009f00:	4598      	cmp	r8, r3
 8009f02:	dc78      	bgt.n	8009ff6 <__ieee754_rem_pio2+0x126>
 8009f04:	9b02      	ldr	r3, [sp, #8]
 8009f06:	4ec2      	ldr	r6, [pc, #776]	; (800a210 <__ieee754_rem_pio2+0x340>)
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	ee10 0a10 	vmov	r0, s0
 8009f0e:	a3b0      	add	r3, pc, #704	; (adr r3, 800a1d0 <__ieee754_rem_pio2+0x300>)
 8009f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f14:	4629      	mov	r1, r5
 8009f16:	dd39      	ble.n	8009f8c <__ieee754_rem_pio2+0xbc>
 8009f18:	f7f6 f9b6 	bl	8000288 <__aeabi_dsub>
 8009f1c:	45b0      	cmp	r8, r6
 8009f1e:	4604      	mov	r4, r0
 8009f20:	460d      	mov	r5, r1
 8009f22:	d01b      	beq.n	8009f5c <__ieee754_rem_pio2+0x8c>
 8009f24:	a3ac      	add	r3, pc, #688	; (adr r3, 800a1d8 <__ieee754_rem_pio2+0x308>)
 8009f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2a:	f7f6 f9ad 	bl	8000288 <__aeabi_dsub>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	460b      	mov	r3, r1
 8009f32:	e9ca 2300 	strd	r2, r3, [sl]
 8009f36:	4620      	mov	r0, r4
 8009f38:	4629      	mov	r1, r5
 8009f3a:	f7f6 f9a5 	bl	8000288 <__aeabi_dsub>
 8009f3e:	a3a6      	add	r3, pc, #664	; (adr r3, 800a1d8 <__ieee754_rem_pio2+0x308>)
 8009f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f44:	f7f6 f9a0 	bl	8000288 <__aeabi_dsub>
 8009f48:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009f4c:	f04f 0b01 	mov.w	fp, #1
 8009f50:	4658      	mov	r0, fp
 8009f52:	b00b      	add	sp, #44	; 0x2c
 8009f54:	ecbd 8b02 	vpop	{d8}
 8009f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f5c:	a3a0      	add	r3, pc, #640	; (adr r3, 800a1e0 <__ieee754_rem_pio2+0x310>)
 8009f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f62:	f7f6 f991 	bl	8000288 <__aeabi_dsub>
 8009f66:	a3a0      	add	r3, pc, #640	; (adr r3, 800a1e8 <__ieee754_rem_pio2+0x318>)
 8009f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6c:	4604      	mov	r4, r0
 8009f6e:	460d      	mov	r5, r1
 8009f70:	f7f6 f98a 	bl	8000288 <__aeabi_dsub>
 8009f74:	4602      	mov	r2, r0
 8009f76:	460b      	mov	r3, r1
 8009f78:	e9ca 2300 	strd	r2, r3, [sl]
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	4629      	mov	r1, r5
 8009f80:	f7f6 f982 	bl	8000288 <__aeabi_dsub>
 8009f84:	a398      	add	r3, pc, #608	; (adr r3, 800a1e8 <__ieee754_rem_pio2+0x318>)
 8009f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8a:	e7db      	b.n	8009f44 <__ieee754_rem_pio2+0x74>
 8009f8c:	f7f6 f97e 	bl	800028c <__adddf3>
 8009f90:	45b0      	cmp	r8, r6
 8009f92:	4604      	mov	r4, r0
 8009f94:	460d      	mov	r5, r1
 8009f96:	d016      	beq.n	8009fc6 <__ieee754_rem_pio2+0xf6>
 8009f98:	a38f      	add	r3, pc, #572	; (adr r3, 800a1d8 <__ieee754_rem_pio2+0x308>)
 8009f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9e:	f7f6 f975 	bl	800028c <__adddf3>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	e9ca 2300 	strd	r2, r3, [sl]
 8009faa:	4620      	mov	r0, r4
 8009fac:	4629      	mov	r1, r5
 8009fae:	f7f6 f96b 	bl	8000288 <__aeabi_dsub>
 8009fb2:	a389      	add	r3, pc, #548	; (adr r3, 800a1d8 <__ieee754_rem_pio2+0x308>)
 8009fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb8:	f7f6 f968 	bl	800028c <__adddf3>
 8009fbc:	f04f 3bff 	mov.w	fp, #4294967295
 8009fc0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009fc4:	e7c4      	b.n	8009f50 <__ieee754_rem_pio2+0x80>
 8009fc6:	a386      	add	r3, pc, #536	; (adr r3, 800a1e0 <__ieee754_rem_pio2+0x310>)
 8009fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fcc:	f7f6 f95e 	bl	800028c <__adddf3>
 8009fd0:	a385      	add	r3, pc, #532	; (adr r3, 800a1e8 <__ieee754_rem_pio2+0x318>)
 8009fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	460d      	mov	r5, r1
 8009fda:	f7f6 f957 	bl	800028c <__adddf3>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	e9ca 2300 	strd	r2, r3, [sl]
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	4629      	mov	r1, r5
 8009fea:	f7f6 f94d 	bl	8000288 <__aeabi_dsub>
 8009fee:	a37e      	add	r3, pc, #504	; (adr r3, 800a1e8 <__ieee754_rem_pio2+0x318>)
 8009ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff4:	e7e0      	b.n	8009fb8 <__ieee754_rem_pio2+0xe8>
 8009ff6:	4b87      	ldr	r3, [pc, #540]	; (800a214 <__ieee754_rem_pio2+0x344>)
 8009ff8:	4598      	cmp	r8, r3
 8009ffa:	f300 80d9 	bgt.w	800a1b0 <__ieee754_rem_pio2+0x2e0>
 8009ffe:	f000 fe49 	bl	800ac94 <fabs>
 800a002:	ec55 4b10 	vmov	r4, r5, d0
 800a006:	ee10 0a10 	vmov	r0, s0
 800a00a:	a379      	add	r3, pc, #484	; (adr r3, 800a1f0 <__ieee754_rem_pio2+0x320>)
 800a00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a010:	4629      	mov	r1, r5
 800a012:	f7f6 faf1 	bl	80005f8 <__aeabi_dmul>
 800a016:	4b80      	ldr	r3, [pc, #512]	; (800a218 <__ieee754_rem_pio2+0x348>)
 800a018:	2200      	movs	r2, #0
 800a01a:	f7f6 f937 	bl	800028c <__adddf3>
 800a01e:	f7f6 fd9b 	bl	8000b58 <__aeabi_d2iz>
 800a022:	4683      	mov	fp, r0
 800a024:	f7f6 fa7e 	bl	8000524 <__aeabi_i2d>
 800a028:	4602      	mov	r2, r0
 800a02a:	460b      	mov	r3, r1
 800a02c:	ec43 2b18 	vmov	d8, r2, r3
 800a030:	a367      	add	r3, pc, #412	; (adr r3, 800a1d0 <__ieee754_rem_pio2+0x300>)
 800a032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a036:	f7f6 fadf 	bl	80005f8 <__aeabi_dmul>
 800a03a:	4602      	mov	r2, r0
 800a03c:	460b      	mov	r3, r1
 800a03e:	4620      	mov	r0, r4
 800a040:	4629      	mov	r1, r5
 800a042:	f7f6 f921 	bl	8000288 <__aeabi_dsub>
 800a046:	a364      	add	r3, pc, #400	; (adr r3, 800a1d8 <__ieee754_rem_pio2+0x308>)
 800a048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04c:	4606      	mov	r6, r0
 800a04e:	460f      	mov	r7, r1
 800a050:	ec51 0b18 	vmov	r0, r1, d8
 800a054:	f7f6 fad0 	bl	80005f8 <__aeabi_dmul>
 800a058:	f1bb 0f1f 	cmp.w	fp, #31
 800a05c:	4604      	mov	r4, r0
 800a05e:	460d      	mov	r5, r1
 800a060:	dc0d      	bgt.n	800a07e <__ieee754_rem_pio2+0x1ae>
 800a062:	4b6e      	ldr	r3, [pc, #440]	; (800a21c <__ieee754_rem_pio2+0x34c>)
 800a064:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a06c:	4543      	cmp	r3, r8
 800a06e:	d006      	beq.n	800a07e <__ieee754_rem_pio2+0x1ae>
 800a070:	4622      	mov	r2, r4
 800a072:	462b      	mov	r3, r5
 800a074:	4630      	mov	r0, r6
 800a076:	4639      	mov	r1, r7
 800a078:	f7f6 f906 	bl	8000288 <__aeabi_dsub>
 800a07c:	e00f      	b.n	800a09e <__ieee754_rem_pio2+0x1ce>
 800a07e:	462b      	mov	r3, r5
 800a080:	4622      	mov	r2, r4
 800a082:	4630      	mov	r0, r6
 800a084:	4639      	mov	r1, r7
 800a086:	f7f6 f8ff 	bl	8000288 <__aeabi_dsub>
 800a08a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a08e:	9303      	str	r3, [sp, #12]
 800a090:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a094:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a098:	f1b8 0f10 	cmp.w	r8, #16
 800a09c:	dc02      	bgt.n	800a0a4 <__ieee754_rem_pio2+0x1d4>
 800a09e:	e9ca 0100 	strd	r0, r1, [sl]
 800a0a2:	e039      	b.n	800a118 <__ieee754_rem_pio2+0x248>
 800a0a4:	a34e      	add	r3, pc, #312	; (adr r3, 800a1e0 <__ieee754_rem_pio2+0x310>)
 800a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0aa:	ec51 0b18 	vmov	r0, r1, d8
 800a0ae:	f7f6 faa3 	bl	80005f8 <__aeabi_dmul>
 800a0b2:	4604      	mov	r4, r0
 800a0b4:	460d      	mov	r5, r1
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	4639      	mov	r1, r7
 800a0be:	f7f6 f8e3 	bl	8000288 <__aeabi_dsub>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	4680      	mov	r8, r0
 800a0c8:	4689      	mov	r9, r1
 800a0ca:	4630      	mov	r0, r6
 800a0cc:	4639      	mov	r1, r7
 800a0ce:	f7f6 f8db 	bl	8000288 <__aeabi_dsub>
 800a0d2:	4622      	mov	r2, r4
 800a0d4:	462b      	mov	r3, r5
 800a0d6:	f7f6 f8d7 	bl	8000288 <__aeabi_dsub>
 800a0da:	a343      	add	r3, pc, #268	; (adr r3, 800a1e8 <__ieee754_rem_pio2+0x318>)
 800a0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e0:	4604      	mov	r4, r0
 800a0e2:	460d      	mov	r5, r1
 800a0e4:	ec51 0b18 	vmov	r0, r1, d8
 800a0e8:	f7f6 fa86 	bl	80005f8 <__aeabi_dmul>
 800a0ec:	4622      	mov	r2, r4
 800a0ee:	462b      	mov	r3, r5
 800a0f0:	f7f6 f8ca 	bl	8000288 <__aeabi_dsub>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	460d      	mov	r5, r1
 800a0fc:	4640      	mov	r0, r8
 800a0fe:	4649      	mov	r1, r9
 800a100:	f7f6 f8c2 	bl	8000288 <__aeabi_dsub>
 800a104:	9a03      	ldr	r2, [sp, #12]
 800a106:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a10a:	1ad3      	subs	r3, r2, r3
 800a10c:	2b31      	cmp	r3, #49	; 0x31
 800a10e:	dc24      	bgt.n	800a15a <__ieee754_rem_pio2+0x28a>
 800a110:	e9ca 0100 	strd	r0, r1, [sl]
 800a114:	4646      	mov	r6, r8
 800a116:	464f      	mov	r7, r9
 800a118:	e9da 8900 	ldrd	r8, r9, [sl]
 800a11c:	4630      	mov	r0, r6
 800a11e:	4642      	mov	r2, r8
 800a120:	464b      	mov	r3, r9
 800a122:	4639      	mov	r1, r7
 800a124:	f7f6 f8b0 	bl	8000288 <__aeabi_dsub>
 800a128:	462b      	mov	r3, r5
 800a12a:	4622      	mov	r2, r4
 800a12c:	f7f6 f8ac 	bl	8000288 <__aeabi_dsub>
 800a130:	9b02      	ldr	r3, [sp, #8]
 800a132:	2b00      	cmp	r3, #0
 800a134:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a138:	f6bf af0a 	bge.w	8009f50 <__ieee754_rem_pio2+0x80>
 800a13c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a140:	f8ca 3004 	str.w	r3, [sl, #4]
 800a144:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a148:	f8ca 8000 	str.w	r8, [sl]
 800a14c:	f8ca 0008 	str.w	r0, [sl, #8]
 800a150:	f8ca 300c 	str.w	r3, [sl, #12]
 800a154:	f1cb 0b00 	rsb	fp, fp, #0
 800a158:	e6fa      	b.n	8009f50 <__ieee754_rem_pio2+0x80>
 800a15a:	a327      	add	r3, pc, #156	; (adr r3, 800a1f8 <__ieee754_rem_pio2+0x328>)
 800a15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a160:	ec51 0b18 	vmov	r0, r1, d8
 800a164:	f7f6 fa48 	bl	80005f8 <__aeabi_dmul>
 800a168:	4604      	mov	r4, r0
 800a16a:	460d      	mov	r5, r1
 800a16c:	4602      	mov	r2, r0
 800a16e:	460b      	mov	r3, r1
 800a170:	4640      	mov	r0, r8
 800a172:	4649      	mov	r1, r9
 800a174:	f7f6 f888 	bl	8000288 <__aeabi_dsub>
 800a178:	4602      	mov	r2, r0
 800a17a:	460b      	mov	r3, r1
 800a17c:	4606      	mov	r6, r0
 800a17e:	460f      	mov	r7, r1
 800a180:	4640      	mov	r0, r8
 800a182:	4649      	mov	r1, r9
 800a184:	f7f6 f880 	bl	8000288 <__aeabi_dsub>
 800a188:	4622      	mov	r2, r4
 800a18a:	462b      	mov	r3, r5
 800a18c:	f7f6 f87c 	bl	8000288 <__aeabi_dsub>
 800a190:	a31b      	add	r3, pc, #108	; (adr r3, 800a200 <__ieee754_rem_pio2+0x330>)
 800a192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a196:	4604      	mov	r4, r0
 800a198:	460d      	mov	r5, r1
 800a19a:	ec51 0b18 	vmov	r0, r1, d8
 800a19e:	f7f6 fa2b 	bl	80005f8 <__aeabi_dmul>
 800a1a2:	4622      	mov	r2, r4
 800a1a4:	462b      	mov	r3, r5
 800a1a6:	f7f6 f86f 	bl	8000288 <__aeabi_dsub>
 800a1aa:	4604      	mov	r4, r0
 800a1ac:	460d      	mov	r5, r1
 800a1ae:	e75f      	b.n	800a070 <__ieee754_rem_pio2+0x1a0>
 800a1b0:	4b1b      	ldr	r3, [pc, #108]	; (800a220 <__ieee754_rem_pio2+0x350>)
 800a1b2:	4598      	cmp	r8, r3
 800a1b4:	dd36      	ble.n	800a224 <__ieee754_rem_pio2+0x354>
 800a1b6:	ee10 2a10 	vmov	r2, s0
 800a1ba:	462b      	mov	r3, r5
 800a1bc:	4620      	mov	r0, r4
 800a1be:	4629      	mov	r1, r5
 800a1c0:	f7f6 f862 	bl	8000288 <__aeabi_dsub>
 800a1c4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a1c8:	e9ca 0100 	strd	r0, r1, [sl]
 800a1cc:	e694      	b.n	8009ef8 <__ieee754_rem_pio2+0x28>
 800a1ce:	bf00      	nop
 800a1d0:	54400000 	.word	0x54400000
 800a1d4:	3ff921fb 	.word	0x3ff921fb
 800a1d8:	1a626331 	.word	0x1a626331
 800a1dc:	3dd0b461 	.word	0x3dd0b461
 800a1e0:	1a600000 	.word	0x1a600000
 800a1e4:	3dd0b461 	.word	0x3dd0b461
 800a1e8:	2e037073 	.word	0x2e037073
 800a1ec:	3ba3198a 	.word	0x3ba3198a
 800a1f0:	6dc9c883 	.word	0x6dc9c883
 800a1f4:	3fe45f30 	.word	0x3fe45f30
 800a1f8:	2e000000 	.word	0x2e000000
 800a1fc:	3ba3198a 	.word	0x3ba3198a
 800a200:	252049c1 	.word	0x252049c1
 800a204:	397b839a 	.word	0x397b839a
 800a208:	3fe921fb 	.word	0x3fe921fb
 800a20c:	4002d97b 	.word	0x4002d97b
 800a210:	3ff921fb 	.word	0x3ff921fb
 800a214:	413921fb 	.word	0x413921fb
 800a218:	3fe00000 	.word	0x3fe00000
 800a21c:	0800f03c 	.word	0x0800f03c
 800a220:	7fefffff 	.word	0x7fefffff
 800a224:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a228:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a22c:	ee10 0a10 	vmov	r0, s0
 800a230:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a234:	ee10 6a10 	vmov	r6, s0
 800a238:	460f      	mov	r7, r1
 800a23a:	f7f6 fc8d 	bl	8000b58 <__aeabi_d2iz>
 800a23e:	f7f6 f971 	bl	8000524 <__aeabi_i2d>
 800a242:	4602      	mov	r2, r0
 800a244:	460b      	mov	r3, r1
 800a246:	4630      	mov	r0, r6
 800a248:	4639      	mov	r1, r7
 800a24a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a24e:	f7f6 f81b 	bl	8000288 <__aeabi_dsub>
 800a252:	4b23      	ldr	r3, [pc, #140]	; (800a2e0 <__ieee754_rem_pio2+0x410>)
 800a254:	2200      	movs	r2, #0
 800a256:	f7f6 f9cf 	bl	80005f8 <__aeabi_dmul>
 800a25a:	460f      	mov	r7, r1
 800a25c:	4606      	mov	r6, r0
 800a25e:	f7f6 fc7b 	bl	8000b58 <__aeabi_d2iz>
 800a262:	f7f6 f95f 	bl	8000524 <__aeabi_i2d>
 800a266:	4602      	mov	r2, r0
 800a268:	460b      	mov	r3, r1
 800a26a:	4630      	mov	r0, r6
 800a26c:	4639      	mov	r1, r7
 800a26e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a272:	f7f6 f809 	bl	8000288 <__aeabi_dsub>
 800a276:	4b1a      	ldr	r3, [pc, #104]	; (800a2e0 <__ieee754_rem_pio2+0x410>)
 800a278:	2200      	movs	r2, #0
 800a27a:	f7f6 f9bd 	bl	80005f8 <__aeabi_dmul>
 800a27e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a282:	ad04      	add	r5, sp, #16
 800a284:	f04f 0803 	mov.w	r8, #3
 800a288:	46a9      	mov	r9, r5
 800a28a:	2600      	movs	r6, #0
 800a28c:	2700      	movs	r7, #0
 800a28e:	4632      	mov	r2, r6
 800a290:	463b      	mov	r3, r7
 800a292:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a296:	46c3      	mov	fp, r8
 800a298:	3d08      	subs	r5, #8
 800a29a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a29e:	f7f6 fc13 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2a2:	2800      	cmp	r0, #0
 800a2a4:	d1f3      	bne.n	800a28e <__ieee754_rem_pio2+0x3be>
 800a2a6:	4b0f      	ldr	r3, [pc, #60]	; (800a2e4 <__ieee754_rem_pio2+0x414>)
 800a2a8:	9301      	str	r3, [sp, #4]
 800a2aa:	2302      	movs	r3, #2
 800a2ac:	9300      	str	r3, [sp, #0]
 800a2ae:	4622      	mov	r2, r4
 800a2b0:	465b      	mov	r3, fp
 800a2b2:	4651      	mov	r1, sl
 800a2b4:	4648      	mov	r0, r9
 800a2b6:	f000 f8df 	bl	800a478 <__kernel_rem_pio2>
 800a2ba:	9b02      	ldr	r3, [sp, #8]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	4683      	mov	fp, r0
 800a2c0:	f6bf ae46 	bge.w	8009f50 <__ieee754_rem_pio2+0x80>
 800a2c4:	e9da 2100 	ldrd	r2, r1, [sl]
 800a2c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2cc:	e9ca 2300 	strd	r2, r3, [sl]
 800a2d0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a2d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2d8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a2dc:	e73a      	b.n	800a154 <__ieee754_rem_pio2+0x284>
 800a2de:	bf00      	nop
 800a2e0:	41700000 	.word	0x41700000
 800a2e4:	0800f0bc 	.word	0x0800f0bc

0800a2e8 <__kernel_cos>:
 800a2e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ec:	ec57 6b10 	vmov	r6, r7, d0
 800a2f0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a2f4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a2f8:	ed8d 1b00 	vstr	d1, [sp]
 800a2fc:	da07      	bge.n	800a30e <__kernel_cos+0x26>
 800a2fe:	ee10 0a10 	vmov	r0, s0
 800a302:	4639      	mov	r1, r7
 800a304:	f7f6 fc28 	bl	8000b58 <__aeabi_d2iz>
 800a308:	2800      	cmp	r0, #0
 800a30a:	f000 8088 	beq.w	800a41e <__kernel_cos+0x136>
 800a30e:	4632      	mov	r2, r6
 800a310:	463b      	mov	r3, r7
 800a312:	4630      	mov	r0, r6
 800a314:	4639      	mov	r1, r7
 800a316:	f7f6 f96f 	bl	80005f8 <__aeabi_dmul>
 800a31a:	4b51      	ldr	r3, [pc, #324]	; (800a460 <__kernel_cos+0x178>)
 800a31c:	2200      	movs	r2, #0
 800a31e:	4604      	mov	r4, r0
 800a320:	460d      	mov	r5, r1
 800a322:	f7f6 f969 	bl	80005f8 <__aeabi_dmul>
 800a326:	a340      	add	r3, pc, #256	; (adr r3, 800a428 <__kernel_cos+0x140>)
 800a328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32c:	4682      	mov	sl, r0
 800a32e:	468b      	mov	fp, r1
 800a330:	4620      	mov	r0, r4
 800a332:	4629      	mov	r1, r5
 800a334:	f7f6 f960 	bl	80005f8 <__aeabi_dmul>
 800a338:	a33d      	add	r3, pc, #244	; (adr r3, 800a430 <__kernel_cos+0x148>)
 800a33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33e:	f7f5 ffa5 	bl	800028c <__adddf3>
 800a342:	4622      	mov	r2, r4
 800a344:	462b      	mov	r3, r5
 800a346:	f7f6 f957 	bl	80005f8 <__aeabi_dmul>
 800a34a:	a33b      	add	r3, pc, #236	; (adr r3, 800a438 <__kernel_cos+0x150>)
 800a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a350:	f7f5 ff9a 	bl	8000288 <__aeabi_dsub>
 800a354:	4622      	mov	r2, r4
 800a356:	462b      	mov	r3, r5
 800a358:	f7f6 f94e 	bl	80005f8 <__aeabi_dmul>
 800a35c:	a338      	add	r3, pc, #224	; (adr r3, 800a440 <__kernel_cos+0x158>)
 800a35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a362:	f7f5 ff93 	bl	800028c <__adddf3>
 800a366:	4622      	mov	r2, r4
 800a368:	462b      	mov	r3, r5
 800a36a:	f7f6 f945 	bl	80005f8 <__aeabi_dmul>
 800a36e:	a336      	add	r3, pc, #216	; (adr r3, 800a448 <__kernel_cos+0x160>)
 800a370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a374:	f7f5 ff88 	bl	8000288 <__aeabi_dsub>
 800a378:	4622      	mov	r2, r4
 800a37a:	462b      	mov	r3, r5
 800a37c:	f7f6 f93c 	bl	80005f8 <__aeabi_dmul>
 800a380:	a333      	add	r3, pc, #204	; (adr r3, 800a450 <__kernel_cos+0x168>)
 800a382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a386:	f7f5 ff81 	bl	800028c <__adddf3>
 800a38a:	4622      	mov	r2, r4
 800a38c:	462b      	mov	r3, r5
 800a38e:	f7f6 f933 	bl	80005f8 <__aeabi_dmul>
 800a392:	4622      	mov	r2, r4
 800a394:	462b      	mov	r3, r5
 800a396:	f7f6 f92f 	bl	80005f8 <__aeabi_dmul>
 800a39a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a39e:	4604      	mov	r4, r0
 800a3a0:	460d      	mov	r5, r1
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	4639      	mov	r1, r7
 800a3a6:	f7f6 f927 	bl	80005f8 <__aeabi_dmul>
 800a3aa:	460b      	mov	r3, r1
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	4629      	mov	r1, r5
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	f7f5 ff69 	bl	8000288 <__aeabi_dsub>
 800a3b6:	4b2b      	ldr	r3, [pc, #172]	; (800a464 <__kernel_cos+0x17c>)
 800a3b8:	4598      	cmp	r8, r3
 800a3ba:	4606      	mov	r6, r0
 800a3bc:	460f      	mov	r7, r1
 800a3be:	dc10      	bgt.n	800a3e2 <__kernel_cos+0xfa>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	4650      	mov	r0, sl
 800a3c6:	4659      	mov	r1, fp
 800a3c8:	f7f5 ff5e 	bl	8000288 <__aeabi_dsub>
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	4926      	ldr	r1, [pc, #152]	; (800a468 <__kernel_cos+0x180>)
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	2000      	movs	r0, #0
 800a3d4:	f7f5 ff58 	bl	8000288 <__aeabi_dsub>
 800a3d8:	ec41 0b10 	vmov	d0, r0, r1
 800a3dc:	b003      	add	sp, #12
 800a3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e2:	4b22      	ldr	r3, [pc, #136]	; (800a46c <__kernel_cos+0x184>)
 800a3e4:	4920      	ldr	r1, [pc, #128]	; (800a468 <__kernel_cos+0x180>)
 800a3e6:	4598      	cmp	r8, r3
 800a3e8:	bfcc      	ite	gt
 800a3ea:	4d21      	ldrgt	r5, [pc, #132]	; (800a470 <__kernel_cos+0x188>)
 800a3ec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a3f0:	2400      	movs	r4, #0
 800a3f2:	4622      	mov	r2, r4
 800a3f4:	462b      	mov	r3, r5
 800a3f6:	2000      	movs	r0, #0
 800a3f8:	f7f5 ff46 	bl	8000288 <__aeabi_dsub>
 800a3fc:	4622      	mov	r2, r4
 800a3fe:	4680      	mov	r8, r0
 800a400:	4689      	mov	r9, r1
 800a402:	462b      	mov	r3, r5
 800a404:	4650      	mov	r0, sl
 800a406:	4659      	mov	r1, fp
 800a408:	f7f5 ff3e 	bl	8000288 <__aeabi_dsub>
 800a40c:	4632      	mov	r2, r6
 800a40e:	463b      	mov	r3, r7
 800a410:	f7f5 ff3a 	bl	8000288 <__aeabi_dsub>
 800a414:	4602      	mov	r2, r0
 800a416:	460b      	mov	r3, r1
 800a418:	4640      	mov	r0, r8
 800a41a:	4649      	mov	r1, r9
 800a41c:	e7da      	b.n	800a3d4 <__kernel_cos+0xec>
 800a41e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a458 <__kernel_cos+0x170>
 800a422:	e7db      	b.n	800a3dc <__kernel_cos+0xf4>
 800a424:	f3af 8000 	nop.w
 800a428:	be8838d4 	.word	0xbe8838d4
 800a42c:	bda8fae9 	.word	0xbda8fae9
 800a430:	bdb4b1c4 	.word	0xbdb4b1c4
 800a434:	3e21ee9e 	.word	0x3e21ee9e
 800a438:	809c52ad 	.word	0x809c52ad
 800a43c:	3e927e4f 	.word	0x3e927e4f
 800a440:	19cb1590 	.word	0x19cb1590
 800a444:	3efa01a0 	.word	0x3efa01a0
 800a448:	16c15177 	.word	0x16c15177
 800a44c:	3f56c16c 	.word	0x3f56c16c
 800a450:	5555554c 	.word	0x5555554c
 800a454:	3fa55555 	.word	0x3fa55555
 800a458:	00000000 	.word	0x00000000
 800a45c:	3ff00000 	.word	0x3ff00000
 800a460:	3fe00000 	.word	0x3fe00000
 800a464:	3fd33332 	.word	0x3fd33332
 800a468:	3ff00000 	.word	0x3ff00000
 800a46c:	3fe90000 	.word	0x3fe90000
 800a470:	3fd20000 	.word	0x3fd20000
 800a474:	00000000 	.word	0x00000000

0800a478 <__kernel_rem_pio2>:
 800a478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a47c:	ed2d 8b02 	vpush	{d8}
 800a480:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a484:	f112 0f14 	cmn.w	r2, #20
 800a488:	9308      	str	r3, [sp, #32]
 800a48a:	9101      	str	r1, [sp, #4]
 800a48c:	4bc4      	ldr	r3, [pc, #784]	; (800a7a0 <__kernel_rem_pio2+0x328>)
 800a48e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a490:	900b      	str	r0, [sp, #44]	; 0x2c
 800a492:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a496:	9302      	str	r3, [sp, #8]
 800a498:	9b08      	ldr	r3, [sp, #32]
 800a49a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a49e:	bfa8      	it	ge
 800a4a0:	1ed4      	subge	r4, r2, #3
 800a4a2:	9306      	str	r3, [sp, #24]
 800a4a4:	bfb2      	itee	lt
 800a4a6:	2400      	movlt	r4, #0
 800a4a8:	2318      	movge	r3, #24
 800a4aa:	fb94 f4f3 	sdivge	r4, r4, r3
 800a4ae:	f06f 0317 	mvn.w	r3, #23
 800a4b2:	fb04 3303 	mla	r3, r4, r3, r3
 800a4b6:	eb03 0a02 	add.w	sl, r3, r2
 800a4ba:	9b02      	ldr	r3, [sp, #8]
 800a4bc:	9a06      	ldr	r2, [sp, #24]
 800a4be:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800a790 <__kernel_rem_pio2+0x318>
 800a4c2:	eb03 0802 	add.w	r8, r3, r2
 800a4c6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a4c8:	1aa7      	subs	r7, r4, r2
 800a4ca:	ae22      	add	r6, sp, #136	; 0x88
 800a4cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a4d0:	2500      	movs	r5, #0
 800a4d2:	4545      	cmp	r5, r8
 800a4d4:	dd13      	ble.n	800a4fe <__kernel_rem_pio2+0x86>
 800a4d6:	9b08      	ldr	r3, [sp, #32]
 800a4d8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800a790 <__kernel_rem_pio2+0x318>
 800a4dc:	aa22      	add	r2, sp, #136	; 0x88
 800a4de:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a4e2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a4e6:	f04f 0800 	mov.w	r8, #0
 800a4ea:	9b02      	ldr	r3, [sp, #8]
 800a4ec:	4598      	cmp	r8, r3
 800a4ee:	dc2f      	bgt.n	800a550 <__kernel_rem_pio2+0xd8>
 800a4f0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a4f4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800a4f8:	462f      	mov	r7, r5
 800a4fa:	2600      	movs	r6, #0
 800a4fc:	e01b      	b.n	800a536 <__kernel_rem_pio2+0xbe>
 800a4fe:	42ef      	cmn	r7, r5
 800a500:	d407      	bmi.n	800a512 <__kernel_rem_pio2+0x9a>
 800a502:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a506:	f7f6 f80d 	bl	8000524 <__aeabi_i2d>
 800a50a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a50e:	3501      	adds	r5, #1
 800a510:	e7df      	b.n	800a4d2 <__kernel_rem_pio2+0x5a>
 800a512:	ec51 0b18 	vmov	r0, r1, d8
 800a516:	e7f8      	b.n	800a50a <__kernel_rem_pio2+0x92>
 800a518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a51c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a520:	f7f6 f86a 	bl	80005f8 <__aeabi_dmul>
 800a524:	4602      	mov	r2, r0
 800a526:	460b      	mov	r3, r1
 800a528:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a52c:	f7f5 feae 	bl	800028c <__adddf3>
 800a530:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a534:	3601      	adds	r6, #1
 800a536:	9b06      	ldr	r3, [sp, #24]
 800a538:	429e      	cmp	r6, r3
 800a53a:	f1a7 0708 	sub.w	r7, r7, #8
 800a53e:	ddeb      	ble.n	800a518 <__kernel_rem_pio2+0xa0>
 800a540:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a544:	f108 0801 	add.w	r8, r8, #1
 800a548:	ecab 7b02 	vstmia	fp!, {d7}
 800a54c:	3508      	adds	r5, #8
 800a54e:	e7cc      	b.n	800a4ea <__kernel_rem_pio2+0x72>
 800a550:	9b02      	ldr	r3, [sp, #8]
 800a552:	aa0e      	add	r2, sp, #56	; 0x38
 800a554:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a558:	930d      	str	r3, [sp, #52]	; 0x34
 800a55a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a55c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a560:	9c02      	ldr	r4, [sp, #8]
 800a562:	930c      	str	r3, [sp, #48]	; 0x30
 800a564:	00e3      	lsls	r3, r4, #3
 800a566:	930a      	str	r3, [sp, #40]	; 0x28
 800a568:	ab9a      	add	r3, sp, #616	; 0x268
 800a56a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a56e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a572:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800a576:	ab72      	add	r3, sp, #456	; 0x1c8
 800a578:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a57c:	46c3      	mov	fp, r8
 800a57e:	46a1      	mov	r9, r4
 800a580:	f1b9 0f00 	cmp.w	r9, #0
 800a584:	f1a5 0508 	sub.w	r5, r5, #8
 800a588:	dc77      	bgt.n	800a67a <__kernel_rem_pio2+0x202>
 800a58a:	ec47 6b10 	vmov	d0, r6, r7
 800a58e:	4650      	mov	r0, sl
 800a590:	f000 fc0a 	bl	800ada8 <scalbn>
 800a594:	ec57 6b10 	vmov	r6, r7, d0
 800a598:	2200      	movs	r2, #0
 800a59a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a59e:	ee10 0a10 	vmov	r0, s0
 800a5a2:	4639      	mov	r1, r7
 800a5a4:	f7f6 f828 	bl	80005f8 <__aeabi_dmul>
 800a5a8:	ec41 0b10 	vmov	d0, r0, r1
 800a5ac:	f000 fb7c 	bl	800aca8 <floor>
 800a5b0:	4b7c      	ldr	r3, [pc, #496]	; (800a7a4 <__kernel_rem_pio2+0x32c>)
 800a5b2:	ec51 0b10 	vmov	r0, r1, d0
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f7f6 f81e 	bl	80005f8 <__aeabi_dmul>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	460b      	mov	r3, r1
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	4639      	mov	r1, r7
 800a5c4:	f7f5 fe60 	bl	8000288 <__aeabi_dsub>
 800a5c8:	460f      	mov	r7, r1
 800a5ca:	4606      	mov	r6, r0
 800a5cc:	f7f6 fac4 	bl	8000b58 <__aeabi_d2iz>
 800a5d0:	9004      	str	r0, [sp, #16]
 800a5d2:	f7f5 ffa7 	bl	8000524 <__aeabi_i2d>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	460b      	mov	r3, r1
 800a5da:	4630      	mov	r0, r6
 800a5dc:	4639      	mov	r1, r7
 800a5de:	f7f5 fe53 	bl	8000288 <__aeabi_dsub>
 800a5e2:	f1ba 0f00 	cmp.w	sl, #0
 800a5e6:	4606      	mov	r6, r0
 800a5e8:	460f      	mov	r7, r1
 800a5ea:	dd6d      	ble.n	800a6c8 <__kernel_rem_pio2+0x250>
 800a5ec:	1e62      	subs	r2, r4, #1
 800a5ee:	ab0e      	add	r3, sp, #56	; 0x38
 800a5f0:	9d04      	ldr	r5, [sp, #16]
 800a5f2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a5f6:	f1ca 0118 	rsb	r1, sl, #24
 800a5fa:	fa40 f301 	asr.w	r3, r0, r1
 800a5fe:	441d      	add	r5, r3
 800a600:	408b      	lsls	r3, r1
 800a602:	1ac0      	subs	r0, r0, r3
 800a604:	ab0e      	add	r3, sp, #56	; 0x38
 800a606:	9504      	str	r5, [sp, #16]
 800a608:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a60c:	f1ca 0317 	rsb	r3, sl, #23
 800a610:	fa40 fb03 	asr.w	fp, r0, r3
 800a614:	f1bb 0f00 	cmp.w	fp, #0
 800a618:	dd65      	ble.n	800a6e6 <__kernel_rem_pio2+0x26e>
 800a61a:	9b04      	ldr	r3, [sp, #16]
 800a61c:	2200      	movs	r2, #0
 800a61e:	3301      	adds	r3, #1
 800a620:	9304      	str	r3, [sp, #16]
 800a622:	4615      	mov	r5, r2
 800a624:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a628:	4294      	cmp	r4, r2
 800a62a:	f300 809c 	bgt.w	800a766 <__kernel_rem_pio2+0x2ee>
 800a62e:	f1ba 0f00 	cmp.w	sl, #0
 800a632:	dd07      	ble.n	800a644 <__kernel_rem_pio2+0x1cc>
 800a634:	f1ba 0f01 	cmp.w	sl, #1
 800a638:	f000 80c0 	beq.w	800a7bc <__kernel_rem_pio2+0x344>
 800a63c:	f1ba 0f02 	cmp.w	sl, #2
 800a640:	f000 80c6 	beq.w	800a7d0 <__kernel_rem_pio2+0x358>
 800a644:	f1bb 0f02 	cmp.w	fp, #2
 800a648:	d14d      	bne.n	800a6e6 <__kernel_rem_pio2+0x26e>
 800a64a:	4632      	mov	r2, r6
 800a64c:	463b      	mov	r3, r7
 800a64e:	4956      	ldr	r1, [pc, #344]	; (800a7a8 <__kernel_rem_pio2+0x330>)
 800a650:	2000      	movs	r0, #0
 800a652:	f7f5 fe19 	bl	8000288 <__aeabi_dsub>
 800a656:	4606      	mov	r6, r0
 800a658:	460f      	mov	r7, r1
 800a65a:	2d00      	cmp	r5, #0
 800a65c:	d043      	beq.n	800a6e6 <__kernel_rem_pio2+0x26e>
 800a65e:	4650      	mov	r0, sl
 800a660:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800a798 <__kernel_rem_pio2+0x320>
 800a664:	f000 fba0 	bl	800ada8 <scalbn>
 800a668:	4630      	mov	r0, r6
 800a66a:	4639      	mov	r1, r7
 800a66c:	ec53 2b10 	vmov	r2, r3, d0
 800a670:	f7f5 fe0a 	bl	8000288 <__aeabi_dsub>
 800a674:	4606      	mov	r6, r0
 800a676:	460f      	mov	r7, r1
 800a678:	e035      	b.n	800a6e6 <__kernel_rem_pio2+0x26e>
 800a67a:	4b4c      	ldr	r3, [pc, #304]	; (800a7ac <__kernel_rem_pio2+0x334>)
 800a67c:	2200      	movs	r2, #0
 800a67e:	4630      	mov	r0, r6
 800a680:	4639      	mov	r1, r7
 800a682:	f7f5 ffb9 	bl	80005f8 <__aeabi_dmul>
 800a686:	f7f6 fa67 	bl	8000b58 <__aeabi_d2iz>
 800a68a:	f7f5 ff4b 	bl	8000524 <__aeabi_i2d>
 800a68e:	4602      	mov	r2, r0
 800a690:	460b      	mov	r3, r1
 800a692:	ec43 2b18 	vmov	d8, r2, r3
 800a696:	4b46      	ldr	r3, [pc, #280]	; (800a7b0 <__kernel_rem_pio2+0x338>)
 800a698:	2200      	movs	r2, #0
 800a69a:	f7f5 ffad 	bl	80005f8 <__aeabi_dmul>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	4639      	mov	r1, r7
 800a6a6:	f7f5 fdef 	bl	8000288 <__aeabi_dsub>
 800a6aa:	f7f6 fa55 	bl	8000b58 <__aeabi_d2iz>
 800a6ae:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a6b2:	f84b 0b04 	str.w	r0, [fp], #4
 800a6b6:	ec51 0b18 	vmov	r0, r1, d8
 800a6ba:	f7f5 fde7 	bl	800028c <__adddf3>
 800a6be:	f109 39ff 	add.w	r9, r9, #4294967295
 800a6c2:	4606      	mov	r6, r0
 800a6c4:	460f      	mov	r7, r1
 800a6c6:	e75b      	b.n	800a580 <__kernel_rem_pio2+0x108>
 800a6c8:	d106      	bne.n	800a6d8 <__kernel_rem_pio2+0x260>
 800a6ca:	1e63      	subs	r3, r4, #1
 800a6cc:	aa0e      	add	r2, sp, #56	; 0x38
 800a6ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a6d2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800a6d6:	e79d      	b.n	800a614 <__kernel_rem_pio2+0x19c>
 800a6d8:	4b36      	ldr	r3, [pc, #216]	; (800a7b4 <__kernel_rem_pio2+0x33c>)
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f7f6 fa12 	bl	8000b04 <__aeabi_dcmpge>
 800a6e0:	2800      	cmp	r0, #0
 800a6e2:	d13d      	bne.n	800a760 <__kernel_rem_pio2+0x2e8>
 800a6e4:	4683      	mov	fp, r0
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	4630      	mov	r0, r6
 800a6ec:	4639      	mov	r1, r7
 800a6ee:	f7f6 f9eb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6f2:	2800      	cmp	r0, #0
 800a6f4:	f000 80c0 	beq.w	800a878 <__kernel_rem_pio2+0x400>
 800a6f8:	1e65      	subs	r5, r4, #1
 800a6fa:	462b      	mov	r3, r5
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	9902      	ldr	r1, [sp, #8]
 800a700:	428b      	cmp	r3, r1
 800a702:	da6c      	bge.n	800a7de <__kernel_rem_pio2+0x366>
 800a704:	2a00      	cmp	r2, #0
 800a706:	f000 8089 	beq.w	800a81c <__kernel_rem_pio2+0x3a4>
 800a70a:	ab0e      	add	r3, sp, #56	; 0x38
 800a70c:	f1aa 0a18 	sub.w	sl, sl, #24
 800a710:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a714:	2b00      	cmp	r3, #0
 800a716:	f000 80ad 	beq.w	800a874 <__kernel_rem_pio2+0x3fc>
 800a71a:	4650      	mov	r0, sl
 800a71c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800a798 <__kernel_rem_pio2+0x320>
 800a720:	f000 fb42 	bl	800ada8 <scalbn>
 800a724:	ab9a      	add	r3, sp, #616	; 0x268
 800a726:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a72a:	ec57 6b10 	vmov	r6, r7, d0
 800a72e:	00ec      	lsls	r4, r5, #3
 800a730:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800a734:	46aa      	mov	sl, r5
 800a736:	f1ba 0f00 	cmp.w	sl, #0
 800a73a:	f280 80d6 	bge.w	800a8ea <__kernel_rem_pio2+0x472>
 800a73e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800a790 <__kernel_rem_pio2+0x318>
 800a742:	462e      	mov	r6, r5
 800a744:	2e00      	cmp	r6, #0
 800a746:	f2c0 8104 	blt.w	800a952 <__kernel_rem_pio2+0x4da>
 800a74a:	ab72      	add	r3, sp, #456	; 0x1c8
 800a74c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800a750:	f8df a064 	ldr.w	sl, [pc, #100]	; 800a7b8 <__kernel_rem_pio2+0x340>
 800a754:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800a758:	f04f 0800 	mov.w	r8, #0
 800a75c:	1baf      	subs	r7, r5, r6
 800a75e:	e0ea      	b.n	800a936 <__kernel_rem_pio2+0x4be>
 800a760:	f04f 0b02 	mov.w	fp, #2
 800a764:	e759      	b.n	800a61a <__kernel_rem_pio2+0x1a2>
 800a766:	f8d8 3000 	ldr.w	r3, [r8]
 800a76a:	b955      	cbnz	r5, 800a782 <__kernel_rem_pio2+0x30a>
 800a76c:	b123      	cbz	r3, 800a778 <__kernel_rem_pio2+0x300>
 800a76e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a772:	f8c8 3000 	str.w	r3, [r8]
 800a776:	2301      	movs	r3, #1
 800a778:	3201      	adds	r2, #1
 800a77a:	f108 0804 	add.w	r8, r8, #4
 800a77e:	461d      	mov	r5, r3
 800a780:	e752      	b.n	800a628 <__kernel_rem_pio2+0x1b0>
 800a782:	1acb      	subs	r3, r1, r3
 800a784:	f8c8 3000 	str.w	r3, [r8]
 800a788:	462b      	mov	r3, r5
 800a78a:	e7f5      	b.n	800a778 <__kernel_rem_pio2+0x300>
 800a78c:	f3af 8000 	nop.w
	...
 800a79c:	3ff00000 	.word	0x3ff00000
 800a7a0:	0800f208 	.word	0x0800f208
 800a7a4:	40200000 	.word	0x40200000
 800a7a8:	3ff00000 	.word	0x3ff00000
 800a7ac:	3e700000 	.word	0x3e700000
 800a7b0:	41700000 	.word	0x41700000
 800a7b4:	3fe00000 	.word	0x3fe00000
 800a7b8:	0800f1c8 	.word	0x0800f1c8
 800a7bc:	1e62      	subs	r2, r4, #1
 800a7be:	ab0e      	add	r3, sp, #56	; 0x38
 800a7c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7c4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a7c8:	a90e      	add	r1, sp, #56	; 0x38
 800a7ca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a7ce:	e739      	b.n	800a644 <__kernel_rem_pio2+0x1cc>
 800a7d0:	1e62      	subs	r2, r4, #1
 800a7d2:	ab0e      	add	r3, sp, #56	; 0x38
 800a7d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7d8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a7dc:	e7f4      	b.n	800a7c8 <__kernel_rem_pio2+0x350>
 800a7de:	a90e      	add	r1, sp, #56	; 0x38
 800a7e0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a7e4:	3b01      	subs	r3, #1
 800a7e6:	430a      	orrs	r2, r1
 800a7e8:	e789      	b.n	800a6fe <__kernel_rem_pio2+0x286>
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a7f0:	2900      	cmp	r1, #0
 800a7f2:	d0fa      	beq.n	800a7ea <__kernel_rem_pio2+0x372>
 800a7f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7f6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800a7fa:	446a      	add	r2, sp
 800a7fc:	3a98      	subs	r2, #152	; 0x98
 800a7fe:	920a      	str	r2, [sp, #40]	; 0x28
 800a800:	9a08      	ldr	r2, [sp, #32]
 800a802:	18e3      	adds	r3, r4, r3
 800a804:	18a5      	adds	r5, r4, r2
 800a806:	aa22      	add	r2, sp, #136	; 0x88
 800a808:	f104 0801 	add.w	r8, r4, #1
 800a80c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a810:	9304      	str	r3, [sp, #16]
 800a812:	9b04      	ldr	r3, [sp, #16]
 800a814:	4543      	cmp	r3, r8
 800a816:	da04      	bge.n	800a822 <__kernel_rem_pio2+0x3aa>
 800a818:	461c      	mov	r4, r3
 800a81a:	e6a3      	b.n	800a564 <__kernel_rem_pio2+0xec>
 800a81c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a81e:	2301      	movs	r3, #1
 800a820:	e7e4      	b.n	800a7ec <__kernel_rem_pio2+0x374>
 800a822:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a824:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a828:	f7f5 fe7c 	bl	8000524 <__aeabi_i2d>
 800a82c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800a830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a832:	46ab      	mov	fp, r5
 800a834:	461c      	mov	r4, r3
 800a836:	f04f 0900 	mov.w	r9, #0
 800a83a:	2600      	movs	r6, #0
 800a83c:	2700      	movs	r7, #0
 800a83e:	9b06      	ldr	r3, [sp, #24]
 800a840:	4599      	cmp	r9, r3
 800a842:	dd06      	ble.n	800a852 <__kernel_rem_pio2+0x3da>
 800a844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a846:	e8e3 6702 	strd	r6, r7, [r3], #8
 800a84a:	f108 0801 	add.w	r8, r8, #1
 800a84e:	930a      	str	r3, [sp, #40]	; 0x28
 800a850:	e7df      	b.n	800a812 <__kernel_rem_pio2+0x39a>
 800a852:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a856:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a85a:	f7f5 fecd 	bl	80005f8 <__aeabi_dmul>
 800a85e:	4602      	mov	r2, r0
 800a860:	460b      	mov	r3, r1
 800a862:	4630      	mov	r0, r6
 800a864:	4639      	mov	r1, r7
 800a866:	f7f5 fd11 	bl	800028c <__adddf3>
 800a86a:	f109 0901 	add.w	r9, r9, #1
 800a86e:	4606      	mov	r6, r0
 800a870:	460f      	mov	r7, r1
 800a872:	e7e4      	b.n	800a83e <__kernel_rem_pio2+0x3c6>
 800a874:	3d01      	subs	r5, #1
 800a876:	e748      	b.n	800a70a <__kernel_rem_pio2+0x292>
 800a878:	ec47 6b10 	vmov	d0, r6, r7
 800a87c:	f1ca 0000 	rsb	r0, sl, #0
 800a880:	f000 fa92 	bl	800ada8 <scalbn>
 800a884:	ec57 6b10 	vmov	r6, r7, d0
 800a888:	4ba0      	ldr	r3, [pc, #640]	; (800ab0c <__kernel_rem_pio2+0x694>)
 800a88a:	ee10 0a10 	vmov	r0, s0
 800a88e:	2200      	movs	r2, #0
 800a890:	4639      	mov	r1, r7
 800a892:	f7f6 f937 	bl	8000b04 <__aeabi_dcmpge>
 800a896:	b1f8      	cbz	r0, 800a8d8 <__kernel_rem_pio2+0x460>
 800a898:	4b9d      	ldr	r3, [pc, #628]	; (800ab10 <__kernel_rem_pio2+0x698>)
 800a89a:	2200      	movs	r2, #0
 800a89c:	4630      	mov	r0, r6
 800a89e:	4639      	mov	r1, r7
 800a8a0:	f7f5 feaa 	bl	80005f8 <__aeabi_dmul>
 800a8a4:	f7f6 f958 	bl	8000b58 <__aeabi_d2iz>
 800a8a8:	4680      	mov	r8, r0
 800a8aa:	f7f5 fe3b 	bl	8000524 <__aeabi_i2d>
 800a8ae:	4b97      	ldr	r3, [pc, #604]	; (800ab0c <__kernel_rem_pio2+0x694>)
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f7f5 fea1 	bl	80005f8 <__aeabi_dmul>
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	4639      	mov	r1, r7
 800a8bc:	4630      	mov	r0, r6
 800a8be:	f7f5 fce3 	bl	8000288 <__aeabi_dsub>
 800a8c2:	f7f6 f949 	bl	8000b58 <__aeabi_d2iz>
 800a8c6:	1c65      	adds	r5, r4, #1
 800a8c8:	ab0e      	add	r3, sp, #56	; 0x38
 800a8ca:	f10a 0a18 	add.w	sl, sl, #24
 800a8ce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a8d2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a8d6:	e720      	b.n	800a71a <__kernel_rem_pio2+0x2a2>
 800a8d8:	4630      	mov	r0, r6
 800a8da:	4639      	mov	r1, r7
 800a8dc:	f7f6 f93c 	bl	8000b58 <__aeabi_d2iz>
 800a8e0:	ab0e      	add	r3, sp, #56	; 0x38
 800a8e2:	4625      	mov	r5, r4
 800a8e4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a8e8:	e717      	b.n	800a71a <__kernel_rem_pio2+0x2a2>
 800a8ea:	ab0e      	add	r3, sp, #56	; 0x38
 800a8ec:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a8f0:	f7f5 fe18 	bl	8000524 <__aeabi_i2d>
 800a8f4:	4632      	mov	r2, r6
 800a8f6:	463b      	mov	r3, r7
 800a8f8:	f7f5 fe7e 	bl	80005f8 <__aeabi_dmul>
 800a8fc:	4b84      	ldr	r3, [pc, #528]	; (800ab10 <__kernel_rem_pio2+0x698>)
 800a8fe:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800a902:	2200      	movs	r2, #0
 800a904:	4630      	mov	r0, r6
 800a906:	4639      	mov	r1, r7
 800a908:	f7f5 fe76 	bl	80005f8 <__aeabi_dmul>
 800a90c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a910:	4606      	mov	r6, r0
 800a912:	460f      	mov	r7, r1
 800a914:	e70f      	b.n	800a736 <__kernel_rem_pio2+0x2be>
 800a916:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a91a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800a91e:	f7f5 fe6b 	bl	80005f8 <__aeabi_dmul>
 800a922:	4602      	mov	r2, r0
 800a924:	460b      	mov	r3, r1
 800a926:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a92a:	f7f5 fcaf 	bl	800028c <__adddf3>
 800a92e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a932:	f108 0801 	add.w	r8, r8, #1
 800a936:	9b02      	ldr	r3, [sp, #8]
 800a938:	4598      	cmp	r8, r3
 800a93a:	dc01      	bgt.n	800a940 <__kernel_rem_pio2+0x4c8>
 800a93c:	45b8      	cmp	r8, r7
 800a93e:	ddea      	ble.n	800a916 <__kernel_rem_pio2+0x49e>
 800a940:	ed9d 7b06 	vldr	d7, [sp, #24]
 800a944:	ab4a      	add	r3, sp, #296	; 0x128
 800a946:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a94a:	ed87 7b00 	vstr	d7, [r7]
 800a94e:	3e01      	subs	r6, #1
 800a950:	e6f8      	b.n	800a744 <__kernel_rem_pio2+0x2cc>
 800a952:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a954:	2b02      	cmp	r3, #2
 800a956:	dc0b      	bgt.n	800a970 <__kernel_rem_pio2+0x4f8>
 800a958:	2b00      	cmp	r3, #0
 800a95a:	dc35      	bgt.n	800a9c8 <__kernel_rem_pio2+0x550>
 800a95c:	d059      	beq.n	800aa12 <__kernel_rem_pio2+0x59a>
 800a95e:	9b04      	ldr	r3, [sp, #16]
 800a960:	f003 0007 	and.w	r0, r3, #7
 800a964:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a968:	ecbd 8b02 	vpop	{d8}
 800a96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a970:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a972:	2b03      	cmp	r3, #3
 800a974:	d1f3      	bne.n	800a95e <__kernel_rem_pio2+0x4e6>
 800a976:	ab4a      	add	r3, sp, #296	; 0x128
 800a978:	4423      	add	r3, r4
 800a97a:	9306      	str	r3, [sp, #24]
 800a97c:	461c      	mov	r4, r3
 800a97e:	469a      	mov	sl, r3
 800a980:	9502      	str	r5, [sp, #8]
 800a982:	9b02      	ldr	r3, [sp, #8]
 800a984:	2b00      	cmp	r3, #0
 800a986:	f1aa 0a08 	sub.w	sl, sl, #8
 800a98a:	dc6b      	bgt.n	800aa64 <__kernel_rem_pio2+0x5ec>
 800a98c:	46aa      	mov	sl, r5
 800a98e:	f1ba 0f01 	cmp.w	sl, #1
 800a992:	f1a4 0408 	sub.w	r4, r4, #8
 800a996:	f300 8085 	bgt.w	800aaa4 <__kernel_rem_pio2+0x62c>
 800a99a:	9c06      	ldr	r4, [sp, #24]
 800a99c:	2000      	movs	r0, #0
 800a99e:	3408      	adds	r4, #8
 800a9a0:	2100      	movs	r1, #0
 800a9a2:	2d01      	cmp	r5, #1
 800a9a4:	f300 809d 	bgt.w	800aae2 <__kernel_rem_pio2+0x66a>
 800a9a8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800a9ac:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800a9b0:	f1bb 0f00 	cmp.w	fp, #0
 800a9b4:	f040 809b 	bne.w	800aaee <__kernel_rem_pio2+0x676>
 800a9b8:	9b01      	ldr	r3, [sp, #4]
 800a9ba:	e9c3 5600 	strd	r5, r6, [r3]
 800a9be:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800a9c2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a9c6:	e7ca      	b.n	800a95e <__kernel_rem_pio2+0x4e6>
 800a9c8:	3408      	adds	r4, #8
 800a9ca:	ab4a      	add	r3, sp, #296	; 0x128
 800a9cc:	441c      	add	r4, r3
 800a9ce:	462e      	mov	r6, r5
 800a9d0:	2000      	movs	r0, #0
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	2e00      	cmp	r6, #0
 800a9d6:	da36      	bge.n	800aa46 <__kernel_rem_pio2+0x5ce>
 800a9d8:	f1bb 0f00 	cmp.w	fp, #0
 800a9dc:	d039      	beq.n	800aa52 <__kernel_rem_pio2+0x5da>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a9e4:	9c01      	ldr	r4, [sp, #4]
 800a9e6:	e9c4 2300 	strd	r2, r3, [r4]
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a9f2:	f7f5 fc49 	bl	8000288 <__aeabi_dsub>
 800a9f6:	ae4c      	add	r6, sp, #304	; 0x130
 800a9f8:	2401      	movs	r4, #1
 800a9fa:	42a5      	cmp	r5, r4
 800a9fc:	da2c      	bge.n	800aa58 <__kernel_rem_pio2+0x5e0>
 800a9fe:	f1bb 0f00 	cmp.w	fp, #0
 800aa02:	d002      	beq.n	800aa0a <__kernel_rem_pio2+0x592>
 800aa04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa08:	4619      	mov	r1, r3
 800aa0a:	9b01      	ldr	r3, [sp, #4]
 800aa0c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800aa10:	e7a5      	b.n	800a95e <__kernel_rem_pio2+0x4e6>
 800aa12:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800aa16:	eb0d 0403 	add.w	r4, sp, r3
 800aa1a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800aa1e:	2000      	movs	r0, #0
 800aa20:	2100      	movs	r1, #0
 800aa22:	2d00      	cmp	r5, #0
 800aa24:	da09      	bge.n	800aa3a <__kernel_rem_pio2+0x5c2>
 800aa26:	f1bb 0f00 	cmp.w	fp, #0
 800aa2a:	d002      	beq.n	800aa32 <__kernel_rem_pio2+0x5ba>
 800aa2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa30:	4619      	mov	r1, r3
 800aa32:	9b01      	ldr	r3, [sp, #4]
 800aa34:	e9c3 0100 	strd	r0, r1, [r3]
 800aa38:	e791      	b.n	800a95e <__kernel_rem_pio2+0x4e6>
 800aa3a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aa3e:	f7f5 fc25 	bl	800028c <__adddf3>
 800aa42:	3d01      	subs	r5, #1
 800aa44:	e7ed      	b.n	800aa22 <__kernel_rem_pio2+0x5aa>
 800aa46:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aa4a:	f7f5 fc1f 	bl	800028c <__adddf3>
 800aa4e:	3e01      	subs	r6, #1
 800aa50:	e7c0      	b.n	800a9d4 <__kernel_rem_pio2+0x55c>
 800aa52:	4602      	mov	r2, r0
 800aa54:	460b      	mov	r3, r1
 800aa56:	e7c5      	b.n	800a9e4 <__kernel_rem_pio2+0x56c>
 800aa58:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800aa5c:	f7f5 fc16 	bl	800028c <__adddf3>
 800aa60:	3401      	adds	r4, #1
 800aa62:	e7ca      	b.n	800a9fa <__kernel_rem_pio2+0x582>
 800aa64:	e9da 8900 	ldrd	r8, r9, [sl]
 800aa68:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800aa6c:	9b02      	ldr	r3, [sp, #8]
 800aa6e:	3b01      	subs	r3, #1
 800aa70:	9302      	str	r3, [sp, #8]
 800aa72:	4632      	mov	r2, r6
 800aa74:	463b      	mov	r3, r7
 800aa76:	4640      	mov	r0, r8
 800aa78:	4649      	mov	r1, r9
 800aa7a:	f7f5 fc07 	bl	800028c <__adddf3>
 800aa7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aa82:	4602      	mov	r2, r0
 800aa84:	460b      	mov	r3, r1
 800aa86:	4640      	mov	r0, r8
 800aa88:	4649      	mov	r1, r9
 800aa8a:	f7f5 fbfd 	bl	8000288 <__aeabi_dsub>
 800aa8e:	4632      	mov	r2, r6
 800aa90:	463b      	mov	r3, r7
 800aa92:	f7f5 fbfb 	bl	800028c <__adddf3>
 800aa96:	ed9d 7b08 	vldr	d7, [sp, #32]
 800aa9a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aa9e:	ed8a 7b00 	vstr	d7, [sl]
 800aaa2:	e76e      	b.n	800a982 <__kernel_rem_pio2+0x50a>
 800aaa4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800aaa8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800aaac:	4640      	mov	r0, r8
 800aaae:	4632      	mov	r2, r6
 800aab0:	463b      	mov	r3, r7
 800aab2:	4649      	mov	r1, r9
 800aab4:	f7f5 fbea 	bl	800028c <__adddf3>
 800aab8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aabc:	4602      	mov	r2, r0
 800aabe:	460b      	mov	r3, r1
 800aac0:	4640      	mov	r0, r8
 800aac2:	4649      	mov	r1, r9
 800aac4:	f7f5 fbe0 	bl	8000288 <__aeabi_dsub>
 800aac8:	4632      	mov	r2, r6
 800aaca:	463b      	mov	r3, r7
 800aacc:	f7f5 fbde 	bl	800028c <__adddf3>
 800aad0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aad4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aad8:	ed84 7b00 	vstr	d7, [r4]
 800aadc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aae0:	e755      	b.n	800a98e <__kernel_rem_pio2+0x516>
 800aae2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aae6:	f7f5 fbd1 	bl	800028c <__adddf3>
 800aaea:	3d01      	subs	r5, #1
 800aaec:	e759      	b.n	800a9a2 <__kernel_rem_pio2+0x52a>
 800aaee:	9b01      	ldr	r3, [sp, #4]
 800aaf0:	9a01      	ldr	r2, [sp, #4]
 800aaf2:	601d      	str	r5, [r3, #0]
 800aaf4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800aaf8:	605c      	str	r4, [r3, #4]
 800aafa:	609f      	str	r7, [r3, #8]
 800aafc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ab00:	60d3      	str	r3, [r2, #12]
 800ab02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab06:	6110      	str	r0, [r2, #16]
 800ab08:	6153      	str	r3, [r2, #20]
 800ab0a:	e728      	b.n	800a95e <__kernel_rem_pio2+0x4e6>
 800ab0c:	41700000 	.word	0x41700000
 800ab10:	3e700000 	.word	0x3e700000
 800ab14:	00000000 	.word	0x00000000

0800ab18 <__kernel_sin>:
 800ab18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab1c:	ed2d 8b04 	vpush	{d8-d9}
 800ab20:	eeb0 8a41 	vmov.f32	s16, s2
 800ab24:	eef0 8a61 	vmov.f32	s17, s3
 800ab28:	ec55 4b10 	vmov	r4, r5, d0
 800ab2c:	b083      	sub	sp, #12
 800ab2e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ab32:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ab36:	9001      	str	r0, [sp, #4]
 800ab38:	da06      	bge.n	800ab48 <__kernel_sin+0x30>
 800ab3a:	ee10 0a10 	vmov	r0, s0
 800ab3e:	4629      	mov	r1, r5
 800ab40:	f7f6 f80a 	bl	8000b58 <__aeabi_d2iz>
 800ab44:	2800      	cmp	r0, #0
 800ab46:	d051      	beq.n	800abec <__kernel_sin+0xd4>
 800ab48:	4622      	mov	r2, r4
 800ab4a:	462b      	mov	r3, r5
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	4629      	mov	r1, r5
 800ab50:	f7f5 fd52 	bl	80005f8 <__aeabi_dmul>
 800ab54:	4682      	mov	sl, r0
 800ab56:	468b      	mov	fp, r1
 800ab58:	4602      	mov	r2, r0
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	4629      	mov	r1, r5
 800ab60:	f7f5 fd4a 	bl	80005f8 <__aeabi_dmul>
 800ab64:	a341      	add	r3, pc, #260	; (adr r3, 800ac6c <__kernel_sin+0x154>)
 800ab66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab6a:	4680      	mov	r8, r0
 800ab6c:	4689      	mov	r9, r1
 800ab6e:	4650      	mov	r0, sl
 800ab70:	4659      	mov	r1, fp
 800ab72:	f7f5 fd41 	bl	80005f8 <__aeabi_dmul>
 800ab76:	a33f      	add	r3, pc, #252	; (adr r3, 800ac74 <__kernel_sin+0x15c>)
 800ab78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab7c:	f7f5 fb84 	bl	8000288 <__aeabi_dsub>
 800ab80:	4652      	mov	r2, sl
 800ab82:	465b      	mov	r3, fp
 800ab84:	f7f5 fd38 	bl	80005f8 <__aeabi_dmul>
 800ab88:	a33c      	add	r3, pc, #240	; (adr r3, 800ac7c <__kernel_sin+0x164>)
 800ab8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8e:	f7f5 fb7d 	bl	800028c <__adddf3>
 800ab92:	4652      	mov	r2, sl
 800ab94:	465b      	mov	r3, fp
 800ab96:	f7f5 fd2f 	bl	80005f8 <__aeabi_dmul>
 800ab9a:	a33a      	add	r3, pc, #232	; (adr r3, 800ac84 <__kernel_sin+0x16c>)
 800ab9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba0:	f7f5 fb72 	bl	8000288 <__aeabi_dsub>
 800aba4:	4652      	mov	r2, sl
 800aba6:	465b      	mov	r3, fp
 800aba8:	f7f5 fd26 	bl	80005f8 <__aeabi_dmul>
 800abac:	a337      	add	r3, pc, #220	; (adr r3, 800ac8c <__kernel_sin+0x174>)
 800abae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb2:	f7f5 fb6b 	bl	800028c <__adddf3>
 800abb6:	9b01      	ldr	r3, [sp, #4]
 800abb8:	4606      	mov	r6, r0
 800abba:	460f      	mov	r7, r1
 800abbc:	b9eb      	cbnz	r3, 800abfa <__kernel_sin+0xe2>
 800abbe:	4602      	mov	r2, r0
 800abc0:	460b      	mov	r3, r1
 800abc2:	4650      	mov	r0, sl
 800abc4:	4659      	mov	r1, fp
 800abc6:	f7f5 fd17 	bl	80005f8 <__aeabi_dmul>
 800abca:	a325      	add	r3, pc, #148	; (adr r3, 800ac60 <__kernel_sin+0x148>)
 800abcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd0:	f7f5 fb5a 	bl	8000288 <__aeabi_dsub>
 800abd4:	4642      	mov	r2, r8
 800abd6:	464b      	mov	r3, r9
 800abd8:	f7f5 fd0e 	bl	80005f8 <__aeabi_dmul>
 800abdc:	4602      	mov	r2, r0
 800abde:	460b      	mov	r3, r1
 800abe0:	4620      	mov	r0, r4
 800abe2:	4629      	mov	r1, r5
 800abe4:	f7f5 fb52 	bl	800028c <__adddf3>
 800abe8:	4604      	mov	r4, r0
 800abea:	460d      	mov	r5, r1
 800abec:	ec45 4b10 	vmov	d0, r4, r5
 800abf0:	b003      	add	sp, #12
 800abf2:	ecbd 8b04 	vpop	{d8-d9}
 800abf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abfa:	4b1b      	ldr	r3, [pc, #108]	; (800ac68 <__kernel_sin+0x150>)
 800abfc:	ec51 0b18 	vmov	r0, r1, d8
 800ac00:	2200      	movs	r2, #0
 800ac02:	f7f5 fcf9 	bl	80005f8 <__aeabi_dmul>
 800ac06:	4632      	mov	r2, r6
 800ac08:	ec41 0b19 	vmov	d9, r0, r1
 800ac0c:	463b      	mov	r3, r7
 800ac0e:	4640      	mov	r0, r8
 800ac10:	4649      	mov	r1, r9
 800ac12:	f7f5 fcf1 	bl	80005f8 <__aeabi_dmul>
 800ac16:	4602      	mov	r2, r0
 800ac18:	460b      	mov	r3, r1
 800ac1a:	ec51 0b19 	vmov	r0, r1, d9
 800ac1e:	f7f5 fb33 	bl	8000288 <__aeabi_dsub>
 800ac22:	4652      	mov	r2, sl
 800ac24:	465b      	mov	r3, fp
 800ac26:	f7f5 fce7 	bl	80005f8 <__aeabi_dmul>
 800ac2a:	ec53 2b18 	vmov	r2, r3, d8
 800ac2e:	f7f5 fb2b 	bl	8000288 <__aeabi_dsub>
 800ac32:	a30b      	add	r3, pc, #44	; (adr r3, 800ac60 <__kernel_sin+0x148>)
 800ac34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac38:	4606      	mov	r6, r0
 800ac3a:	460f      	mov	r7, r1
 800ac3c:	4640      	mov	r0, r8
 800ac3e:	4649      	mov	r1, r9
 800ac40:	f7f5 fcda 	bl	80005f8 <__aeabi_dmul>
 800ac44:	4602      	mov	r2, r0
 800ac46:	460b      	mov	r3, r1
 800ac48:	4630      	mov	r0, r6
 800ac4a:	4639      	mov	r1, r7
 800ac4c:	f7f5 fb1e 	bl	800028c <__adddf3>
 800ac50:	4602      	mov	r2, r0
 800ac52:	460b      	mov	r3, r1
 800ac54:	4620      	mov	r0, r4
 800ac56:	4629      	mov	r1, r5
 800ac58:	f7f5 fb16 	bl	8000288 <__aeabi_dsub>
 800ac5c:	e7c4      	b.n	800abe8 <__kernel_sin+0xd0>
 800ac5e:	bf00      	nop
 800ac60:	55555549 	.word	0x55555549
 800ac64:	3fc55555 	.word	0x3fc55555
 800ac68:	3fe00000 	.word	0x3fe00000
 800ac6c:	5acfd57c 	.word	0x5acfd57c
 800ac70:	3de5d93a 	.word	0x3de5d93a
 800ac74:	8a2b9ceb 	.word	0x8a2b9ceb
 800ac78:	3e5ae5e6 	.word	0x3e5ae5e6
 800ac7c:	57b1fe7d 	.word	0x57b1fe7d
 800ac80:	3ec71de3 	.word	0x3ec71de3
 800ac84:	19c161d5 	.word	0x19c161d5
 800ac88:	3f2a01a0 	.word	0x3f2a01a0
 800ac8c:	1110f8a6 	.word	0x1110f8a6
 800ac90:	3f811111 	.word	0x3f811111

0800ac94 <fabs>:
 800ac94:	ec51 0b10 	vmov	r0, r1, d0
 800ac98:	ee10 2a10 	vmov	r2, s0
 800ac9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aca0:	ec43 2b10 	vmov	d0, r2, r3
 800aca4:	4770      	bx	lr
	...

0800aca8 <floor>:
 800aca8:	ec51 0b10 	vmov	r0, r1, d0
 800acac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acb0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800acb4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800acb8:	2e13      	cmp	r6, #19
 800acba:	ee10 5a10 	vmov	r5, s0
 800acbe:	ee10 8a10 	vmov	r8, s0
 800acc2:	460c      	mov	r4, r1
 800acc4:	dc32      	bgt.n	800ad2c <floor+0x84>
 800acc6:	2e00      	cmp	r6, #0
 800acc8:	da14      	bge.n	800acf4 <floor+0x4c>
 800acca:	a333      	add	r3, pc, #204	; (adr r3, 800ad98 <floor+0xf0>)
 800accc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd0:	f7f5 fadc 	bl	800028c <__adddf3>
 800acd4:	2200      	movs	r2, #0
 800acd6:	2300      	movs	r3, #0
 800acd8:	f7f5 ff1e 	bl	8000b18 <__aeabi_dcmpgt>
 800acdc:	b138      	cbz	r0, 800acee <floor+0x46>
 800acde:	2c00      	cmp	r4, #0
 800ace0:	da57      	bge.n	800ad92 <floor+0xea>
 800ace2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ace6:	431d      	orrs	r5, r3
 800ace8:	d001      	beq.n	800acee <floor+0x46>
 800acea:	4c2d      	ldr	r4, [pc, #180]	; (800ada0 <floor+0xf8>)
 800acec:	2500      	movs	r5, #0
 800acee:	4621      	mov	r1, r4
 800acf0:	4628      	mov	r0, r5
 800acf2:	e025      	b.n	800ad40 <floor+0x98>
 800acf4:	4f2b      	ldr	r7, [pc, #172]	; (800ada4 <floor+0xfc>)
 800acf6:	4137      	asrs	r7, r6
 800acf8:	ea01 0307 	and.w	r3, r1, r7
 800acfc:	4303      	orrs	r3, r0
 800acfe:	d01f      	beq.n	800ad40 <floor+0x98>
 800ad00:	a325      	add	r3, pc, #148	; (adr r3, 800ad98 <floor+0xf0>)
 800ad02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad06:	f7f5 fac1 	bl	800028c <__adddf3>
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	f7f5 ff03 	bl	8000b18 <__aeabi_dcmpgt>
 800ad12:	2800      	cmp	r0, #0
 800ad14:	d0eb      	beq.n	800acee <floor+0x46>
 800ad16:	2c00      	cmp	r4, #0
 800ad18:	bfbe      	ittt	lt
 800ad1a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ad1e:	fa43 f606 	asrlt.w	r6, r3, r6
 800ad22:	19a4      	addlt	r4, r4, r6
 800ad24:	ea24 0407 	bic.w	r4, r4, r7
 800ad28:	2500      	movs	r5, #0
 800ad2a:	e7e0      	b.n	800acee <floor+0x46>
 800ad2c:	2e33      	cmp	r6, #51	; 0x33
 800ad2e:	dd0b      	ble.n	800ad48 <floor+0xa0>
 800ad30:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ad34:	d104      	bne.n	800ad40 <floor+0x98>
 800ad36:	ee10 2a10 	vmov	r2, s0
 800ad3a:	460b      	mov	r3, r1
 800ad3c:	f7f5 faa6 	bl	800028c <__adddf3>
 800ad40:	ec41 0b10 	vmov	d0, r0, r1
 800ad44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad48:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ad4c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad50:	fa23 f707 	lsr.w	r7, r3, r7
 800ad54:	4207      	tst	r7, r0
 800ad56:	d0f3      	beq.n	800ad40 <floor+0x98>
 800ad58:	a30f      	add	r3, pc, #60	; (adr r3, 800ad98 <floor+0xf0>)
 800ad5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad5e:	f7f5 fa95 	bl	800028c <__adddf3>
 800ad62:	2200      	movs	r2, #0
 800ad64:	2300      	movs	r3, #0
 800ad66:	f7f5 fed7 	bl	8000b18 <__aeabi_dcmpgt>
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	d0bf      	beq.n	800acee <floor+0x46>
 800ad6e:	2c00      	cmp	r4, #0
 800ad70:	da02      	bge.n	800ad78 <floor+0xd0>
 800ad72:	2e14      	cmp	r6, #20
 800ad74:	d103      	bne.n	800ad7e <floor+0xd6>
 800ad76:	3401      	adds	r4, #1
 800ad78:	ea25 0507 	bic.w	r5, r5, r7
 800ad7c:	e7b7      	b.n	800acee <floor+0x46>
 800ad7e:	2301      	movs	r3, #1
 800ad80:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ad84:	fa03 f606 	lsl.w	r6, r3, r6
 800ad88:	4435      	add	r5, r6
 800ad8a:	4545      	cmp	r5, r8
 800ad8c:	bf38      	it	cc
 800ad8e:	18e4      	addcc	r4, r4, r3
 800ad90:	e7f2      	b.n	800ad78 <floor+0xd0>
 800ad92:	2500      	movs	r5, #0
 800ad94:	462c      	mov	r4, r5
 800ad96:	e7aa      	b.n	800acee <floor+0x46>
 800ad98:	8800759c 	.word	0x8800759c
 800ad9c:	7e37e43c 	.word	0x7e37e43c
 800ada0:	bff00000 	.word	0xbff00000
 800ada4:	000fffff 	.word	0x000fffff

0800ada8 <scalbn>:
 800ada8:	b570      	push	{r4, r5, r6, lr}
 800adaa:	ec55 4b10 	vmov	r4, r5, d0
 800adae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800adb2:	4606      	mov	r6, r0
 800adb4:	462b      	mov	r3, r5
 800adb6:	b99a      	cbnz	r2, 800ade0 <scalbn+0x38>
 800adb8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800adbc:	4323      	orrs	r3, r4
 800adbe:	d036      	beq.n	800ae2e <scalbn+0x86>
 800adc0:	4b39      	ldr	r3, [pc, #228]	; (800aea8 <scalbn+0x100>)
 800adc2:	4629      	mov	r1, r5
 800adc4:	ee10 0a10 	vmov	r0, s0
 800adc8:	2200      	movs	r2, #0
 800adca:	f7f5 fc15 	bl	80005f8 <__aeabi_dmul>
 800adce:	4b37      	ldr	r3, [pc, #220]	; (800aeac <scalbn+0x104>)
 800add0:	429e      	cmp	r6, r3
 800add2:	4604      	mov	r4, r0
 800add4:	460d      	mov	r5, r1
 800add6:	da10      	bge.n	800adfa <scalbn+0x52>
 800add8:	a32b      	add	r3, pc, #172	; (adr r3, 800ae88 <scalbn+0xe0>)
 800adda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adde:	e03a      	b.n	800ae56 <scalbn+0xae>
 800ade0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ade4:	428a      	cmp	r2, r1
 800ade6:	d10c      	bne.n	800ae02 <scalbn+0x5a>
 800ade8:	ee10 2a10 	vmov	r2, s0
 800adec:	4620      	mov	r0, r4
 800adee:	4629      	mov	r1, r5
 800adf0:	f7f5 fa4c 	bl	800028c <__adddf3>
 800adf4:	4604      	mov	r4, r0
 800adf6:	460d      	mov	r5, r1
 800adf8:	e019      	b.n	800ae2e <scalbn+0x86>
 800adfa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800adfe:	460b      	mov	r3, r1
 800ae00:	3a36      	subs	r2, #54	; 0x36
 800ae02:	4432      	add	r2, r6
 800ae04:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ae08:	428a      	cmp	r2, r1
 800ae0a:	dd08      	ble.n	800ae1e <scalbn+0x76>
 800ae0c:	2d00      	cmp	r5, #0
 800ae0e:	a120      	add	r1, pc, #128	; (adr r1, 800ae90 <scalbn+0xe8>)
 800ae10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae14:	da1c      	bge.n	800ae50 <scalbn+0xa8>
 800ae16:	a120      	add	r1, pc, #128	; (adr r1, 800ae98 <scalbn+0xf0>)
 800ae18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae1c:	e018      	b.n	800ae50 <scalbn+0xa8>
 800ae1e:	2a00      	cmp	r2, #0
 800ae20:	dd08      	ble.n	800ae34 <scalbn+0x8c>
 800ae22:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ae26:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ae2a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ae2e:	ec45 4b10 	vmov	d0, r4, r5
 800ae32:	bd70      	pop	{r4, r5, r6, pc}
 800ae34:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ae38:	da19      	bge.n	800ae6e <scalbn+0xc6>
 800ae3a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ae3e:	429e      	cmp	r6, r3
 800ae40:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ae44:	dd0a      	ble.n	800ae5c <scalbn+0xb4>
 800ae46:	a112      	add	r1, pc, #72	; (adr r1, 800ae90 <scalbn+0xe8>)
 800ae48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d1e2      	bne.n	800ae16 <scalbn+0x6e>
 800ae50:	a30f      	add	r3, pc, #60	; (adr r3, 800ae90 <scalbn+0xe8>)
 800ae52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae56:	f7f5 fbcf 	bl	80005f8 <__aeabi_dmul>
 800ae5a:	e7cb      	b.n	800adf4 <scalbn+0x4c>
 800ae5c:	a10a      	add	r1, pc, #40	; (adr r1, 800ae88 <scalbn+0xe0>)
 800ae5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d0b8      	beq.n	800add8 <scalbn+0x30>
 800ae66:	a10e      	add	r1, pc, #56	; (adr r1, 800aea0 <scalbn+0xf8>)
 800ae68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae6c:	e7b4      	b.n	800add8 <scalbn+0x30>
 800ae6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ae72:	3236      	adds	r2, #54	; 0x36
 800ae74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ae78:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	4b0c      	ldr	r3, [pc, #48]	; (800aeb0 <scalbn+0x108>)
 800ae80:	2200      	movs	r2, #0
 800ae82:	e7e8      	b.n	800ae56 <scalbn+0xae>
 800ae84:	f3af 8000 	nop.w
 800ae88:	c2f8f359 	.word	0xc2f8f359
 800ae8c:	01a56e1f 	.word	0x01a56e1f
 800ae90:	8800759c 	.word	0x8800759c
 800ae94:	7e37e43c 	.word	0x7e37e43c
 800ae98:	8800759c 	.word	0x8800759c
 800ae9c:	fe37e43c 	.word	0xfe37e43c
 800aea0:	c2f8f359 	.word	0xc2f8f359
 800aea4:	81a56e1f 	.word	0x81a56e1f
 800aea8:	43500000 	.word	0x43500000
 800aeac:	ffff3cb0 	.word	0xffff3cb0
 800aeb0:	3c900000 	.word	0x3c900000

0800aeb4 <_init>:
 800aeb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeb6:	bf00      	nop
 800aeb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeba:	bc08      	pop	{r3}
 800aebc:	469e      	mov	lr, r3
 800aebe:	4770      	bx	lr

0800aec0 <_fini>:
 800aec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aec2:	bf00      	nop
 800aec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aec6:	bc08      	pop	{r3}
 800aec8:	469e      	mov	lr, r3
 800aeca:	4770      	bx	lr
